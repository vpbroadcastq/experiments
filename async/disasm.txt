
./a.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <_init>:
    3000:	48 83 ec 08          	sub    rsp,0x8
    3004:	48 8b 05 cd 8f 01 00 	mov    rax,QWORD PTR [rip+0x18fcd]        # 1bfd8 <__gmon_start__@Base>
    300b:	48 85 c0             	test   rax,rax
    300e:	74 02                	je     3012 <_init+0x12>
    3010:	ff d0                	call   rax
    3012:	48 83 c4 08          	add    rsp,0x8
    3016:	c3                   	ret

Disassembly of section .plt:

0000000000003020 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt-0x10>:
    3020:	ff 35 ca 8f 01 00    	push   QWORD PTR [rip+0x18fca]        # 1bff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    3026:	ff 25 cc 8f 01 00    	jmp    QWORD PTR [rip+0x18fcc]        # 1bff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    302c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000003030 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt>:
    3030:	ff 25 ca 8f 01 00    	jmp    QWORD PTR [rip+0x18fca]        # 1c000 <std::basic_ostream<char, std::char_traits<char> >::put(char)@GLIBCXX_3.4>
    3036:	68 00 00 00 00       	push   0x0
    303b:	e9 e0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003040 <std::to_chars(char*, char*, float)@plt>:
    3040:	ff 25 c2 8f 01 00    	jmp    QWORD PTR [rip+0x18fc2]        # 1c008 <std::to_chars(char*, char*, float)@GLIBCXX_3.4.29>
    3046:	68 01 00 00 00       	push   0x1
    304b:	e9 d0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003050 <frexpf@plt>:
    3050:	ff 25 ba 8f 01 00    	jmp    QWORD PTR [rip+0x18fba]        # 1c010 <frexpf@GLIBC_2.2.5>
    3056:	68 02 00 00 00       	push   0x2
    305b:	e9 c0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003060 <std::to_chars(char*, char*, long double, std::chars_format)@plt>:
    3060:	ff 25 b2 8f 01 00    	jmp    QWORD PTR [rip+0x18fb2]        # 1c018 <std::to_chars(char*, char*, long double, std::chars_format)@GLIBCXX_3.4.29>
    3066:	68 03 00 00 00       	push   0x3
    306b:	e9 b0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003070 <std::locale::operator==(std::locale const&) const@plt>:
    3070:	ff 25 aa 8f 01 00    	jmp    QWORD PTR [rip+0x18faa]        # 1c020 <std::locale::operator==(std::locale const&) const@GLIBCXX_3.4>
    3076:	68 04 00 00 00       	push   0x4
    307b:	e9 a0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003080 <std::to_chars(char*, char*, double)@plt>:
    3080:	ff 25 a2 8f 01 00    	jmp    QWORD PTR [rip+0x18fa2]        # 1c028 <std::to_chars(char*, char*, double)@GLIBCXX_3.4.29>
    3086:	68 05 00 00 00       	push   0x5
    308b:	e9 90 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003090 <std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@plt>:
    3090:	ff 25 9a 8f 01 00    	jmp    QWORD PTR [rip+0x18f9a]        # 1c030 <std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@GLIBCXX_3.4>
    3096:	68 06 00 00 00       	push   0x6
    309b:	e9 80 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030a0 <std::terminate()@plt>:
    30a0:	ff 25 92 8f 01 00    	jmp    QWORD PTR [rip+0x18f92]        # 1c038 <std::terminate()@GLIBCXX_3.4>
    30a6:	68 07 00 00 00       	push   0x7
    30ab:	e9 70 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030b0 <std::ios_base::ios_base()@plt>:
    30b0:	ff 25 8a 8f 01 00    	jmp    QWORD PTR [rip+0x18f8a]        # 1c040 <std::ios_base::ios_base()@GLIBCXX_3.4>
    30b6:	68 08 00 00 00       	push   0x8
    30bb:	e9 60 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030c0 <__udivti3@plt>:
    30c0:	ff 25 82 8f 01 00    	jmp    QWORD PTR [rip+0x18f82]        # 1c048 <__udivti3@GCC_3.0>
    30c6:	68 09 00 00 00       	push   0x9
    30cb:	e9 50 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030d0 <std::ios_base::~ios_base()@plt>:
    30d0:	ff 25 7a 8f 01 00    	jmp    QWORD PTR [rip+0x18f7a]        # 1c050 <std::ios_base::~ios_base()@GLIBCXX_3.4>
    30d6:	68 0a 00 00 00       	push   0xa
    30db:	e9 40 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030e0 <std::__throw_bad_alloc()@plt>:
    30e0:	ff 25 72 8f 01 00    	jmp    QWORD PTR [rip+0x18f72]        # 1c058 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    30e6:	68 0b 00 00 00       	push   0xb
    30eb:	e9 30 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030f0 <strlen@plt>:
    30f0:	ff 25 6a 8f 01 00    	jmp    QWORD PTR [rip+0x18f6a]        # 1c060 <strlen@GLIBC_2.2.5>
    30f6:	68 0c 00 00 00       	push   0xc
    30fb:	e9 20 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003100 <std::thread::_State::~_State()@plt>:
    3100:	ff 25 62 8f 01 00    	jmp    QWORD PTR [rip+0x18f62]        # 1c068 <std::thread::_State::~_State()@GLIBCXX_3.4.22>
    3106:	68 0d 00 00 00       	push   0xd
    310b:	e9 10 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003110 <__gttf2@plt>:
    3110:	ff 25 5a 8f 01 00    	jmp    QWORD PTR [rip+0x18f5a]        # 1c070 <__gttf2@GCC_4.3.0>
    3116:	68 0e 00 00 00       	push   0xe
    311b:	e9 00 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003120 <std::locale::id::_M_id() const@plt>:
    3120:	ff 25 52 8f 01 00    	jmp    QWORD PTR [rip+0x18f52]        # 1c078 <std::locale::id::_M_id() const@GLIBCXX_3.4>
    3126:	68 0f 00 00 00       	push   0xf
    312b:	e9 f0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003130 <std::__throw_length_error(char const*)@plt>:
    3130:	ff 25 4a 8f 01 00    	jmp    QWORD PTR [rip+0x18f4a]        # 1c080 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    3136:	68 10 00 00 00       	push   0x10
    313b:	e9 e0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003140 <memset@plt>:
    3140:	ff 25 42 8f 01 00    	jmp    QWORD PTR [rip+0x18f42]        # 1c088 <memset@GLIBC_2.2.5>
    3146:	68 11 00 00 00       	push   0x11
    314b:	e9 d0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003150 <abort@plt>:
    3150:	ff 25 3a 8f 01 00    	jmp    QWORD PTR [rip+0x18f3a]        # 1c090 <abort@GLIBC_2.2.5>
    3156:	68 12 00 00 00       	push   0x12
    315b:	e9 c0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003160 <std::to_chars(char*, char*, long double)@plt>:
    3160:	ff 25 32 8f 01 00    	jmp    QWORD PTR [rip+0x18f32]        # 1c098 <std::to_chars(char*, char*, long double)@GLIBCXX_3.4.29>
    3166:	68 13 00 00 00       	push   0x13
    316b:	e9 b0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003170 <std::to_chars(char*, char*, double, std::chars_format)@plt>:
    3170:	ff 25 2a 8f 01 00    	jmp    QWORD PTR [rip+0x18f2a]        # 1c0a0 <std::to_chars(char*, char*, double, std::chars_format)@GLIBCXX_3.4.29>
    3176:	68 14 00 00 00       	push   0x14
    317b:	e9 a0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003180 <std::to_chars(char*, char*, double, std::chars_format, int)@plt>:
    3180:	ff 25 22 8f 01 00    	jmp    QWORD PTR [rip+0x18f22]        # 1c0a8 <std::to_chars(char*, char*, double, std::chars_format, int)@GLIBCXX_3.4.29>
    3186:	68 15 00 00 00       	push   0x15
    318b:	e9 90 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003190 <std::locale::locale(std::locale const&)@plt>:
    3190:	ff 25 1a 8f 01 00    	jmp    QWORD PTR [rip+0x18f1a]        # 1c0b0 <std::locale::locale(std::locale const&)@GLIBCXX_3.4>
    3196:	68 16 00 00 00       	push   0x16
    319b:	e9 80 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031a0 <std::to_chars(char*, char*, _Float128, std::chars_format)@plt>:
    31a0:	ff 25 12 8f 01 00    	jmp    QWORD PTR [rip+0x18f12]        # 1c0b8 <std::to_chars(char*, char*, _Float128, std::chars_format)@GLIBCXX_3.4.31>
    31a6:	68 17 00 00 00       	push   0x17
    31ab:	e9 70 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031b0 <memcpy@plt>:
    31b0:	ff 25 0a 8f 01 00    	jmp    QWORD PTR [rip+0x18f0a]        # 1c0c0 <memcpy@GLIBC_2.14>
    31b6:	68 18 00 00 00       	push   0x18
    31bb:	e9 60 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031c0 <std::to_chars(char*, char*, _Float128, std::chars_format, int)@plt>:
    31c0:	ff 25 02 8f 01 00    	jmp    QWORD PTR [rip+0x18f02]        # 1c0c8 <std::to_chars(char*, char*, _Float128, std::chars_format, int)@GLIBCXX_3.4.31>
    31c6:	68 19 00 00 00       	push   0x19
    31cb:	e9 50 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>:
    31d0:	ff 25 fa 8e 01 00    	jmp    QWORD PTR [rip+0x18efa]        # 1c0d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@GLIBCXX_3.4.22>
    31d6:	68 1a 00 00 00       	push   0x1a
    31db:	e9 40 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031e0 <operator new(unsigned long)@plt>:
    31e0:	ff 25 f2 8e 01 00    	jmp    QWORD PTR [rip+0x18ef2]        # 1c0d8 <operator new(unsigned long)@GLIBCXX_3.4>
    31e6:	68 1b 00 00 00       	push   0x1b
    31eb:	e9 30 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031f0 <std::to_chars(char*, char*, float, std::chars_format)@plt>:
    31f0:	ff 25 ea 8e 01 00    	jmp    QWORD PTR [rip+0x18eea]        # 1c0e0 <std::to_chars(char*, char*, float, std::chars_format)@GLIBCXX_3.4.29>
    31f6:	68 1c 00 00 00       	push   0x1c
    31fb:	e9 20 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003200 <operator delete(void*, unsigned long)@plt>:
    3200:	ff 25 e2 8e 01 00    	jmp    QWORD PTR [rip+0x18ee2]        # 1c0e8 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    3206:	68 1d 00 00 00       	push   0x1d
    320b:	e9 10 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003210 <std::to_chars(char*, char*, long double, std::chars_format, int)@plt>:
    3210:	ff 25 da 8e 01 00    	jmp    QWORD PTR [rip+0x18eda]        # 1c0f0 <std::to_chars(char*, char*, long double, std::chars_format, int)@GLIBCXX_3.4.29>
    3216:	68 1e 00 00 00       	push   0x1e
    321b:	e9 00 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003220 <memchr@plt>:
    3220:	ff 25 d2 8e 01 00    	jmp    QWORD PTR [rip+0x18ed2]        # 1c0f8 <memchr@GLIBC_2.2.5>
    3226:	68 1f 00 00 00       	push   0x1f
    322b:	e9 f0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003230 <__dynamic_cast@plt>:
    3230:	ff 25 ca 8e 01 00    	jmp    QWORD PTR [rip+0x18eca]        # 1c100 <__dynamic_cast@CXXABI_1.3>
    3236:	68 20 00 00 00       	push   0x20
    323b:	e9 e0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    3240:	ff 25 c2 8e 01 00    	jmp    QWORD PTR [rip+0x18ec2]        # 1c108 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    3246:	68 21 00 00 00       	push   0x21
    324b:	e9 d0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003250 <std::to_chars(char*, char*, float, std::chars_format, int)@plt>:
    3250:	ff 25 ba 8e 01 00    	jmp    QWORD PTR [rip+0x18eba]        # 1c110 <std::to_chars(char*, char*, float, std::chars_format, int)@GLIBCXX_3.4.29>
    3256:	68 22 00 00 00       	push   0x22
    325b:	e9 c0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003260 <std::__throw_bad_cast()@plt>:
    3260:	ff 25 b2 8e 01 00    	jmp    QWORD PTR [rip+0x18eb2]        # 1c118 <std::__throw_bad_cast()@GLIBCXX_3.4>
    3266:	68 23 00 00 00       	push   0x23
    326b:	e9 b0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003270 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>:
    3270:	ff 25 aa 8e 01 00    	jmp    QWORD PTR [rip+0x18eaa]        # 1c120 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@GLIBCXX_3.4.21>
    3276:	68 24 00 00 00       	push   0x24
    327b:	e9 a0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003280 <std::chrono::_V2::steady_clock::now()@plt>:
    3280:	ff 25 a2 8e 01 00    	jmp    QWORD PTR [rip+0x18ea2]        # 1c128 <std::chrono::_V2::steady_clock::now()@GLIBCXX_3.4.19>
    3286:	68 25 00 00 00       	push   0x25
    328b:	e9 90 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>:
    3290:	ff 25 9a 8e 01 00    	jmp    QWORD PTR [rip+0x18e9a]        # 1c130 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@GLIBCXX_3.4>
    3296:	68 26 00 00 00       	push   0x26
    329b:	e9 80 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032a0 <std::locale::classic()@plt>:
    32a0:	ff 25 92 8e 01 00    	jmp    QWORD PTR [rip+0x18e92]        # 1c138 <std::locale::classic()@GLIBCXX_3.4>
    32a6:	68 27 00 00 00       	push   0x27
    32ab:	e9 70 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>:
    32b0:	ff 25 8a 8e 01 00    	jmp    QWORD PTR [rip+0x18e8a]        # 1c140 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@GLIBCXX_3.4.31>
    32b6:	68 28 00 00 00       	push   0x28
    32bb:	e9 60 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032c0 <std::locale::~locale()@plt>:
    32c0:	ff 25 82 8e 01 00    	jmp    QWORD PTR [rip+0x18e82]        # 1c148 <std::locale::~locale()@GLIBCXX_3.4>
    32c6:	68 29 00 00 00       	push   0x29
    32cb:	e9 50 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032d0 <__unordtf2@plt>:
    32d0:	ff 25 7a 8e 01 00    	jmp    QWORD PTR [rip+0x18e7a]        # 1c150 <__unordtf2@GCC_4.3.0>
    32d6:	68 2a 00 00 00       	push   0x2a
    32db:	e9 40 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
    32e0:	ff 25 72 8e 01 00    	jmp    QWORD PTR [rip+0x18e72]        # 1c158 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
    32e6:	68 2b 00 00 00       	push   0x2b
    32eb:	e9 30 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032f0 <frexpl@plt>:
    32f0:	ff 25 6a 8e 01 00    	jmp    QWORD PTR [rip+0x18e6a]        # 1c160 <frexpl@GLIBC_2.2.5>
    32f6:	68 2c 00 00 00       	push   0x2c
    32fb:	e9 20 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003300 <std::locale::name[abi:cxx11]() const@plt>:
    3300:	ff 25 62 8e 01 00    	jmp    QWORD PTR [rip+0x18e62]        # 1c168 <std::locale::name[abi:cxx11]() const@GLIBCXX_3.4.21>
    3306:	68 2d 00 00 00       	push   0x2d
    330b:	e9 10 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003310 <std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)@plt>:
    3310:	ff 25 5a 8e 01 00    	jmp    QWORD PTR [rip+0x18e5a]        # 1c170 <std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)@GLIBCXX_3.4.9>
    3316:	68 2e 00 00 00       	push   0x2e
    331b:	e9 00 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003320 <memmove@plt>:
    3320:	ff 25 52 8e 01 00    	jmp    QWORD PTR [rip+0x18e52]        # 1c178 <memmove@GLIBC_2.2.5>
    3326:	68 2f 00 00 00       	push   0x2f
    332b:	e9 f0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003330 <std::to_chars(char*, char*, _Float128)@plt>:
    3330:	ff 25 4a 8e 01 00    	jmp    QWORD PTR [rip+0x18e4a]        # 1c180 <std::to_chars(char*, char*, _Float128)@GLIBCXX_3.4.31>
    3336:	68 30 00 00 00       	push   0x30
    333b:	e9 e0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003340 <std::thread::join()@plt>:
    3340:	ff 25 42 8e 01 00    	jmp    QWORD PTR [rip+0x18e42]        # 1c188 <std::thread::join()@GLIBCXX_3.4.11>
    3346:	68 31 00 00 00       	push   0x31
    334b:	e9 d0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003350 <toupper@plt>:
    3350:	ff 25 3a 8e 01 00    	jmp    QWORD PTR [rip+0x18e3a]        # 1c190 <toupper@GLIBC_2.2.5>
    3356:	68 32 00 00 00       	push   0x32
    335b:	e9 c0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003360 <frexp@plt>:
    3360:	ff 25 32 8e 01 00    	jmp    QWORD PTR [rip+0x18e32]        # 1c198 <frexp@GLIBC_2.2.5>
    3366:	68 33 00 00 00       	push   0x33
    336b:	e9 b0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003370 <std::locale::locale()@plt>:
    3370:	ff 25 2a 8e 01 00    	jmp    QWORD PTR [rip+0x18e2a]        # 1c1a0 <std::locale::locale()@GLIBCXX_3.4>
    3376:	68 34 00 00 00       	push   0x34
    337b:	e9 a0 fc ff ff       	jmp    3020 <_init+0x20>

Disassembly of section .plt.got:

0000000000003380 <__cxa_finalize@plt>:
    3380:	ff 25 3a 8c 01 00    	jmp    QWORD PTR [rip+0x18c3a]        # 1bfc0 <__cxa_finalize@GLIBC_2.2.5>
    3386:	66 90                	xchg   ax,ax

Disassembly of section .text:

00000000000033c0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>:

  /// @cond undocumented
  [[noreturn]]
  inline void
  __throw_format_error(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    33c0:	e8 8b fd ff ff       	call   3150 <abort@plt>
    33c5:	e8 86 fd ff ff       	call   3150 <abort@plt>

00000000000033ca <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>:
    33ca:	e8 81 fd ff ff       	call   3150 <abort@plt>
    33cf:	e8 7c fd ff ff       	call   3150 <abort@plt>

00000000000033d4 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0] [clone .cold]>:
#else
      (void) static_cast<const _Facet*>(static_cast<const locale::facet*>(0));
#endif
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
	return *__f;
      __throw_bad_cast();
    33d4:	e8 87 fe ff ff       	call   3260 <std::__throw_bad_cast()@plt>

00000000000033d9 <main.cold>:
  // and without making the declaration of std::terminate visible to users.
  extern "C++" __attribute__ ((__noreturn__, __always_inline__))
  inline void __terminate() _GLIBCXX_USE_NOEXCEPT
  {
    void terminate() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__noreturn__,__cold__));
    terminate();
    33d9:	e8 c2 fc ff ff       	call   30a0 <std::terminate()@plt>

00000000000033de <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]>:
      _GLIBCXX20_CONSTEXPR
      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
	if (this->max_size() - (this->size() - __n1) < __n2)
	  __throw_length_error(__N(__s));
    33de:	48 8d 3d 73 1d 01 00 	lea    rdi,[rip+0x11d73]        # 15158 <CSWTCH.1104+0x78>
    33e5:	e8 46 fd ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>

00000000000033ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0] [clone .cold]>:
		this->_S_move(__p + __len2, __p + __len1, __how_much);
	      if (__len2)
		this->_S_copy(__p, __s, __len2);
	    }
	  else
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
    33ea:	4c 89 e1             	mov    rcx,r12
    33ed:	4c 89 ee             	mov    rsi,r13
    33f0:	48 89 df             	mov    rdi,rbx
    33f3:	e8 b8 fe ff ff       	call   32b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>
    33f8:	e9 fd 10 00 00       	jmp    44fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
    33fd:	48 8d 3d 71 1d 01 00 	lea    rdi,[rip+0x11d71]        # 15175 <CSWTCH.1104+0x95>
    3404:	e8 27 fd ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    3409:	90                   	nop

000000000000340a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]>:
    340a:	48 8d 3d 47 1d 01 00 	lea    rdi,[rip+0x11d47]        # 15158 <CSWTCH.1104+0x78>
    3411:	e8 1a fd ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    3416:	48 89 d1             	mov    rcx,rdx
    3419:	48 8d 3d a8 1f 01 00 	lea    rdi,[rip+0x11fa8]        # 153c8 <CSWTCH.1104+0x2e8>
    3420:	48 89 f2             	mov    rdx,rsi
    3423:	31 c0                	xor    eax,eax
    3425:	48 8d 35 62 1d 01 00 	lea    rsi,[rip+0x11d62]        # 1518e <CSWTCH.1104+0xae>
    342c:	e8 af fe ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    3431:	90                   	nop

0000000000003432 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0] [clone .cold]>:
    3432:	e8 29 fe ff ff       	call   3260 <std::__throw_bad_cast()@plt>
  // Helper for basic_string and basic_string_view members.
  constexpr size_t
  __sv_check(size_t __size, size_t __pos, const char* __s)
  {
    if (__pos > __size)
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
    3437:	48 89 e9             	mov    rcx,rbp
    343a:	4c 89 e2             	mov    rdx,r12
    343d:	48 8d 35 5f 1d 01 00 	lea    rsi,[rip+0x11d5f]        # 151a3 <CSWTCH.1104+0xc3>
    3444:	31 c0                	xor    eax,eax
    3446:	48 8d 3d b3 1f 01 00 	lea    rdi,[rip+0x11fb3]        # 15400 <CSWTCH.1104+0x320>
    344d:	e8 8e fe ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    3452:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    3459:	00 00 00 
    345c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000003460 <main>:
};




int main(int argc, char* argv[]) {
    3460:	41 57                	push   r15
    3462:	41 56                	push   r14
    3464:	41 55                	push   r13
    3466:	41 54                	push   r12
	  );

	using _Wrapper = _Call_wrapper<_Callable, _Args...>;
	// Create a call wrapper with DECAY_COPY(__f) as its target object
	// and DECAY_COPY(__args)... as its bound argument entities.
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3468:	4c 8d 25 71 14 00 00 	lea    r12,[rip+0x1471]        # 48e0 <std::thread::_M_thread_deps_never_run()>
    346f:	55                   	push   rbp
    3470:	53                   	push   rbx
    3471:	48 81 ec 68 01 00 00 	sub    rsp,0x168
    3478:	48 8d 54 24 50       	lea    rdx,[rsp+0x50]
    347d:	48 8d 44 24 54       	lea    rax,[rsp+0x54]
	{	
		// Not using atomics at all
		// x and y start out ==.  t1 sets x before y, therefore expect x >= y always
		constexpr std::uint32_t niter {std::numeric_limits<std::uint32_t>::max()};
    3482:	c7 44 24 34 ff ff ff 	mov    DWORD PTR [rsp+0x34],0xffffffff
    3489:	ff 
		std::uint32_t x {0};
    348a:	66 48 0f 6e d8       	movq   xmm3,rax
    348f:	66 48 0f 6e d2       	movq   xmm2,rdx
    3494:	48 8d 44 24 48       	lea    rax,[rsp+0x48]
    3499:	c7 44 24 38 00 00 00 	mov    DWORD PTR [rsp+0x38],0x0
    34a0:	00 
		std::uint32_t y {0};
    34a1:	48 8d 54 24 44       	lea    rdx,[rsp+0x44]
    34a6:	66 0f 6c d3          	punpcklqdq xmm2,xmm3
    34aa:	66 48 0f 6e e0       	movq   xmm4,rax
    34af:	c7 44 24 3c 00 00 00 	mov    DWORD PTR [rsp+0x3c],0x0
    34b6:	00 
		non_atomic_write naw {x, y, niter};
		non_atomic_read nar {x, y, niter, 0};
    34b7:	66 48 0f 6e da       	movq   xmm3,rdx
    34bc:	48 8d 44 24 3c       	lea    rax,[rsp+0x3c]
    34c1:	48 8d 54 24 38       	lea    rdx,[rsp+0x38]
    34c6:	0f 29 54 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm2
    34cb:	66 48 0f 6e ca       	movq   xmm1,rdx
    34d0:	66 48 0f 6e e8       	movq   xmm5,rax
    34d5:	66 0f 6c dc          	punpcklqdq xmm3,xmm4
    34d9:	c7 84 24 d4 00 00 00 	mov    DWORD PTR [rsp+0xd4],0x0
    34e0:	00 00 00 00 
		
		std::chrono::time_point<std::chrono::steady_clock> start {std::chrono::steady_clock::now()};
    34e4:	66 0f 6c cd          	punpcklqdq xmm1,xmm5
    34e8:	0f 29 5c 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm3
    34ed:	4c 8d 6c 24 58       	lea    r13,[rsp+0x58]
    34f2:	48 8d 9c 24 40 01 00 	lea    rbx,[rsp+0x140]
    34f9:	00 
    34fa:	0f 29 0c 24          	movaps XMMWORD PTR [rsp],xmm1
    34fe:	e8 7d fd ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
    3503:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    3508:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
    350f:	00 00 
    3511:	48 89 c5             	mov    rbp,rax
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3514:	e8 c7 fc ff ff       	call   31e0 <operator new(unsigned long)@plt>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    3519:	66 0f 6f 0c 24       	movdqa xmm1,XMMWORD PTR [rsp]
    351e:	4c 89 ef             	mov    rdi,r13
    3521:	4c 89 e2             	mov    rdx,r12
      {
	_Callable		_M_func;

	template<typename... _Args>
	  _State_impl(_Args&&... __args)
	  : _M_func(std::forward<_Args>(__args)...)
    3524:	48 8d 0d 3d 84 01 00 	lea    rcx,[rip+0x1843d]        # 1b968 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >+0x10>
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    352b:	48 89 de             	mov    rsi,rbx
		     "unique_ptr's deleter type must be a function object type"
		     " or an lvalue reference type" );

      __uniq_ptr_impl() = default;
      _GLIBCXX23_CONSTEXPR
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    352e:	48 89 84 24 40 01 00 	mov    QWORD PTR [rsp+0x140],rax
    3535:	00 
	  : _M_func(std::forward<_Args>(__args)...)
    3536:	48 89 08             	mov    QWORD PTR [rax],rcx
    3539:	b9 ff ff ff ff       	mov    ecx,0xffffffff
    353e:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
    3542:	0f 11 48 08          	movups XMMWORD PTR [rax+0x8],xmm1
    3546:	48 89 8c 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rcx
    354d:	00 
    354e:	0f 29 8c 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm1
    3555:	00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3556:	e8 75 fc ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
    355b:	48 8b bc 24 40 01 00 	mov    rdi,QWORD PTR [rsp+0x140]
    3562:	00 
    3563:	48 85 ff             	test   rdi,rdi
    3566:	74 06                	je     356e <main+0x10e>
	delete __ptr;
    3568:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    356b:	ff 50 08             	call   QWORD PTR [rax+0x8]
    356e:	bf 20 00 00 00       	mov    edi,0x20
    3573:	4c 8d 74 24 60       	lea    r14,[rsp+0x60]
      id() noexcept : _M_thread() { }
    3578:	48 c7 44 24 60 00 00 	mov    QWORD PTR [rsp+0x60],0x0
    357f:	00 00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3581:	e8 5a fc ff ff       	call   31e0 <operator new(unsigned long)@plt>
	  : _M_func(std::forward<_Args>(__args)...)
    3586:	48 8d 35 03 84 01 00 	lea    rsi,[rip+0x18403]        # 1b990 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >+0x10>
    358d:	66 0f 6f 24 24       	movdqa xmm4,XMMWORD PTR [rsp]
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3592:	4c 89 f7             	mov    rdi,r14
    3595:	c7 84 24 d0 00 00 00 	mov    DWORD PTR [rsp+0xd0],0xffffffff
    359c:	ff ff ff ff 
    35a0:	48 8b 94 24 d0 00 00 	mov    rdx,QWORD PTR [rsp+0xd0]
    35a7:	00 
	  : _M_func(std::forward<_Args>(__args)...)
    35a8:	48 89 30             	mov    QWORD PTR [rax],rsi
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    35ab:	48 89 de             	mov    rsi,rbx
    35ae:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    35b2:	4c 89 e2             	mov    rdx,r12
    35b5:	0f 11 60 08          	movups XMMWORD PTR [rax+0x8],xmm4
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    35b9:	48 89 84 24 40 01 00 	mov    QWORD PTR [rsp+0x140],rax
    35c0:	00 
    35c1:	0f 29 a4 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm4
    35c8:	00 
    35c9:	e8 02 fc ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    35ce:	48 8b bc 24 40 01 00 	mov    rdi,QWORD PTR [rsp+0x140]
    35d5:	00 
    35d6:	48 85 ff             	test   rdi,rdi
    35d9:	74 06                	je     35e1 <main+0x181>
	delete __ptr;
    35db:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    35de:	ff 50 08             	call   QWORD PTR [rax+0x8]
		std::thread t1(naw);
		std::thread t2(nar);
		t1.join();
    35e1:	4c 89 ef             	mov    rdi,r13
		t2.join();
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
		
		std::chrono::duration<double> time_seconds {end-start};
		std::format_to(std::ostream_iterator<char>(std::cout),"No atomics:  After {} iterations, count_mismatches == {}\n", niter, nar.count_mismatch);
    35e4:	4c 8d ac 24 20 01 00 	lea    r13,[rsp+0x120]
    35eb:	00 
		t1.join();
    35ec:	e8 4f fd ff ff       	call   3340 <std::thread::join()@plt>
		t2.join();
    35f1:	4c 89 f7             	mov    rdi,r14
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    35f4:	4c 8d 35 40 1b 01 00 	lea    r14,[rip+0x11b40]        # 1513b <CSWTCH.1104+0x5b>
		t2.join();
    35fb:	e8 40 fd ff ff       	call   3340 <std::thread::join()@plt>
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
    3600:	e8 7b fc ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
		std::format_to(std::ostream_iterator<char>(std::cout),"No atomics:  After {} iterations, count_mismatches == {}\n", niter, nar.count_mismatch);
    3605:	4c 8d 44 24 34       	lea    r8,[rsp+0x34]
    360a:	4c 89 ee             	mov    rsi,r13
    360d:	48 89 df             	mov    rdi,rbx
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    3610:	48 29 e8             	sub    rax,rbp
    3613:	ba 39 00 00 00       	mov    edx,0x39
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3618:	66 0f ef c0          	pxor   xmm0,xmm0
      const _CharT*	_M_string;

    public:
      /// Construct from an ostream.
      ostream_iterator(ostream_type& __s) _GLIBCXX_NOEXCEPT
      : _M_stream(std::__addressof(__s)), _M_string(0) {}
    361c:	48 c7 84 24 28 01 00 	mov    QWORD PTR [rsp+0x128],0x0
    3623:	00 00 00 00 00 
    3628:	48 8d 2d 11 8c 01 00 	lea    rbp,[rip+0x18c11]        # 1c240 <std::cout@GLIBCXX_3.4>
    362f:	4c 8d 8c 24 d4 00 00 	lea    r9,[rsp+0xd4]
    3636:	00 
    3637:	48 8d 0d b2 1c 01 00 	lea    rcx,[rip+0x11cb2]        # 152f0 <CSWTCH.1104+0x210>
    363e:	48 89 ac 24 20 01 00 	mov    QWORD PTR [rsp+0x120],rbp
    3645:	00 
    3646:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    364b:	f2 0f 5e 05 dd 51 01 	divsd  xmm0,QWORD PTR [rip+0x151dd]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x470>
    3652:	00 
	  : __r(duration_cast<duration>(__d).count()) { }
    3653:	f2 0f 11 44 24 68    	movsd  QWORD PTR [rsp+0x68],xmm0
    3659:	e8 32 33 00 00       	call   6990 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    365e:	4c 8d 44 24 68       	lea    r8,[rsp+0x68]
    3663:	4c 89 f1             	mov    rcx,r14
    3666:	4c 89 ee             	mov    rsi,r13
    3669:	ba 1c 00 00 00       	mov    edx,0x1c
    366e:	48 89 df             	mov    rdi,rbx
    3671:	48 89 ac 24 20 01 00 	mov    QWORD PTR [rsp+0x120],rbp
    3678:	00 
    3679:	48 c7 84 24 28 01 00 	mov    QWORD PTR [rsp+0x128],0x0
    3680:	00 00 00 00 00 
    3685:	e8 a6 32 00 00       	call   6930 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>
      if (joinable())
    368a:	48 83 7c 24 60 00    	cmp    QWORD PTR [rsp+0x60],0x0
    3690:	0f 85 43 fd ff ff    	jne    33d9 <main.cold>
    3696:	48 83 7c 24 58 00    	cmp    QWORD PTR [rsp+0x58],0x0
    369c:	0f 85 37 fd ff ff    	jne    33d9 <main.cold>
	}

	{
		// x and y start out ==.  t1 sets x before y, therefore expect x >= y always
		// All atomic operations use memory_order_relaxed
		constexpr std::uint32_t niter {std::numeric_limits<std::uint32_t>::max()};
    36a2:	c7 44 24 40 ff ff ff 	mov    DWORD PTR [rsp+0x40],0xffffffff
    36a9:	ff 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    36aa:	4c 8d 7c 24 70       	lea    r15,[rsp+0x70]
		std::atomic<std::uint32_t> x {0};
    36af:	c7 44 24 44 00 00 00 	mov    DWORD PTR [rsp+0x44],0x0
    36b6:	00 
		std::atomic<std::uint32_t> y {0};
    36b7:	c7 44 24 48 00 00 00 	mov    DWORD PTR [rsp+0x48],0x0
    36be:	00 
		relaxed_relaxed_write rrw {x, y, niter};
		relaxed_relaxed_read rrr {x, y, niter, 0};
    36bf:	c7 84 24 14 01 00 00 	mov    DWORD PTR [rsp+0x114],0x0
    36c6:	00 00 00 00 
		
		std::chrono::time_point<std::chrono::steady_clock> start {std::chrono::steady_clock::now()};
    36ca:	e8 b1 fb ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
    36cf:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    36d4:	48 c7 44 24 70 00 00 	mov    QWORD PTR [rsp+0x70],0x0
    36db:	00 00 
    36dd:	48 89 04 24          	mov    QWORD PTR [rsp],rax
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    36e1:	e8 fa fa ff ff       	call   31e0 <operator new(unsigned long)@plt>
    36e6:	be ff ff ff ff       	mov    esi,0xffffffff
    36eb:	4c 89 ff             	mov    rdi,r15
    36ee:	4c 89 e2             	mov    rdx,r12
	  : _M_func(std::forward<_Args>(__args)...)
    36f1:	48 8d 0d c0 82 01 00 	lea    rcx,[rip+0x182c0]        # 1b9b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >+0x10>
    36f8:	66 0f 6f 6c 24 20    	movdqa xmm5,XMMWORD PTR [rsp+0x20]
    36fe:	48 89 70 18          	mov    QWORD PTR [rax+0x18],rsi
    3702:	48 89 08             	mov    QWORD PTR [rax],rcx
    3705:	48 89 b4 24 f0 00 00 	mov    QWORD PTR [rsp+0xf0],rsi
    370c:	00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    370d:	48 89 de             	mov    rsi,rbx
    3710:	0f 11 68 08          	movups XMMWORD PTR [rax+0x8],xmm5
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    3714:	48 89 84 24 40 01 00 	mov    QWORD PTR [rsp+0x140],rax
    371b:	00 
    371c:	0f 29 ac 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm5
    3723:	00 
    3724:	e8 a7 fa ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    3729:	48 8b bc 24 40 01 00 	mov    rdi,QWORD PTR [rsp+0x140]
    3730:	00 
    3731:	48 85 ff             	test   rdi,rdi
    3734:	74 06                	je     373c <main+0x2dc>
	delete __ptr;
    3736:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    3739:	ff 50 08             	call   QWORD PTR [rax+0x8]
      id() noexcept : _M_thread() { }
    373c:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
    3743:	00 00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3745:	bf 20 00 00 00       	mov    edi,0x20
    374a:	e8 91 fa ff ff       	call   31e0 <operator new(unsigned long)@plt>
    374f:	66 0f 6f 74 24 20    	movdqa xmm6,XMMWORD PTR [rsp+0x20]
    3755:	c7 84 24 10 01 00 00 	mov    DWORD PTR [rsp+0x110],0xffffffff
    375c:	ff ff ff ff 
	  : _M_func(std::forward<_Args>(__args)...)
    3760:	48 8d 35 79 82 01 00 	lea    rsi,[rip+0x18279]        # 1b9e0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >+0x10>
    3767:	48 8b 94 24 10 01 00 	mov    rdx,QWORD PTR [rsp+0x110]
    376e:	00 
    376f:	48 89 30             	mov    QWORD PTR [rax],rsi
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3772:	48 89 de             	mov    rsi,rbx
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    3775:	48 89 84 24 40 01 00 	mov    QWORD PTR [rsp+0x140],rax
    377c:	00 
    377d:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    3781:	4c 89 e2             	mov    rdx,r12
    3784:	0f 11 70 08          	movups XMMWORD PTR [rax+0x8],xmm6
    3788:	48 8d 44 24 78       	lea    rax,[rsp+0x78]
    378d:	48 89 c7             	mov    rdi,rax
    3790:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    3795:	0f 29 b4 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm6
    379c:	00 
    379d:	e8 2e fa ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    37a2:	48 8b bc 24 40 01 00 	mov    rdi,QWORD PTR [rsp+0x140]
    37a9:	00 
    37aa:	48 85 ff             	test   rdi,rdi
    37ad:	74 06                	je     37b5 <main+0x355>
	delete __ptr;
    37af:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    37b2:	ff 50 08             	call   QWORD PTR [rax+0x8]
		std::thread t1(rrw);
		std::thread t2(rrr);
		t1.join();
    37b5:	4c 89 ff             	mov    rdi,r15
		t2.join();
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
		
		std::chrono::duration<double> time_seconds {end-start};
		std::format_to(std::ostream_iterator<char>(std::cout),"memory_order_relaxed:  After {} iterations, count_mismatches == {}\n", niter, rrr.count_mismatch);
    37b8:	4c 8d bc 24 00 01 00 	lea    r15,[rsp+0x100]
    37bf:	00 
		t1.join();
    37c0:	e8 7b fb ff ff       	call   3340 <std::thread::join()@plt>
		t2.join();
    37c5:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    37ca:	e8 71 fb ff ff       	call   3340 <std::thread::join()@plt>
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
    37cf:	e8 ac fa ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    37d4:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
		std::format_to(std::ostream_iterator<char>(std::cout),"memory_order_relaxed:  After {} iterations, count_mismatches == {}\n", niter, rrr.count_mismatch);
    37d8:	4c 89 ee             	mov    rsi,r13
    37db:	48 89 df             	mov    rdi,rbx
    37de:	4c 8d 44 24 40       	lea    r8,[rsp+0x40]
    37e3:	4c 8d 8c 24 14 01 00 	lea    r9,[rsp+0x114]
    37ea:	00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    37eb:	66 0f ef c0          	pxor   xmm0,xmm0
    37ef:	ba 43 00 00 00       	mov    edx,0x43
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    37f4:	48 29 c8             	sub    rax,rcx
    37f7:	48 8d 0d 32 1b 01 00 	lea    rcx,[rip+0x11b32]        # 15330 <CSWTCH.1104+0x250>
    37fe:	48 89 ac 24 20 01 00 	mov    QWORD PTR [rsp+0x120],rbp
    3805:	00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3806:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    380b:	48 c7 84 24 28 01 00 	mov    QWORD PTR [rsp+0x128],0x0
    3812:	00 00 00 00 00 
    3817:	f2 0f 5e 05 11 50 01 	divsd  xmm0,QWORD PTR [rip+0x15011]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x470>
    381e:	00 
	  : __r(duration_cast<duration>(__d).count()) { }
    381f:	f2 0f 11 84 24 80 00 	movsd  QWORD PTR [rsp+0x80],xmm0
    3826:	00 00 
    3828:	e8 63 31 00 00       	call   6990 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    382d:	ba 1c 00 00 00       	mov    edx,0x1c
    3832:	4c 89 f1             	mov    rcx,r14
    3835:	4c 89 ee             	mov    rsi,r13
    3838:	4c 8d 84 24 80 00 00 	lea    r8,[rsp+0x80]
    383f:	00 
    3840:	48 89 df             	mov    rdi,rbx
    3843:	48 89 ac 24 20 01 00 	mov    QWORD PTR [rsp+0x120],rbp
    384a:	00 
    384b:	48 c7 84 24 28 01 00 	mov    QWORD PTR [rsp+0x128],0x0
    3852:	00 00 00 00 00 
    3857:	e8 d4 30 00 00       	call   6930 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>
      if (joinable())
    385c:	48 83 7c 24 78 00    	cmp    QWORD PTR [rsp+0x78],0x0
    3862:	0f 85 71 fb ff ff    	jne    33d9 <main.cold>
    3868:	48 83 7c 24 70 00    	cmp    QWORD PTR [rsp+0x70],0x0
    386e:	0f 85 65 fb ff ff    	jne    33d9 <main.cold>
	}

	{
		// x and y start out ==.  t1 sets x before y, therefore expect x >= y always
		// Uses memory_order_release and memory_order_acquire for one of the writes and one of the reads, respectively
		constexpr std::uint32_t niter {std::numeric_limits<std::uint32_t>::max()};
    3874:	c7 44 24 4c ff ff ff 	mov    DWORD PTR [rsp+0x4c],0xffffffff
    387b:	ff 
	  : _M_func(std::forward<_Args>(__args)...)
    387c:	48 8d 1d 85 81 01 00 	lea    rbx,[rip+0x18185]        # 1ba08 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >+0x10>
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3883:	4c 8d ac 24 88 00 00 	lea    r13,[rsp+0x88]
    388a:	00 
		std::atomic<std::uint32_t> x {0};
    388b:	c7 44 24 50 00 00 00 	mov    DWORD PTR [rsp+0x50],0x0
    3892:	00 
		std::atomic<std::uint32_t> y {0};
    3893:	c7 44 24 54 00 00 00 	mov    DWORD PTR [rsp+0x54],0x0
    389a:	00 
		relaxed_release_write rxrlw {x, y, niter};
		acquire_relaxed_read arr {x, y, niter, 0};
    389b:	c7 84 24 54 01 00 00 	mov    DWORD PTR [rsp+0x154],0x0
    38a2:	00 00 00 00 
		
		std::chrono::time_point<std::chrono::steady_clock> start {std::chrono::steady_clock::now()};
    38a6:	e8 d5 f9 ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
    38ab:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    38b0:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
    38b7:	00 00 00 00 00 
    38bc:	48 89 04 24          	mov    QWORD PTR [rsp],rax
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    38c0:	e8 1b f9 ff ff       	call   31e0 <operator new(unsigned long)@plt>
    38c5:	4c 89 ef             	mov    rdi,r13
    38c8:	4c 89 e2             	mov    rdx,r12
    38cb:	4c 89 fe             	mov    rsi,r15
	  : _M_func(std::forward<_Args>(__args)...)
    38ce:	48 89 18             	mov    QWORD PTR [rax],rbx
    38d1:	bb ff ff ff ff       	mov    ebx,0xffffffff
    38d6:	66 0f 6f 7c 24 10    	movdqa xmm7,XMMWORD PTR [rsp+0x10]
    38dc:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
    38e0:	0f 11 78 08          	movups XMMWORD PTR [rax+0x8],xmm7
    38e4:	48 89 9c 24 30 01 00 	mov    QWORD PTR [rsp+0x130],rbx
    38eb:	00 
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    38ec:	48 89 84 24 00 01 00 	mov    QWORD PTR [rsp+0x100],rax
    38f3:	00 
    38f4:	0f 29 bc 24 20 01 00 	movaps XMMWORD PTR [rsp+0x120],xmm7
    38fb:	00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    38fc:	e8 cf f8 ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    3901:	48 8b bc 24 00 01 00 	mov    rdi,QWORD PTR [rsp+0x100]
    3908:	00 
    3909:	48 85 ff             	test   rdi,rdi
    390c:	74 06                	je     3914 <main+0x4b4>
	delete __ptr;
    390e:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    3911:	ff 50 08             	call   QWORD PTR [rax+0x8]
    3914:	bf 20 00 00 00       	mov    edi,0x20
    3919:	48 8d 9c 24 90 00 00 	lea    rbx,[rsp+0x90]
    3920:	00 
      id() noexcept : _M_thread() { }
    3921:	48 c7 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],0x0
    3928:	00 00 00 00 00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    392d:	e8 ae f8 ff ff       	call   31e0 <operator new(unsigned long)@plt>
	  : _M_func(std::forward<_Args>(__args)...)
    3932:	48 8d 35 f7 80 01 00 	lea    rsi,[rip+0x180f7]        # 1ba30 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >+0x10>
    3939:	66 0f 6f 54 24 10    	movdqa xmm2,XMMWORD PTR [rsp+0x10]
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    393f:	48 89 df             	mov    rdi,rbx
    3942:	c7 84 24 50 01 00 00 	mov    DWORD PTR [rsp+0x150],0xffffffff
    3949:	ff ff ff ff 
    394d:	48 8b 94 24 50 01 00 	mov    rdx,QWORD PTR [rsp+0x150]
    3954:	00 
	  : _M_func(std::forward<_Args>(__args)...)
    3955:	48 89 30             	mov    QWORD PTR [rax],rsi
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3958:	4c 89 fe             	mov    rsi,r15
    395b:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    395f:	4c 89 e2             	mov    rdx,r12
    3962:	0f 11 50 08          	movups XMMWORD PTR [rax+0x8],xmm2
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    3966:	48 89 84 24 00 01 00 	mov    QWORD PTR [rsp+0x100],rax
    396d:	00 
    396e:	0f 29 94 24 40 01 00 	movaps XMMWORD PTR [rsp+0x140],xmm2
    3975:	00 
    3976:	e8 55 f8 ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    397b:	48 8b bc 24 00 01 00 	mov    rdi,QWORD PTR [rsp+0x100]
    3982:	00 
    3983:	48 85 ff             	test   rdi,rdi
    3986:	74 06                	je     398e <main+0x52e>
	delete __ptr;
    3988:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    398b:	ff 50 08             	call   QWORD PTR [rax+0x8]
		std::thread t1(rxrlw);
		std::thread t2(arr);
		t1.join();
    398e:	4c 89 ef             	mov    rdi,r13
    3991:	e8 aa f9 ff ff       	call   3340 <std::thread::join()@plt>
		t2.join();
    3996:	48 89 df             	mov    rdi,rbx
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
		
		std::chrono::duration<double> time_seconds {end-start};
		std::format_to(std::ostream_iterator<char>(std::cout),"Mixed _release and _acquire:  After {} iterations, count_mismatches == {}\n", niter, arr.count_mismatch);
    3999:	48 8d 9c 24 e0 00 00 	lea    rbx,[rsp+0xe0]
    39a0:	00 
		t2.join();
    39a1:	e8 9a f9 ff ff       	call   3340 <std::thread::join()@plt>
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
    39a6:	e8 d5 f8 ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    39ab:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
		std::format_to(std::ostream_iterator<char>(std::cout),"Mixed _release and _acquire:  After {} iterations, count_mismatches == {}\n", niter, arr.count_mismatch);
    39af:	48 89 de             	mov    rsi,rbx
    39b2:	4c 89 ff             	mov    rdi,r15
    39b5:	4c 8d 44 24 4c       	lea    r8,[rsp+0x4c]
    39ba:	4c 8d 8c 24 54 01 00 	lea    r9,[rsp+0x154]
    39c1:	00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    39c2:	66 0f ef c0          	pxor   xmm0,xmm0
    39c6:	48 89 ac 24 e0 00 00 	mov    QWORD PTR [rsp+0xe0],rbp
    39cd:	00 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    39ce:	48 29 d0             	sub    rax,rdx
    39d1:	48 8d 0d a0 19 01 00 	lea    rcx,[rip+0x119a0]        # 15378 <CSWTCH.1104+0x298>
    39d8:	ba 4a 00 00 00       	mov    edx,0x4a
    39dd:	48 c7 84 24 e8 00 00 	mov    QWORD PTR [rsp+0xe8],0x0
    39e4:	00 00 00 00 00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    39e9:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    39ee:	f2 0f 5e 05 3a 4e 01 	divsd  xmm0,QWORD PTR [rip+0x14e3a]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x470>
    39f5:	00 
	  : __r(duration_cast<duration>(__d).count()) { }
    39f6:	f2 0f 11 84 24 98 00 	movsd  QWORD PTR [rsp+0x98],xmm0
    39fd:	00 00 
    39ff:	e8 8c 2f 00 00       	call   6990 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    3a04:	ba 1c 00 00 00       	mov    edx,0x1c
    3a09:	4c 89 f1             	mov    rcx,r14
    3a0c:	48 89 de             	mov    rsi,rbx
    3a0f:	4c 8d 84 24 98 00 00 	lea    r8,[rsp+0x98]
    3a16:	00 
    3a17:	4c 89 ff             	mov    rdi,r15
    3a1a:	48 89 ac 24 e0 00 00 	mov    QWORD PTR [rsp+0xe0],rbp
    3a21:	00 
    3a22:	48 c7 84 24 e8 00 00 	mov    QWORD PTR [rsp+0xe8],0x0
    3a29:	00 00 00 00 00 
    3a2e:	e8 fd 2e 00 00       	call   6930 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>
      if (joinable())
    3a33:	48 83 bc 24 90 00 00 	cmp    QWORD PTR [rsp+0x90],0x0
    3a3a:	00 00 
    3a3c:	0f 85 97 f9 ff ff    	jne    33d9 <main.cold>
    3a42:	48 83 bc 24 88 00 00 	cmp    QWORD PTR [rsp+0x88],0x0
    3a49:	00 00 
    3a4b:	0f 85 88 f9 ff ff    	jne    33d9 <main.cold>




	return 0;
}
    3a51:	48 81 c4 68 01 00 00 	add    rsp,0x168
    3a58:	31 c0                	xor    eax,eax
    3a5a:	5b                   	pop    rbx
    3a5b:	5d                   	pop    rbp
    3a5c:	41 5c                	pop    r12
    3a5e:	41 5d                	pop    r13
    3a60:	41 5e                	pop    r14
    3a62:	41 5f                	pop    r15
    3a64:	c3                   	ret
    3a65:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    3a6c:	00 00 00 
    3a6f:	90                   	nop

0000000000003a70 <_start>:
    3a70:	31 ed                	xor    ebp,ebp
    3a72:	49 89 d1             	mov    r9,rdx
    3a75:	5e                   	pop    rsi
    3a76:	48 89 e2             	mov    rdx,rsp
    3a79:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    3a7d:	50                   	push   rax
    3a7e:	54                   	push   rsp
    3a7f:	45 31 c0             	xor    r8d,r8d
    3a82:	31 c9                	xor    ecx,ecx
    3a84:	48 8d 3d d5 f9 ff ff 	lea    rdi,[rip+0xfffffffffffff9d5]        # 3460 <main>
    3a8b:	ff 15 37 85 01 00    	call   QWORD PTR [rip+0x18537]        # 1bfc8 <__libc_start_main@GLIBC_2.34>
    3a91:	f4                   	hlt
    3a92:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    3a99:	00 00 00 
    3a9c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000003aa0 <deregister_tm_clones>:
    3aa0:	48 8d 3d 11 87 01 00 	lea    rdi,[rip+0x18711]        # 1c1b8 <__TMC_END__>
    3aa7:	48 8d 05 0a 87 01 00 	lea    rax,[rip+0x1870a]        # 1c1b8 <__TMC_END__>
    3aae:	48 39 f8             	cmp    rax,rdi
    3ab1:	74 15                	je     3ac8 <deregister_tm_clones+0x28>
    3ab3:	48 8b 05 16 85 01 00 	mov    rax,QWORD PTR [rip+0x18516]        # 1bfd0 <_ITM_deregisterTMCloneTable@Base>
    3aba:	48 85 c0             	test   rax,rax
    3abd:	74 09                	je     3ac8 <deregister_tm_clones+0x28>
    3abf:	ff e0                	jmp    rax
    3ac1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    3ac8:	c3                   	ret
    3ac9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000003ad0 <register_tm_clones>:
    3ad0:	48 8d 3d e1 86 01 00 	lea    rdi,[rip+0x186e1]        # 1c1b8 <__TMC_END__>
    3ad7:	48 8d 35 da 86 01 00 	lea    rsi,[rip+0x186da]        # 1c1b8 <__TMC_END__>
    3ade:	48 29 fe             	sub    rsi,rdi
    3ae1:	48 89 f0             	mov    rax,rsi
    3ae4:	48 c1 ee 3f          	shr    rsi,0x3f
    3ae8:	48 c1 f8 03          	sar    rax,0x3
    3aec:	48 01 c6             	add    rsi,rax
    3aef:	48 d1 fe             	sar    rsi,1
    3af2:	74 14                	je     3b08 <register_tm_clones+0x38>
    3af4:	48 8b 05 e5 84 01 00 	mov    rax,QWORD PTR [rip+0x184e5]        # 1bfe0 <_ITM_registerTMCloneTable@Base>
    3afb:	48 85 c0             	test   rax,rax
    3afe:	74 08                	je     3b08 <register_tm_clones+0x38>
    3b00:	ff e0                	jmp    rax
    3b02:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    3b08:	c3                   	ret
    3b09:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000003b10 <__do_global_dtors_aux>:
    3b10:	f3 0f 1e fa          	endbr64
    3b14:	80 3d 3d 88 01 00 00 	cmp    BYTE PTR [rip+0x1883d],0x0        # 1c358 <completed.0>
    3b1b:	75 2b                	jne    3b48 <__do_global_dtors_aux+0x38>
    3b1d:	55                   	push   rbp
    3b1e:	48 83 3d 9a 84 01 00 	cmp    QWORD PTR [rip+0x1849a],0x0        # 1bfc0 <__cxa_finalize@GLIBC_2.2.5>
    3b25:	00 
    3b26:	48 89 e5             	mov    rbp,rsp
    3b29:	74 0c                	je     3b37 <__do_global_dtors_aux+0x27>
    3b2b:	48 8b 3d 7e 86 01 00 	mov    rdi,QWORD PTR [rip+0x1867e]        # 1c1b0 <__dso_handle>
    3b32:	e8 49 f8 ff ff       	call   3380 <__cxa_finalize@plt>
    3b37:	e8 64 ff ff ff       	call   3aa0 <deregister_tm_clones>
    3b3c:	c6 05 15 88 01 00 01 	mov    BYTE PTR [rip+0x18815],0x1        # 1c358 <completed.0>
    3b43:	5d                   	pop    rbp
    3b44:	c3                   	ret
    3b45:	0f 1f 00             	nop    DWORD PTR [rax]
    3b48:	c3                   	ret
    3b49:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000003b50 <frame_dummy>:
    3b50:	f3 0f 1e fa          	endbr64
    3b54:	e9 77 ff ff ff       	jmp    3ad0 <register_tm_clones>
    3b59:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000003b60 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>:
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    3b60:	55                   	push   rbp
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
    3b61:	48 c7 c5 ff ff ff ff 	mov    rbp,0xffffffffffffffff
    basic_string_view<_CharT, _Traits>::
    3b68:	53                   	push   rbx
    3b69:	48 83 ec 08          	sub    rsp,0x8
      if (__pos < this->_M_len)
    3b6d:	48 39 f9             	cmp    rcx,rdi
    3b70:	73 25                	jae    3b97 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]+0x37>
    3b72:	48 89 f3             	mov    rbx,rsi
    3b75:	89 d6                	mov    esi,edx
	{
	  const size_type __n = this->_M_len - __pos;
    3b77:	48 89 fa             	mov    rdx,rdi
    3b7a:	48 29 ca             	sub    rdx,rcx
	  return 0;
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    3b7d:	40 0f be f6          	movsx  esi,sil
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
    3b81:	48 8d 3c 0b          	lea    rdi,[rbx+rcx*1]
    3b85:	e8 96 f6 ff ff       	call   3220 <memchr@plt>
	  if (__p)
	    __ret = __p - this->_M_str;
    3b8a:	48 89 c2             	mov    rdx,rax
    3b8d:	48 29 da             	sub    rdx,rbx
    3b90:	48 85 c0             	test   rax,rax
    3b93:	48 0f 45 ea          	cmovne rbp,rdx
	}
      return __ret;
    }
    3b97:	48 83 c4 08          	add    rsp,0x8
    3b9b:	48 89 e8             	mov    rax,rbp
    3b9e:	5b                   	pop    rbx
    3b9f:	5d                   	pop    rbp
    3ba0:	c3                   	ret
    3ba1:	90                   	nop
    3ba2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    3ba9:	00 00 00 00 
    3bad:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000003bb0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>:
	  return __width;
	}

      template<typename _Context>
	size_t
	_M_get_precision(_Context& __ctx) const
    3bb0:	48 83 ec 48          	sub    rsp,0x48
      [[nodiscard,__gnu__::__always_inline__]]
      basic_format_arg<_Context>
      get(size_t __i) const noexcept
      {
	basic_format_arg<_Context> __arg;
	if (__i < _M_packed_size)
    3bb4:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
	    __prec = __format::__int_from_arg(__ctx.arg(_M_prec));
    3bb7:	0f b7 ff             	movzx  edi,di
	if (__i < _M_packed_size)
    3bba:	89 c2                	mov    edx,eax
    3bbc:	83 e0 0f             	and    eax,0xf
    3bbf:	83 e2 0f             	and    edx,0xf
    3bc2:	48 39 c7             	cmp    rdi,rax
    3bc5:	73 49                	jae    3c10 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]+0x60>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    3bc7:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    3bca:	48 8d 0c bf          	lea    rcx,[rdi+rdi*4]
	  {
	    __arg._M_type = _M_type(__i);
	    __arg._M_val = _M_values[__i];
    3bce:	48 c1 e7 04          	shl    rdi,0x4
    3bd2:	48 03 7e 08          	add    rdi,QWORD PTR [rsi+0x8]
    3bd6:	66 0f 6f 07          	movdqa xmm0,XMMWORD PTR [rdi]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    3bda:	48 c1 e8 04          	shr    rax,0x4
    3bde:	48 d3 e8             	shr    rax,cl
	    __arg._M_val = _M_values[__i];
    3be1:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    3be5:	83 e0 1f             	and    eax,0x1f
	  switch (__type)
    3be8:	48 8d 15 31 14 01 00 	lea    rdx,[rip+0x11431]        # 15020 <_IO_stdin_used+0x20>
    3bef:	88 44 24 10          	mov    BYTE PTR [rsp+0x10],al
    3bf3:	0f b6 c0             	movzx  eax,al
    3bf6:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    3bfb:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    3bff:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    3c04:	48 01 d0             	add    rax,rdx
    3c07:	ff e0                	jmp    rax
    3c09:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  }
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    3c10:	84 d2                	test   dl,dl
    3c12:	0f 85 a8 f7 ff ff    	jne    33c0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>
    3c18:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    3c1b:	48 c1 e8 04          	shr    rax,0x4
    3c1f:	48 39 c7             	cmp    rdi,rax
    3c22:	0f 83 98 f7 ff ff    	jae    33c0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>
	  __arg = _M_args[__i];
    3c28:	48 c1 e7 05          	shl    rdi,0x5
    3c2c:	48 03 7e 08          	add    rdi,QWORD PTR [rsi+0x8]
    3c30:	f3 0f 6f 07          	movdqu xmm0,XMMWORD PTR [rdi]
    3c34:	0f b6 47 10          	movzx  eax,BYTE PTR [rdi+0x10]
    3c38:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
    3c3c:	eb aa                	jmp    3be8 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]+0x38>
    3c3e:	66 90                	xchg   ax,ax
	      if (__arg >= 0)
    3c40:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    3c45:	48 85 c0             	test   rax,rax
    3c48:	0f 88 77 f7 ff ff    	js     33c5 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]+0x5>
	}
    3c4e:	48 83 c4 48          	add    rsp,0x48
    3c52:	c3                   	ret
    3c53:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      return __arg;
    3c58:	8b 44 24 20          	mov    eax,DWORD PTR [rsp+0x20]
	}
    3c5c:	48 83 c4 48          	add    rsp,0x48
    3c60:	c3                   	ret
    3c61:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__arg >= 0)
    3c68:	48 63 44 24 20       	movsxd rax,DWORD PTR [rsp+0x20]
    3c6d:	85 c0                	test   eax,eax
    3c6f:	0f 88 50 f7 ff ff    	js     33c5 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]+0x5>
	}
    3c75:	48 83 c4 48          	add    rsp,0x48
    3c79:	c3                   	ret
    3c7a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __arg;
    3c80:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
	}
    3c85:	48 83 c4 48          	add    rsp,0x48
    3c89:	c3                   	ret
    3c8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000003c90 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>:
	_M_get_width(_Context& __ctx) const
    3c90:	48 83 ec 48          	sub    rsp,0x48
	if (__i < _M_packed_size)
    3c94:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    3c97:	0f b7 ff             	movzx  edi,di
	if (__i < _M_packed_size)
    3c9a:	89 c2                	mov    edx,eax
    3c9c:	83 e0 0f             	and    eax,0xf
    3c9f:	83 e2 0f             	and    edx,0xf
    3ca2:	48 39 c7             	cmp    rdi,rax
    3ca5:	73 49                	jae    3cf0 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]+0x60>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    3ca7:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    3caa:	48 8d 0c bf          	lea    rcx,[rdi+rdi*4]
	    __arg._M_val = _M_values[__i];
    3cae:	48 c1 e7 04          	shl    rdi,0x4
    3cb2:	48 03 7e 08          	add    rdi,QWORD PTR [rsi+0x8]
    3cb6:	66 0f 6f 07          	movdqa xmm0,XMMWORD PTR [rdi]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    3cba:	48 c1 e8 04          	shr    rax,0x4
    3cbe:	48 d3 e8             	shr    rax,cl
	    __arg._M_val = _M_values[__i];
    3cc1:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    3cc5:	83 e0 1f             	and    eax,0x1f
	  switch (__type)
    3cc8:	48 8d 15 a5 13 01 00 	lea    rdx,[rip+0x113a5]        # 15074 <_IO_stdin_used+0x74>
    3ccf:	88 44 24 10          	mov    BYTE PTR [rsp+0x10],al
    3cd3:	0f b6 c0             	movzx  eax,al
    3cd6:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    3cdb:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    3cdf:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    3ce4:	48 01 d0             	add    rax,rdx
    3ce7:	ff e0                	jmp    rax
    3ce9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    3cf0:	84 d2                	test   dl,dl
    3cf2:	0f 85 d2 f6 ff ff    	jne    33ca <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>
    3cf8:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    3cfb:	48 c1 e8 04          	shr    rax,0x4
    3cff:	48 39 c7             	cmp    rdi,rax
    3d02:	0f 83 c2 f6 ff ff    	jae    33ca <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>
	  __arg = _M_args[__i];
    3d08:	48 c1 e7 05          	shl    rdi,0x5
    3d0c:	48 03 7e 08          	add    rdi,QWORD PTR [rsi+0x8]
    3d10:	f3 0f 6f 07          	movdqu xmm0,XMMWORD PTR [rdi]
    3d14:	0f b6 47 10          	movzx  eax,BYTE PTR [rdi+0x10]
    3d18:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
    3d1c:	eb aa                	jmp    3cc8 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]+0x38>
    3d1e:	66 90                	xchg   ax,ax
	      if (__arg >= 0)
    3d20:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    3d25:	48 85 c0             	test   rax,rax
    3d28:	0f 88 a1 f6 ff ff    	js     33cf <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]+0x5>
	}
    3d2e:	48 83 c4 48          	add    rsp,0x48
    3d32:	c3                   	ret
    3d33:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      return __arg;
    3d38:	8b 44 24 20          	mov    eax,DWORD PTR [rsp+0x20]
	}
    3d3c:	48 83 c4 48          	add    rsp,0x48
    3d40:	c3                   	ret
    3d41:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__arg >= 0)
    3d48:	48 63 44 24 20       	movsxd rax,DWORD PTR [rsp+0x20]
    3d4d:	85 c0                	test   eax,eax
    3d4f:	0f 88 7a f6 ff ff    	js     33cf <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]+0x5>
	}
    3d55:	48 83 c4 48          	add    rsp,0x48
    3d59:	c3                   	ret
    3d5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __arg;
    3d60:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
	}
    3d65:	48 83 c4 48          	add    rsp,0x48
    3d69:	c3                   	ret
    3d6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000003d70 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]>:

      // Use the formatting locale's std::time_put facet to produce
      // a locale-specific representation.
      template<typename _Iter>
	_Iter
	_M_locale_fmt(_Iter __out, const locale& __loc, const struct tm& __tm,
    3d70:	41 57                	push   r15
       *
       *  That's a lie.  We initialize the base class with NULL, because the
       *  string class does its own memory management.
      */
      basic_ostringstream()
      : __ostream_type(), _M_stringbuf(ios_base::out)
    3d72:	4c 8d 3d 37 7e 01 00 	lea    r15,[rip+0x17e37]        # 1bbb0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    3d79:	41 56                	push   r14
    3d7b:	41 55                	push   r13
    3d7d:	41 54                	push   r12
    3d7f:	4c 8d 25 82 7e 01 00 	lea    r12,[rip+0x17e82]        # 1bc08 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
    3d86:	55                   	push   rbp
    3d87:	66 49 0f 6e dc       	movq   xmm3,r12
    3d8c:	48 89 f5             	mov    rbp,rsi
    3d8f:	53                   	push   rbx
    3d90:	48 89 fb             	mov    rbx,rdi
    3d93:	48 81 ec c8 01 00 00 	sub    rsp,0x1c8
    3d9a:	f3 0f 7e 15 fe 7f 01 	movq   xmm2,QWORD PTR [rip+0x17ffe]        # 1bda0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x230>
    3da1:	00 
    3da2:	f3 0f 7e 0d f6 7f 01 	movq   xmm1,QWORD PTR [rip+0x17ff6]        # 1bda0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x230>
    3da9:	00 
       *  The default constructor does nothing and is not normally
       *  accessible to users.
      */
      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    3daa:	4c 8d ac 24 b0 00 00 	lea    r13,[rsp+0xb0]
    3db1:	00 
    3db2:	48 89 54 24 38       	mov    QWORD PTR [rsp+0x38],rdx
    3db7:	4c 8d 74 24 40       	lea    r14,[rsp+0x40]
    3dbc:	66 0f 6c d3          	punpcklqdq xmm2,xmm3
    3dc0:	0f 16 0d e1 7f 01 00 	movhps xmm1,QWORD PTR [rip+0x17fe1]        # 1bda8 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x2c8>
    3dc7:	4c 89 ef             	mov    rdi,r13
    3dca:	89 4c 24 18          	mov    DWORD PTR [rsp+0x18],ecx
    3dce:	44 89 44 24 34       	mov    DWORD PTR [rsp+0x34],r8d
    3dd3:	0f 29 14 24          	movaps XMMWORD PTR [rsp],xmm2
    3dd7:	0f 29 4c 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm1
    3ddc:	e8 cf f2 ff ff       	call   30b0 <std::ios_base::ios_base()@plt>
    3de1:	48 8d 05 e8 7c 01 00 	lea    rax,[rip+0x17ce8]        # 1bad0 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    3de8:	31 c9                	xor    ecx,ecx
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }
    3dea:	31 f6                	xor    esi,esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    3dec:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    3df3:	00 
    3df4:	66 0f ef c0          	pxor   xmm0,xmm0
    3df8:	48 8b 05 c9 7d 01 00 	mov    rax,QWORD PTR [rip+0x17dc9]        # 1bbc8 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x8>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    3dff:	66 89 8c 24 90 01 00 	mov    WORD PTR [rsp+0x190],cx
    3e06:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    3e07:	0f 11 84 24 98 01 00 	movups XMMWORD PTR [rsp+0x198],xmm0
    3e0e:	00 
    3e0f:	0f 11 84 24 a8 01 00 	movups XMMWORD PTR [rsp+0x1a8],xmm0
    3e16:	00 
    3e17:	48 8b 78 e8          	mov    rdi,QWORD PTR [rax-0x18]
    3e1b:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    3e20:	48 8b 05 a9 7d 01 00 	mov    rax,QWORD PTR [rip+0x17da9]        # 1bbd0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    3e27:	48 c7 84 24 88 01 00 	mov    QWORD PTR [rsp+0x188],0x0
    3e2e:	00 00 00 00 00 
    3e33:	4c 01 f7             	add    rdi,r14
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    3e36:	4c 8d b4 24 a0 00 00 	lea    r14,[rsp+0xa0]
    3e3d:	00 
    3e3e:	48 89 07             	mov    QWORD PTR [rdi],rax
    3e41:	e8 4a f4 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    3e46:	66 0f 6f 4c 24 20    	movdqa xmm1,XMMWORD PTR [rsp+0x20]
       *  - this is not an error
      */
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
    3e4c:	48 8d 84 24 80 00 00 	lea    rax,[rsp+0x80]
    3e53:	00 
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    3e54:	66 0f ef c0          	pxor   xmm0,xmm0
      _M_buf_locale(locale())
    3e58:	48 89 c7             	mov    rdi,rax
    3e5b:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    3e60:	0f 29 4c 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm1
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    3e65:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
    3e6a:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
    3e6f:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    3e74:	4c 89 bc 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],r15
    3e7b:	00 
      _M_buf_locale(locale())
    3e7c:	e8 ef f4 ff ff       	call   3370 <std::locale::locale()@plt>
      { this->init(&_M_stringbuf); }
    3e81:	48 8d 74 24 48       	lea    rsi,[rsp+0x48]
    3e86:	4c 89 ef             	mov    rdi,r13
      : __streambuf_type(), _M_mode(__mode), _M_string()
    3e89:	4c 89 64 24 48       	mov    QWORD PTR [rsp+0x48],r12
    3e8e:	c7 84 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],0x10
    3e95:	10 00 00 00 
    3e99:	4c 89 b4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r14
    3ea0:	00 
      { _M_string_length = __length; }
    3ea1:	48 c7 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],0x0
    3ea8:	00 00 00 00 00 
	__c1 = __c2;
    3ead:	c6 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],0x0
    3eb4:	00 
      { this->init(&_M_stringbuf); }
    3eb5:	e8 d6 f3 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
      const size_t __i = _Facet::id._M_id();
    3eba:	48 8d 3d 8f 84 01 00 	lea    rdi,[rip+0x1848f]        # 1c350 <std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::id@GLIBCXX_3.4>
    3ec1:	e8 5a f2 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
    3ec6:	48 89 c2             	mov    rdx,rax
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    3ec9:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
      _GLIBCXX_STD_FACET(time_put<char>);
    3ecd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    3ed1:	48 8b 3c d0          	mov    rdi,QWORD PTR [rax+rdx*8]
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    3ed5:	48 85 ff             	test   rdi,rdi
    3ed8:	0f 84 f6 f4 ff ff    	je     33d4 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0] [clone .cold]>
      : _M_sbuf(nullptr), _M_failed(true) { }
#endif

      ///  Construct output iterator from ostream.
      ostreambuf_iterator(ostream_type& __s) _GLIBCXX_USE_NOEXCEPT
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }
    3ede:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
       *  @return  Iterator after writing.
       */
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
	  const tm* __tm, char __format, char __mod = 0) const
      { return this->do_put(__s, __io, __fill, __tm, __format, __mod); }
    3ee3:	44 0f be 64 24 34    	movsx  r12d,BYTE PTR [rsp+0x34]
    3ee9:	31 d2                	xor    edx,edx
    3eeb:	41 b8 20 00 00 00    	mov    r8d,0x20
      { return _M_streambuf; }
    3ef1:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    3ef5:	48 8b 8c 04 28 01 00 	mov    rcx,QWORD PTR [rsp+rax*1+0x128]
    3efc:	00 
    3efd:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    3f00:	41 54                	push   r12
    3f02:	0f be 6c 24 20       	movsx  ebp,BYTE PTR [rsp+0x20]
    3f07:	48 85 c9             	test   rcx,rcx
    3f0a:	48 89 ce             	mov    rsi,rcx
    3f0d:	4c 89 e9             	mov    rcx,r13
    3f10:	55                   	push   rbp
    3f11:	0f 94 c2             	sete   dl
    3f14:	4c 8b 4c 24 48       	mov    r9,QWORD PTR [rsp+0x48]
    3f19:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      char __fmt, char __mod) const
	{
	  basic_ostringstream<_CharT> __os;
	  const auto& __tp = use_facet<time_put<_CharT>>(__loc);
	  __tp.put(__os, __os, _S_space, &__tm, __fmt, __mod);
	  if (__os)
    3f1c:	58                   	pop    rax
    3f1d:	5a                   	pop    rdx
    3f1e:	f6 84 24 d0 00 00 00 	test   BYTE PTR [rsp+0xd0],0x5
    3f25:	05 
    3f26:	0f 84 94 00 00 00    	je     3fc0 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x250>
       *
       *  The buffer is deallocated by the stringbuf object, not the
       *  formatting stream.
      */
      ~basic_ostringstream()
      { }
    3f2c:	66 0f 6f 24 24       	movdqa xmm4,XMMWORD PTR [rsp]
      { return _M_dataplus._M_p; }
    3f31:	48 8b bc 24 90 00 00 	mov    rdi,QWORD PTR [rsp+0x90]
    3f38:	00 
    3f39:	4c 89 bc 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],r15
    3f40:	00 
    3f41:	0f 29 64 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm4
	if (_M_data() == _M_local_data())
    3f46:	4c 39 f7             	cmp    rdi,r14
    3f49:	74 11                	je     3f5c <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x1ec>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    3f4b:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    3f52:	00 
    3f53:	48 8d 70 01          	lea    rsi,[rax+0x1]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    3f57:	e8 a4 f2 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    3f5c:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    3f61:	48 8d 05 88 7b 01 00 	lea    rax,[rip+0x17b88]        # 1baf0 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    3f68:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    3f6d:	e8 4e f3 ff ff       	call   32c0 <std::locale::~locale()@plt>
      ~basic_ostream() { }
    3f72:	48 8b 05 4f 7c 01 00 	mov    rax,QWORD PTR [rip+0x17c4f]        # 1bbc8 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x8>
    3f79:	48 8b 0d 50 7c 01 00 	mov    rcx,QWORD PTR [rip+0x17c50]        # 1bbd0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      ~basic_ios() { }
    3f80:	4c 89 ef             	mov    rdi,r13
    3f83:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    3f88:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    3f8c:	48 89 4c 04 40       	mov    QWORD PTR [rsp+rax*1+0x40],rcx
    3f91:	48 8d 05 38 7b 01 00 	lea    rax,[rip+0x17b38]        # 1bad0 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    3f98:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    3f9f:	00 
    3fa0:	e8 2b f1 ff ff       	call   30d0 <std::ios_base::~ios_base()@plt>
	    __out = __format::__write(std::move(__out), __os.view());
	  return __out;
	}
    3fa5:	48 81 c4 c8 01 00 00 	add    rsp,0x1c8
    3fac:	48 89 d8             	mov    rax,rbx
    3faf:	5b                   	pop    rbx
    3fb0:	5d                   	pop    rbp
    3fb1:	41 5c                	pop    r12
    3fb3:	41 5d                	pop    r13
    3fb5:	41 5e                	pop    r14
    3fb7:	41 5f                	pop    r15
    3fb9:	c3                   	ret
    3fba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      */
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }
    3fc0:	4c 8b 64 24 70       	mov    r12,QWORD PTR [rsp+0x70]
	if (char_type* __pptr = this->pptr())
    3fc5:	4d 85 e4             	test   r12,r12
    3fc8:	0f 84 ba 00 00 00    	je     4088 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x318>
      egptr() const { return _M_in_end; }
    3fce:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
	      return __egptr; // Underlying sequence is [pbase, egptr).
    3fd3:	4c 89 e2             	mov    rdx,r12
      pbase() const { return _M_out_beg; }
    3fd6:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
    3fdb:	4c 39 e0             	cmp    rax,r12
    3fde:	4c 0f 43 e0          	cmovae r12,rax
    3fe2:	48 85 c0             	test   rax,rax
    3fe5:	4c 0f 44 e2          	cmove  r12,rdx
	requires same_as<iter_value_t<_It>, _CharT>
	  && (!convertible_to<_End, size_type>)
	constexpr
	basic_string_view(_It __first, _End __last)
	noexcept(noexcept(__last - __first))
	: _M_len(__last - __first), _M_str(std::to_address(__first))
    3fe9:	49 29 f4             	sub    r12,rsi
	  if (__str.size())
    3fec:	4d 85 e4             	test   r12,r12
    3fef:	0f 84 37 ff ff ff    	je     3f2c <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x1bc>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    3ff5:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
      subspan(size_type __offset, size_type __count = dynamic_extent) const
      noexcept
      {
	__glibcxx_assert(__offset <= size());
	if (__count == dynamic_extent)
	  __count = this->size() - __offset;
    3ff9:	48 8b 6b 10          	mov    rbp,QWORD PTR [rbx+0x10]
    3ffd:	48 89 f8             	mov    rax,rdi
    4000:	48 2b 43 08          	sub    rax,QWORD PTR [rbx+0x8]
    4004:	48 29 c5             	sub    rbp,rax
	while (__to.size() <= __s.size())
    4007:	49 39 ec             	cmp    r12,rbp
    400a:	72 68                	jb     4074 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x304>
    400c:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
    4011:	4d 89 e5             	mov    r13,r12
    4014:	49 89 f4             	mov    r12,rsi
    4017:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    401e:	00 00 
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    4020:	4c 39 ed             	cmp    rbp,r13
    4023:	4c 89 ea             	mov    rdx,r13
    4026:	48 0f 46 d5          	cmovbe rdx,rbp
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
    402a:	48 85 d2             	test   rdx,rdx
    402d:	74 08                	je     4037 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x2c7>
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    402f:	4c 89 e6             	mov    rsi,r12
    4032:	e8 79 f1 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    4037:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_current += __n; return *this; }
    403a:	48 01 6b 18          	add    QWORD PTR [rbx+0x18],rbp
    403e:	48 89 df             	mov    rdi,rbx

      constexpr void
      remove_prefix(size_type __n) noexcept
      {
	__glibcxx_assert(this->_M_len >= __n);
	this->_M_str += __n;
    4041:	49 01 ec             	add    r12,rbp
	this->_M_len -= __n;
    4044:	49 29 ed             	sub    r13,rbp
    4047:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    4049:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    404d:	48 8b 6b 10          	mov    rbp,QWORD PTR [rbx+0x10]
    4051:	48 89 f8             	mov    rax,rdi
    4054:	48 2b 43 08          	sub    rax,QWORD PTR [rbx+0x8]
    4058:	48 29 c5             	sub    rbp,rax
	while (__to.size() <= __s.size())
    405b:	49 39 ed             	cmp    r13,rbp
    405e:	73 c0                	jae    4020 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x2b0>
	if (__s.size())
    4060:	4c 89 e6             	mov    rsi,r12
    4063:	4d 89 ec             	mov    r12,r13
    4066:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    406b:	4d 85 e4             	test   r12,r12
    406e:	0f 84 b8 fe ff ff    	je     3f2c <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x1bc>
    4074:	4c 89 e2             	mov    rdx,r12
    4077:	e8 34 f1 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    407c:	4c 01 63 18          	add    QWORD PTR [rbx+0x18],r12
    4080:	e9 a7 fe ff ff       	jmp    3f2c <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x1bc>
    4085:	0f 1f 00             	nop    DWORD PTR [rax]
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
    4088:	4c 8b a4 24 98 00 00 	mov    r12,QWORD PTR [rsp+0x98]
    408f:	00 
      { return _M_dataplus._M_p; }
    4090:	48 8b b4 24 90 00 00 	mov    rsi,QWORD PTR [rsp+0x90]
    4097:	00 
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    4098:	e9 4f ff ff ff       	jmp    3fec <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x27c>
    409d:	0f 1f 00             	nop    DWORD PTR [rax]

00000000000040a0 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]>:
	}
    };

  template<typename _Out, typename _CharT, typename _Context>
    inline _Out
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    40a0:	41 57                	push   r15
    40a2:	41 56                	push   r14
    40a4:	41 55                	push   r13
    40a6:	41 54                	push   r12
    40a8:	49 89 cc             	mov    r12,rcx
      : _M_out(std::move(__out)), _M_max(__max)
    40ab:	48 8d 0d ee 79 01 00 	lea    rcx,[rip+0x179ee]        # 1baa0 <vtable for std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >+0x10>
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    40b2:	55                   	push   rbp
      : _M_out(std::move(__out)), _M_max(__max)
    40b3:	66 48 0f 6e c1       	movq   xmm0,rcx
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    40b8:	48 89 fd             	mov    rbp,rdi
    40bb:	53                   	push   rbx
    40bc:	4c 89 c3             	mov    rbx,r8
    40bf:	48 81 ec f8 01 00 00 	sub    rsp,0x1f8
      : _M_span(__span), _M_next(__span.begin())
    40c6:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    40cd:	00 
    40ce:	4c 8d ac 24 b0 00 00 	lea    r13,[rsp+0xb0]
    40d5:	00 
    40d6:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x100
    40dd:	00 00 01 00 00 
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    40e2:	4c 8b 84 24 30 02 00 	mov    r8,QWORD PTR [rsp+0x230]
    40e9:	00 
      : _M_out(std::move(__out)), _M_max(__max)
    40ea:	66 48 0f 6e c8       	movq   xmm1,rax
      : _M_span(__span), _M_next(__span.begin())
    40ef:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    40f6:	00 
      : _M_out(std::move(__out)), _M_max(__max)
    40f7:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
      ostream_iterator(ostream_type& __s, const _CharT* __c) _GLIBCXX_NOEXCEPT
      : _M_stream(std::__addressof(__s)), _M_string(__c)  { }

      /// Copy constructor.
      ostream_iterator(const ostream_iterator& __obj) _GLIBCXX_NOEXCEPT
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }
    40fb:	48 89 b4 24 d0 01 00 	mov    QWORD PTR [rsp+0x1d0],rsi
    4102:	00 
    4103:	48 89 94 24 d8 01 00 	mov    QWORD PTR [rsp+0x1d8],rdx
    410a:	00 
    410b:	48 c7 84 24 e0 01 00 	mov    QWORD PTR [rsp+0x1e0],0xffffffffffffffff
    4112:	00 ff ff ff ff 
    4117:	48 c7 84 24 e8 01 00 	mov    QWORD PTR [rsp+0x1e8],0x0
    411e:	00 00 00 00 00 
      _Sink_iter<_CharT> __sink_out;

      if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
	__sink_out = __out; // Already a sink iterator, safe to use post-move.
      else
	__sink_out = __sink.out();
    4123:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
      : _M_out(std::move(__out)), _M_max(__max)
    4128:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    412f:	00 

      if constexpr (is_same_v<_CharT, char>)
	// Fast path for "{}" format strings and simple format arg types.
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    4130:	49 83 fc 02          	cmp    r12,0x2
    4134:	0f 84 de 00 00 00    	je     4218 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x178>
    413a:	4c 89 ea             	mov    rdx,r13
    413d:	4c 8d 74 24 40       	lea    r14,[rsp+0x40]
    4142:	4c 8d 7c 24 70       	lea    r15,[rsp+0x70]
    4147:	f3 41 0f 6f 01       	movdqu xmm0,XMMWORD PTR [r9]
      : _M_args(__args), _M_out(std::move(__out))
    414c:	48 89 54 24 50       	mov    QWORD PTR [rsp+0x50],rdx
    4151:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
		  return std::move(__sink)._M_finish().out;
	      }
	  }

      auto __ctx = __loc == nullptr
		     ? _Context(__args, __sink_out)
    4156:	4d 85 c0             	test   r8,r8
    4159:	0f 84 a1 00 00 00    	je     4200 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x160>
    : _M_loc(__loc), _M_hasval(true)
    415f:	48 8d 7c 24 58       	lea    rdi,[rsp+0x58]
    4164:	4c 89 c6             	mov    rsi,r8
    4167:	e8 24 f0 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    416c:	c6 44 24 60 01       	mov    BYTE PTR [rsp+0x60],0x1
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    4171:	66 0f 6f 05 47 46 01 	movdqa xmm0,XMMWORD PTR [rip+0x14647]        # 187c0 <std::__unicode::__v15_1_0::__width_edges+0x400>
    4178:	00 
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    4179:	48 8d 05 00 79 01 00 	lea    rax,[rip+0x17900]        # 1ba80 <vtable for std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>+0x10>
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    4180:	48 89 5c 24 78       	mov    QWORD PTR [rsp+0x78],rbx
		     : _Context(__args, __sink_out, *__loc);
      _Formatting_scanner<_Sink_iter<_CharT>, _CharT> __scanner(__ctx, __fmt);
      __scanner._M_scan();
    4185:	4c 89 ff             	mov    rdi,r15
      { return this->_M_str + this->_M_len; }
    4188:	4c 01 e3             	add    rbx,r12
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    418b:	48 89 44 24 70       	mov    QWORD PTR [rsp+0x70],rax
    4190:	48 89 9c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbx
    4197:	00 
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    4198:	c7 84 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],0x0
    419f:	00 00 00 00 
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    41a3:	4c 89 b4 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],r14
    41aa:	00 
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    41ab:	0f 29 84 24 90 00 00 	movaps XMMWORD PTR [rsp+0x90],xmm0
    41b2:	00 
      __scanner._M_scan();
    41b3:	e8 38 0f 00 00       	call   50f0 <std::__format::_Scanner<char>::_M_scan()>
	if (this->_M_used().size() != 0)
    41b8:	48 8b 84 24 c8 00 00 	mov    rax,QWORD PTR [rsp+0xc8]
    41bf:	00 
    41c0:	48 39 84 24 b8 00 00 	cmp    QWORD PTR [rsp+0xb8],rax
    41c7:	00 
    41c8:	0f 85 42 01 00 00    	jne    4310 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x270>
    41ce:	66 0f 6f 84 24 d0 01 	movdqa xmm0,XMMWORD PTR [rsp+0x1d0]
    41d5:	00 00 
    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    41d7:	80 7c 24 60 00       	cmp    BYTE PTR [rsp+0x60],0x0
    41dc:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    41e0:	0f 85 12 01 00 00    	jne    42f8 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x258>

      if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
	return __ctx.out();
      else
	return std::move(__sink)._M_finish().out;
    }
    41e6:	48 81 c4 f8 01 00 00 	add    rsp,0x1f8
    41ed:	48 89 e8             	mov    rax,rbp
    41f0:	5b                   	pop    rbx
    41f1:	5d                   	pop    rbp
    41f2:	41 5c                	pop    r12
    41f4:	41 5d                	pop    r13
    41f6:	41 5e                	pop    r14
    41f8:	41 5f                	pop    r15
    41fa:	c3                   	ret
    41fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }
    4200:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
    4207:	00 00 
    4209:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
    420e:	e9 5e ff ff ff       	jmp    4171 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0xd1>
    4213:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    4218:	80 3b 7b             	cmp    BYTE PTR [rbx],0x7b
    421b:	0f 85 19 ff ff ff    	jne    413a <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x9a>
    4221:	80 7b 01 7d          	cmp    BYTE PTR [rbx+0x1],0x7d
    4225:	0f 85 0f ff ff ff    	jne    413a <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x9a>
	    bool __done = false;
    422b:	c6 44 24 17 00       	mov    BYTE PTR [rsp+0x17],0x0
	if (__i < _M_packed_size)
    4230:	41 f6 01 0f          	test   BYTE PTR [r9],0xf
    4234:	0f 84 e6 00 00 00    	je     4320 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x280>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    423a:	49 8b 11             	mov    rdx,QWORD PTR [r9]
	    __arg._M_val = _M_values[__i];
    423d:	49 8b 49 08          	mov    rcx,QWORD PTR [r9+0x8]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    4241:	48 c1 ea 04          	shr    rdx,0x4
	    __arg._M_val = _M_values[__i];
    4245:	66 0f 6f 01          	movdqa xmm0,XMMWORD PTR [rcx]
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    4249:	89 d0                	mov    eax,edx
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    424b:	83 e2 1f             	and    edx,0x1f
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    424e:	83 e0 1f             	and    eax,0x1f
	    __arg._M_val = _M_values[__i];
    4251:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
	    std::visit_format_arg([&](auto& __arg) {
    4256:	48 8d 74 24 18       	lea    rsi,[rsp+0x18]
    425b:	48 8d 4c 24 17       	lea    rcx,[rsp+0x17]
    4260:	88 44 24 30          	mov    BYTE PTR [rsp+0x30],al
    4264:	66 48 0f 6e c6       	movq   xmm0,rsi
    4269:	66 48 0f 6e d1       	movq   xmm2,rcx
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    426e:	4c 8d 74 24 40       	lea    r14,[rsp+0x40]
    4273:	4c 89 84 24 30 02 00 	mov    QWORD PTR [rsp+0x230],r8
    427a:	00 
	    std::visit_format_arg([&](auto& __arg) {
    427b:	66 0f 6c c2          	punpcklqdq xmm0,xmm2
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    427f:	4c 8d 7c 24 70       	lea    r15,[rsp+0x70]
    4284:	4c 89 f6             	mov    rsi,r14
    4287:	4c 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],r9
	    std::visit_format_arg([&](auto& __arg) {
    428c:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
    4291:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    4297:	4c 89 ff             	mov    rdi,r15
    429a:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    429f:	66 0f 6f 44 24 30    	movdqa xmm0,XMMWORD PTR [rsp+0x30]
    42a5:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
    42ac:	00 
    42ad:	e8 ee 20 00 00       	call   63a0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>
	    if (__done)
    42b2:	80 7c 24 17 00       	cmp    BYTE PTR [rsp+0x17],0x0
    42b7:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    42bc:	4c 8b 4c 24 08       	mov    r9,QWORD PTR [rsp+0x8]
    42c1:	4c 8b 84 24 30 02 00 	mov    r8,QWORD PTR [rsp+0x230]
    42c8:	00 
    42c9:	0f 84 78 fe ff ff    	je     4147 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0xa7>
	if (this->_M_used().size() != 0)
    42cf:	48 8b 84 24 c8 00 00 	mov    rax,QWORD PTR [rsp+0xc8]
    42d6:	00 
    42d7:	48 39 84 24 b8 00 00 	cmp    QWORD PTR [rsp+0xb8],rax
    42de:	00 
    42df:	75 68                	jne    4349 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x2a9>
    42e1:	66 0f 6f 84 24 d0 01 	movdqa xmm0,XMMWORD PTR [rsp+0x1d0]
    42e8:	00 00 
    42ea:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    42ee:	e9 f3 fe ff ff       	jmp    41e6 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x146>
    42f3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    42f8:	48 8d 7c 24 58       	lea    rdi,[rsp+0x58]
    42fd:	e8 be ef ff ff       	call   32c0 <std::locale::~locale()@plt>
      ~basic_format_context() = default;
    4302:	e9 df fe ff ff       	jmp    41e6 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x146>
    4307:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    430e:	00 00 
	  _Iter_sink::_M_overflow();
    4310:	4c 89 ef             	mov    rdi,r13
    4313:	e8 c8 07 00 00       	call   4ae0 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()>
    4318:	e9 b1 fe ff ff       	jmp    41ce <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x12e>
    431d:	0f 1f 00             	nop    DWORD PTR [rax]
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    4320:	49 8b 31             	mov    rsi,QWORD PTR [r9]
    4323:	31 c0                	xor    eax,eax
    4325:	31 d2                	xor    edx,edx
    4327:	48 c1 ee 04          	shr    rsi,0x4
    432b:	0f 84 25 ff ff ff    	je     4256 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x1b6>
	  __arg = _M_args[__i];
    4331:	49 8b 41 08          	mov    rax,QWORD PTR [r9+0x8]
    4335:	f3 0f 6f 00          	movdqu xmm0,XMMWORD PTR [rax]
    4339:	0f b6 50 10          	movzx  edx,BYTE PTR [rax+0x10]
    433d:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    4342:	89 d0                	mov    eax,edx
    4344:	e9 0d ff ff ff       	jmp    4256 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x1b6>
	  _Iter_sink::_M_overflow();
    4349:	4c 89 ef             	mov    rdi,r13
    434c:	e8 8f 07 00 00       	call   4ae0 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()>
    4351:	eb 8e                	jmp    42e1 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x241>
    4353:	90                   	nop
    4354:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    435b:	00 00 00 00 
    435f:	90                   	nop

0000000000004360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>:
	if (this->max_size() - (this->size() - __n1) < __n2)
    4360:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    4367:	ff ff 7f 
    basic_string<_CharT, _Traits, _Alloc>::
    436a:	41 56                	push   r14
    436c:	41 55                	push   r13
    436e:	48 01 d0             	add    rax,rdx
    4371:	41 54                	push   r12
    4373:	55                   	push   rbp
    4374:	48 89 cd             	mov    rbp,rcx
    4377:	53                   	push   rbx
      { return _M_string_length; }
    4378:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
	if (this->max_size() - (this->size() - __n1) < __n2)
    437c:	48 29 c8             	sub    rax,rcx
    437f:	48 39 e8             	cmp    rax,rbp
    4382:	0f 82 56 f0 ff ff    	jb     33de <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]>
    4388:	48 89 fb             	mov    rbx,rdi
      const size_type __new_size = __old_size + __n2 - __n1;
    438b:	49 89 ec             	mov    r12,rbp
      { return _M_dataplus._M_p; }
    438e:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
    4391:	49 89 f6             	mov    r14,rsi
    4394:	49 29 d4             	sub    r12,rdx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    4397:	48 8d 43 10          	lea    rax,[rbx+0x10]
    439b:	45 89 c5             	mov    r13d,r8d
    439e:	49 01 cc             	add    r12,rcx
	if (_M_data() == _M_local_data())
    43a1:	48 39 c7             	cmp    rdi,rax
    43a4:	0f 84 86 00 00 00    	je     4430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0xd0>
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      {
	return _M_is_local() ? size_type(_S_local_capacity)
    43aa:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
      if (__new_size <= this->capacity())
    43ae:	4c 39 e0             	cmp    rax,r12
    43b1:	72 5d                	jb     4410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0xb0>
	  const size_type __how_much = __old_size - __pos1 - __n1;
    43b3:	4a 8d 04 32          	lea    rax,[rdx+r14*1]
	  if (__how_much && __n1 != __n2)
    43b7:	48 29 c1             	sub    rcx,rax
    43ba:	74 24                	je     43e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x80>
    43bc:	48 39 ea             	cmp    rdx,rbp
    43bf:	74 1f                	je     43e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x80>
	  pointer __p = this->_M_data() + __pos1;
    43c1:	4c 01 f7             	add    rdi,r14
	    this->_S_move(__p + __n2, __p + __n1, __how_much);
    43c4:	48 8d 34 17          	lea    rsi,[rdi+rdx*1]
    43c8:	48 01 ef             	add    rdi,rbp
	if (__n == 1)
    43cb:	48 83 f9 01          	cmp    rcx,0x1
    43cf:	74 6f                	je     4440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0xe0>
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    43d1:	48 89 ca             	mov    rdx,rcx
    43d4:	e8 47 ef ff ff       	call   3320 <memmove@plt>
      { return _M_dataplus._M_p; }
    43d9:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    43dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (__n2)
    43e0:	48 85 ed             	test   rbp,rbp
    43e3:	74 18                	je     43fd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x9d>
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    43e5:	4c 01 f7             	add    rdi,r14
	if (__n == 1)
    43e8:	48 83 fd 01          	cmp    rbp,0x1
    43ec:	74 3a                	je     4428 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0xc8>
	  return __s;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
#endif
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    43ee:	41 0f be f5          	movsx  esi,r13b
    43f2:	48 89 ea             	mov    rdx,rbp
    43f5:	e8 46 ed ff ff       	call   3140 <memset@plt>
      { return _M_dataplus._M_p; }
    43fa:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      { _M_string_length = __length; }
    43fd:	4c 89 63 08          	mov    QWORD PTR [rbx+0x8],r12
	__c1 = __c2;
    4401:	42 c6 04 27 00       	mov    BYTE PTR [rdi+r12*1],0x0
    }
    4406:	5b                   	pop    rbx
    4407:	5d                   	pop    rbp
    4408:	41 5c                	pop    r12
    440a:	41 5d                	pop    r13
    440c:	41 5e                	pop    r14
    440e:	c3                   	ret
    440f:	90                   	nop
	this->_M_mutate(__pos1, __n1, 0, __n2);
    4410:	48 89 df             	mov    rdi,rbx
    4413:	49 89 e8             	mov    r8,rbp
    4416:	31 c9                	xor    ecx,ecx
    4418:	4c 89 f6             	mov    rsi,r14
    441b:	e8 40 31 00 00       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
    4420:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    4423:	eb bb                	jmp    43e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x80>
    4425:	0f 1f 00             	nop    DWORD PTR [rax]
    4428:	44 88 2f             	mov    BYTE PTR [rdi],r13b
    442b:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      }
    442e:	eb cd                	jmp    43fd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x9d>
	return _M_is_local() ? size_type(_S_local_capacity)
    4430:	b8 0f 00 00 00       	mov    eax,0xf
    4435:	e9 74 ff ff ff       	jmp    43ae <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x4e>
    443a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	__c1 = __c2;
    4440:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    4443:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
    4445:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      }
    4448:	eb 96                	jmp    43e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x80>
    444a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000004450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>:
	if (this->max_size() - (this->size() - __n1) < __n2)
    4450:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    4457:	ff ff 7f 
    basic_string<_CharT, _Traits, _Alloc>::
    445a:	41 55                	push   r13
    445c:	41 54                	push   r12
    445e:	49 89 cc             	mov    r12,rcx
    4461:	48 01 d0             	add    rax,rdx
    4464:	55                   	push   rbp
    4465:	53                   	push   rbx
    4466:	48 83 ec 18          	sub    rsp,0x18
      { return _M_string_length; }
    446a:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
	if (this->max_size() - (this->size() - __n1) < __n2)
    446e:	48 29 c8             	sub    rax,rcx
    4471:	4c 39 c0             	cmp    rax,r8
    4474:	0f 82 83 ef ff ff    	jb     33fd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0] [clone .cold]+0x13>
      { return _M_dataplus._M_p; }
    447a:	48 8b 07             	mov    rax,QWORD PTR [rdi]
      const size_type __new_size = __old_size + __len2 - __len1;
    447d:	4c 89 c5             	mov    rbp,r8
    4480:	48 89 fb             	mov    rbx,rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    4483:	48 8d 7f 10          	lea    rdi,[rdi+0x10]
    4487:	48 29 d5             	sub    rbp,rdx
    448a:	48 01 cd             	add    rbp,rcx
	if (_M_data() == _M_local_data())
    448d:	48 39 f8             	cmp    rax,rdi
    4490:	0f 84 9a 00 00 00    	je     4530 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xe0>
	return _M_is_local() ? size_type(_S_local_capacity)
    4496:	48 8b 7b 10          	mov    rdi,QWORD PTR [rbx+0x10]
      if (__new_size <= this->capacity())
    449a:	48 39 ef             	cmp    rdi,rbp
    449d:	0f 82 7d 00 00 00    	jb     4520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xd0>
	  pointer __p = this->_M_data() + __pos;
    44a3:	4c 8d 2c 30          	lea    r13,[rax+rsi*1]
	  const size_type __how_much = __old_size - __pos - __len1;
    44a7:	49 89 c9             	mov    r9,rcx
    44aa:	48 01 d6             	add    rsi,rdx
    44ad:	49 29 f1             	sub    r9,rsi
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    44b0:	49 39 c4             	cmp    r12,rax
    44b3:	73 5b                	jae    4510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xc0>
	      if (__how_much && __len1 != __len2)
    44b5:	4d 85 c9             	test   r9,r9
    44b8:	74 27                	je     44e1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x91>
    44ba:	4c 39 c2             	cmp    rdx,r8
    44bd:	74 22                	je     44e1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x91>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
    44bf:	49 8d 74 15 00       	lea    rsi,[r13+rdx*1+0x0]
    44c4:	4b 8d 7c 05 00       	lea    rdi,[r13+r8*1+0x0]
	if (__n == 1)
    44c9:	49 83 f9 01          	cmp    r9,0x1
    44cd:	74 71                	je     4540 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xf0>
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    44cf:	4c 89 ca             	mov    rdx,r9
    44d2:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
    44d7:	e8 44 ee ff ff       	call   3320 <memmove@plt>
    44dc:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
	      if (__len2)
    44e1:	4d 85 c0             	test   r8,r8
    44e4:	74 14                	je     44fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
	if (__n == 1)
    44e6:	49 83 f8 01          	cmp    r8,0x1
    44ea:	74 64                	je     4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x100>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    44ec:	4c 89 c2             	mov    rdx,r8
    44ef:	4c 89 e6             	mov    rsi,r12
    44f2:	4c 89 ef             	mov    rdi,r13
    44f5:	e8 b6 ec ff ff       	call   31b0 <memcpy@plt>
	__c1 = __c2;
    44fa:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_string_length = __length; }
    44fd:	48 89 6b 08          	mov    QWORD PTR [rbx+0x8],rbp
    4501:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
      else
	this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }
    4505:	48 83 c4 18          	add    rsp,0x18
    4509:	5b                   	pop    rbx
    450a:	5d                   	pop    rbp
    450b:	41 5c                	pop    r12
    450d:	41 5d                	pop    r13
    450f:	c3                   	ret
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    4510:	48 01 c8             	add    rax,rcx
    4513:	4c 39 e0             	cmp    rax,r12
    4516:	72 9d                	jb     44b5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x65>
    4518:	e9 cd ee ff ff       	jmp    33ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0] [clone .cold]>
    451d:	0f 1f 00             	nop    DWORD PTR [rax]
	this->_M_mutate(__pos, __len1, __s, __len2);
    4520:	4c 89 e1             	mov    rcx,r12
    4523:	48 89 df             	mov    rdi,rbx
    4526:	e8 35 30 00 00       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    452b:	eb cd                	jmp    44fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
    452d:	0f 1f 00             	nop    DWORD PTR [rax]
	return _M_is_local() ? size_type(_S_local_capacity)
    4530:	bf 0f 00 00 00       	mov    edi,0xf
    4535:	e9 60 ff ff ff       	jmp    449a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x4a>
    453a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    4540:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    4543:	88 07                	mov    BYTE PTR [rdi],al
	      if (__len2)
    4545:	4d 85 c0             	test   r8,r8
    4548:	74 b0                	je     44fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
    454a:	eb 9a                	jmp    44e6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x96>
    454c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    4550:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
    4555:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
      }
    4559:	eb 9f                	jmp    44fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
    455b:	90                   	nop
    455c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>:
       *  out_of_range is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */
      _GLIBCXX20_CONSTEXPR
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
    4560:	41 56                	push   r14
    4562:	41 55                	push   r13
    4564:	41 54                	push   r12
    4566:	49 89 f4             	mov    r12,rsi
    4569:	55                   	push   rbp
    456a:	48 89 d5             	mov    rbp,rdx
    456d:	53                   	push   rbx
      { return _M_string_length; }
    456e:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
	if (__pos > this->size())
    4572:	48 39 f2             	cmp    rdx,rsi
    4575:	0f 82 9b ee ff ff    	jb     3416 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]+0xc>
	if (this->max_size() - (this->size() - __n1) < __n2)
    457b:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    4582:	ff ff 7f 
    4585:	48 29 d0             	sub    rax,rdx
    4588:	48 39 e8             	cmp    rax,rbp
    458b:	0f 82 79 ee ff ff    	jb     340a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]>
    4591:	48 89 fb             	mov    rbx,rdi
      { return _M_dataplus._M_p; }
    4594:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
    4597:	41 89 cd             	mov    r13d,ecx
      const size_type __new_size = __old_size + __n2 - __n1;
    459a:	4c 8d 34 2a          	lea    r14,[rdx+rbp*1]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    459e:	48 8d 43 10          	lea    rax,[rbx+0x10]
	if (_M_data() == _M_local_data())
    45a2:	48 39 c7             	cmp    rdi,rax
    45a5:	0f 84 85 00 00 00    	je     4630 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xd0>
	return _M_is_local() ? size_type(_S_local_capacity)
    45ab:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
      if (__new_size <= this->capacity())
    45af:	4c 39 f0             	cmp    rax,r14
    45b2:	72 4c                	jb     4600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xa0>
	  if (__how_much && __n1 != __n2)
    45b4:	4c 29 e2             	sub    rdx,r12
    45b7:	74 5c                	je     4615 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xb5>
    45b9:	48 85 ed             	test   rbp,rbp
    45bc:	74 2e                	je     45ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x8c>
	  pointer __p = this->_M_data() + __pos1;
    45be:	4a 8d 34 27          	lea    rsi,[rdi+r12*1]
	    this->_S_move(__p + __n2, __p + __n1, __how_much);
    45c2:	48 8d 3c 2e          	lea    rdi,[rsi+rbp*1]
	if (__n == 1)
    45c6:	48 83 fa 01          	cmp    rdx,0x1
    45ca:	74 74                	je     4640 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xe0>
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    45cc:	e8 4f ed ff ff       	call   3320 <memmove@plt>
      { return _M_dataplus._M_p; }
    45d1:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    45d4:	4c 01 e7             	add    rdi,r12
	if (__n == 1)
    45d7:	48 83 fd 01          	cmp    rbp,0x1
    45db:	74 43                	je     4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xc0>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    45dd:	41 0f be f5          	movsx  esi,r13b
    45e1:	48 89 ea             	mov    rdx,rbp
    45e4:	e8 57 eb ff ff       	call   3140 <memset@plt>
      { return _M_dataplus._M_p; }
    45e9:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      { _M_string_length = __length; }
    45ec:	4c 89 73 08          	mov    QWORD PTR [rbx+0x8],r14
	__c1 = __c2;
    45f0:	42 c6 04 37 00       	mov    BYTE PTR [rdi+r14*1],0x0
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
			      size_type(0), __n, __c); }
    45f5:	5b                   	pop    rbx
    45f6:	5d                   	pop    rbp
    45f7:	41 5c                	pop    r12
    45f9:	41 5d                	pop    r13
    45fb:	41 5e                	pop    r14
    45fd:	c3                   	ret
    45fe:	66 90                	xchg   ax,ax
	this->_M_mutate(__pos1, __n1, 0, __n2);
    4600:	48 89 df             	mov    rdi,rbx
    4603:	49 89 e8             	mov    r8,rbp
    4606:	31 c9                	xor    ecx,ecx
    4608:	31 d2                	xor    edx,edx
    460a:	4c 89 e6             	mov    rsi,r12
    460d:	e8 4e 2f 00 00       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
    4612:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      if (__n2)
    4615:	48 85 ed             	test   rbp,rbp
    4618:	74 d2                	je     45ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x8c>
    461a:	eb b8                	jmp    45d4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x74>
    461c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    4620:	44 88 2f             	mov    BYTE PTR [rdi],r13b
    4623:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      }
    4626:	eb c4                	jmp    45ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x8c>
    4628:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    462f:	00 
	return _M_is_local() ? size_type(_S_local_capacity)
    4630:	b8 0f 00 00 00       	mov    eax,0xf
    4635:	e9 75 ff ff ff       	jmp    45af <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x4f>
    463a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	__c1 = __c2;
    4640:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    4643:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
    4645:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    4648:	4c 01 e7             	add    rdi,r12
	if (__n == 1)
    464b:	48 83 fd 01          	cmp    rbp,0x1
    464f:	75 8c                	jne    45dd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x7d>
    4651:	eb cd                	jmp    4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xc0>
    4653:	90                   	nop
    4654:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    465b:	00 00 00 00 
    465f:	90                   	nop

0000000000004660 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>:
      _M_localize(basic_string_view<_CharT> __str, char __expc,
    4660:	41 57                	push   r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    4662:	48 8d 47 10          	lea    rax,[rdi+0x10]
    4666:	41 56                	push   r14
    4668:	41 89 ce             	mov    r14d,ecx
    466b:	41 55                	push   r13
    466d:	49 89 d5             	mov    r13,rdx
    4670:	41 54                	push   r12
    4672:	4d 89 c4             	mov    r12,r8
    4675:	55                   	push   rbp
    4676:	48 89 f5             	mov    rbp,rsi
    4679:	53                   	push   rbx
    467a:	48 89 fb             	mov    rbx,rdi
    467d:	48 83 ec 58          	sub    rsp,0x58
    4681:	48 89 07             	mov    QWORD PTR [rdi],rax
      { _M_string_length = __length; }
    4684:	48 c7 47 08 00 00 00 	mov    QWORD PTR [rdi+0x8],0x0
    468b:	00 
    468c:	c6 47 10 00          	mov    BYTE PTR [rdi+0x10],0x0
	if (__loc == locale::classic())
    4690:	e8 0b ec ff ff       	call   32a0 <std::locale::classic()@plt>
    4695:	4c 89 e7             	mov    rdi,r12
    4698:	48 89 c6             	mov    rsi,rax
    469b:	e8 d0 e9 ff ff       	call   3070 <std::locale::operator==(std::locale const&) const@plt>
    46a0:	84 c0                	test   al,al
    46a2:	74 1c                	je     46c0 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x60>
      }
    46a4:	48 83 c4 58          	add    rsp,0x58
    46a8:	48 89 d8             	mov    rax,rbx
    46ab:	5b                   	pop    rbx
    46ac:	5d                   	pop    rbp
    46ad:	41 5c                	pop    r12
    46af:	41 5d                	pop    r13
    46b1:	41 5e                	pop    r14
    46b3:	41 5f                	pop    r15
    46b5:	c3                   	ret
    46b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    46bd:	00 00 00 
      const size_t __i = _Facet::id._M_id();
    46c0:	48 8d 3d f9 7a 01 00 	lea    rdi,[rip+0x17af9]        # 1c1c0 <std::__cxx11::numpunct<char>::id@GLIBCXX_3.4.21>
    46c7:	e8 54 ea ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
    46cc:	48 89 c2             	mov    rdx,rax
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    46cf:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
      _GLIBCXX_STD_FACET(numpunct<char>);
    46d3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    46d7:	4c 8b 3c d0          	mov    r15,QWORD PTR [rax+rdx*8]
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    46db:	4d 85 ff             	test   r15,r15
    46de:	0f 84 4e ed ff ff    	je     3432 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0] [clone .cold]>
       *
       *  @return  @a char_type representing a decimal point.
      */
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
    46e4:	49 8b 07             	mov    rax,QWORD PTR [r15]
    46e7:	4c 89 ff             	mov    rdi,r15
    46ea:	ff 50 10             	call   QWORD PTR [rax+0x10]
       *
       *  @return  string representing grouping specification.
      */
      string
      grouping() const
      { return this->do_grouping(); }
    46ed:	48 8d 7c 24 30       	lea    rdi,[rsp+0x30]
    46f2:	4c 89 fe             	mov    rsi,r15
      { return this->do_decimal_point(); }
    46f5:	88 04 24             	mov    BYTE PTR [rsp],al
    46f8:	41 89 c4             	mov    r12d,eax
      { return this->do_grouping(); }
    46fb:	49 8b 07             	mov    rax,QWORD PTR [r15]
    46fe:	ff 50 20             	call   QWORD PTR [rax+0x20]
	if (__grp.empty() && __point == __dot)
    4701:	48 83 7c 24 38 00    	cmp    QWORD PTR [rsp+0x38],0x0
    4707:	75 2f                	jne    4738 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0xd8>
    4709:	41 80 fc 2e          	cmp    r12b,0x2e
    470d:	75 29                	jne    4738 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0xd8>
    470f:	90                   	nop
      { return _M_dataplus._M_p; }
    4710:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
	if (_M_data() == _M_local_data())
    4715:	48 8d 44 24 40       	lea    rax,[rsp+0x40]
    471a:	48 39 c7             	cmp    rdi,rax
    471d:	74 85                	je     46a4 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x44>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    471f:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    4724:	48 8d 70 01          	lea    rsi,[rax+0x1]
    4728:	e8 d3 ea ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dispose(); }
    472d:	e9 72 ff ff ff       	jmp    46a4 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x44>
    4732:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      if (__pos < this->_M_len)
    4738:	48 85 ed             	test   rbp,rbp
    473b:	0f 84 0f 01 00 00    	je     4850 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1f0>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    4741:	48 89 ea             	mov    rdx,rbp
    4744:	be 2e 00 00 00       	mov    esi,0x2e
    4749:	4c 89 ef             	mov    rdi,r13
    474c:	e8 cf ea ff ff       	call   3220 <memchr@plt>
    4751:	41 0f be f6          	movsx  esi,r14b
    4755:	48 89 ea             	mov    rdx,rbp
    4758:	4c 89 ef             	mov    rdi,r13
    475b:	49 89 c4             	mov    r12,rax
    475e:	e8 bd ea ff ff       	call   3220 <memchr@plt>
	  if (__p)
    4763:	4d 85 e4             	test   r12,r12
    4766:	0f 84 cc 00 00 00    	je     4838 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1d8>
	    __ret = __p - this->_M_str;
    476c:	4d 89 e2             	mov    r10,r12
    476f:	4d 29 ea             	sub    r10,r13
	  if (__p)
    4772:	48 85 c0             	test   rax,rax
    4775:	0f 84 5d 01 00 00    	je     48d8 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x278>
	    __ret = __p - this->_M_str;
    477b:	4c 29 e8             	sub    rax,r13
    477e:	4c 39 d0             	cmp    rax,r10
    4781:	49 0f 47 c2          	cmova  rax,r10
    4785:	49 89 c4             	mov    r12,rax
	if (__e == __str.npos)
    4788:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
    478c:	0f 84 be 00 00 00    	je     4850 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1f0>
	const size_t __r = __str.size() - __e;
    4792:	49 89 eb             	mov    r11,rbp
	__lstr.__resize_and_overwrite(__e * 2 + __r, __overwrite);
    4795:	49 8d 34 2c          	lea    rsi,[r12+rbp*1]
    resize_and_overwrite(const size_type __n, _Operation __op)
#else
    __resize_and_overwrite(const size_type __n, _Operation __op)
#endif
    {
      reserve(__n);
    4799:	48 89 df             	mov    rdi,rbx
    479c:	4c 89 54 24 28       	mov    QWORD PTR [rsp+0x28],r10
	const size_t __r = __str.size() - __e;
    47a1:	4d 29 e3             	sub    r11,r12
    47a4:	4c 89 5c 24 20       	mov    QWORD PTR [rsp+0x20],r11
    47a9:	e8 72 11 00 00       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_string_length; }
    47ae:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
      { return this->do_thousands_sep(); }
    47b3:	49 8b 07             	mov    rax,QWORD PTR [r15]
    47b6:	4c 89 ff             	mov    rdi,r15
      { return _M_dataplus._M_p; }
    47b9:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
    47be:	4f 8d 4c 25 00       	lea    r9,[r13+r12*1+0x0]
    47c3:	4c 8b 33             	mov    r14,QWORD PTR [rbx]
    47c6:	4c 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],r9
      { return _M_string_length; }
    47cb:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
      { return _M_dataplus._M_p; }
    47d0:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    47d5:	ff 50 18             	call   QWORD PTR [rax+0x18]
    47d8:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
    47dd:	4c 8b 4c 24 18       	mov    r9,QWORD PTR [rsp+0x18]
    47e2:	4d 89 e8             	mov    r8,r13
    47e5:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    47ea:	0f be f0             	movsx  esi,al
    47ed:	4c 89 f7             	mov    rdi,r14
    47f0:	e8 8b 70 00 00       	call   b880 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)>
	  if (__r)
    47f5:	4c 8b 5c 24 20       	mov    r11,QWORD PTR [rsp+0x20]
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
    47fa:	48 89 c1             	mov    rcx,rax
	  if (__r)
    47fd:	4d 85 db             	test   r11,r11
    4800:	74 20                	je     4822 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1c2>
	      if (__d != __str.npos)
    4802:	4c 8b 54 24 28       	mov    r10,QWORD PTR [rsp+0x28]
    4807:	49 83 fa ff          	cmp    r10,0xffffffffffffffff
    480b:	74 0f                	je     481c <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1bc>
		  *__end = __point;
    480d:	0f b6 04 24          	movzx  eax,BYTE PTR [rsp]
		  ++__end;
    4811:	48 83 c1 01          	add    rcx,0x1
		  ++__e;
    4815:	49 83 c4 01          	add    r12,0x1
		  *__end = __point;
    4819:	88 41 ff             	mov    BYTE PTR [rcx-0x1],al
	      if (__r > 1)
    481c:	49 83 fb 01          	cmp    r11,0x1
    4820:	75 7e                	jne    48a0 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x240>
	__c1 = __c2;
    4822:	48 8b 03             	mov    rax,QWORD PTR [rbx]
	  return (__end - __p);
    4825:	4c 29 f1             	sub    rcx,r14
      { _M_string_length = __length; }
    4828:	48 89 4b 08          	mov    QWORD PTR [rbx+0x8],rcx
    482c:	c6 04 08 00          	mov    BYTE PTR [rax+rcx*1],0x0
    4830:	e9 db fe ff ff       	jmp    4710 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0xb0>
    4835:	0f 1f 00             	nop    DWORD PTR [rax]
      size_type __ret = npos;
    4838:	49 c7 c2 ff ff ff ff 	mov    r10,0xffffffffffffffff
	  if (__p)
    483f:	48 85 c0             	test   rax,rax
    4842:	0f 85 33 ff ff ff    	jne    477b <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x11b>
    4848:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    484f:	00 
	__lstr.__resize_and_overwrite(__e * 2 + __r, __overwrite);
    4850:	48 8d 74 2d 00       	lea    rsi,[rbp+rbp*1+0x0]
    4855:	48 89 df             	mov    rdi,rbx
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
    4858:	4c 01 ed             	add    rbp,r13
    485b:	e8 c0 10 00 00       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_string_length; }
    4860:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
    4865:	49 8b 07             	mov    rax,QWORD PTR [r15]
    4868:	4c 89 ff             	mov    rdi,r15
      { return _M_dataplus._M_p; }
    486b:	4c 8b 33             	mov    r14,QWORD PTR [rbx]
    486e:	4c 8b 64 24 30       	mov    r12,QWORD PTR [rsp+0x30]
      { return _M_string_length; }
    4873:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
    4877:	ff 50 18             	call   QWORD PTR [rax+0x18]
    487a:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
    487e:	49 89 e9             	mov    r9,rbp
    4881:	4d 89 e8             	mov    r8,r13
    4884:	0f be f0             	movsx  esi,al
    4887:	4c 89 e2             	mov    rdx,r12
    488a:	4c 89 f7             	mov    rdi,r14
    488d:	e8 ee 6f 00 00       	call   b880 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)>
    4892:	48 89 c1             	mov    rcx,rax
    4895:	eb 8b                	jmp    4822 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1c2>
    4897:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    489e:	00 00 
    if (__pos > __size)
    48a0:	4c 39 e5             	cmp    rbp,r12
    48a3:	0f 82 8e eb ff ff    	jb     3437 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0] [clone .cold]+0x5>
	if (__n == 0)
    48a9:	4c 29 e5             	sub    rbp,r12
    48ac:	75 12                	jne    48c0 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x260>
		__end += __str.copy(__end, __str.npos, __e);
    48ae:	48 01 e9             	add    rcx,rbp
    48b1:	e9 6c ff ff ff       	jmp    4822 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1c2>
    48b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    48bd:	00 00 00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    48c0:	48 89 cf             	mov    rdi,rcx
	__glibcxx_requires_string_len(__str, __n);
	__pos = std::__sv_check(size(), __pos, "basic_string_view::copy");
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
	// _GLIBCXX_RESOLVE_LIB_DEFECTS
	// 2777. basic_string_view::copy should use char_traits::copy
	traits_type::copy(__str, data() + __pos, __rlen);
    48c3:	4b 8d 74 25 00       	lea    rsi,[r13+r12*1+0x0]
    48c8:	48 89 ea             	mov    rdx,rbp
    48cb:	e8 e0 e8 ff ff       	call   31b0 <memcpy@plt>
    48d0:	48 89 c1             	mov    rcx,rax
    48d3:	eb d9                	jmp    48ae <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x24e>
    48d5:	0f 1f 00             	nop    DWORD PTR [rax]
    48d8:	4d 89 d4             	mov    r12,r10
    48db:	e9 a8 fe ff ff       	jmp    4788 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x128>

00000000000048e0 <std::thread::_M_thread_deps_never_run()>:
    }
    48e0:	c3                   	ret
    48e1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    48e8:	00 00 00 
    48eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000048f0 <std::__format::_Sink<char>::_M_reserve(unsigned long)>:
      _M_reserve(size_t __n)
    48f0:	53                   	push   rbx
    48f1:	48 89 f3             	mov    rbx,rsi
    48f4:	48 89 f8             	mov    rax,rdi
    48f7:	48 83 ec 10          	sub    rsp,0x10
	{ return this->_M_extent_value; }
    48fb:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
    { return __lhs.base() - __rhs.base(); }
    48ff:	48 8b 57 18          	mov    rdx,QWORD PTR [rdi+0x18]
    4903:	48 2b 57 08          	sub    rdx,QWORD PTR [rdi+0x8]
	  __count = this->size() - __offset;
    4907:	48 89 ce             	mov    rsi,rcx
    490a:	48 29 d6             	sub    rsi,rdx
	if (__n <= _M_unused().size())
    490d:	48 39 de             	cmp    rsi,rbx
    4910:	73 28                	jae    493a <std::__format::_Sink<char>::_M_reserve(unsigned long)+0x4a>
	if (__n <= _M_span.size()) // Cannot meet the request.
    4912:	48 39 d9             	cmp    rcx,rbx
    4915:	72 29                	jb     4940 <std::__format::_Sink<char>::_M_reserve(unsigned long)+0x50>
	    _M_overflow(); // Make more space available.
    4917:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    491a:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
    491f:	ff 12                	call   QWORD PTR [rdx]
    4921:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    4926:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
    492a:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
    492e:	48 2b 48 08          	sub    rcx,QWORD PTR [rax+0x8]
    4932:	48 29 ca             	sub    rdx,rcx
	    if (__n <= _M_unused().size())
    4935:	48 39 da             	cmp    rdx,rbx
    4938:	72 06                	jb     4940 <std::__format::_Sink<char>::_M_reserve(unsigned long)+0x50>
      }
    493a:	48 83 c4 10          	add    rsp,0x10
    493e:	5b                   	pop    rbx
    493f:	c3                   	ret
    4940:	48 83 c4 10          	add    rsp,0x10
	return { nullptr };
    4944:	31 c0                	xor    eax,eax
      }
    4946:	5b                   	pop    rbx
    4947:	c3                   	ret
    4948:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    494f:	00 

0000000000004950 <std::__format::_Sink<char>::_M_bump(unsigned long)>:
      { _M_current += __n; return *this; }
    4950:	48 01 77 18          	add    QWORD PTR [rdi+0x18],rsi
      { _M_next += __n; }
    4954:	c3                   	ret
    4955:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    495c:	00 00 00 
    495f:	90                   	nop

0000000000004960 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >::~_State_impl()>:
      struct _State_impl : public _State
    4960:	48 8d 05 01 70 01 00 	lea    rax,[rip+0x17001]        # 1b968 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >+0x10>
    4967:	48 89 07             	mov    QWORD PTR [rdi],rax
    496a:	e9 91 e7 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    496f:	90                   	nop

0000000000004970 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >::~_State_impl()>:
    4970:	48 8d 05 f1 6f 01 00 	lea    rax,[rip+0x16ff1]        # 1b968 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >+0x10>
    4977:	53                   	push   rbx
    4978:	48 89 fb             	mov    rbx,rdi
    497b:	48 89 07             	mov    QWORD PTR [rdi],rax
    497e:	e8 7d e7 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4983:	48 89 df             	mov    rdi,rbx
    4986:	be 20 00 00 00       	mov    esi,0x20
    498b:	5b                   	pop    rbx
    498c:	e9 6f e8 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4991:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4998:	00 00 00 
    499b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000049a0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >::~_State_impl()>:
    49a0:	48 8d 05 89 70 01 00 	lea    rax,[rip+0x17089]        # 1ba30 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >+0x10>
    49a7:	48 89 07             	mov    QWORD PTR [rdi],rax
    49aa:	e9 51 e7 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    49af:	90                   	nop

00000000000049b0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >::~_State_impl()>:
    49b0:	48 8d 05 79 70 01 00 	lea    rax,[rip+0x17079]        # 1ba30 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >+0x10>
    49b7:	53                   	push   rbx
    49b8:	48 89 fb             	mov    rbx,rdi
    49bb:	48 89 07             	mov    QWORD PTR [rdi],rax
    49be:	e8 3d e7 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    49c3:	48 89 df             	mov    rdi,rbx
    49c6:	be 20 00 00 00       	mov    esi,0x20
    49cb:	5b                   	pop    rbx
    49cc:	e9 2f e8 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    49d1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    49d8:	00 00 00 
    49db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000049e0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >::~_State_impl()>:
    49e0:	48 8d 05 21 70 01 00 	lea    rax,[rip+0x17021]        # 1ba08 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >+0x10>
    49e7:	48 89 07             	mov    QWORD PTR [rdi],rax
    49ea:	e9 11 e7 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    49ef:	90                   	nop

00000000000049f0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >::~_State_impl()>:
    49f0:	48 8d 05 11 70 01 00 	lea    rax,[rip+0x17011]        # 1ba08 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >+0x10>
    49f7:	53                   	push   rbx
    49f8:	48 89 fb             	mov    rbx,rdi
    49fb:	48 89 07             	mov    QWORD PTR [rdi],rax
    49fe:	e8 fd e6 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4a03:	48 89 df             	mov    rdi,rbx
    4a06:	be 20 00 00 00       	mov    esi,0x20
    4a0b:	5b                   	pop    rbx
    4a0c:	e9 ef e7 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4a11:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4a18:	00 00 00 
    4a1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004a20 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >::~_State_impl()>:
    4a20:	48 8d 05 b9 6f 01 00 	lea    rax,[rip+0x16fb9]        # 1b9e0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >+0x10>
    4a27:	48 89 07             	mov    QWORD PTR [rdi],rax
    4a2a:	e9 d1 e6 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4a2f:	90                   	nop

0000000000004a30 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >::~_State_impl()>:
    4a30:	48 8d 05 a9 6f 01 00 	lea    rax,[rip+0x16fa9]        # 1b9e0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >+0x10>
    4a37:	53                   	push   rbx
    4a38:	48 89 fb             	mov    rbx,rdi
    4a3b:	48 89 07             	mov    QWORD PTR [rdi],rax
    4a3e:	e8 bd e6 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4a43:	48 89 df             	mov    rdi,rbx
    4a46:	be 20 00 00 00       	mov    esi,0x20
    4a4b:	5b                   	pop    rbx
    4a4c:	e9 af e7 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4a51:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4a58:	00 00 00 
    4a5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004a60 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >::~_State_impl()>:
    4a60:	48 8d 05 51 6f 01 00 	lea    rax,[rip+0x16f51]        # 1b9b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >+0x10>
    4a67:	48 89 07             	mov    QWORD PTR [rdi],rax
    4a6a:	e9 91 e6 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4a6f:	90                   	nop

0000000000004a70 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >::~_State_impl()>:
    4a70:	48 8d 05 41 6f 01 00 	lea    rax,[rip+0x16f41]        # 1b9b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >+0x10>
    4a77:	53                   	push   rbx
    4a78:	48 89 fb             	mov    rbx,rdi
    4a7b:	48 89 07             	mov    QWORD PTR [rdi],rax
    4a7e:	e8 7d e6 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4a83:	48 89 df             	mov    rdi,rbx
    4a86:	be 20 00 00 00       	mov    esi,0x20
    4a8b:	5b                   	pop    rbx
    4a8c:	e9 6f e7 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4a91:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4a98:	00 00 00 
    4a9b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004aa0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >::~_State_impl()>:
    4aa0:	48 8d 05 e9 6e 01 00 	lea    rax,[rip+0x16ee9]        # 1b990 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >+0x10>
    4aa7:	48 89 07             	mov    QWORD PTR [rdi],rax
    4aaa:	e9 51 e6 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4aaf:	90                   	nop

0000000000004ab0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >::~_State_impl()>:
    4ab0:	48 8d 05 d9 6e 01 00 	lea    rax,[rip+0x16ed9]        # 1b990 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >+0x10>
    4ab7:	53                   	push   rbx
    4ab8:	48 89 fb             	mov    rbx,rdi
    4abb:	48 89 07             	mov    QWORD PTR [rdi],rax
    4abe:	e8 3d e6 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4ac3:	48 89 df             	mov    rdi,rbx
    4ac6:	be 20 00 00 00       	mov    esi,0x20
    4acb:	5b                   	pop    rbx
    4acc:	e9 2f e7 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4ad1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4ad8:	00 00 00 
    4adb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004ae0 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()>:
      _M_overflow() override
    4ae0:	41 57                	push   r15
    4ae2:	41 56                	push   r14
    4ae4:	41 55                	push   r13
    4ae6:	41 54                	push   r12
    4ae8:	55                   	push   rbp
    4ae9:	48 89 fd             	mov    rbp,rdi
    4aec:	53                   	push   rbx
    4aed:	48 83 ec 38          	sub    rsp,0x38
    { return __lhs.base() - __rhs.base(); }
    4af1:	4c 8b 6f 18          	mov    r13,QWORD PTR [rdi+0x18]
      : _M_current(__i) { }
    4af5:	48 8b 5f 08          	mov    rbx,QWORD PTR [rdi+0x8]
	if (_M_max < 0) // No maximum.
    4af9:	4c 8b a7 30 01 00 00 	mov    r12,QWORD PTR [rdi+0x130]
    { return __lhs.base() - __rhs.base(); }
    4b00:	4d 89 ee             	mov    r14,r13
    4b03:	49 29 de             	sub    r14,rbx
    4b06:	4d 85 e4             	test   r12,r12
    4b09:	0f 88 e9 00 00 00    	js     4bf8 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x118>
	else if (_M_count < static_cast<size_t>(_M_max))
    4b0f:	48 8b 87 38 01 00 00 	mov    rax,QWORD PTR [rdi+0x138]
    4b16:	4c 39 e0             	cmp    rax,r12
    4b19:	0f 83 b9 00 00 00    	jae    4bd8 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xf8>
	    auto __max = _M_max - _M_count;
    4b1f:	49 29 c4             	sub    r12,rax
    4b22:	f3 0f 6f 87 20 01 00 	movdqu xmm0,XMMWORD PTR [rdi+0x120]
    4b29:	00 
	    if (__max < __s.size())
    4b2a:	4d 39 f4             	cmp    r12,r14
    4b2d:	4d 0f 47 e6          	cmova  r12,r14
      ostream_iterator(const ostream_iterator& __obj) _GLIBCXX_NOEXCEPT
    4b31:	0f 12 e0             	movhlps xmm4,xmm0
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }
    4b34:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
    4b39:	66 49 0f 7e c7       	movq   r15,xmm0
			sizeof(_ValueTypeI) * __num);
		  return {__first + __num, __result + __num};
		}
	    }

	  for (auto __n = __last - __first; __n > 0; --__n)
    4b3e:	66 49 0f 7e e5       	movq   r13,xmm4
    4b43:	4d 85 e4             	test   r12,r12
    4b46:	0f 8e 7f 00 00 00    	jle    4bcb <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xeb>
  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    {
      if (__out.width() != 0)
	return __ostream_insert(__out, &__c, 1);
    4b4c:	48 8d 44 24 2f       	lea    rax,[rsp+0x2f]
    4b51:	49 01 dc             	add    r12,rbx
    4b54:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    4b59:	eb 3b                	jmp    4b96 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xb6>
    4b5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    4b60:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    4b65:	ba 01 00 00 00       	mov    edx,0x1
    4b6a:	4c 89 ff             	mov    rdi,r15
    4b6d:	e8 ce e6 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
      {
	__glibcxx_requires_cond(_M_stream != 0,
				_M_message(__gnu_debug::__msg_output_ostream)
				._M_iterator(*this));
	*_M_stream << __value;
	if (_M_string)
    4b72:	4d 85 ed             	test   r13,r13
    4b75:	74 16                	je     4b8d <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xad>
	return __builtin_strlen(__s);
    4b77:	4c 89 ef             	mov    rdi,r13
    4b7a:	e8 71 e5 ff ff       	call   30f0 <strlen@plt>
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
    4b7f:	4c 89 ee             	mov    rsi,r13
    4b82:	4c 89 ff             	mov    rdi,r15
    4b85:	48 89 c2             	mov    rdx,rax
    4b88:	e8 b3 e6 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
	    {
	      if constexpr (_IsMove)
		*__result = std::move(*__first);
	      else
		*__result = *__first;
	      ++__first;
    4b8d:	48 83 c3 01          	add    rbx,0x1
	  for (auto __n = __last - __first; __n > 0; --__n)
    4b91:	4c 39 e3             	cmp    rbx,r12
    4b94:	74 2a                	je     4bc0 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xe0>
    4b96:	0f be 33             	movsx  esi,BYTE PTR [rbx]
      operator=(const _Tp& __value)
    4b99:	40 88 74 24 2f       	mov    BYTE PTR [rsp+0x2f],sil
      if (__out.width() != 0)
    4b9e:	49 8b 07             	mov    rax,QWORD PTR [r15]
     *
     *  <em>Minimum field width</em> refers to the number of characters.
    */
    streamsize
    width() const
    { return _M_width; }
    4ba1:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    4ba5:	49 83 7c 07 10 00    	cmp    QWORD PTR [r15+rax*1+0x10],0x0
    4bab:	75 b3                	jne    4b60 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x80>
      __out.put(__c);
    4bad:	4c 89 ff             	mov    rdi,r15
    4bb0:	e8 7b e4 ff ff       	call   3030 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt>
      return __out;
    4bb5:	eb bb                	jmp    4b72 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x92>
    4bb7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    4bbe:	00 00 
      : _M_current(__i) { }
    4bc0:	48 8b 5d 08          	mov    rbx,QWORD PTR [rbp+0x8]
	_M_count += __s.size();
    4bc4:	48 8b 85 38 01 00 00 	mov    rax,QWORD PTR [rbp+0x138]
	    _M_out = ranges::copy(__first, std::move(_M_out)).out;
    4bcb:	66 0f 6f 54 24 10    	movdqa xmm2,XMMWORD PTR [rsp+0x10]
    4bd1:	0f 11 95 20 01 00 00 	movups XMMWORD PTR [rbp+0x120],xmm2
	_M_count += __s.size();
    4bd8:	49 01 c6             	add    r14,rax
      { _M_next = _M_span.begin(); }
    4bdb:	48 89 5d 18          	mov    QWORD PTR [rbp+0x18],rbx
	_M_count += __s.size();
    4bdf:	4c 89 b5 38 01 00 00 	mov    QWORD PTR [rbp+0x138],r14
      }
    4be6:	48 83 c4 38          	add    rsp,0x38
    4bea:	5b                   	pop    rbx
    4beb:	5d                   	pop    rbp
    4bec:	41 5c                	pop    r12
    4bee:	41 5d                	pop    r13
    4bf0:	41 5e                	pop    r14
    4bf2:	41 5f                	pop    r15
    4bf4:	c3                   	ret
    4bf5:	0f 1f 00             	nop    DWORD PTR [rax]
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }
    4bf8:	f3 0f 6f 8f 20 01 00 	movdqu xmm1,XMMWORD PTR [rdi+0x120]
    4bff:	00 
    4c00:	0f 12 e9             	movhlps xmm5,xmm1
    4c03:	0f 29 4c 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm1
    4c08:	66 49 0f 7e cf       	movq   r15,xmm1
    4c0d:	66 49 0f 7e ec       	movq   r12,xmm5
    4c12:	4d 85 f6             	test   r14,r14
    4c15:	7e 6d                	jle    4c84 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x1a4>
	return __ostream_insert(__out, &__c, 1);
    4c17:	48 8d 44 24 2f       	lea    rax,[rsp+0x2f]
    4c1c:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    4c21:	eb 3b                	jmp    4c5e <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x17e>
    4c23:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    4c28:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    4c2d:	ba 01 00 00 00       	mov    edx,0x1
    4c32:	4c 89 ff             	mov    rdi,r15
    4c35:	e8 06 e6 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
	if (_M_string)
    4c3a:	4d 85 e4             	test   r12,r12
    4c3d:	74 16                	je     4c55 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x175>
    4c3f:	4c 89 e7             	mov    rdi,r12
    4c42:	e8 a9 e4 ff ff       	call   30f0 <strlen@plt>
	__ostream_insert(__out, __s,
    4c47:	4c 89 e6             	mov    rsi,r12
    4c4a:	4c 89 ff             	mov    rdi,r15
    4c4d:	48 89 c2             	mov    rdx,rax
    4c50:	e8 eb e5 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
	      ++__first;
    4c55:	48 83 c3 01          	add    rbx,0x1
	  for (auto __n = __last - __first; __n > 0; --__n)
    4c59:	49 39 dd             	cmp    r13,rbx
    4c5c:	74 22                	je     4c80 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x1a0>
    4c5e:	0f be 33             	movsx  esi,BYTE PTR [rbx]
      operator=(const _Tp& __value)
    4c61:	40 88 74 24 2f       	mov    BYTE PTR [rsp+0x2f],sil
      if (__out.width() != 0)
    4c66:	49 8b 07             	mov    rax,QWORD PTR [r15]
    4c69:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    4c6d:	49 83 7c 07 10 00    	cmp    QWORD PTR [r15+rax*1+0x10],0x0
    4c73:	75 b3                	jne    4c28 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x148>
      __out.put(__c);
    4c75:	4c 89 ff             	mov    rdi,r15
    4c78:	e8 b3 e3 ff ff       	call   3030 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt>
      return __out;
    4c7d:	eb bb                	jmp    4c3a <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x15a>
    4c7f:	90                   	nop
    4c80:	48 8b 5d 08          	mov    rbx,QWORD PTR [rbp+0x8]
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
    4c84:	66 0f 6f 5c 24 10    	movdqa xmm3,XMMWORD PTR [rsp+0x10]
	_M_count += __s.size();
    4c8a:	48 8b 85 38 01 00 00 	mov    rax,QWORD PTR [rbp+0x138]
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
    4c91:	0f 11 9d 20 01 00 00 	movups XMMWORD PTR [rbp+0x120],xmm3
    4c98:	e9 3b ff ff ff       	jmp    4bd8 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xf8>
    4c9d:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4ca4:	00 00 00 
    4ca7:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4cae:	00 00 00 
    4cb1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4cb8:	00 00 00 
    4cbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004cc0 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()>:
      _M_overflow() override
    4cc0:	41 57                	push   r15
    4cc2:	41 56                	push   r14
    4cc4:	41 55                	push   r13
    4cc6:	41 54                	push   r12
    4cc8:	49 89 fc             	mov    r12,rdi
    4ccb:	55                   	push   rbp
    4ccc:	53                   	push   rbx
    4ccd:	48 83 ec 08          	sub    rsp,0x8
    { return __lhs.base() - __rhs.base(); }
    4cd1:	4c 8b 7f 18          	mov    r15,QWORD PTR [rdi+0x18]
      : _M_current(__i) { }
    4cd5:	48 8b 5f 08          	mov    rbx,QWORD PTR [rdi+0x8]
	if (_M_max < 0) // No maximum.
    4cd9:	4c 8b af 28 01 00 00 	mov    r13,QWORD PTR [rdi+0x128]
    { return __lhs.base() - __rhs.base(); }
    4ce0:	4d 89 fe             	mov    r14,r15
    4ce3:	49 29 de             	sub    r14,rbx
    4ce6:	4d 85 ed             	test   r13,r13
    4ce9:	0f 88 c1 00 00 00    	js     4db0 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xf0>
	else if (_M_count < static_cast<size_t>(_M_max))
    4cef:	48 8b 87 30 01 00 00 	mov    rax,QWORD PTR [rdi+0x130]
    4cf6:	4c 39 e8             	cmp    rax,r13
    4cf9:	0f 83 7e 00 00 00    	jae    4d7d <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xbd>
	    auto __max = _M_max - _M_count;
    4cff:	49 29 c5             	sub    r13,rax
    4d02:	48 8b af 20 01 00 00 	mov    rbp,QWORD PTR [rdi+0x120]
	    if (__max < __s.size())
    4d09:	4d 39 f5             	cmp    r13,r14
    4d0c:	4d 0f 47 ee          	cmova  r13,r14
    4d10:	4d 85 ed             	test   r13,r13
    4d13:	7e 60                	jle    4d75 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xb5>
    4d15:	49 01 dd             	add    r13,rbx
    4d18:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4d1f:	00 00 00 00 
    4d23:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4d2a:	00 00 00 00 
    4d2e:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4d35:	00 00 00 00 
    4d39:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      { return __normal_iterator(_M_current++); }
    4d40:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
		*__result = *__first;
    4d44:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
    4d47:	48 8d 48 01          	lea    rcx,[rax+0x1]
    4d4b:	48 89 4d 18          	mov    QWORD PTR [rbp+0x18],rcx
	*_M_next++ = __c;
    4d4f:	88 10                	mov    BYTE PTR [rax],dl
    { return __lhs.base() - __rhs.base(); }
    4d51:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
    4d55:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    4d59:	48 3b 45 10          	cmp    rax,QWORD PTR [rbp+0x10]
    4d5d:	74 41                	je     4da0 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xe0>
	      ++__first;
    4d5f:	48 83 c3 01          	add    rbx,0x1
	  for (auto __n = __last - __first; __n > 0; --__n)
    4d63:	4c 39 eb             	cmp    rbx,r13
    4d66:	75 d8                	jne    4d40 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x80>
      : _M_current(__i) { }
    4d68:	49 8b 5c 24 08       	mov    rbx,QWORD PTR [r12+0x8]
	_M_count += __s.size();
    4d6d:	49 8b 84 24 30 01 00 	mov    rax,QWORD PTR [r12+0x130]
    4d74:	00 
	    _M_out = ranges::copy(__first, std::move(_M_out)).out;
    4d75:	49 89 ac 24 20 01 00 	mov    QWORD PTR [r12+0x120],rbp
    4d7c:	00 
	_M_count += __s.size();
    4d7d:	49 01 c6             	add    r14,rax
      { _M_next = _M_span.begin(); }
    4d80:	49 89 5c 24 18       	mov    QWORD PTR [r12+0x18],rbx
	_M_count += __s.size();
    4d85:	4d 89 b4 24 30 01 00 	mov    QWORD PTR [r12+0x130],r14
    4d8c:	00 
      }
    4d8d:	48 83 c4 08          	add    rsp,0x8
    4d91:	5b                   	pop    rbx
    4d92:	5d                   	pop    rbp
    4d93:	41 5c                	pop    r12
    4d95:	41 5d                	pop    r13
    4d97:	41 5e                	pop    r14
    4d99:	41 5f                	pop    r15
    4d9b:	c3                   	ret
    4d9c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  _M_overflow();
    4da0:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    4da4:	48 89 ef             	mov    rdi,rbp
    4da7:	ff 10                	call   QWORD PTR [rax]
      }
    4da9:	eb b4                	jmp    4d5f <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x9f>
    4dab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    4db0:	48 8b af 20 01 00 00 	mov    rbp,QWORD PTR [rdi+0x120]
    4db7:	4d 85 f6             	test   r14,r14
    4dba:	7e 31                	jle    4ded <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x12d>
    4dbc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      { return __normal_iterator(_M_current++); }
    4dc0:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
		*__result = *__first;
    4dc4:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
    4dc7:	48 8d 48 01          	lea    rcx,[rax+0x1]
    4dcb:	48 89 4d 18          	mov    QWORD PTR [rbp+0x18],rcx
	*_M_next++ = __c;
    4dcf:	88 10                	mov    BYTE PTR [rax],dl
    { return __lhs.base() - __rhs.base(); }
    4dd1:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
    4dd5:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    4dd9:	48 3b 45 10          	cmp    rax,QWORD PTR [rbp+0x10]
    4ddd:	74 29                	je     4e08 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x148>
	      ++__first;
    4ddf:	48 83 c3 01          	add    rbx,0x1
	  for (auto __n = __last - __first; __n > 0; --__n)
    4de3:	49 39 df             	cmp    r15,rbx
    4de6:	75 d8                	jne    4dc0 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x100>
      : _M_current(__i) { }
    4de8:	49 8b 5c 24 08       	mov    rbx,QWORD PTR [r12+0x8]
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
    4ded:	49 89 ac 24 20 01 00 	mov    QWORD PTR [r12+0x120],rbp
    4df4:	00 
	_M_count += __s.size();
    4df5:	49 8b 84 24 30 01 00 	mov    rax,QWORD PTR [r12+0x130]
    4dfc:	00 
    4dfd:	e9 7b ff ff ff       	jmp    4d7d <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xbd>
    4e02:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  _M_overflow();
    4e08:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    4e0c:	48 89 ef             	mov    rdi,rbp
    4e0f:	ff 10                	call   QWORD PTR [rax]
      }
    4e11:	eb cc                	jmp    4ddf <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x11f>
    4e13:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4e1a:	00 00 00 
    4e1d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000004e20 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)>:
      _M_on_chars(iterator __last) override
    4e20:	41 56                	push   r14
    4e22:	41 55                	push   r13
    4e24:	41 54                	push   r12
    4e26:	55                   	push   rbp
    4e27:	53                   	push   rbx
	_M_fc.advance_to(__format::__write(_M_fc.out(), __str));
    4e28:	4c 8b 77 30          	mov    r14,QWORD PTR [rdi+0x30]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    4e2c:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
      iterator out() { return std::move(_M_out); }
    4e30:	49 8b 6e 10          	mov    rbp,QWORD PTR [r14+0x10]
	  if (__str.size())
    4e34:	4c 29 ee             	sub    rsi,r13
    4e37:	75 17                	jne    4e50 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x30>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
    4e39:	49 89 6e 10          	mov    QWORD PTR [r14+0x10],rbp
      }
    4e3d:	5b                   	pop    rbx
    4e3e:	5d                   	pop    rbp
    4e3f:	41 5c                	pop    r12
    4e41:	41 5d                	pop    r13
    4e43:	41 5e                	pop    r14
    4e45:	c3                   	ret
    4e46:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4e4d:	00 00 00 
    { return __lhs.base() - __rhs.base(); }
    4e50:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    4e54:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    4e58:	49 89 f4             	mov    r12,rsi
    4e5b:	48 89 f8             	mov    rax,rdi
    4e5e:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    4e62:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    4e65:	48 39 de             	cmp    rsi,rbx
    4e68:	72 4c                	jb     4eb6 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x96>
    4e6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    4e70:	49 39 dc             	cmp    r12,rbx
    4e73:	48 89 da             	mov    rdx,rbx
    4e76:	49 0f 46 d4          	cmovbe rdx,r12
	if (__n == 0)
    4e7a:	48 85 d2             	test   rdx,rdx
    4e7d:	74 08                	je     4e87 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x67>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    4e7f:	4c 89 ee             	mov    rsi,r13
    4e82:	e8 29 e3 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    4e87:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
      { _M_current += __n; return *this; }
    4e8b:	48 01 5d 18          	add    QWORD PTR [rbp+0x18],rbx
    4e8f:	48 89 ef             	mov    rdi,rbp
	this->_M_str += __n;
    4e92:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
    4e95:	49 29 dc             	sub    r12,rbx
    4e98:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    4e9a:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    4e9e:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    4ea2:	48 89 f8             	mov    rax,rdi
    4ea5:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    4ea9:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    4eac:	49 39 dc             	cmp    r12,rbx
    4eaf:	73 bf                	jae    4e70 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x50>
	if (__s.size())
    4eb1:	4d 85 e4             	test   r12,r12
    4eb4:	74 83                	je     4e39 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x19>
    4eb6:	4c 89 e2             	mov    rdx,r12
    4eb9:	4c 89 ee             	mov    rsi,r13
    4ebc:	e8 ef e2 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    4ec1:	4c 01 65 18          	add    QWORD PTR [rbp+0x18],r12
      void advance_to(iterator __it) { _M_out = std::move(__it); }
    4ec5:	49 89 6e 10          	mov    QWORD PTR [r14+0x10],rbp
      }
    4ec9:	5b                   	pop    rbx
    4eca:	5d                   	pop    rbp
    4ecb:	41 5c                	pop    r12
    4ecd:	41 5d                	pop    r13
    4ecf:	41 5e                	pop    r14
    4ed1:	c3                   	ret
    4ed2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4ed9:	00 00 00 
    4edc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004ee0 <non_atomic_write::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) { // At -O2 this loop is completely optimized away
    4ee0:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    4ee3:	85 c0                	test   eax,eax
    4ee5:	74 15                	je     4efc <non_atomic_write::operator()()+0x1c>
			x = i;
    4ee7:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
			y = i;
    4eea:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
		for (std::uint32_t i=0; i<niter; ++i) { // At -O2 this loop is completely optimized away
    4eee:	31 c0                	xor    eax,eax
			x = i;
    4ef0:	89 01                	mov    DWORD PTR [rcx],eax
			y = i;
    4ef2:	89 02                	mov    DWORD PTR [rdx],eax
		for (std::uint32_t i=0; i<niter; ++i) { // At -O2 this loop is completely optimized away
    4ef4:	83 c0 01             	add    eax,0x1
    4ef7:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    4efa:	72 f4                	jb     4ef0 <non_atomic_write::operator()()+0x10>
	}
    4efc:	c3                   	ret
    4efd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000004f00 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >::_M_run()>:
	_GLIBCXX20_CONSTEXPR
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    4f00:	48 83 c7 08          	add    rdi,0x8
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
    4f04:	e9 d7 ff ff ff       	jmp    4ee0 <non_atomic_write::operator()()>
    4f09:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4f10:	00 00 00 
    4f13:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4f1a:	00 00 00 
    4f1d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000004f20 <non_atomic_read::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    4f20:	8b 57 10             	mov    edx,DWORD PTR [rdi+0x10]
    4f23:	85 d2                	test   edx,edx
    4f25:	74 2c                	je     4f53 <non_atomic_read::operator()()+0x33>
			std::uint32_t yy = y;
    4f27:	48 8b 77 08          	mov    rsi,QWORD PTR [rdi+0x8]
			std::uint32_t xx = x;
    4f2b:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
		for (std::uint32_t i=0; i<niter; ++i) {
    4f2e:	31 c0                	xor    eax,eax
    4f30:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4f37:	00 00 00 00 
    4f3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
			if (xx < yy) { ++count_mismatch; }
    4f40:	44 8b 06             	mov    r8d,DWORD PTR [rsi]
    4f43:	44 39 01             	cmp    DWORD PTR [rcx],r8d
    4f46:	73 04                	jae    4f4c <non_atomic_read::operator()()+0x2c>
    4f48:	83 47 14 01          	add    DWORD PTR [rdi+0x14],0x1
		for (std::uint32_t i=0; i<niter; ++i) {
    4f4c:	83 c0 01             	add    eax,0x1
    4f4f:	39 d0                	cmp    eax,edx
    4f51:	75 ed                	jne    4f40 <non_atomic_read::operator()()+0x20>
	}
    4f53:	c3                   	ret
    4f54:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4f5b:	00 00 00 
    4f5e:	66 90                	xchg   ax,ax

0000000000004f60 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >::_M_run()>:
    4f60:	48 83 c7 08          	add    rdi,0x8
    4f64:	e9 b7 ff ff ff       	jmp    4f20 <non_atomic_read::operator()()>
    4f69:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4f70:	00 00 00 
    4f73:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4f7a:	00 00 00 
    4f7d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000004f80 <relaxed_relaxed_write::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    4f80:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    4f83:	85 c0                	test   eax,eax
    4f85:	74 2c                	je     4fb3 <relaxed_relaxed_write::operator()()+0x33>
    4f87:	31 c0                	xor    eax,eax
    4f89:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4f90:	00 00 00 00 
    4f94:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4f9b:	00 00 00 00 
    4f9f:	90                   	nop
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
    4fa0:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    4fa3:	89 02                	mov    DWORD PTR [rdx],eax
    4fa5:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
    4fa9:	89 02                	mov    DWORD PTR [rdx],eax
    4fab:	83 c0 01             	add    eax,0x1
    4fae:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    4fb1:	72 ed                	jb     4fa0 <relaxed_relaxed_write::operator()()+0x20>
	}
    4fb3:	c3                   	ret
    4fb4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4fbb:	00 00 00 
    4fbe:	66 90                	xchg   ax,ax

0000000000004fc0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >::_M_run()>:
    4fc0:	48 83 c7 08          	add    rdi,0x8
    4fc4:	e9 b7 ff ff ff       	jmp    4f80 <relaxed_relaxed_write::operator()()>
    4fc9:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4fd0:	00 00 00 
    4fd3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4fda:	00 00 00 
    4fdd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000004fe0 <relaxed_relaxed_read::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    4fe0:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    4fe3:	85 c0                	test   eax,eax
    4fe5:	74 2e                	je     5015 <relaxed_relaxed_read::operator()()+0x35>
    4fe7:	4c 8b 47 08          	mov    r8,QWORD PTR [rdi+0x8]
    4feb:	48 8b 37             	mov    rsi,QWORD PTR [rdi]
    4fee:	31 c0                	xor    eax,eax
    4ff0:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4ff7:	00 00 00 00 
    4ffb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
    5000:	41 8b 10             	mov    edx,DWORD PTR [r8]
    5003:	8b 0e                	mov    ecx,DWORD PTR [rsi]
			if (xx < yy) { ++count_mismatch; }
    5005:	39 d1                	cmp    ecx,edx
    5007:	73 04                	jae    500d <relaxed_relaxed_read::operator()()+0x2d>
    5009:	83 47 14 01          	add    DWORD PTR [rdi+0x14],0x1
		for (std::uint32_t i=0; i<niter; ++i) {
    500d:	83 c0 01             	add    eax,0x1
    5010:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    5013:	72 eb                	jb     5000 <relaxed_relaxed_read::operator()()+0x20>
	}
    5015:	c3                   	ret
    5016:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    501d:	00 00 00 

0000000000005020 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >::_M_run()>:
    5020:	48 83 c7 08          	add    rdi,0x8
    5024:	e9 b7 ff ff ff       	jmp    4fe0 <relaxed_relaxed_read::operator()()>
    5029:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5030:	00 00 00 
    5033:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    503a:	00 00 00 
    503d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000005040 <relaxed_release_write::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    5040:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    5043:	85 c0                	test   eax,eax
    5045:	74 2c                	je     5073 <relaxed_release_write::operator()()+0x33>
    5047:	31 c0                	xor    eax,eax
    5049:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    5050:	00 00 00 00 
    5054:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    505b:	00 00 00 00 
    505f:	90                   	nop
	__atomic_store_n(&_M_i, __i, int(__m));
    5060:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    5063:	89 02                	mov    DWORD PTR [rdx],eax
    5065:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
    5069:	89 02                	mov    DWORD PTR [rdx],eax
    506b:	83 c0 01             	add    eax,0x1
    506e:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    5071:	72 ed                	jb     5060 <relaxed_release_write::operator()()+0x20>
	}
    5073:	c3                   	ret
    5074:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    507b:	00 00 00 
    507e:	66 90                	xchg   ax,ax

0000000000005080 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >::_M_run()>:
    5080:	48 83 c7 08          	add    rdi,0x8
    5084:	e9 b7 ff ff ff       	jmp    5040 <relaxed_release_write::operator()()>
    5089:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5090:	00 00 00 
    5093:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    509a:	00 00 00 
    509d:	0f 1f 00             	nop    DWORD PTR [rax]

00000000000050a0 <acquire_relaxed_read::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    50a0:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    50a3:	85 c0                	test   eax,eax
    50a5:	74 34                	je     50db <acquire_relaxed_read::operator()()+0x3b>
    50a7:	31 c0                	xor    eax,eax
    50a9:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    50b0:	00 00 00 00 
    50b4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    50bb:	00 00 00 00 
    50bf:	90                   	nop
	return __atomic_load_n(&_M_i, int(__m));
    50c0:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
    50c4:	8b 12                	mov    edx,DWORD PTR [rdx]
    50c6:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
    50c9:	8b 09                	mov    ecx,DWORD PTR [rcx]
			if (xx < yy) { ++count_mismatch; }
    50cb:	39 d1                	cmp    ecx,edx
    50cd:	73 04                	jae    50d3 <acquire_relaxed_read::operator()()+0x33>
    50cf:	83 47 14 01          	add    DWORD PTR [rdi+0x14],0x1
		for (std::uint32_t i=0; i<niter; ++i) {
    50d3:	83 c0 01             	add    eax,0x1
    50d6:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    50d9:	72 e5                	jb     50c0 <acquire_relaxed_read::operator()()+0x20>
	}
    50db:	c3                   	ret
    50dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000000050e0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >::_M_run()>:
    50e0:	48 83 c7 08          	add    rdi,0x8
    50e4:	e9 b7 ff ff ff       	jmp    50a0 <acquire_relaxed_read::operator()()>
    50e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000050f0 <std::__format::_Scanner<char>::_M_scan()>:
      _M_scan()
    50f0:	41 57                	push   r15
    50f2:	41 56                	push   r14
    50f4:	41 55                	push   r13
    50f6:	41 54                	push   r12
    50f8:	55                   	push   rbp
    50f9:	48 89 fd             	mov    rbp,rdi
    50fc:	53                   	push   rbx
    50fd:	48 83 ec 18          	sub    rsp,0x18
	: _M_len(__last - __first), _M_str(std::to_address(__first))
    5101:	4c 8b 77 10          	mov    r14,QWORD PTR [rdi+0x10]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    5105:	48 8b 5f 08          	mov    rbx,QWORD PTR [rdi+0x8]
    5109:	4d 89 f7             	mov    r15,r14
    510c:	49 29 df             	sub    r15,rbx
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    510f:	49 83 ff 02          	cmp    r15,0x2
    5113:	74 1b                	je     5130 <std::__format::_Scanner<char>::_M_scan()+0x40>
      if (__pos < this->_M_len)
    5115:	4d 85 ff             	test   r15,r15
    5118:	75 1f                	jne    5139 <std::__format::_Scanner<char>::_M_scan()+0x49>
      }
    511a:	48 83 c4 18          	add    rsp,0x18
    511e:	5b                   	pop    rbx
    511f:	5d                   	pop    rbp
    5120:	41 5c                	pop    r12
    5122:	41 5d                	pop    r13
    5124:	41 5e                	pop    r14
    5126:	41 5f                	pop    r15
    5128:	c3                   	ret
    5129:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    5130:	80 3b 7b             	cmp    BYTE PTR [rbx],0x7b
    5133:	0f 84 af 03 00 00    	je     54e8 <std::__format::_Scanner<char>::_M_scan()+0x3f8>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    5139:	4c 89 fa             	mov    rdx,r15
    513c:	be 7b 00 00 00       	mov    esi,0x7b
    5141:	48 89 df             	mov    rdi,rbx
	    __ret = __p - this->_M_str;
    5144:	49 c7 c5 ff ff ff ff 	mov    r13,0xffffffffffffffff
    514b:	e8 d0 e0 ff ff       	call   3220 <memchr@plt>
    5150:	4c 89 fa             	mov    rdx,r15
    5153:	be 7d 00 00 00       	mov    esi,0x7d
    5158:	48 89 df             	mov    rdi,rbx
    515b:	49 89 c4             	mov    r12,rax
    515e:	49 29 dc             	sub    r12,rbx
    5161:	48 85 c0             	test   rax,rax
    5164:	4d 0f 44 e5          	cmove  r12,r13
    5168:	e8 b3 e0 ff ff       	call   3220 <memchr@plt>
    516d:	48 89 c2             	mov    rdx,rax
    5170:	48 29 da             	sub    rdx,rbx
    5173:	48 85 c0             	test   rax,rax
    5176:	4c 0f 45 ea          	cmovne r13,rdx
      size() const noexcept
    517a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    auto __cmp = __lbr <=> __rbr;
    5180:	4d 39 ec             	cmp    r12,r13
    5183:	0f 84 3f 01 00 00    	je     52c8 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
    5189:	0f 82 91 00 00 00    	jb     5220 <std::__format::_Scanner<char>::_M_scan()+0x130>
		if (++__rbr == __fmt.size() || __fmt[__rbr] != '}')
    518f:	49 8d 55 01          	lea    rdx,[r13+0x1]
    5193:	4c 39 fa             	cmp    rdx,r15
    5196:	0f 84 c6 03 00 00    	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
    519c:	42 80 7c 2b 01 7d    	cmp    BYTE PTR [rbx+r13*1+0x1],0x7d
    51a2:	0f 85 ba 03 00 00    	jne    5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
		_M_on_chars(__last);
    51a8:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
		iterator __last = begin() + __rbr;
    51ac:	48 89 d3             	mov    rbx,rdx
    51af:	48 03 5d 08          	add    rbx,QWORD PTR [rbp+0x8]
    51b3:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
		_M_on_chars(__last);
    51b8:	48 89 de             	mov    rsi,rbx
    51bb:	48 89 ef             	mov    rdi,rbp
		_M_pc.advance_to(__last + 1);
    51be:	48 83 c3 01          	add    rbx,0x1
		_M_on_chars(__last);
    51c2:	ff 10                	call   QWORD PTR [rax]
	: _M_len(__last - __first), _M_str(std::to_address(__first))
    51c4:	4c 8b 75 10          	mov    r14,QWORD PTR [rbp+0x10]
		  __lbr -= __rbr + 1;
    51c8:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    51cd:	49 8d 44 24 ff       	lea    rax,[r12-0x1]
      { _M_begin = __it; }
    51d2:	48 89 5d 08          	mov    QWORD PTR [rbp+0x8],rbx
		  __lbr -= __rbr + 1;
    51d6:	48 29 d0             	sub    rax,rdx
      if (__pos < this->_M_len)
    51d9:	4d 89 f7             	mov    r15,r14
    51dc:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
    51e0:	4c 0f 45 e0          	cmovne r12,rax
    51e4:	49 29 df             	sub    r15,rbx
    51e7:	0f 84 2d ff ff ff    	je     511a <std::__format::_Scanner<char>::_M_scan()+0x2a>
    51ed:	4c 89 fa             	mov    rdx,r15
    51f0:	be 7d 00 00 00       	mov    esi,0x7d
    51f5:	48 89 df             	mov    rdi,rbx
    51f8:	e8 23 e0 ff ff       	call   3220 <memchr@plt>
	    __ret = __p - this->_M_str;
    51fd:	49 89 c5             	mov    r13,rax
    5200:	49 29 dd             	sub    r13,rbx
	  if (__p)
    5203:	48 85 c0             	test   rax,rax
    5206:	0f 85 74 ff ff ff    	jne    5180 <std::__format::_Scanner<char>::_M_scan()+0x90>
      size_type __ret = npos;
    520c:	49 c7 c5 ff ff ff ff 	mov    r13,0xffffffffffffffff
	    auto __cmp = __lbr <=> __rbr;
    5213:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
    5217:	0f 84 ab 00 00 00    	je     52c8 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
    521d:	0f 1f 00             	nop    DWORD PTR [rax]
		if (__lbr + 1 == __fmt.size()
    5220:	49 8d 44 24 01       	lea    rax,[r12+0x1]
		      || (__rbr == __fmt.npos && __fmt[__lbr + 1] != '{'))
    5225:	49 39 c7             	cmp    r15,rax
    5228:	0f 84 34 03 00 00    	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
    522e:	42 0f b6 44 23 01    	movzx  eax,BYTE PTR [rbx+r12*1+0x1]
    5234:	49 83 fd ff          	cmp    r13,0xffffffffffffffff
    5238:	0f 84 d2 00 00 00    	je     5310 <std::__format::_Scanner<char>::_M_scan()+0x220>
		const bool __is_escape = __fmt[__lbr + 1] == '{';
    523e:	3c 7b                	cmp    al,0x7b
		_M_on_chars(__last);
    5240:	48 8b 55 00          	mov    rdx,QWORD PTR [rbp+0x0]
		const bool __is_escape = __fmt[__lbr + 1] == '{';
    5244:	88 44 24 08          	mov    BYTE PTR [rsp+0x8],al
		_M_on_chars(__last);
    5248:	48 89 ef             	mov    rdi,rbp
		const bool __is_escape = __fmt[__lbr + 1] == '{';
    524b:	41 0f 94 c7          	sete   r15b
    524f:	45 0f b6 ff          	movzx  r15d,r15b
		iterator __last = begin() + __lbr + int(__is_escape);
    5253:	4d 01 e7             	add    r15,r12
    5256:	4c 03 7d 08          	add    r15,QWORD PTR [rbp+0x8]
		_M_on_chars(__last);
    525a:	4c 89 fe             	mov    rsi,r15
		_M_pc.advance_to(__last + 1);
    525d:	49 8d 5f 01          	lea    rbx,[r15+0x1]
		_M_on_chars(__last);
    5261:	ff 12                	call   QWORD PTR [rdx]
		if (__is_escape)
    5263:	0f b6 44 24 08       	movzx  eax,BYTE PTR [rsp+0x8]
      constexpr const_iterator end() const noexcept { return _M_end; }
    5268:	4c 8b 75 10          	mov    r14,QWORD PTR [rbp+0x10]
      { _M_begin = __it; }
    526c:	48 89 5d 08          	mov    QWORD PTR [rbp+0x8],rbx
		if (__is_escape)
    5270:	3c 7b                	cmp    al,0x7b
    5272:	0f 85 b0 00 00 00    	jne    5328 <std::__format::_Scanner<char>::_M_scan()+0x238>
		      __rbr -= __lbr + 2;
    5278:	49 8d 45 fe          	lea    rax,[r13-0x2]
      if (__pos < this->_M_len)
    527c:	4d 89 f7             	mov    r15,r14
    527f:	4c 29 e0             	sub    rax,r12
    5282:	49 83 fd ff          	cmp    r13,0xffffffffffffffff
    5286:	4c 0f 45 e8          	cmovne r13,rax
    528a:	49 29 df             	sub    r15,rbx
    528d:	0f 84 87 fe ff ff    	je     511a <std::__format::_Scanner<char>::_M_scan()+0x2a>
    5293:	4c 89 fa             	mov    rdx,r15
    5296:	be 7b 00 00 00       	mov    esi,0x7b
    529b:	48 89 df             	mov    rdi,rbx
    529e:	e8 7d df ff ff       	call   3220 <memchr@plt>
	    __ret = __p - this->_M_str;
    52a3:	49 89 c4             	mov    r12,rax
    52a6:	49 29 dc             	sub    r12,rbx
	  if (__p)
    52a9:	48 85 c0             	test   rax,rax
    52ac:	0f 85 ce fe ff ff    	jne    5180 <std::__format::_Scanner<char>::_M_scan()+0x90>
	    auto __cmp = __lbr <=> __rbr;
    52b2:	49 83 fd ff          	cmp    r13,0xffffffffffffffff
    52b6:	74 10                	je     52c8 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
      size_type __ret = npos;
    52b8:	49 c7 c4 ff ff ff ff 	mov    r12,0xffffffffffffffff
    52bf:	e9 cb fe ff ff       	jmp    518f <std::__format::_Scanner<char>::_M_scan()+0x9f>
    52c4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		_M_on_chars(end());
    52c8:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    52cc:	4c 89 f6             	mov    rsi,r14
    52cf:	48 89 ef             	mov    rdi,rbp
    52d2:	ff 10                	call   QWORD PTR [rax]
      { _M_begin = __it; }
    52d4:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    52d8:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
      }
    52dc:	48 83 c4 18          	add    rsp,0x18
    52e0:	5b                   	pop    rbx
    52e1:	5d                   	pop    rbp
    52e2:	41 5c                	pop    r12
    52e4:	41 5d                	pop    r13
    52e6:	41 5e                	pop    r14
    52e8:	41 5f                	pop    r15
    52ea:	c3                   	ret
    52eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    auto __cmp = __lbr <=> __rbr;
    52f0:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
    52f4:	74 d2                	je     52c8 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
		if (__lbr + 1 == __fmt.size()
    52f6:	49 8d 44 24 01       	lea    rax,[r12+0x1]
		      || (__rbr == __fmt.npos && __fmt[__lbr + 1] != '{'))
    52fb:	4c 39 f8             	cmp    rax,r15
    52fe:	0f 84 5e 02 00 00    	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
    5304:	41 0f b6 45 01       	movzx  eax,BYTE PTR [r13+0x1]
    5309:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    5310:	3c 7b                	cmp    al,0x7b
    5312:	0f 85 4a 02 00 00    	jne    5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
    5318:	49 c7 c5 ff ff ff ff 	mov    r13,0xffffffffffffffff
    531f:	e9 1a ff ff ff       	jmp    523e <std::__format::_Scanner<char>::_M_scan()+0x14e>
    5324:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	if (*__next == '}')
    5328:	41 0f b6 47 01       	movzx  eax,BYTE PTR [r15+0x1]
    532d:	3c 7d                	cmp    al,0x7d
    532f:	0f 84 5b 01 00 00    	je     5490 <std::__format::_Scanner<char>::_M_scan()+0x3a0>
	else if (*__next == ':')
    5335:	3c 3a                	cmp    al,0x3a
    5337:	0f 84 7b 01 00 00    	je     54b8 <std::__format::_Scanner<char>::_M_scan()+0x3c8>
      if (*__first == '0')
    533d:	3c 30                	cmp    al,0x30
    533f:	0f 84 8b 00 00 00    	je     53d0 <std::__format::_Scanner<char>::_M_scan()+0x2e0>
      if ('1' <= *__first && *__first <= '9')
    5345:	8d 50 cf             	lea    edx,[rax-0x31]
    5348:	80 fa 08             	cmp    dl,0x8
    534b:	0f 87 11 02 00 00    	ja     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
	  const unsigned short __id = *__first - '0';
    5351:	66 0f be f0          	movsx  si,al
	  const auto __next = __first + 1;
    5355:	49 8d 4f 02          	lea    rcx,[r15+0x2]
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    5359:	41 0f b6 47 02       	movzx  eax,BYTE PTR [r15+0x2]
	  const unsigned short __id = *__first - '0';
    535e:	83 ee 30             	sub    esi,0x30
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    5361:	49 39 ce             	cmp    r14,rcx
    5364:	74 75                	je     53db <std::__format::_Scanner<char>::_M_scan()+0x2eb>
    5366:	8d 50 d0             	lea    edx,[rax-0x30]
    5369:	80 fa 09             	cmp    dl,0x9
    536c:	77 6d                	ja     53db <std::__format::_Scanner<char>::_M_scan()+0x2eb>
    536e:	48 89 d9             	mov    rcx,rbx
	  unsigned short __val = 0;
    5371:	31 f6                	xor    esi,esi
		       int __base)
    {
      // __glibcxx_assert(_DecOnly ? __base <= 10 : __base <= 36);

      const int __bits_per_digit = __bit_width(unsigned(__base & 0x3f));
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
    5373:	41 b8 10 00 00 00    	mov    r8d,0x10
    5379:	eb 1c                	jmp    5397 <std::__format::_Scanner<char>::_M_scan()+0x2a7>
    537b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    return true;

	  __unused_bits_lower_bound -= __bits_per_digit;
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
	    // We're definitely not going to overflow.
	    __val = __val * __base + __c;
    5380:	8d 34 b6             	lea    esi,[rsi+rsi*4]
    5383:	40 0f b6 ff          	movzx  edi,dil
    5387:	8d 34 77             	lea    esi,[rdi+rsi*2]
      for (; __first != __last; ++__first)
    538a:	48 83 c1 01          	add    rcx,0x1
    538e:	49 39 ce             	cmp    r14,rcx
    5391:	0f 84 c3 01 00 00    	je     555a <std::__format::_Scanner<char>::_M_scan()+0x46a>
	return static_cast<unsigned char>(__c - '0');
    5397:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    539a:	8d 78 d0             	lea    edi,[rax-0x30]
	  if (__c >= __base)
    539d:	40 80 ff 09          	cmp    dil,0x9
    53a1:	0f 87 ae 01 00 00    	ja     5555 <std::__format::_Scanner<char>::_M_scan()+0x465>
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
    53a7:	41 83 e8 04          	sub    r8d,0x4
    53ab:	79 d3                	jns    5380 <std::__format::_Scanner<char>::_M_scan()+0x290>
      if (__builtin_mul_overflow(__val, __base, &__val)
    53ad:	ba 0a 00 00 00       	mov    edx,0xa
    53b2:	89 f0                	mov    eax,esi
    53b4:	66 f7 e2             	mul    dx
    53b7:	0f 80 a5 01 00 00    	jo     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
	  || __builtin_add_overflow(__val, __c, &__val))
    53bd:	40 0f b6 ff          	movzx  edi,dil
    53c1:	66 01 c7             	add    di,ax
    53c4:	0f 82 98 01 00 00    	jb     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
    53ca:	89 fe                	mov    esi,edi
    53cc:	eb bc                	jmp    538a <std::__format::_Scanner<char>::_M_scan()+0x29a>
    53ce:	66 90                	xchg   ax,ax
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    53d0:	41 0f b6 47 02       	movzx  eax,BYTE PTR [r15+0x2]
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
    53d5:	49 8d 4f 02          	lea    rcx,[r15+0x2]
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    53d9:	31 f6                	xor    esi,esi
	    if (!__ptr || !(*__ptr == '}' || *__ptr == ':'))
    53db:	3c 7d                	cmp    al,0x7d
    53dd:	74 08                	je     53e7 <std::__format::_Scanner<char>::_M_scan()+0x2f7>
    53df:	3c 3a                	cmp    al,0x3a
    53e1:	0f 85 7b 01 00 00    	jne    5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
	if (_M_indexing == _Auto)
    53e7:	83 7d 18 02          	cmp    DWORD PTR [rbp+0x18],0x2
	    _M_pc.check_arg_id(__id = __i);
    53eb:	0f b7 f6             	movzx  esi,si
	if (_M_indexing == _Auto)
    53ee:	0f 84 6e 01 00 00    	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
		_M_pc.advance_to(++__ptr);
    53f4:	31 c0                	xor    eax,eax
	_M_indexing = _Manual;
    53f6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [rbp+0x18],0x1
		_M_pc.advance_to(++__ptr);
    53fd:	80 39 3a             	cmp    BYTE PTR [rcx],0x3a
    5400:	0f 94 c0             	sete   al
    5403:	48 01 c1             	add    rcx,rax
    5406:	48 89 4d 08          	mov    QWORD PTR [rbp+0x8],rcx
	_M_format_arg(__id);
    540a:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    540e:	48 89 ef             	mov    rdi,rbp
    5411:	ff 50 08             	call   QWORD PTR [rax+0x8]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    5414:	48 8b 5d 08          	mov    rbx,QWORD PTR [rbp+0x8]
      constexpr const_iterator end() const noexcept { return _M_end; }
    5418:	4c 8b 75 10          	mov    r14,QWORD PTR [rbp+0x10]
	if (begin() == end() || *begin() != '}')
    541c:	4c 39 f3             	cmp    rbx,r14
    541f:	0f 84 3d 01 00 00    	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
    5425:	80 3b 7d             	cmp    BYTE PTR [rbx],0x7d
    5428:	0f 85 34 01 00 00    	jne    5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
	_M_pc.advance_to(begin() + 1); // Move past '}'
    542e:	48 83 c3 01          	add    rbx,0x1
      if (__pos < this->_M_len)
    5432:	4d 89 f7             	mov    r15,r14
      { _M_begin = __it; }
    5435:	48 89 5d 08          	mov    QWORD PTR [rbp+0x8],rbx
    5439:	49 29 df             	sub    r15,rbx
    543c:	0f 84 d8 fc ff ff    	je     511a <std::__format::_Scanner<char>::_M_scan()+0x2a>
    5442:	4c 89 fa             	mov    rdx,r15
    5445:	be 7b 00 00 00       	mov    esi,0x7b
    544a:	48 89 df             	mov    rdi,rbx
    544d:	e8 ce dd ff ff       	call   3220 <memchr@plt>
    5452:	49 89 c5             	mov    r13,rax
	  if (__p)
    5455:	48 85 c0             	test   rax,rax
    5458:	0f 84 d2 00 00 00    	je     5530 <std::__format::_Scanner<char>::_M_scan()+0x440>
	    __ret = __p - this->_M_str;
    545e:	49 89 c4             	mov    r12,rax
    5461:	4c 89 fa             	mov    rdx,r15
    5464:	be 7d 00 00 00       	mov    esi,0x7d
    5469:	48 89 df             	mov    rdi,rbx
    546c:	49 29 dc             	sub    r12,rbx
    546f:	e8 ac dd ff ff       	call   3220 <memchr@plt>
	  if (__p)
    5474:	48 85 c0             	test   rax,rax
    5477:	0f 84 73 fe ff ff    	je     52f0 <std::__format::_Scanner<char>::_M_scan()+0x200>
	    __ret = __p - this->_M_str;
    547d:	48 29 d8             	sub    rax,rbx
    5480:	49 89 c5             	mov    r13,rax
    5483:	e9 f8 fc ff ff       	jmp    5180 <std::__format::_Scanner<char>::_M_scan()+0x90>
    5488:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    548f:	00 
	if (_M_indexing == _Manual)
    5490:	83 7d 18 01          	cmp    DWORD PTR [rbp+0x18],0x1
    5494:	0f 84 c8 00 00 00    	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
	return _M_next_arg_id++;
    549a:	48 8b 75 20          	mov    rsi,QWORD PTR [rbp+0x20]
	_M_indexing = _Auto;
    549e:	c7 45 18 02 00 00 00 	mov    DWORD PTR [rbp+0x18],0x2
	return _M_next_arg_id++;
    54a5:	48 8d 46 01          	lea    rax,[rsi+0x1]
    54a9:	48 89 45 20          	mov    QWORD PTR [rbp+0x20],rax
    54ad:	e9 58 ff ff ff       	jmp    540a <std::__format::_Scanner<char>::_M_scan()+0x31a>
    54b2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	if (_M_indexing == _Manual)
    54b8:	83 7d 18 01          	cmp    DWORD PTR [rbp+0x18],0x1
    54bc:	0f 84 a0 00 00 00    	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
	return _M_next_arg_id++;
    54c2:	48 8b 75 20          	mov    rsi,QWORD PTR [rbp+0x20]
	    _M_pc.advance_to(++__next);
    54c6:	49 83 c7 02          	add    r15,0x2
	_M_indexing = _Auto;
    54ca:	c7 45 18 02 00 00 00 	mov    DWORD PTR [rbp+0x18],0x2
	    _M_pc.advance_to(++__next);
    54d1:	4c 89 7d 08          	mov    QWORD PTR [rbp+0x8],r15
	return _M_next_arg_id++;
    54d5:	48 8d 46 01          	lea    rax,[rsi+0x1]
    54d9:	48 89 45 20          	mov    QWORD PTR [rbp+0x20],rax
      { _M_begin = __it; }
    54dd:	e9 28 ff ff ff       	jmp    540a <std::__format::_Scanner<char>::_M_scan()+0x31a>
    54e2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    54e8:	80 7b 01 7d          	cmp    BYTE PTR [rbx+0x1],0x7d
    54ec:	0f 85 47 fc ff ff    	jne    5139 <std::__format::_Scanner<char>::_M_scan()+0x49>
	    _M_format_arg(_M_pc.next_arg_id());
    54f2:	48 8b 07             	mov    rax,QWORD PTR [rdi]
	    _M_pc.advance_to(begin() + 1);
    54f5:	48 83 c3 01          	add    rbx,0x1
	if (_M_indexing == _Manual)
    54f9:	83 7f 18 01          	cmp    DWORD PTR [rdi+0x18],0x1
	    _M_pc.advance_to(begin() + 1);
    54fd:	48 89 5f 08          	mov    QWORD PTR [rdi+0x8],rbx
	    _M_format_arg(_M_pc.next_arg_id());
    5501:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
	if (_M_indexing == _Manual)
    5505:	74 5b                	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
	return _M_next_arg_id++;
    5507:	48 8b 77 20          	mov    rsi,QWORD PTR [rdi+0x20]
	_M_indexing = _Auto;
    550b:	c7 47 18 02 00 00 00 	mov    DWORD PTR [rdi+0x18],0x2
	return _M_next_arg_id++;
    5512:	48 8d 56 01          	lea    rdx,[rsi+0x1]
    5516:	48 89 57 20          	mov    QWORD PTR [rdi+0x20],rdx
      }
    551a:	48 83 c4 18          	add    rsp,0x18
    551e:	5b                   	pop    rbx
    551f:	5d                   	pop    rbp
    5520:	41 5c                	pop    r12
    5522:	41 5d                	pop    r13
    5524:	41 5e                	pop    r14
    5526:	41 5f                	pop    r15
	    _M_format_arg(_M_pc.next_arg_id());
    5528:	ff e0                	jmp    rax
    552a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    5530:	4c 89 fa             	mov    rdx,r15
    5533:	be 7d 00 00 00       	mov    esi,0x7d
    5538:	48 89 df             	mov    rdi,rbx
    553b:	e8 e0 dc ff ff       	call   3220 <memchr@plt>
	  if (__p)
    5540:	48 85 c0             	test   rax,rax
    5543:	0f 84 7f fd ff ff    	je     52c8 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
    5549:	49 c7 c4 ff ff ff ff 	mov    r12,0xffffffffffffffff
    5550:	e9 28 ff ff ff       	jmp    547d <std::__format::_Scanner<char>::_M_scan()+0x38d>
		&& __first != __start) [[likely]]
    5555:	48 39 cb             	cmp    rbx,rcx
    5558:	74 08                	je     5562 <std::__format::_Scanner<char>::_M_scan()+0x472>
	    if (!__ptr || !(*__ptr == '}' || *__ptr == ':'))
    555a:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    555d:	e9 79 fe ff ff       	jmp    53db <std::__format::_Scanner<char>::_M_scan()+0x2eb>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    5562:	e8 e9 db ff ff       	call   3150 <abort@plt>
    5567:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    556e:	00 00 

0000000000005570 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    _GLIBCXX23_CONSTEXPR void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    5570:	48 83 ec 60          	sub    rsp,0x60
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      constexpr char __digits[201] =
    5574:	66 0f 6f 05 64 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13164]        # 186e0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    557b:	00 
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    557c:	89 d1                	mov    ecx,edx
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
    557e:	83 ee 01             	sub    esi,0x1
      constexpr char __digits[201] =
    5581:	0f 29 44 24 88       	movaps XMMWORD PTR [rsp-0x78],xmm0
    5586:	66 0f 6f 05 62 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13162]        # 186f0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    558d:	00 
    558e:	0f 29 44 24 98       	movaps XMMWORD PTR [rsp-0x68],xmm0
    5593:	66 0f 6f 05 65 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13165]        # 18700 <std::__unicode::__v15_1_0::__width_edges+0x340>
    559a:	00 
    559b:	0f 29 44 24 a8       	movaps XMMWORD PTR [rsp-0x58],xmm0
    55a0:	66 0f 6f 05 68 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13168]        # 18710 <std::__unicode::__v15_1_0::__width_edges+0x350>
    55a7:	00 
    55a8:	0f 29 44 24 b8       	movaps XMMWORD PTR [rsp-0x48],xmm0
    55ad:	66 0f 6f 05 6b 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x1316b]        # 18720 <std::__unicode::__v15_1_0::__width_edges+0x360>
    55b4:	00 
    55b5:	0f 29 44 24 c8       	movaps XMMWORD PTR [rsp-0x38],xmm0
    55ba:	66 0f 6f 05 6e 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x1316e]        # 18730 <std::__unicode::__v15_1_0::__width_edges+0x370>
    55c1:	00 
    55c2:	0f 29 44 24 d8       	movaps XMMWORD PTR [rsp-0x28],xmm0
    55c7:	66 0f 6f 05 71 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13171]        # 18740 <std::__unicode::__v15_1_0::__width_edges+0x380>
    55ce:	00 
    55cf:	0f 29 44 24 e8       	movaps XMMWORD PTR [rsp-0x18],xmm0
    55d4:	66 0f 6f 05 74 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13174]        # 18750 <std::__unicode::__v15_1_0::__width_edges+0x390>
    55db:	00 
    55dc:	0f 29 44 24 f8       	movaps XMMWORD PTR [rsp-0x8],xmm0
    55e1:	66 0f 6f 05 77 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13177]        # 18760 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    55e8:	00 
    55e9:	0f 29 44 24 08       	movaps XMMWORD PTR [rsp+0x8],xmm0
    55ee:	66 0f 6f 05 7a 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x1317a]        # 18770 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    55f5:	00 
    55f6:	0f 29 44 24 18       	movaps XMMWORD PTR [rsp+0x18],xmm0
    55fb:	66 0f 6f 05 7d 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x1317d]        # 18780 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    5602:	00 
    5603:	0f 29 44 24 28       	movaps XMMWORD PTR [rsp+0x28],xmm0
    5608:	66 0f 6f 05 80 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13180]        # 18790 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    560f:	00 
    5610:	0f 29 44 24 38       	movaps XMMWORD PTR [rsp+0x38],xmm0
    5615:	66 0f 6f 05 83 31 01 	movdqa xmm0,XMMWORD PTR [rip+0x13183]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    561c:	00 
    561d:	0f 11 44 24 41       	movups XMMWORD PTR [rsp+0x41],xmm0
      while (__val >= 100)
    5622:	83 fa 63             	cmp    edx,0x63
    5625:	76 4d                	jbe    5674 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x104>
    5627:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    562e:	00 00 
	{
	  auto const __num = (__val % 100) * 2;
    5630:	89 ca                	mov    edx,ecx
    5632:	89 c8                	mov    eax,ecx
    5634:	48 69 d2 1f 85 eb 51 	imul   rdx,rdx,0x51eb851f
    563b:	48 c1 ea 25          	shr    rdx,0x25
    563f:	44 6b c2 64          	imul   r8d,edx,0x64
    5643:	44 29 c0             	sub    eax,r8d
    5646:	41 89 c8             	mov    r8d,ecx
	  __val /= 100;
    5649:	89 d1                	mov    ecx,edx
	  __first[__pos] = __digits[__num + 1];
    564b:	89 f2                	mov    edx,esi
	  auto const __num = (__val % 100) * 2;
    564d:	01 c0                	add    eax,eax
	  __first[__pos] = __digits[__num + 1];
    564f:	44 8d 48 01          	lea    r9d,[rax+0x1]
	  __first[__pos - 1] = __digits[__num];
    5653:	0f b6 44 04 88       	movzx  eax,BYTE PTR [rsp+rax*1-0x78]
	  __first[__pos] = __digits[__num + 1];
    5658:	46 0f b6 4c 0c 88    	movzx  r9d,BYTE PTR [rsp+r9*1-0x78]
    565e:	44 88 0c 17          	mov    BYTE PTR [rdi+rdx*1],r9b
	  __first[__pos - 1] = __digits[__num];
    5662:	8d 56 ff             	lea    edx,[rsi-0x1]
	  __pos -= 2;
    5665:	83 ee 02             	sub    esi,0x2
	  __first[__pos - 1] = __digits[__num];
    5668:	88 04 17             	mov    BYTE PTR [rdi+rdx*1],al
      while (__val >= 100)
    566b:	41 81 f8 0f 27 00 00 	cmp    r8d,0x270f
    5672:	77 bc                	ja     5630 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xc0>
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
    5674:	8d 41 30             	lea    eax,[rcx+0x30]
      if (__val >= 10)
    5677:	83 f9 09             	cmp    ecx,0x9
    567a:	76 12                	jbe    568e <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x11e>
	  auto const __num = __val * 2;
    567c:	01 c9                	add    ecx,ecx
	  __first[1] = __digits[__num + 1];
    567e:	8d 41 01             	lea    eax,[rcx+0x1]
    5681:	0f b6 44 04 88       	movzx  eax,BYTE PTR [rsp+rax*1-0x78]
    5686:	88 47 01             	mov    BYTE PTR [rdi+0x1],al
	  __first[0] = __digits[__num];
    5689:	0f b6 44 0c 88       	movzx  eax,BYTE PTR [rsp+rcx*1-0x78]
    568e:	88 07                	mov    BYTE PTR [rdi],al
    }
    5690:	48 83 c4 60          	add    rsp,0x60
    5694:	c3                   	ret
    5695:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    569c:	00 00 00 
    569f:	90                   	nop

00000000000056a0 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    56a0:	48 83 ec 60          	sub    rsp,0x60
      constexpr char __digits[201] =
    56a4:	66 0f 6f 05 34 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13034]        # 186e0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    56ab:	00 
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    56ac:	48 89 d1             	mov    rcx,rdx
      unsigned __pos = __len - 1;
    56af:	83 ee 01             	sub    esi,0x1
      constexpr char __digits[201] =
    56b2:	0f 29 44 24 88       	movaps XMMWORD PTR [rsp-0x78],xmm0
    56b7:	66 0f 6f 05 31 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13031]        # 186f0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    56be:	00 
    56bf:	0f 29 44 24 98       	movaps XMMWORD PTR [rsp-0x68],xmm0
    56c4:	66 0f 6f 05 34 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13034]        # 18700 <std::__unicode::__v15_1_0::__width_edges+0x340>
    56cb:	00 
    56cc:	0f 29 44 24 a8       	movaps XMMWORD PTR [rsp-0x58],xmm0
    56d1:	66 0f 6f 05 37 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13037]        # 18710 <std::__unicode::__v15_1_0::__width_edges+0x350>
    56d8:	00 
    56d9:	0f 29 44 24 b8       	movaps XMMWORD PTR [rsp-0x48],xmm0
    56de:	66 0f 6f 05 3a 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x1303a]        # 18720 <std::__unicode::__v15_1_0::__width_edges+0x360>
    56e5:	00 
    56e6:	0f 29 44 24 c8       	movaps XMMWORD PTR [rsp-0x38],xmm0
    56eb:	66 0f 6f 05 3d 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x1303d]        # 18730 <std::__unicode::__v15_1_0::__width_edges+0x370>
    56f2:	00 
    56f3:	0f 29 44 24 d8       	movaps XMMWORD PTR [rsp-0x28],xmm0
    56f8:	66 0f 6f 05 40 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13040]        # 18740 <std::__unicode::__v15_1_0::__width_edges+0x380>
    56ff:	00 
    5700:	0f 29 44 24 e8       	movaps XMMWORD PTR [rsp-0x18],xmm0
    5705:	66 0f 6f 05 43 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13043]        # 18750 <std::__unicode::__v15_1_0::__width_edges+0x390>
    570c:	00 
    570d:	0f 29 44 24 f8       	movaps XMMWORD PTR [rsp-0x8],xmm0
    5712:	66 0f 6f 05 46 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13046]        # 18760 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    5719:	00 
    571a:	0f 29 44 24 08       	movaps XMMWORD PTR [rsp+0x8],xmm0
    571f:	66 0f 6f 05 49 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13049]        # 18770 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    5726:	00 
    5727:	0f 29 44 24 18       	movaps XMMWORD PTR [rsp+0x18],xmm0
    572c:	66 0f 6f 05 4c 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x1304c]        # 18780 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    5733:	00 
    5734:	0f 29 44 24 28       	movaps XMMWORD PTR [rsp+0x28],xmm0
    5739:	66 0f 6f 05 4f 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x1304f]        # 18790 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    5740:	00 
    5741:	0f 29 44 24 38       	movaps XMMWORD PTR [rsp+0x38],xmm0
    5746:	66 0f 6f 05 52 30 01 	movdqa xmm0,XMMWORD PTR [rip+0x13052]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    574d:	00 
    574e:	0f 11 44 24 41       	movups XMMWORD PTR [rsp+0x41],xmm0
      while (__val >= 100)
    5753:	48 83 fa 63          	cmp    rdx,0x63
    5757:	76 6f                	jbe    57c8 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)+0x128>
	  auto const __num = (__val % 100) * 2;
    5759:	49 b9 c3 f5 28 5c 8f 	movabs r9,0x28f5c28f5c28f5c3
    5760:	c2 f5 28 
    5763:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    576a:	00 00 00 00 
    576e:	66 90                	xchg   ax,ax
    5770:	48 89 ca             	mov    rdx,rcx
    5773:	48 c1 ea 02          	shr    rdx,0x2
    5777:	48 89 d0             	mov    rax,rdx
    577a:	49 f7 e1             	mul    r9
    577d:	48 89 c8             	mov    rax,rcx
    5780:	49 89 d0             	mov    r8,rdx
    5783:	48 83 e2 fc          	and    rdx,0xfffffffffffffffc
    5787:	49 c1 e8 02          	shr    r8,0x2
    578b:	4c 01 c2             	add    rdx,r8
    578e:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    5792:	48 c1 e2 02          	shl    rdx,0x2
    5796:	48 29 d0             	sub    rax,rdx
    5799:	48 89 ca             	mov    rdx,rcx
	  __val /= 100;
    579c:	4c 89 c1             	mov    rcx,r8
	  __first[__pos] = __digits[__num + 1];
    579f:	41 89 f0             	mov    r8d,esi
	  auto const __num = (__val % 100) * 2;
    57a2:	48 01 c0             	add    rax,rax
	  __first[__pos] = __digits[__num + 1];
    57a5:	44 0f b6 54 04 89    	movzx  r10d,BYTE PTR [rsp+rax*1-0x77]
	  __first[__pos - 1] = __digits[__num];
    57ab:	0f b6 44 04 88       	movzx  eax,BYTE PTR [rsp+rax*1-0x78]
	  __first[__pos] = __digits[__num + 1];
    57b0:	46 88 14 07          	mov    BYTE PTR [rdi+r8*1],r10b
	  __first[__pos - 1] = __digits[__num];
    57b4:	44 8d 46 ff          	lea    r8d,[rsi-0x1]
	  __pos -= 2;
    57b8:	83 ee 02             	sub    esi,0x2
	  __first[__pos - 1] = __digits[__num];
    57bb:	42 88 04 07          	mov    BYTE PTR [rdi+r8*1],al
      while (__val >= 100)
    57bf:	48 81 fa 0f 27 00 00 	cmp    rdx,0x270f
    57c6:	77 a8                	ja     5770 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)+0xd0>
	__first[0] = '0' + __val;
    57c8:	8d 41 30             	lea    eax,[rcx+0x30]
      if (__val >= 10)
    57cb:	48 83 f9 09          	cmp    rcx,0x9
    57cf:	76 10                	jbe    57e1 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)+0x141>
	  auto const __num = __val * 2;
    57d1:	48 01 c9             	add    rcx,rcx
	  __first[1] = __digits[__num + 1];
    57d4:	0f b6 44 0c 89       	movzx  eax,BYTE PTR [rsp+rcx*1-0x77]
    57d9:	88 47 01             	mov    BYTE PTR [rdi+0x1],al
	  __first[0] = __digits[__num];
    57dc:	0f b6 44 0c 88       	movzx  eax,BYTE PTR [rsp+rcx*1-0x78]
    57e1:	88 07                	mov    BYTE PTR [rdi],al
    }
    57e3:	48 83 c4 60          	add    rsp,0x60
    57e7:	c3                   	ret
    57e8:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    57ef:	00 00 00 
    57f2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    57f9:	00 00 00 
    57fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000005800 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>:
      if (__builtin_expect((__last - __first) < __len, 0))
    5800:	48 89 f1             	mov    rcx,rsi
    5803:	48 29 f9             	sub    rcx,rdi
    __countl_zero(_Tp __x) noexcept
    {
      using __gnu_cxx::__int_traits;
      constexpr auto _Nd = __int_traits<_Tp>::__digits;

      if (__x == 0)
    5806:	48 85 d2             	test   rdx,rdx
    5809:	0f 84 c1 00 00 00    	je     58d0 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0xd0>
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    580f:	48 0f bd c2          	bsr    rax,rdx
    5813:	83 c0 04             	add    eax,0x4
    5816:	c1 e8 02             	shr    eax,0x2
      if (__builtin_expect((__last - __first) < __len, 0))
    5819:	41 89 c0             	mov    r8d,eax
    581c:	49 39 c8             	cmp    r8,rcx
    581f:	0f 8f bb 00 00 00    	jg     58e0 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0xe0>
      constexpr char __digits[] = {
    5825:	66 0f 6f 05 83 2f 01 	movdqa xmm0,XMMWORD PTR [rip+0x12f83]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    582c:	00 
      unsigned __pos = __len - 1;
    582d:	83 e8 01             	sub    eax,0x1
      constexpr char __digits[] = {
    5830:	0f 29 44 24 e8       	movaps XMMWORD PTR [rsp-0x18],xmm0
      while (__val >= 0x100)
    5835:	48 81 fa ff 00 00 00 	cmp    rdx,0xff
    583c:	76 38                	jbe    5876 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x76>
    583e:	66 90                	xchg   ax,ax
	  auto __num = __val & 0xF;
    5840:	48 89 d6             	mov    rsi,rdx
	  __first[__pos] = __digits[__num];
    5843:	89 c1                	mov    ecx,eax
	  auto __num = __val & 0xF;
    5845:	83 e6 0f             	and    esi,0xf
	  __first[__pos] = __digits[__num];
    5848:	0f b6 74 34 e8       	movzx  esi,BYTE PTR [rsp+rsi*1-0x18]
    584d:	40 88 34 0f          	mov    BYTE PTR [rdi+rcx*1],sil
	  __val >>= 4;
    5851:	48 89 d1             	mov    rcx,rdx
	  __first[__pos - 1] = __digits[__num];
    5854:	8d 70 ff             	lea    esi,[rax-0x1]
	  __val >>= 4;
    5857:	48 c1 ea 08          	shr    rdx,0x8
	  __val >>= 4;
    585b:	48 c1 e9 04          	shr    rcx,0x4
	  __pos -= 2;
    585f:	83 e8 02             	sub    eax,0x2
	  __num = __val & 0xF;
    5862:	83 e1 0f             	and    ecx,0xf
	  __first[__pos - 1] = __digits[__num];
    5865:	0f b6 4c 0c e8       	movzx  ecx,BYTE PTR [rsp+rcx*1-0x18]
    586a:	88 0c 37             	mov    BYTE PTR [rdi+rsi*1],cl
      while (__val >= 0x100)
    586d:	48 81 fa ff 00 00 00 	cmp    rdx,0xff
    5874:	77 ca                	ja     5840 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x40>
      __res.ptr = __first + __len;
    5876:	4a 8d 34 07          	lea    rsi,[rdi+r8*1]
      if (__val >= 0x10)
    587a:	48 83 fa 0f          	cmp    rdx,0xf
    587e:	76 40                	jbe    58c0 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0xc0>
	  const auto __num = __val & 0xF;
    5880:	48 89 d0             	mov    rax,rdx
	  __val >>= 4;
    5883:	48 c1 ea 04          	shr    rdx,0x4
	  const auto __num = __val & 0xF;
    5887:	83 e0 0f             	and    eax,0xf
	  __first[1] = __digits[__num];
    588a:	0f b6 44 04 e8       	movzx  eax,BYTE PTR [rsp+rax*1-0x18]
    588f:	88 47 01             	mov    BYTE PTR [rdi+0x1],al
	  __first[0] = __digits[__val];
    5892:	0f b6 44 14 e8       	movzx  eax,BYTE PTR [rsp+rdx*1-0x18]
    5897:	88 07                	mov    BYTE PTR [rdi],al
      return __res;
    5899:	31 c9                	xor    ecx,ecx
	  return __res;
    589b:	48 bf 00 00 00 00 ff 	movabs rdi,0xffffffff00000000
    58a2:	ff ff ff 
    58a5:	31 d2                	xor    edx,edx
    58a7:	48 89 f0             	mov    rax,rsi
    58aa:	89 ce                	mov    esi,ecx
    58ac:	48 89 d1             	mov    rcx,rdx
    58af:	48 21 f9             	and    rcx,rdi
    58b2:	48 09 f1             	or     rcx,rsi
    58b5:	48 89 ca             	mov    rdx,rcx
    }
    58b8:	c3                   	ret
    58b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	__first[0] = __digits[__val];
    58c0:	0f b6 44 14 e8       	movzx  eax,BYTE PTR [rsp+rdx*1-0x18]
    58c5:	eb d0                	jmp    5897 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x97>
    58c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    58ce:	00 00 
      if (__builtin_expect((__last - __first) < __len, 0))
    58d0:	48 85 c9             	test   rcx,rcx
    58d3:	78 0b                	js     58e0 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0xe0>
    58d5:	48 89 fe             	mov    rsi,rdi
    58d8:	b8 30 00 00 00       	mov    eax,0x30
    58dd:	eb b8                	jmp    5897 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x97>
    58df:	90                   	nop
    58e0:	b9 4b 00 00 00       	mov    ecx,0x4b
    58e5:	eb b4                	jmp    589b <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x9b>
    58e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    58ee:	00 00 

00000000000058f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>:
      { return _M_dataplus._M_p; }
    58f0:	48 8b 07             	mov    rax,QWORD PTR [rdi]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    58f3:	48 8d 57 10          	lea    rdx,[rdi+0x10]
	if (_M_data() == _M_local_data())
    58f7:	48 39 d0             	cmp    rax,rdx
    58fa:	74 14                	je     5910 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()+0x20>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    58fc:	48 8b 77 10          	mov    rsi,QWORD PTR [rdi+0x10]
    5900:	48 89 c7             	mov    rdi,rax
    5903:	48 83 c6 01          	add    rsi,0x1
    5907:	e9 f4 d8 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    590c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      }
    5910:	c3                   	ret
    5911:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5918:	00 00 00 
    591b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>:
    basic_string<_CharT, _Traits, _Alloc>::
    5920:	41 56                	push   r14
    5922:	41 55                	push   r13
    5924:	41 54                	push   r12
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    5926:	4c 8d 67 10          	lea    r12,[rdi+0x10]
    592a:	55                   	push   rbp
    592b:	48 89 f5             	mov    rbp,rsi
    592e:	53                   	push   rbx
    592f:	48 89 fb             	mov    rbx,rdi
	if (_M_data() == _M_local_data())
    5932:	4c 3b 27             	cmp    r12,QWORD PTR [rdi]
    5935:	0f 84 a5 00 00 00    	je     59e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xc0>
	return _M_is_local() ? size_type(_S_local_capacity)
    593b:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
      if (__res <= __capacity)
    593f:	48 39 f0             	cmp    rax,rsi
    5942:	72 0c                	jb     5950 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x30>
    }
    5944:	5b                   	pop    rbx
    5945:	5d                   	pop    rbp
    5946:	41 5c                	pop    r12
    5948:	41 5d                	pop    r13
    594a:	41 5e                	pop    r14
    594c:	c3                   	ret
    594d:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__capacity > max_size())
    5950:	48 85 f6             	test   rsi,rsi
    5953:	0f 88 ba 00 00 00    	js     5a13 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xf3>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    5959:	48 01 c0             	add    rax,rax
    595c:	48 39 c6             	cmp    rsi,rax
    595f:	72 67                	jb     59c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xa8>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    5961:	48 89 ef             	mov    rdi,rbp
    5964:	48 83 c7 01          	add    rdi,0x1
    5968:	78 6a                	js     59d4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xb4>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    596a:	e8 71 d8 ff ff       	call   31e0 <operator new(unsigned long)@plt>
      { return _M_dataplus._M_p; }
    596f:	4c 8b 33             	mov    r14,QWORD PTR [rbx]
    5972:	49 89 c5             	mov    r13,rax
      this->_S_copy(__tmp, _M_data(), length() + 1);
    5975:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5979:	48 8d 50 01          	lea    rdx,[rax+0x1]
	if (__n == 1)
    597d:	48 85 c0             	test   rax,rax
    5980:	74 7e                	je     5a00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xe0>
	if (__n == 0)
    5982:	48 85 d2             	test   rdx,rdx
    5985:	75 29                	jne    59b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x90>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    5987:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    598b:	4c 89 f7             	mov    rdi,r14
    598e:	48 8d 70 01          	lea    rsi,[rax+0x1]
    5992:	e8 69 d8 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
    5997:	4c 89 2b             	mov    QWORD PTR [rbx],r13
      { _M_allocated_capacity = __capacity; }
    599a:	48 89 6b 10          	mov    QWORD PTR [rbx+0x10],rbp
    }
    599e:	5b                   	pop    rbx
    599f:	5d                   	pop    rbp
    59a0:	41 5c                	pop    r12
    59a2:	41 5d                	pop    r13
    59a4:	41 5e                	pop    r14
    59a6:	c3                   	ret
    59a7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    59ae:	00 00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    59b0:	4c 89 f6             	mov    rsi,r14
    59b3:	4c 89 ef             	mov    rdi,r13
    59b6:	e8 f5 d7 ff ff       	call   31b0 <memcpy@plt>
	if (_M_data() == _M_local_data())
    59bb:	4d 39 f4             	cmp    r12,r14
    59be:	75 c7                	jne    5987 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x67>
    59c0:	eb d5                	jmp    5997 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x77>
    59c2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    59c8:	48 8d 78 01          	lea    rdi,[rax+0x1]
	  __capacity = 2 * __old_capacity;
    59cc:	48 89 c5             	mov    rbp,rax
	  if (__capacity > max_size())
    59cf:	48 85 c0             	test   rax,rax
    59d2:	79 96                	jns    596a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x4a>
	    std::__throw_bad_alloc();
    59d4:	e8 07 d7 ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
    59d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      if (__res <= __capacity)
    59e0:	48 83 fe 0f          	cmp    rsi,0xf
    59e4:	0f 86 5a ff ff ff    	jbe    5944 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x24>
      if (__capacity > max_size())
    59ea:	48 85 f6             	test   rsi,rsi
    59ed:	78 24                	js     5a13 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xf3>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    59ef:	b8 1e 00 00 00       	mov    eax,0x1e
    59f4:	48 39 c6             	cmp    rsi,rax
    59f7:	48 0f 42 e8          	cmovb  rbp,rax
    59fb:	e9 61 ff ff ff       	jmp    5961 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x41>
	__c1 = __c2;
    5a00:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
    5a04:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
    5a08:	4d 39 f4             	cmp    r12,r14
    5a0b:	0f 85 76 ff ff ff    	jne    5987 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x67>
    5a11:	eb 84                	jmp    5997 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x77>
	std::__throw_length_error(__N("basic_string::_M_create"));
    5a13:	48 8d 3d fe f6 00 00 	lea    rdi,[rip+0xf6fe]        # 15118 <CSWTCH.1104+0x38>
    5a1a:	e8 11 d7 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    5a1f:	90                   	nop

0000000000005a20 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
    5a20:	41 57                	push   r15
	  switch (__type)
    5a22:	48 8d 0d 1b f8 00 00 	lea    rcx,[rip+0xf81b]        # 15244 <CSWTCH.1104+0x164>
    5a29:	0f b6 d2             	movzx  edx,dl
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
    5a2c:	41 56                	push   r14
    5a2e:	41 55                	push   r13
    5a30:	41 54                	push   r12
    5a32:	55                   	push   rbp
    5a33:	48 89 fd             	mov    rbp,rdi
    5a36:	53                   	push   rbx
    5a37:	48 89 f3             	mov    rbx,rsi
    5a3a:	48 83 ec 18          	sub    rsp,0x18
	  switch (__type)
    5a3e:	48 63 04 91          	movsxd rax,DWORD PTR [rcx+rdx*4]
    5a42:	48 01 c8             	add    rax,rcx
    5a45:	ff e0                	jmp    rax
    5a47:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5a4e:	00 00 
    5a50:	48 8b 07             	mov    rax,QWORD PTR [rdi]
		  const bool __neg = __arg < 0;
    5a53:	49 89 c7             	mov    r15,rax
		  if (__neg)
    5a56:	49 89 c5             	mov    r13,rax
		  const bool __neg = __arg < 0;
    5a59:	49 c1 ef 3f          	shr    r15,0x3f
		  if (__neg)
    5a5d:	49 f7 dd             	neg    r13
    5a60:	4c 0f 48 e8          	cmovs  r13,rax
	  if (__value < (unsigned)__base) return __n;
    5a64:	49 83 fd 09          	cmp    r13,0x9
    5a68:	0f 86 ea 04 00 00    	jbe    5f58 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x538>
    5a6e:	4c 89 e9             	mov    rcx,r13
      unsigned __n = 1;
    5a71:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    5a76:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    5a7d:	c5 6d 34 
    5a80:	eb 39                	jmp    5abb <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x9b>
    5a82:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  if (__value < __b3) return __n + 2;
    5a88:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    5a8f:	0f 86 4b 04 00 00    	jbe    5ee0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4c0>
	  if (__value < __b4) return __n + 3;
    5a95:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    5a9c:	0f 86 6e 04 00 00    	jbe    5f10 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4f0>
	  __value /= __b4;
    5aa2:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    5aa5:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    5aa8:	48 f7 e6             	mul    rsi
    5aab:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    5aaf:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    5ab6:	76 0c                	jbe    5ac4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    5ab8:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    5abb:	48 83 f9 63          	cmp    rcx,0x63
    5abf:	77 c7                	ja     5a88 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x68>
    5ac1:	83 c5 01             	add    ebp,0x1
      { return _M_sink->_M_reserve(__n); }
    5ac4:	48 8b 03             	mov    rax,QWORD PTR [rbx]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5ac7:	46 8d 74 3d 00       	lea    r14d,[rbp+r15*1+0x0]
      { return _M_sink->_M_reserve(__n); }
    5acc:	4c 89 f6             	mov    rsi,r14
    5acf:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5ad2:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5ad5:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5ad8:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5adb:	48 85 c0             	test   rax,rax
    5ade:	74 28                	je     5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
      { return _M_current; }
    5ae0:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      *__ptr = '-';
    5ae4:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    5ae7:	4c 01 ff             	add    rdi,r15
    5aea:	4c 89 ea             	mov    rdx,r13
    5aed:	89 ee                	mov    esi,ebp
    5aef:	e8 ac fb ff ff       	call   56a0 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5af4:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
    5af8:	4c 89 f6             	mov    rsi,r14
    5afb:	4c 89 e7             	mov    rdi,r12
    5afe:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5b01:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5b05:	c6 00 01             	mov    BYTE PTR [rax],0x1
	}
    5b08:	48 83 c4 18          	add    rsp,0x18
    5b0c:	5b                   	pop    rbx
    5b0d:	5d                   	pop    rbp
    5b0e:	41 5c                	pop    r12
    5b10:	41 5d                	pop    r13
    5b12:	41 5e                	pop    r14
    5b14:	41 5f                	pop    r15
    5b16:	c3                   	ret
    5b17:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5b1e:	00 00 
    5b20:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
	return __builtin_strlen(__s);
    5b23:	4c 89 ef             	mov    rdi,r13
    5b26:	e8 c5 d5 ff ff       	call   30f0 <strlen@plt>
    5b2b:	49 89 c4             	mov    r12,rax
      { return _M_sink->_M_reserve(__n); }
    5b2e:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    5b31:	4c 89 e6             	mov    rsi,r12
    5b34:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5b37:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5b3a:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5b3d:	48 89 c5             	mov    rbp,rax
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
    5b40:	48 85 c0             	test   rax,rax
    5b43:	74 c3                	je     5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
    5b45:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
    5b49:	4c 89 e2             	mov    rdx,r12
    5b4c:	4c 89 ee             	mov    rsi,r13
    5b4f:	e8 5c d6 ff ff       	call   31b0 <memcpy@plt>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5b54:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    5b58:	4c 89 e6             	mov    rsi,r12
    5b5b:	48 89 ef             	mov    rdi,rbp
    5b5e:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5b61:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5b65:	c6 00 01             	mov    BYTE PTR [rax],0x1
	}
    5b68:	48 83 c4 18          	add    rsp,0x18
    5b6c:	5b                   	pop    rbx
    5b6d:	5d                   	pop    rbp
    5b6e:	41 5c                	pop    r12
    5b70:	41 5d                	pop    r13
    5b72:	41 5e                	pop    r14
    5b74:	41 5f                	pop    r15
    5b76:	c3                   	ret
    5b77:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5b7e:	00 00 
    5b80:	4c 8b 27             	mov    r12,QWORD PTR [rdi]
    5b83:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
    5b87:	eb a5                	jmp    5b2e <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x10e>
    5b89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  const char* __chars[] = { "false", "true" };
    5b90:	48 8d 05 99 f5 00 00 	lea    rax,[rip+0xf599]        # 15130 <CSWTCH.1104+0x50>
		  size_t __len = 4 + !__arg;
    5b97:	44 0f b6 27          	movzx  r12d,BYTE PTR [rdi]
		  const char* __chars[] = { "false", "true" };
    5b9b:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    5b9f:	48 8d 05 90 f5 00 00 	lea    rax,[rip+0xf590]        # 15136 <CSWTCH.1104+0x56>
    5ba6:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
      { return _M_sink->_M_reserve(__n); }
    5bab:	48 8b 06             	mov    rax,QWORD PTR [rsi]
		  size_t __len = 4 + !__arg;
    5bae:	41 83 f4 01          	xor    r12d,0x1
    5bb2:	45 0f b6 e4          	movzx  r12d,r12b
      { return _M_sink->_M_reserve(__n); }
    5bb6:	48 8b 38             	mov    rdi,QWORD PTR [rax]
		  size_t __len = 4 + !__arg;
    5bb9:	41 83 c4 04          	add    r12d,0x4
    5bbd:	4d 63 ec             	movsxd r13,r12d
      { return _M_sink->_M_reserve(__n); }
    5bc0:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5bc3:	4c 89 ee             	mov    rsi,r13
    5bc6:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5bc9:	48 89 c7             	mov    rdi,rax
		  if (auto __res = __sink_out._M_reserve(__len))
    5bcc:	48 85 c0             	test   rax,rax
    5bcf:	0f 84 33 ff ff ff    	je     5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    5bd5:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
    5bd9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
    5bdd:	48 8b 14 d4          	mov    rdx,QWORD PTR [rsp+rdx*8]
    5be1:	41 83 fc 08          	cmp    r12d,0x8
    5be5:	0f 83 75 02 00 00    	jae    5e60 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x440>
    5beb:	41 f6 c4 04          	test   r12b,0x4
    5bef:	0f 85 87 03 00 00    	jne    5f7c <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x55c>
    5bf5:	45 85 e4             	test   r12d,r12d
    5bf8:	74 0f                	je     5c09 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    5bfa:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    5bfd:	88 08                	mov    BYTE PTR [rax],cl
    5bff:	41 f6 c4 02          	test   r12b,0x2
    5c03:	0f 85 89 03 00 00    	jne    5f92 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x572>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5c09:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5c0c:	4c 89 ee             	mov    rsi,r13
    5c0f:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5c12:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5c16:	c6 00 01             	mov    BYTE PTR [rax],0x1
	    std::visit_format_arg([&](auto& __arg) {
    5c19:	e9 ea fe ff ff       	jmp    5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5c1e:	66 90                	xchg   ax,ax
      { return _M_sink->_M_reserve(__n); }
    5c20:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    5c23:	be 01 00 00 00       	mov    esi,0x1
    5c28:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5c2b:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5c2e:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5c31:	48 89 c7             	mov    rdi,rax
		  if (auto __res = __sink_out._M_reserve(1))
    5c34:	48 85 c0             	test   rax,rax
    5c37:	0f 84 cb fe ff ff    	je     5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5c3d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
		      *__res.get() = __arg;
    5c41:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5c45:	be 01 00 00 00       	mov    esi,0x1
		      *__res.get() = __arg;
    5c4a:	88 10                	mov    BYTE PTR [rax],dl
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5c4c:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5c4f:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5c52:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5c56:	c6 00 01             	mov    BYTE PTR [rax],0x1
    5c59:	e9 aa fe ff ff       	jmp    5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5c5e:	66 90                	xchg   ax,ax
    5c60:	8b 07                	mov    eax,DWORD PTR [rdi]
		  const bool __neg = __arg < 0;
    5c62:	41 89 c6             	mov    r14d,eax
		  if (__neg)
    5c65:	41 89 c5             	mov    r13d,eax
		  const bool __neg = __arg < 0;
    5c68:	41 c1 ee 1f          	shr    r14d,0x1f
		  if (__neg)
    5c6c:	41 f7 dd             	neg    r13d
    5c6f:	44 0f 48 e8          	cmovs  r13d,eax
	  if (__value < (unsigned)__base) return __n;
    5c73:	41 83 fd 09          	cmp    r13d,0x9
    5c77:	0f 86 f5 02 00 00    	jbe    5f72 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x552>
    5c7d:	44 89 e9             	mov    ecx,r13d
      unsigned __n = 1;
    5c80:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    5c85:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    5c8c:	c5 6d 34 
    5c8f:	eb 38                	jmp    5cc9 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2a9>
    5c91:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    5c98:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    5c9e:	0f 86 0c 02 00 00    	jbe    5eb0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x490>
	  if (__value < __b4) return __n + 3;
    5ca4:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    5caa:	0f 86 40 02 00 00    	jbe    5ef0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4d0>
	  __value /= __b4;
    5cb0:	89 ca                	mov    edx,ecx
	  __n += 4;
    5cb2:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    5cb5:	48 89 d0             	mov    rax,rdx
    5cb8:	48 f7 e6             	mul    rsi
    5cbb:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    5cbf:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    5cc5:	76 0a                	jbe    5cd1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    5cc7:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    5cc9:	83 f9 63             	cmp    ecx,0x63
    5ccc:	77 ca                	ja     5c98 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x278>
    5cce:	83 c5 01             	add    ebp,0x1
      { return _M_sink->_M_reserve(__n); }
    5cd1:	48 8b 03             	mov    rax,QWORD PTR [rbx]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5cd4:	45 8d 3c 2e          	lea    r15d,[r14+rbp*1]
      { return _M_sink->_M_reserve(__n); }
    5cd8:	4c 89 fe             	mov    rsi,r15
    5cdb:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5cde:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5ce1:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5ce4:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5ce7:	48 85 c0             	test   rax,rax
    5cea:	0f 84 18 fe ff ff    	je     5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5cf0:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    5cf4:	45 0f b6 f6          	movzx  r14d,r14b
    5cf8:	44 89 ea             	mov    edx,r13d
    5cfb:	89 ee                	mov    esi,ebp
		      *__ptr = '-';
    5cfd:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    5d00:	4c 01 f7             	add    rdi,r14
    5d03:	e8 68 f8 ff ff       	call   5570 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5d08:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
    5d0c:	4c 89 fe             	mov    rsi,r15
    5d0f:	4c 89 e7             	mov    rdi,r12
    5d12:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5d15:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5d19:	c6 00 01             	mov    BYTE PTR [rax],0x1
    5d1c:	e9 e7 fd ff ff       	jmp    5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5d21:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    5d28:	44 8b 2f             	mov    r13d,DWORD PTR [rdi]
	  if (__value < (unsigned)__base) return __n;
    5d2b:	41 83 fd 09          	cmp    r13d,0x9
    5d2f:	0f 86 2d 02 00 00    	jbe    5f62 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x542>
    5d35:	44 89 e9             	mov    ecx,r13d
      unsigned __n = 1;
    5d38:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    5d3d:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    5d44:	c5 6d 34 
    5d47:	eb 3c                	jmp    5d85 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x365>
    5d49:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    5d50:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    5d56:	0f 86 64 01 00 00    	jbe    5ec0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4a0>
	  if (__value < __b4) return __n + 3;
    5d5c:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    5d62:	0f 86 98 01 00 00    	jbe    5f00 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4e0>
	  __value /= __b4;
    5d68:	89 ca                	mov    edx,ecx
	  __n += 4;
    5d6a:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    5d6d:	48 89 d0             	mov    rax,rdx
    5d70:	48 f7 e6             	mul    rsi
    5d73:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    5d77:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    5d7d:	0f 86 bd 01 00 00    	jbe    5f40 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x520>
    5d83:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    5d85:	83 f9 63             	cmp    ecx,0x63
    5d88:	77 c6                	ja     5d50 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x330>
    5d8a:	44 8d 75 01          	lea    r14d,[rbp+0x1]
    5d8e:	4c 89 f5             	mov    rbp,r14
      { return _M_sink->_M_reserve(__n); }
    5d91:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    5d94:	4c 89 f6             	mov    rsi,r14
    5d97:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5d9a:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5d9d:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5da0:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5da3:	48 85 c0             	test   rax,rax
    5da6:	0f 84 5c fd ff ff    	je     5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5dac:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    5db0:	44 89 ea             	mov    edx,r13d
    5db3:	89 ee                	mov    esi,ebp
		      *__ptr = '-';
    5db5:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    5db8:	e8 b3 f7 ff ff       	call   5570 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5dbd:	e9 32 fd ff ff       	jmp    5af4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xd4>
    5dc2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    5dc8:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
	  if (__value < (unsigned)__base) return __n;
    5dcb:	49 83 fd 09          	cmp    r13,0x9
    5dcf:	0f 86 73 01 00 00    	jbe    5f48 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x528>
    5dd5:	4c 89 e9             	mov    rcx,r13
      unsigned __n = 1;
    5dd8:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    5ddd:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    5de4:	c5 6d 34 
    5de7:	eb 3e                	jmp    5e27 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x407>
    5de9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    5df0:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    5df7:	0f 86 d3 00 00 00    	jbe    5ed0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4b0>
	  if (__value < __b4) return __n + 3;
    5dfd:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    5e04:	0f 86 16 01 00 00    	jbe    5f20 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x500>
	  __value /= __b4;
    5e0a:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    5e0d:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    5e10:	48 f7 e6             	mul    rsi
    5e13:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    5e17:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    5e1e:	0f 86 0c 01 00 00    	jbe    5f30 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x510>
    5e24:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    5e27:	48 83 f9 63          	cmp    rcx,0x63
    5e2b:	77 c3                	ja     5df0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x3d0>
    5e2d:	44 8d 75 01          	lea    r14d,[rbp+0x1]
    5e31:	4c 89 f5             	mov    rbp,r14
      { return _M_sink->_M_reserve(__n); }
    5e34:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    5e37:	4c 89 f6             	mov    rsi,r14
    5e3a:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5e3d:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5e40:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5e43:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5e46:	48 85 c0             	test   rax,rax
    5e49:	0f 84 b9 fc ff ff    	je     5b08 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5e4f:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      *__ptr = '-';
    5e53:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
    5e56:	e9 8f fc ff ff       	jmp    5aea <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xca>
    5e5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    5e60:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
    5e63:	48 89 08             	mov    QWORD PTR [rax],rcx
    5e66:	44 89 e1             	mov    ecx,r12d
    5e69:	48 8b 74 0a f8       	mov    rsi,QWORD PTR [rdx+rcx*1-0x8]
    5e6e:	48 89 74 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rsi
    5e73:	48 8d 48 08          	lea    rcx,[rax+0x8]
    5e77:	48 83 e1 f8          	and    rcx,0xfffffffffffffff8
    5e7b:	48 29 c8             	sub    rax,rcx
    5e7e:	41 01 c4             	add    r12d,eax
    5e81:	48 29 c2             	sub    rdx,rax
    5e84:	41 83 e4 f8          	and    r12d,0xfffffff8
    5e88:	41 83 fc 08          	cmp    r12d,0x8
    5e8c:	0f 82 77 fd ff ff    	jb     5c09 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    5e92:	41 83 e4 f8          	and    r12d,0xfffffff8
    5e96:	31 c0                	xor    eax,eax
    5e98:	89 c6                	mov    esi,eax
    5e9a:	83 c0 08             	add    eax,0x8
    5e9d:	4c 8b 04 32          	mov    r8,QWORD PTR [rdx+rsi*1]
    5ea1:	4c 89 04 31          	mov    QWORD PTR [rcx+rsi*1],r8
    5ea5:	44 39 e0             	cmp    eax,r12d
    5ea8:	72 ee                	jb     5e98 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x478>
    5eaa:	e9 5a fd ff ff       	jmp    5c09 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    5eaf:	90                   	nop
	  if (__value < __b3) return __n + 2;
    5eb0:	83 c5 02             	add    ebp,0x2
    5eb3:	e9 19 fe ff ff       	jmp    5cd1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    5eb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    5ebf:	00 
    5ec0:	44 8d 75 02          	lea    r14d,[rbp+0x2]
    5ec4:	4c 89 f5             	mov    rbp,r14
    5ec7:	e9 c5 fe ff ff       	jmp    5d91 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    5ecc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5ed0:	44 8d 75 02          	lea    r14d,[rbp+0x2]
    5ed4:	4c 89 f5             	mov    rbp,r14
    5ed7:	e9 58 ff ff ff       	jmp    5e34 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    5edc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5ee0:	83 c5 02             	add    ebp,0x2
    5ee3:	e9 dc fb ff ff       	jmp    5ac4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    5ee8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    5eef:	00 
	  if (__value < __b4) return __n + 3;
    5ef0:	83 c5 03             	add    ebp,0x3
    5ef3:	e9 d9 fd ff ff       	jmp    5cd1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    5ef8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    5eff:	00 
    5f00:	44 8d 75 03          	lea    r14d,[rbp+0x3]
    5f04:	4c 89 f5             	mov    rbp,r14
    5f07:	e9 85 fe ff ff       	jmp    5d91 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    5f0c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5f10:	83 c5 03             	add    ebp,0x3
    5f13:	e9 ac fb ff ff       	jmp    5ac4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    5f18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    5f1f:	00 
    5f20:	44 8d 75 03          	lea    r14d,[rbp+0x3]
    5f24:	4c 89 f5             	mov    rbp,r14
    5f27:	e9 08 ff ff ff       	jmp    5e34 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    5f2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5f30:	41 89 ee             	mov    r14d,ebp
    5f33:	e9 fc fe ff ff       	jmp    5e34 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    5f38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    5f3f:	00 
    5f40:	41 89 ee             	mov    r14d,ebp
    5f43:	e9 49 fe ff ff       	jmp    5d91 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
	  if (__value < (unsigned)__base) return __n;
    5f48:	41 be 01 00 00 00    	mov    r14d,0x1
    5f4e:	bd 01 00 00 00       	mov    ebp,0x1
    5f53:	e9 dc fe ff ff       	jmp    5e34 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    5f58:	bd 01 00 00 00       	mov    ebp,0x1
    5f5d:	e9 62 fb ff ff       	jmp    5ac4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    5f62:	41 be 01 00 00 00    	mov    r14d,0x1
    5f68:	bd 01 00 00 00       	mov    ebp,0x1
    5f6d:	e9 1f fe ff ff       	jmp    5d91 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    5f72:	bd 01 00 00 00       	mov    ebp,0x1
    5f77:	e9 55 fd ff ff       	jmp    5cd1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    5f7c:	8b 0a                	mov    ecx,DWORD PTR [rdx]
    5f7e:	45 89 e4             	mov    r12d,r12d
    5f81:	89 08                	mov    DWORD PTR [rax],ecx
    5f83:	42 8b 54 22 fc       	mov    edx,DWORD PTR [rdx+r12*1-0x4]
    5f88:	42 89 54 20 fc       	mov    DWORD PTR [rax+r12*1-0x4],edx
    5f8d:	e9 77 fc ff ff       	jmp    5c09 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    5f92:	45 89 e4             	mov    r12d,r12d
    5f95:	42 0f b7 54 22 fe    	movzx  edx,WORD PTR [rdx+r12*1-0x2]
    5f9b:	66 42 89 54 20 fe    	mov    WORD PTR [rax+r12*1-0x2],dx
    5fa1:	e9 63 fc ff ff       	jmp    5c09 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    5fa6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5fad:	00 00 00 

0000000000005fb0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>:
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    5fb0:	41 55                	push   r13
    5fb2:	41 54                	push   r12
    5fb4:	55                   	push   rbp
    5fb5:	48 89 f5             	mov    rbp,rsi
    5fb8:	53                   	push   rbx
    5fb9:	48 89 d3             	mov    rbx,rdx
      : _M_out(std::move(__out)), _M_max(__max)
    5fbc:	48 8d 15 95 5a 01 00 	lea    rdx,[rip+0x15a95]        # 1ba58 <vtable for std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >+0x10>
    5fc3:	66 48 0f 6e c2       	movq   xmm0,rdx
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    5fc8:	48 81 ec f8 01 00 00 	sub    rsp,0x1f8
      : _M_span(__span), _M_next(__span.begin())
    5fcf:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    5fd6:	00 
    5fd7:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x100
    5fde:	00 00 01 00 00 
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    5fe3:	4c 8d 6c 24 40       	lea    r13,[rsp+0x40]
      : _M_out(std::move(__out)), _M_max(__max)
    5fe8:	66 48 0f 6e c8       	movq   xmm1,rax
      : _M_span(__span), _M_next(__span.begin())
    5fed:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    5ff4:	00 
    5ff5:	4c 8d 64 24 70       	lea    r12,[rsp+0x70]
      : _M_out(std::move(__out)), _M_max(__max)
    5ffa:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    5ffe:	48 89 bc 24 d0 01 00 	mov    QWORD PTR [rsp+0x1d0],rdi
    6005:	00 
    6006:	48 c7 84 24 d8 01 00 	mov    QWORD PTR [rsp+0x1d8],0xffffffffffffffff
    600d:	00 ff ff ff ff 
    6012:	48 c7 84 24 e0 01 00 	mov    QWORD PTR [rsp+0x1e0],0x0
    6019:	00 00 00 00 00 
	__sink_out = __out; // Already a sink iterator, safe to use post-move.
    601e:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
      : _M_out(std::move(__out)), _M_max(__max)
    6023:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    602a:	00 
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    602b:	48 83 fe 02          	cmp    rsi,0x2
    602f:	0f 84 b3 00 00 00    	je     60e8 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x138>
    6035:	f3 0f 6f 01          	movdqu xmm0,XMMWORD PTR [rcx]
      basic_format_context(basic_format_args<basic_format_context> __args,
    6039:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
      : _M_args(__args), _M_out(std::move(__out))
    603e:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
    6043:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
		     ? _Context(__args, __sink_out)
    6048:	4d 85 c0             	test   r8,r8
    604b:	0f 84 7f 00 00 00    	je     60d0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x120>
    : _M_loc(__loc), _M_hasval(true)
    6051:	48 8d 7c 24 58       	lea    rdi,[rsp+0x58]
    6056:	4c 89 c6             	mov    rsi,r8
    6059:	e8 32 d1 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    605e:	c6 44 24 60 01       	mov    BYTE PTR [rsp+0x60],0x1
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    6063:	66 0f 6f 05 55 27 01 	movdqa xmm0,XMMWORD PTR [rip+0x12755]        # 187c0 <std::__unicode::__v15_1_0::__width_edges+0x400>
    606a:	00 
    606b:	48 89 5c 24 78       	mov    QWORD PTR [rsp+0x78],rbx
      __scanner._M_scan();
    6070:	4c 89 e7             	mov    rdi,r12
      { return this->_M_str + this->_M_len; }
    6073:	48 01 eb             	add    rbx,rbp
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    6076:	48 8d 05 03 5a 01 00 	lea    rax,[rip+0x15a03]        # 1ba80 <vtable for std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>+0x10>
    607d:	48 89 9c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbx
    6084:	00 
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    6085:	c7 84 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],0x0
    608c:	00 00 00 00 
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    6090:	48 89 44 24 70       	mov    QWORD PTR [rsp+0x70],rax
    6095:	4c 89 ac 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],r13
    609c:	00 
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    609d:	0f 29 84 24 90 00 00 	movaps XMMWORD PTR [rsp+0x90],xmm0
    60a4:	00 
      __scanner._M_scan();
    60a5:	e8 46 f0 ff ff       	call   50f0 <std::__format::_Scanner<char>::_M_scan()>
    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    60aa:	80 7c 24 60 00       	cmp    BYTE PTR [rsp+0x60],0x0
    60af:	48 8b 5c 24 50       	mov    rbx,QWORD PTR [rsp+0x50]
    60b4:	0f 85 e6 00 00 00    	jne    61a0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x1f0>
    }
    60ba:	48 81 c4 f8 01 00 00 	add    rsp,0x1f8
    60c1:	48 89 d8             	mov    rax,rbx
    60c4:	5b                   	pop    rbx
    60c5:	5d                   	pop    rbp
    60c6:	41 5c                	pop    r12
    60c8:	41 5d                	pop    r13
    60ca:	c3                   	ret
    60cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }
    60d0:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
    60d7:	00 00 
    60d9:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
    60de:	e9 80 ff ff ff       	jmp    6063 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0xb3>
    60e3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    60e8:	80 3b 7b             	cmp    BYTE PTR [rbx],0x7b
    60eb:	0f 85 44 ff ff ff    	jne    6035 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x85>
    60f1:	80 7b 01 7d          	cmp    BYTE PTR [rbx+0x1],0x7d
    60f5:	0f 85 3a ff ff ff    	jne    6035 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x85>
	    bool __done = false;
    60fb:	c6 44 24 17 00       	mov    BYTE PTR [rsp+0x17],0x0
	if (__i < _M_packed_size)
    6100:	f6 01 0f             	test   BYTE PTR [rcx],0xf
    6103:	0f 84 a7 00 00 00    	je     61b0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x200>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    6109:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
	    __arg._M_val = _M_values[__i];
    610c:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    6110:	48 c1 ea 04          	shr    rdx,0x4
	    __arg._M_val = _M_values[__i];
    6114:	66 0f 6f 06          	movdqa xmm0,XMMWORD PTR [rsi]
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    6118:	89 d0                	mov    eax,edx
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    611a:	83 e2 1f             	and    edx,0x1f
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    611d:	83 e0 1f             	and    eax,0x1f
	    __arg._M_val = _M_values[__i];
    6120:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
	    std::visit_format_arg([&](auto& __arg) {
    6125:	48 8d 74 24 18       	lea    rsi,[rsp+0x18]
    612a:	88 44 24 30          	mov    BYTE PTR [rsp+0x30],al
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    612e:	4c 8d 6c 24 40       	lea    r13,[rsp+0x40]
	    std::visit_format_arg([&](auto& __arg) {
    6133:	66 48 0f 6e c6       	movq   xmm0,rsi
    6138:	48 8d 74 24 17       	lea    rsi,[rsp+0x17]
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    613d:	4c 8d 64 24 70       	lea    r12,[rsp+0x70]
    6142:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
	    std::visit_format_arg([&](auto& __arg) {
    6146:	66 48 0f 6e d6       	movq   xmm2,rsi
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    614b:	4c 89 e7             	mov    rdi,r12
    614e:	4c 89 ee             	mov    rsi,r13
    6151:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
	    std::visit_format_arg([&](auto& __arg) {
    6156:	66 0f 6c c2          	punpcklqdq xmm0,xmm2
    615a:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
    615f:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    6165:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    616a:	66 0f 6f 44 24 30    	movdqa xmm0,XMMWORD PTR [rsp+0x30]
    6170:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
    6177:	00 
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    6178:	e8 a3 f8 ff ff       	call   5a20 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>
	    if (__done)
    617d:	80 7c 24 17 00       	cmp    BYTE PTR [rsp+0x17],0x0
    6182:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
    6186:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
    618b:	0f 84 a4 fe ff ff    	je     6035 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x85>
		  return __sink_out;
    6191:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
    6196:	e9 1f ff ff ff       	jmp    60ba <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x10a>
    619b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    61a0:	48 8d 7c 24 58       	lea    rdi,[rsp+0x58]
    61a5:	e8 16 d1 ff ff       	call   32c0 <std::locale::~locale()@plt>
      ~basic_format_context() = default;
    61aa:	e9 0b ff ff ff       	jmp    60ba <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x10a>
    61af:	90                   	nop
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    61b0:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
    61b3:	31 c0                	xor    eax,eax
    61b5:	31 d2                	xor    edx,edx
    61b7:	48 c1 ee 04          	shr    rsi,0x4
    61bb:	0f 84 64 ff ff ff    	je     6125 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x175>
	  __arg = _M_args[__i];
    61c1:	48 8b 41 08          	mov    rax,QWORD PTR [rcx+0x8]
    61c5:	f3 0f 6f 00          	movdqu xmm0,XMMWORD PTR [rax]
    61c9:	0f b6 50 10          	movzx  edx,BYTE PTR [rax+0x10]
    61cd:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    61d2:	89 d0                	mov    eax,edx
    61d4:	e9 4c ff ff ff       	jmp    6125 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x175>
    61d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000061e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>:
      _S_parse_width_or_precision(iterator __first, iterator __last,
    61e0:	49 89 f9             	mov    r9,rdi
    61e3:	49 89 d2             	mov    r10,rdx
    61e6:	48 89 f7             	mov    rdi,rsi
	if (__format::__is_digit(*__first))
    61e9:	41 0f b6 11          	movzx  edx,BYTE PTR [r9]
    61ed:	48 8d 35 8c fd 00 00 	lea    rsi,[rip+0xfd8c]        # 15f80 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
    61f4:	80 3c 16 09          	cmp    BYTE PTR [rsi+rdx*1],0x9
    61f8:	77 76                	ja     6270 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x90>
    61fa:	4c 89 ce             	mov    rsi,r9
	  unsigned short __val = 0;
    61fd:	31 c0                	xor    eax,eax
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
    61ff:	41 b8 10 00 00 00    	mov    r8d,0x10
    6205:	eb 1b                	jmp    6222 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x42>
    6207:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    620e:	00 00 
	    __val = __val * __base + __c;
    6210:	8d 04 80             	lea    eax,[rax+rax*4]
    6213:	0f b6 c9             	movzx  ecx,cl
      for (; __first != __last; ++__first)
    6216:	48 83 c6 01          	add    rsi,0x1
	    __val = __val * __base + __c;
    621a:	8d 04 41             	lea    eax,[rcx+rax*2]
      for (; __first != __last; ++__first)
    621d:	48 39 f7             	cmp    rdi,rsi
    6220:	74 3e                	je     6260 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x80>
	return static_cast<unsigned char>(__c - '0');
    6222:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
    6225:	8d 4a d0             	lea    ecx,[rdx-0x30]
	  if (__c >= __base)
    6228:	80 f9 09             	cmp    cl,0x9
    622b:	0f 87 af 00 00 00    	ja     62e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x100>
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
    6231:	41 83 e8 04          	sub    r8d,0x4
    6235:	79 d9                	jns    6210 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x30>
      if (__builtin_mul_overflow(__val, __base, &__val)
    6237:	ba 0a 00 00 00       	mov    edx,0xa
    623c:	66 f7 e2             	mul    dx
    623f:	0f 80 a4 00 00 00    	jo     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	  || __builtin_add_overflow(__val, __c, &__val))
    6245:	0f b6 c9             	movzx  ecx,cl
    6248:	66 01 c1             	add    cx,ax
    624b:	0f 82 98 00 00 00    	jb     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
      for (; __first != __last; ++__first)
    6251:	48 83 c6 01          	add    rsi,0x1
	  || __builtin_add_overflow(__val, __c, &__val))
    6255:	89 c8                	mov    eax,ecx
      for (; __first != __last; ++__first)
    6257:	48 39 f7             	cmp    rdi,rsi
    625a:	75 c6                	jne    6222 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x42>
    625c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	    __val = __v;
    6260:	66 41 89 02          	mov    WORD PTR [r10],ax
      }
    6264:	48 89 f0             	mov    rax,rsi
    6267:	c3                   	ret
    6268:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    626f:	00 
    6270:	4c 89 ce             	mov    rsi,r9
	else if (*__first == '{')
    6273:	80 fa 7b             	cmp    dl,0x7b
    6276:	75 ec                	jne    6264 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x84>
	    ++__first;
    6278:	49 8d 71 01          	lea    rsi,[r9+0x1]
	    __arg_id = true;
    627c:	c6 01 01             	mov    BYTE PTR [rcx],0x1
	    if (__first == __last)
    627f:	48 39 fe             	cmp    rsi,rdi
    6282:	74 65                	je     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	    if (*__first == '}')
    6284:	66 41 0f be 41 01    	movsx  ax,BYTE PTR [r9+0x1]
    628a:	3c 7d                	cmp    al,0x7d
    628c:	74 62                	je     62f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x110>
      if (*__first == '0')
    628e:	3c 30                	cmp    al,0x30
    6290:	0f 84 81 00 00 00    	je     6317 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x137>
      if ('1' <= *__first && *__first <= '9')
    6296:	8d 50 cf             	lea    edx,[rax-0x31]
    6299:	80 fa 08             	cmp    dl,0x8
    629c:	77 4b                	ja     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	  const auto __next = __first + 1;
    629e:	49 8d 49 02          	lea    rcx,[r9+0x2]
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    62a2:	48 39 cf             	cmp    rdi,rcx
    62a5:	74 42                	je     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
    62a7:	41 0f b6 51 02       	movzx  edx,BYTE PTR [r9+0x2]
    62ac:	83 ea 30             	sub    edx,0x30
    62af:	80 fa 09             	cmp    dl,0x9
    62b2:	76 7c                	jbe    6330 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x150>
	  const unsigned short __id = *__first - '0';
    62b4:	83 e8 30             	sub    eax,0x30
	    return {__id, __next};
    62b7:	48 89 ce             	mov    rsi,rcx
    62ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    62c0:	80 3e 7d             	cmp    BYTE PTR [rsi],0x7d
    62c3:	75 24                	jne    62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	if (_M_indexing == _Auto)
    62c5:	41 83 78 10 02       	cmp    DWORD PTR [r8+0x10],0x2
    62ca:	74 1d                	je     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	_M_indexing = _Manual;
    62cc:	41 c7 40 10 01 00 00 	mov    DWORD PTR [r8+0x10],0x1
    62d3:	00 
		__val = __v;
    62d4:	66 41 89 02          	mov    WORD PTR [r10],ax
    62d8:	eb 35                	jmp    630f <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x12f>
    62da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
		&& __first != __start) [[likely]]
    62e0:	49 39 f1             	cmp    r9,rsi
    62e3:	0f 85 77 ff ff ff    	jne    6260 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x80>
      _S_parse_width_or_precision(iterator __first, iterator __last,
    62e9:	50                   	push   rax
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    62ea:	e8 61 ce ff ff       	call   3150 <abort@plt>
    62ef:	90                   	nop
	if (_M_indexing == _Manual)
    62f0:	41 83 78 10 01       	cmp    DWORD PTR [r8+0x10],0x1
    62f5:	74 f2                	je     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	return _M_next_arg_id++;
    62f7:	49 8b 40 18          	mov    rax,QWORD PTR [r8+0x18]
	_M_indexing = _Auto;
    62fb:	41 c7 40 10 02 00 00 	mov    DWORD PTR [r8+0x10],0x2
    6302:	00 
	return _M_next_arg_id++;
    6303:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6307:	49 89 50 18          	mov    QWORD PTR [r8+0x18],rdx
	      __val = __pc.next_arg_id();
    630b:	66 41 89 02          	mov    WORD PTR [r10],ax
	    ++__first; // past the '}'
    630f:	48 83 c6 01          	add    rsi,0x1
      }
    6313:	48 89 f0             	mov    rax,rsi
    6316:	c3                   	ret
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
    6317:	49 8d 71 02          	lea    rsi,[r9+0x2]
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    631b:	48 39 f7             	cmp    rdi,rsi
    631e:	0f 94 c2             	sete   dl
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
    6321:	31 c0                	xor    eax,eax
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    6323:	84 d2                	test   dl,dl
    6325:	74 99                	je     62c0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0xe0>
    6327:	eb c0                	jmp    62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
    6329:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    6330:	49 89 f1             	mov    r9,rsi
	  unsigned short __val = 0;
    6333:	31 c0                	xor    eax,eax
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
    6335:	41 bb 10 00 00 00    	mov    r11d,0x10
    633b:	eb 15                	jmp    6352 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x172>
    633d:	0f 1f 00             	nop    DWORD PTR [rax]
	    __val = __val * __base + __c;
    6340:	8d 04 80             	lea    eax,[rax+rax*4]
    6343:	0f b6 c9             	movzx  ecx,cl
    6346:	8d 04 41             	lea    eax,[rcx+rax*2]
      for (; __first != __last; ++__first)
    6349:	49 83 c1 01          	add    r9,0x1
    634d:	4c 39 cf             	cmp    rdi,r9
    6350:	74 97                	je     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	return static_cast<unsigned char>(__c - '0');
    6352:	41 0f b6 11          	movzx  edx,BYTE PTR [r9]
    6356:	8d 4a d0             	lea    ecx,[rdx-0x30]
	  if (__c >= __base)
    6359:	80 f9 09             	cmp    cl,0x9
    635c:	77 24                	ja     6382 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x1a2>
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
    635e:	41 83 eb 04          	sub    r11d,0x4
    6362:	79 dc                	jns    6340 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x160>
      if (__builtin_mul_overflow(__val, __base, &__val)
    6364:	ba 0a 00 00 00       	mov    edx,0xa
    6369:	66 f7 e2             	mul    dx
    636c:	0f 80 77 ff ff ff    	jo     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	  || __builtin_add_overflow(__val, __c, &__val))
    6372:	0f b6 c9             	movzx  ecx,cl
    6375:	66 01 c1             	add    cx,ax
    6378:	0f 82 6b ff ff ff    	jb     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
    637e:	89 c8                	mov    eax,ecx
    6380:	eb c7                	jmp    6349 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x169>
		&& __first != __start) [[likely]]
    6382:	4c 39 ce             	cmp    rsi,r9
    6385:	0f 84 5e ff ff ff    	je     62e9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    638b:	4c 39 cf             	cmp    rdi,r9
	    return __format::__parse_integer(__first, __last);
    638e:	4c 89 ce             	mov    rsi,r9
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    6391:	0f 94 c2             	sete   dl
	    return __format::__parse_integer(__first, __last);
    6394:	eb 8d                	jmp    6323 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x143>
    6396:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    639d:	00 00 00 

00000000000063a0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
    63a0:	41 57                	push   r15
	  switch (__type)
    63a2:	48 8d 0d ef ee 00 00 	lea    rcx,[rip+0xeeef]        # 15298 <CSWTCH.1104+0x1b8>
    63a9:	0f b6 d2             	movzx  edx,dl
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
    63ac:	41 56                	push   r14
    63ae:	41 55                	push   r13
    63b0:	41 54                	push   r12
    63b2:	55                   	push   rbp
    63b3:	48 89 fd             	mov    rbp,rdi
    63b6:	53                   	push   rbx
    63b7:	48 89 f3             	mov    rbx,rsi
    63ba:	48 83 ec 18          	sub    rsp,0x18
	  switch (__type)
    63be:	48 63 04 91          	movsxd rax,DWORD PTR [rcx+rdx*4]
    63c2:	48 01 c8             	add    rax,rcx
    63c5:	ff e0                	jmp    rax
    63c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    63ce:	00 00 
    63d0:	48 8b 07             	mov    rax,QWORD PTR [rdi]
		  const bool __neg = __arg < 0;
    63d3:	49 89 c7             	mov    r15,rax
		  if (__neg)
    63d6:	49 89 c5             	mov    r13,rax
		  const bool __neg = __arg < 0;
    63d9:	49 c1 ef 3f          	shr    r15,0x3f
		  if (__neg)
    63dd:	49 f7 dd             	neg    r13
    63e0:	4c 0f 48 e8          	cmovs  r13,rax
    63e4:	49 83 fd 09          	cmp    r13,0x9
    63e8:	0f 86 ea 04 00 00    	jbe    68d8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x538>
    63ee:	4c 89 e9             	mov    rcx,r13
      unsigned __n = 1;
    63f1:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    63f6:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    63fd:	c5 6d 34 
    6400:	eb 39                	jmp    643b <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x9b>
    6402:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  if (__value < __b3) return __n + 2;
    6408:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    640f:	0f 86 4b 04 00 00    	jbe    6860 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4c0>
	  if (__value < __b4) return __n + 3;
    6415:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    641c:	0f 86 6e 04 00 00    	jbe    6890 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4f0>
	  __value /= __b4;
    6422:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    6425:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    6428:	48 f7 e6             	mul    rsi
    642b:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    642f:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    6436:	76 0c                	jbe    6444 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6438:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    643b:	48 83 f9 63          	cmp    rcx,0x63
    643f:	77 c7                	ja     6408 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x68>
    6441:	83 c5 01             	add    ebp,0x1
      { return _M_sink->_M_reserve(__n); }
    6444:	48 8b 03             	mov    rax,QWORD PTR [rbx]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6447:	46 8d 74 3d 00       	lea    r14d,[rbp+r15*1+0x0]
      { return _M_sink->_M_reserve(__n); }
    644c:	4c 89 f6             	mov    rsi,r14
    644f:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    6452:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6455:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6458:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    645b:	48 85 c0             	test   rax,rax
    645e:	74 28                	je     6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
      { return _M_current; }
    6460:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      *__ptr = '-';
    6464:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6467:	4c 01 ff             	add    rdi,r15
    646a:	4c 89 ea             	mov    rdx,r13
    646d:	89 ee                	mov    esi,ebp
    646f:	e8 2c f2 ff ff       	call   56a0 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    6474:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
    6478:	4c 89 f6             	mov    rsi,r14
    647b:	4c 89 e7             	mov    rdi,r12
    647e:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    6481:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    6485:	c6 00 01             	mov    BYTE PTR [rax],0x1
	}
    6488:	48 83 c4 18          	add    rsp,0x18
    648c:	5b                   	pop    rbx
    648d:	5d                   	pop    rbp
    648e:	41 5c                	pop    r12
    6490:	41 5d                	pop    r13
    6492:	41 5e                	pop    r14
    6494:	41 5f                	pop    r15
    6496:	c3                   	ret
    6497:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    649e:	00 00 
    64a0:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
    64a3:	4c 89 ef             	mov    rdi,r13
    64a6:	e8 45 cc ff ff       	call   30f0 <strlen@plt>
    64ab:	49 89 c4             	mov    r12,rax
      { return _M_sink->_M_reserve(__n); }
    64ae:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    64b1:	4c 89 e6             	mov    rsi,r12
    64b4:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    64b7:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    64ba:	ff 50 08             	call   QWORD PTR [rax+0x8]
    64bd:	48 89 c5             	mov    rbp,rax
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
    64c0:	48 85 c0             	test   rax,rax
    64c3:	74 c3                	je     6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
    64c5:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
    64c9:	4c 89 e2             	mov    rdx,r12
    64cc:	4c 89 ee             	mov    rsi,r13
    64cf:	e8 dc cc ff ff       	call   31b0 <memcpy@plt>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    64d4:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    64d8:	4c 89 e6             	mov    rsi,r12
    64db:	48 89 ef             	mov    rdi,rbp
    64de:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    64e1:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    64e5:	c6 00 01             	mov    BYTE PTR [rax],0x1
	}
    64e8:	48 83 c4 18          	add    rsp,0x18
    64ec:	5b                   	pop    rbx
    64ed:	5d                   	pop    rbp
    64ee:	41 5c                	pop    r12
    64f0:	41 5d                	pop    r13
    64f2:	41 5e                	pop    r14
    64f4:	41 5f                	pop    r15
    64f6:	c3                   	ret
    64f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    64fe:	00 00 
    6500:	4c 8b 27             	mov    r12,QWORD PTR [rdi]
    6503:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
    6507:	eb a5                	jmp    64ae <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x10e>
    6509:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  const char* __chars[] = { "false", "true" };
    6510:	48 8d 05 19 ec 00 00 	lea    rax,[rip+0xec19]        # 15130 <CSWTCH.1104+0x50>
		  size_t __len = 4 + !__arg;
    6517:	44 0f b6 27          	movzx  r12d,BYTE PTR [rdi]
		  const char* __chars[] = { "false", "true" };
    651b:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    651f:	48 8d 05 10 ec 00 00 	lea    rax,[rip+0xec10]        # 15136 <CSWTCH.1104+0x56>
    6526:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
      { return _M_sink->_M_reserve(__n); }
    652b:	48 8b 06             	mov    rax,QWORD PTR [rsi]
		  size_t __len = 4 + !__arg;
    652e:	41 83 f4 01          	xor    r12d,0x1
    6532:	45 0f b6 e4          	movzx  r12d,r12b
      { return _M_sink->_M_reserve(__n); }
    6536:	48 8b 38             	mov    rdi,QWORD PTR [rax]
		  size_t __len = 4 + !__arg;
    6539:	41 83 c4 04          	add    r12d,0x4
    653d:	4d 63 ec             	movsxd r13,r12d
      { return _M_sink->_M_reserve(__n); }
    6540:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6543:	4c 89 ee             	mov    rsi,r13
    6546:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6549:	48 89 c7             	mov    rdi,rax
		  if (auto __res = __sink_out._M_reserve(__len))
    654c:	48 85 c0             	test   rax,rax
    654f:	0f 84 33 ff ff ff    	je     6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    6555:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
    6559:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
    655d:	48 8b 14 d4          	mov    rdx,QWORD PTR [rsp+rdx*8]
    6561:	41 83 fc 08          	cmp    r12d,0x8
    6565:	0f 83 75 02 00 00    	jae    67e0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x440>
    656b:	41 f6 c4 04          	test   r12b,0x4
    656f:	0f 85 87 03 00 00    	jne    68fc <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x55c>
    6575:	45 85 e4             	test   r12d,r12d
    6578:	74 0f                	je     6589 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    657a:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    657d:	88 08                	mov    BYTE PTR [rax],cl
    657f:	41 f6 c4 02          	test   r12b,0x2
    6583:	0f 85 89 03 00 00    	jne    6912 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x572>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    6589:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    658c:	4c 89 ee             	mov    rsi,r13
    658f:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    6592:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    6596:	c6 00 01             	mov    BYTE PTR [rax],0x1
	    std::visit_format_arg([&](auto& __arg) {
    6599:	e9 ea fe ff ff       	jmp    6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    659e:	66 90                	xchg   ax,ax
      { return _M_sink->_M_reserve(__n); }
    65a0:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    65a3:	be 01 00 00 00       	mov    esi,0x1
    65a8:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    65ab:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    65ae:	ff 50 08             	call   QWORD PTR [rax+0x8]
    65b1:	48 89 c7             	mov    rdi,rax
		  if (auto __res = __sink_out._M_reserve(1))
    65b4:	48 85 c0             	test   rax,rax
    65b7:	0f 84 cb fe ff ff    	je     6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    65bd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
		      *__res.get() = __arg;
    65c1:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    65c5:	be 01 00 00 00       	mov    esi,0x1
		      *__res.get() = __arg;
    65ca:	88 10                	mov    BYTE PTR [rax],dl
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    65cc:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    65cf:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    65d2:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    65d6:	c6 00 01             	mov    BYTE PTR [rax],0x1
    65d9:	e9 aa fe ff ff       	jmp    6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    65de:	66 90                	xchg   ax,ax
    65e0:	8b 07                	mov    eax,DWORD PTR [rdi]
		  const bool __neg = __arg < 0;
    65e2:	41 89 c6             	mov    r14d,eax
		  if (__neg)
    65e5:	41 89 c5             	mov    r13d,eax
		  const bool __neg = __arg < 0;
    65e8:	41 c1 ee 1f          	shr    r14d,0x1f
		  if (__neg)
    65ec:	41 f7 dd             	neg    r13d
    65ef:	44 0f 48 e8          	cmovs  r13d,eax
	  if (__value < (unsigned)__base) return __n;
    65f3:	41 83 fd 09          	cmp    r13d,0x9
    65f7:	0f 86 f5 02 00 00    	jbe    68f2 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x552>
    65fd:	44 89 e9             	mov    ecx,r13d
      unsigned __n = 1;
    6600:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    6605:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    660c:	c5 6d 34 
    660f:	eb 38                	jmp    6649 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2a9>
    6611:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    6618:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    661e:	0f 86 0c 02 00 00    	jbe    6830 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x490>
	  if (__value < __b4) return __n + 3;
    6624:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    662a:	0f 86 40 02 00 00    	jbe    6870 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4d0>
	  __value /= __b4;
    6630:	89 ca                	mov    edx,ecx
	  __n += 4;
    6632:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    6635:	48 89 d0             	mov    rax,rdx
    6638:	48 f7 e6             	mul    rsi
    663b:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    663f:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    6645:	76 0a                	jbe    6651 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    6647:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    6649:	83 f9 63             	cmp    ecx,0x63
    664c:	77 ca                	ja     6618 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x278>
    664e:	83 c5 01             	add    ebp,0x1
      { return _M_sink->_M_reserve(__n); }
    6651:	48 8b 03             	mov    rax,QWORD PTR [rbx]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6654:	45 8d 3c 2e          	lea    r15d,[r14+rbp*1]
      { return _M_sink->_M_reserve(__n); }
    6658:	4c 89 fe             	mov    rsi,r15
    665b:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    665e:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6661:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6664:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6667:	48 85 c0             	test   rax,rax
    666a:	0f 84 18 fe ff ff    	je     6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    6670:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6674:	45 0f b6 f6          	movzx  r14d,r14b
    6678:	44 89 ea             	mov    edx,r13d
    667b:	89 ee                	mov    esi,ebp
		      *__ptr = '-';
    667d:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6680:	4c 01 f7             	add    rdi,r14
    6683:	e8 e8 ee ff ff       	call   5570 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    6688:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
    668c:	4c 89 fe             	mov    rsi,r15
    668f:	4c 89 e7             	mov    rdi,r12
    6692:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    6695:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    6699:	c6 00 01             	mov    BYTE PTR [rax],0x1
    669c:	e9 e7 fd ff ff       	jmp    6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    66a1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    66a8:	44 8b 2f             	mov    r13d,DWORD PTR [rdi]
	  if (__value < (unsigned)__base) return __n;
    66ab:	41 83 fd 09          	cmp    r13d,0x9
    66af:	0f 86 2d 02 00 00    	jbe    68e2 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x542>
    66b5:	44 89 e9             	mov    ecx,r13d
      unsigned __n = 1;
    66b8:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    66bd:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    66c4:	c5 6d 34 
    66c7:	eb 3c                	jmp    6705 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x365>
    66c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    66d0:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    66d6:	0f 86 64 01 00 00    	jbe    6840 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4a0>
	  if (__value < __b4) return __n + 3;
    66dc:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    66e2:	0f 86 98 01 00 00    	jbe    6880 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4e0>
	  __value /= __b4;
    66e8:	89 ca                	mov    edx,ecx
	  __n += 4;
    66ea:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    66ed:	48 89 d0             	mov    rax,rdx
    66f0:	48 f7 e6             	mul    rsi
    66f3:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    66f7:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    66fd:	0f 86 bd 01 00 00    	jbe    68c0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x520>
    6703:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    6705:	83 f9 63             	cmp    ecx,0x63
    6708:	77 c6                	ja     66d0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x330>
    670a:	44 8d 75 01          	lea    r14d,[rbp+0x1]
    670e:	4c 89 f5             	mov    rbp,r14
      { return _M_sink->_M_reserve(__n); }
    6711:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    6714:	4c 89 f6             	mov    rsi,r14
    6717:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    671a:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    671d:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6720:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6723:	48 85 c0             	test   rax,rax
    6726:	0f 84 5c fd ff ff    	je     6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    672c:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6730:	44 89 ea             	mov    edx,r13d
    6733:	89 ee                	mov    esi,ebp
		      *__ptr = '-';
    6735:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6738:	e8 33 ee ff ff       	call   5570 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    673d:	e9 32 fd ff ff       	jmp    6474 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xd4>
    6742:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    6748:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
	  if (__value < (unsigned)__base) return __n;
    674b:	49 83 fd 09          	cmp    r13,0x9
    674f:	0f 86 73 01 00 00    	jbe    68c8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x528>
    6755:	4c 89 e9             	mov    rcx,r13
      unsigned __n = 1;
    6758:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    675d:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    6764:	c5 6d 34 
    6767:	eb 3e                	jmp    67a7 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x407>
    6769:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    6770:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    6777:	0f 86 d3 00 00 00    	jbe    6850 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4b0>
	  if (__value < __b4) return __n + 3;
    677d:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    6784:	0f 86 16 01 00 00    	jbe    68a0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x500>
	  __value /= __b4;
    678a:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    678d:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    6790:	48 f7 e6             	mul    rsi
    6793:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    6797:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    679e:	0f 86 0c 01 00 00    	jbe    68b0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x510>
    67a4:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    67a7:	48 83 f9 63          	cmp    rcx,0x63
    67ab:	77 c3                	ja     6770 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x3d0>
    67ad:	44 8d 75 01          	lea    r14d,[rbp+0x1]
    67b1:	4c 89 f5             	mov    rbp,r14
      { return _M_sink->_M_reserve(__n); }
    67b4:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    67b7:	4c 89 f6             	mov    rsi,r14
    67ba:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    67bd:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    67c0:	ff 50 08             	call   QWORD PTR [rax+0x8]
    67c3:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    67c6:	48 85 c0             	test   rax,rax
    67c9:	0f 84 b9 fc ff ff    	je     6488 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    67cf:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      *__ptr = '-';
    67d3:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
    67d6:	e9 8f fc ff ff       	jmp    646a <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xca>
    67db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    67e0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
    67e3:	48 89 08             	mov    QWORD PTR [rax],rcx
    67e6:	44 89 e1             	mov    ecx,r12d
    67e9:	48 8b 74 0a f8       	mov    rsi,QWORD PTR [rdx+rcx*1-0x8]
    67ee:	48 89 74 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rsi
    67f3:	48 8d 48 08          	lea    rcx,[rax+0x8]
    67f7:	48 83 e1 f8          	and    rcx,0xfffffffffffffff8
    67fb:	48 29 c8             	sub    rax,rcx
    67fe:	41 01 c4             	add    r12d,eax
    6801:	48 29 c2             	sub    rdx,rax
    6804:	41 83 e4 f8          	and    r12d,0xfffffff8
    6808:	41 83 fc 08          	cmp    r12d,0x8
    680c:	0f 82 77 fd ff ff    	jb     6589 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    6812:	41 83 e4 f8          	and    r12d,0xfffffff8
    6816:	31 c0                	xor    eax,eax
    6818:	89 c6                	mov    esi,eax
    681a:	83 c0 08             	add    eax,0x8
    681d:	4c 8b 04 32          	mov    r8,QWORD PTR [rdx+rsi*1]
    6821:	4c 89 04 31          	mov    QWORD PTR [rcx+rsi*1],r8
    6825:	44 39 e0             	cmp    eax,r12d
    6828:	72 ee                	jb     6818 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x478>
    682a:	e9 5a fd ff ff       	jmp    6589 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    682f:	90                   	nop
	  if (__value < __b3) return __n + 2;
    6830:	83 c5 02             	add    ebp,0x2
    6833:	e9 19 fe ff ff       	jmp    6651 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    6838:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    683f:	00 
    6840:	44 8d 75 02          	lea    r14d,[rbp+0x2]
    6844:	4c 89 f5             	mov    rbp,r14
    6847:	e9 c5 fe ff ff       	jmp    6711 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    684c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6850:	44 8d 75 02          	lea    r14d,[rbp+0x2]
    6854:	4c 89 f5             	mov    rbp,r14
    6857:	e9 58 ff ff ff       	jmp    67b4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    685c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6860:	83 c5 02             	add    ebp,0x2
    6863:	e9 dc fb ff ff       	jmp    6444 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6868:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    686f:	00 
	  if (__value < __b4) return __n + 3;
    6870:	83 c5 03             	add    ebp,0x3
    6873:	e9 d9 fd ff ff       	jmp    6651 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    6878:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    687f:	00 
    6880:	44 8d 75 03          	lea    r14d,[rbp+0x3]
    6884:	4c 89 f5             	mov    rbp,r14
    6887:	e9 85 fe ff ff       	jmp    6711 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    688c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6890:	83 c5 03             	add    ebp,0x3
    6893:	e9 ac fb ff ff       	jmp    6444 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6898:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    689f:	00 
    68a0:	44 8d 75 03          	lea    r14d,[rbp+0x3]
    68a4:	4c 89 f5             	mov    rbp,r14
    68a7:	e9 08 ff ff ff       	jmp    67b4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    68ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    68b0:	41 89 ee             	mov    r14d,ebp
    68b3:	e9 fc fe ff ff       	jmp    67b4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    68b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    68bf:	00 
    68c0:	41 89 ee             	mov    r14d,ebp
    68c3:	e9 49 fe ff ff       	jmp    6711 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
	  if (__value < (unsigned)__base) return __n;
    68c8:	41 be 01 00 00 00    	mov    r14d,0x1
    68ce:	bd 01 00 00 00       	mov    ebp,0x1
    68d3:	e9 dc fe ff ff       	jmp    67b4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    68d8:	bd 01 00 00 00       	mov    ebp,0x1
    68dd:	e9 62 fb ff ff       	jmp    6444 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    68e2:	41 be 01 00 00 00    	mov    r14d,0x1
    68e8:	bd 01 00 00 00       	mov    ebp,0x1
    68ed:	e9 1f fe ff ff       	jmp    6711 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    68f2:	bd 01 00 00 00       	mov    ebp,0x1
    68f7:	e9 55 fd ff ff       	jmp    6651 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    68fc:	8b 0a                	mov    ecx,DWORD PTR [rdx]
    68fe:	45 89 e4             	mov    r12d,r12d
    6901:	89 08                	mov    DWORD PTR [rax],ecx
    6903:	42 8b 54 22 fc       	mov    edx,DWORD PTR [rdx+r12*1-0x4]
    6908:	42 89 54 20 fc       	mov    DWORD PTR [rax+r12*1-0x4],edx
    690d:	e9 77 fc ff ff       	jmp    6589 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    6912:	45 89 e4             	mov    r12d,r12d
    6915:	42 0f b7 54 22 fe    	movzx  edx,WORD PTR [rdx+r12*1-0x2]
    691b:	66 42 89 54 20 fe    	mov    WORD PTR [rax+r12*1-0x2],dx
    6921:	e9 63 fc ff ff       	jmp    6589 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    6926:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    692d:	00 00 00 

0000000000006930 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>:
#endif

  template<typename _Out, typename... _Args>
    requires output_iterator<_Out, const char&>
    inline _Out
    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
    6930:	53                   	push   rbx
    {
      return std::vformat_to(std::move(__out), __fmt.get(),
			     std::make_format_args(__args...));
    6931:	48 8d 05 78 4e 00 00 	lea    rax,[rip+0x4e78]        # b7b0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
    6938:	48 89 fb             	mov    rbx,rdi
    693b:	49 89 d1             	mov    r9,rdx
    693e:	48 89 ca             	mov    rdx,rcx
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    6941:	4c 89 c9             	mov    rcx,r9
    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
    6944:	48 83 ec 20          	sub    rsp,0x20
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }
    6948:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
    694b:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
			     std::make_format_args(__args...));
    694f:	4c 89 04 24          	mov    QWORD PTR [rsp],r8
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    6953:	49 89 d0             	mov    r8,rdx
			     std::make_format_args(__args...));
    6956:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    695b:	48 89 f2             	mov    rdx,rsi
    695e:	48 89 fe             	mov    rsi,rdi
    6961:	48 89 df             	mov    rdi,rbx
    6964:	48 c7 44 24 10 d1 00 	mov    QWORD PTR [rsp+0x10],0xd1
    696b:	00 00 
    696d:	48 89 64 24 18       	mov    QWORD PTR [rsp+0x18],rsp
    6972:	48 83 ec 08          	sub    rsp,0x8
    6976:	6a 00                	push   0x0
    6978:	4c 8d 4c 24 20       	lea    r9,[rsp+0x20]
    697d:	e8 1e d7 ff ff       	call   40a0 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]>
    }
    6982:	48 83 c4 30          	add    rsp,0x30
    6986:	48 89 d8             	mov    rax,rbx
    6989:	5b                   	pop    rbx
    698a:	c3                   	ret
    698b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000006990 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>:
    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
    6990:	53                   	push   rbx
    6991:	49 89 d2             	mov    r10,rdx
    6994:	48 89 ca             	mov    rdx,rcx
    6997:	48 89 fb             	mov    rbx,rdi
    699a:	48 83 ec 30          	sub    rsp,0x30
	: _M_args{_S_make_elt(__a)...}
    699e:	41 8b 00             	mov    eax,DWORD PTR [r8]
    69a1:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    69a4:	49 89 d0             	mov    r8,rdx
    69a7:	48 8d 4c 24 10       	lea    rcx,[rsp+0x10]
    69ac:	48 c7 04 24 42 08 00 	mov    QWORD PTR [rsp],0x842
    69b3:	00 
    69b4:	48 83 ec 08          	sub    rsp,0x8
    69b8:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
	: _M_args{_S_make_elt(__a)...}
    69bc:	89 44 24 18          	mov    DWORD PTR [rsp+0x18],eax
    69c0:	41 8b 01             	mov    eax,DWORD PTR [r9]
    69c3:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    69c8:	48 89 f2             	mov    rdx,rsi
    69cb:	4c 89 d1             	mov    rcx,r10
    69ce:	48 89 fe             	mov    rsi,rdi
	: _M_args{_S_make_elt(__a)...}
    69d1:	89 44 24 28          	mov    DWORD PTR [rsp+0x28],eax
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    69d5:	48 89 df             	mov    rdi,rbx
    69d8:	6a 00                	push   0x0
    69da:	4c 8d 4c 24 10       	lea    r9,[rsp+0x10]
    69df:	e8 bc d6 ff ff       	call   40a0 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]>
    }
    69e4:	48 83 c4 40          	add    rsp,0x40
    69e8:	48 89 d8             	mov    rax,rbx
    69eb:	5b                   	pop    rbx
    69ec:	c3                   	ret
    69ed:	0f 1f 00             	nop    DWORD PTR [rax]

00000000000069f0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>:
	};

      constexpr void
      _M_read_utf8()
      {
	_Guard<_Iter> __g{this, _M_curr()};
    69f0:	48 8b 77 10          	mov    rsi,QWORD PTR [rdi+0x10]
      _M_read_utf8()
    69f4:	48 89 f8             	mov    rax,rdi
	char32_t __c{};
	const uint8_t __lo_bound = 0x80, __hi_bound = 0xBF;
	uint8_t __u = *_M_curr()++;
    69f7:	48 8d 4e 01          	lea    rcx,[rsi+0x1]
    69fb:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
    69ff:	0f be 16             	movsx  edx,BYTE PTR [rsi]
	auto __incr = [&, this] {
	  ++__to_incr;
	  return ++_M_curr();
	};

	if (__u <= 0x7F) [[likely]]      // 0x00 to 0x7F
    6a02:	84 d2                	test   dl,dl
    6a04:	78 1a                	js     6a20 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x30>
	uint8_t __to_incr = 1;
    6a06:	b9 01 00 00 00       	mov    ecx,0x1
      {
	_M_to_increment = __to_incr;
	_M_buf_index = 0;
	if constexpr (sizeof(_ToFmt) == sizeof(uint32_t))
	  {
	    _M_buf[0] = __c;
    6a0b:	89 10                	mov    DWORD PTR [rax],edx
	_M_buf_index = 0;
    6a0d:	ba 00 01 00 00       	mov    edx,0x100
	_M_to_increment = __to_incr;
    6a12:	88 48 1a             	mov    BYTE PTR [rax+0x1a],cl
	_M_buf_index = 0;
    6a15:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    6a19:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
      }
    6a1d:	c3                   	ret
    6a1e:	66 90                	xchg   ax,ax
	else if (__u < 0xC2) [[unlikely]]
    6a20:	80 fa c1             	cmp    dl,0xc1
    6a23:	0f 86 b7 00 00 00    	jbe    6ae0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	else if (_M_curr() == _M_last) [[unlikely]]
    6a29:	48 8b 7f 20          	mov    rdi,QWORD PTR [rdi+0x20]
    6a2d:	48 39 f9             	cmp    rcx,rdi
    6a30:	0f 84 aa 00 00 00    	je     6ae0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	else if (__u <= 0xDF) // 0xC2 to 0xDF
    6a36:	80 fa df             	cmp    dl,0xdf
    6a39:	76 7d                	jbe    6ab8 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xc8>
	else if (__u <= 0xEF) // 0xE0 to 0xEF
    6a3b:	80 fa ef             	cmp    dl,0xef
    6a3e:	0f 87 ac 00 00 00    	ja     6af0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x100>
	    const uint8_t __lo_bound_2 = __u == 0xE0 ? 0xA0 : __lo_bound;
    6a44:	80 fa e0             	cmp    dl,0xe0
    6a47:	0f 84 31 01 00 00    	je     6b7e <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x18e>
	    const uint8_t __hi_bound_2 = __u == 0xED ? 0x9F : __hi_bound;
    6a4d:	80 fa ed             	cmp    dl,0xed
    6a50:	41 b8 bf ff ff ff    	mov    r8d,0xffffffbf
    6a56:	b9 9f ff ff ff       	mov    ecx,0xffffff9f
    6a5b:	41 b9 80 ff ff ff    	mov    r9d,0xffffff80
    6a61:	44 0f 44 c1          	cmove  r8d,ecx
	    __u = *_M_curr();
    6a65:	0f b6 4e 01          	movzx  ecx,BYTE PTR [rsi+0x1]
	    __c = __u & 0x0F;
    6a69:	83 e2 0f             	and    edx,0xf
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
    6a6c:	44 38 c9             	cmp    cl,r9b
    6a6f:	72 6f                	jb     6ae0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
    6a71:	41 38 c8             	cmp    r8b,cl
    6a74:	72 6a                	jb     6ae0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	  return ++_M_curr();
    6a76:	4c 8d 46 02          	lea    r8,[rsi+0x2]
    6a7a:	4c 89 40 10          	mov    QWORD PTR [rax+0x10],r8
	    else if (__incr() == _M_last) [[unlikely]]
    6a7e:	4c 39 c7             	cmp    rdi,r8
    6a81:	0f 84 08 01 00 00    	je     6b8f <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x19f>
		__c = (__c << 6) | (__u & 0x3F);
    6a87:	c1 e2 06             	shl    edx,0x6
    6a8a:	83 e1 3f             	and    ecx,0x3f
    6a8d:	09 d1                	or     ecx,edx
		__u = *_M_curr();
    6a8f:	0f b6 56 02          	movzx  edx,BYTE PTR [rsi+0x2]
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
    6a93:	8d 7a 80             	lea    edi,[rdx-0x80]
    6a96:	40 80 ff 3f          	cmp    dil,0x3f
    6a9a:	0f 87 ef 00 00 00    	ja     6b8f <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x19f>
		    __c = (__c << 6) | (__u & 0x3F);
    6aa0:	c1 e1 06             	shl    ecx,0x6
    6aa3:	83 e2 3f             	and    edx,0x3f
    6aa6:	09 ca                	or     edx,ecx
	  ++__to_incr;
    6aa8:	b9 03 00 00 00       	mov    ecx,0x3
	  return ++_M_curr();
    6aad:	e9 59 ff ff ff       	jmp    6a0b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
    6ab2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __u = *_M_curr();
    6ab8:	0f b6 4e 01          	movzx  ecx,BYTE PTR [rsi+0x1]
	    __c = __u & 0x1F;
    6abc:	83 e2 1f             	and    edx,0x1f
	    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
    6abf:	8d 79 80             	lea    edi,[rcx-0x80]
    6ac2:	40 80 ff 3f          	cmp    dil,0x3f
    6ac6:	77 18                	ja     6ae0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
		__c = (__c << 6) | (__u & 0x3F);
    6ac8:	83 e1 3f             	and    ecx,0x3f
    6acb:	c1 e2 06             	shl    edx,0x6
    6ace:	09 ca                	or     edx,ecx
	  ++__to_incr;
    6ad0:	b9 02 00 00 00       	mov    ecx,0x2
	  return ++_M_curr();
    6ad5:	e9 31 ff ff ff       	jmp    6a0b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
    6ada:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	uint8_t __to_incr = 1;
    6ae0:	b9 01 00 00 00       	mov    ecx,0x1
	  __c = _S_error();
    6ae5:	ba fd ff 00 00       	mov    edx,0xfffd
    6aea:	e9 1c ff ff ff       	jmp    6a0b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
    6aef:	90                   	nop
	else if (__u <= 0xF4) // 0xF0 to 0xF4
    6af0:	80 fa f4             	cmp    dl,0xf4
    6af3:	77 eb                	ja     6ae0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	    const uint8_t __lo_bound_2 = __u == 0xF0 ? 0x90 : __lo_bound;
    6af5:	80 fa f0             	cmp    dl,0xf0
    6af8:	0f 84 a0 00 00 00    	je     6b9e <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1ae>
	    const uint8_t __hi_bound_2 = __u == 0xF4 ? 0x8F : __hi_bound;
    6afe:	80 fa f4             	cmp    dl,0xf4
    6b01:	41 b8 bf ff ff ff    	mov    r8d,0xffffffbf
    6b07:	b9 8f ff ff ff       	mov    ecx,0xffffff8f
    6b0c:	41 b9 80 ff ff ff    	mov    r9d,0xffffff80
    6b12:	44 0f 44 c1          	cmove  r8d,ecx
	    __u = *_M_curr();
    6b16:	0f b6 4e 01          	movzx  ecx,BYTE PTR [rsi+0x1]
	    __c = __u & 0x07;
    6b1a:	83 e2 07             	and    edx,0x7
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
    6b1d:	44 38 c9             	cmp    cl,r9b
    6b20:	72 be                	jb     6ae0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
    6b22:	41 38 c8             	cmp    r8b,cl
    6b25:	72 b9                	jb     6ae0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	  return ++_M_curr();
    6b27:	4c 8d 46 02          	lea    r8,[rsi+0x2]
    6b2b:	4c 89 40 10          	mov    QWORD PTR [rax+0x10],r8
	    else if (__incr() == _M_last) [[unlikely]]
    6b2f:	4c 39 c7             	cmp    rdi,r8
    6b32:	74 5b                	je     6b8f <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x19f>
		__c = (__c << 6) | (__u & 0x3F);
    6b34:	c1 e2 06             	shl    edx,0x6
    6b37:	83 e1 3f             	and    ecx,0x3f
    6b3a:	09 d1                	or     ecx,edx
		__u = *_M_curr();
    6b3c:	0f b6 56 02          	movzx  edx,BYTE PTR [rsi+0x2]
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
    6b40:	44 8d 42 80          	lea    r8d,[rdx-0x80]
    6b44:	41 80 f8 3f          	cmp    r8b,0x3f
    6b48:	77 45                	ja     6b8f <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x19f>
	  return ++_M_curr();
    6b4a:	4c 8d 46 03          	lea    r8,[rsi+0x3]
    6b4e:	4c 89 40 10          	mov    QWORD PTR [rax+0x10],r8
		else if (__incr() == _M_last) [[unlikely]]
    6b52:	4c 39 c7             	cmp    rdi,r8
    6b55:	74 58                	je     6baf <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1bf>
		    __c = (__c << 6) | (__u & 0x3F);
    6b57:	83 e2 3f             	and    edx,0x3f
    6b5a:	c1 e1 06             	shl    ecx,0x6
    6b5d:	09 d1                	or     ecx,edx
		    __u = *_M_curr();
    6b5f:	0f b6 56 03          	movzx  edx,BYTE PTR [rsi+0x3]
		    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
    6b63:	8d 7a 80             	lea    edi,[rdx-0x80]
    6b66:	40 80 ff 3f          	cmp    dil,0x3f
    6b6a:	77 43                	ja     6baf <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1bf>
			__c = (__c << 6) | (__u & 0x3F);
    6b6c:	c1 e1 06             	shl    ecx,0x6
    6b6f:	83 e2 3f             	and    edx,0x3f
    6b72:	09 ca                	or     edx,ecx
	  ++__to_incr;
    6b74:	b9 04 00 00 00       	mov    ecx,0x4
	  return ++_M_curr();
    6b79:	e9 8d fe ff ff       	jmp    6a0b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
	    const uint8_t __lo_bound_2 = __u == 0xE0 ? 0xA0 : __lo_bound;
    6b7e:	41 b9 a0 ff ff ff    	mov    r9d,0xffffffa0
	    const uint8_t __hi_bound_2 = __u == 0xED ? 0x9F : __hi_bound;
    6b84:	41 b8 bf ff ff ff    	mov    r8d,0xffffffbf
    6b8a:	e9 d6 fe ff ff       	jmp    6a65 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x75>
	  ++__to_incr;
    6b8f:	b9 02 00 00 00       	mov    ecx,0x2
	  __c = _S_error();
    6b94:	ba fd ff 00 00       	mov    edx,0xfffd
    6b99:	e9 6d fe ff ff       	jmp    6a0b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
	    const uint8_t __lo_bound_2 = __u == 0xF0 ? 0x90 : __lo_bound;
    6b9e:	41 b9 90 ff ff ff    	mov    r9d,0xffffff90
	    const uint8_t __hi_bound_2 = __u == 0xF4 ? 0x8F : __hi_bound;
    6ba4:	41 b8 bf ff ff ff    	mov    r8d,0xffffffbf
    6baa:	e9 67 ff ff ff       	jmp    6b16 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x126>
	  ++__to_incr;
    6baf:	b9 03 00 00 00       	mov    ecx,0x3
	  __c = _S_error();
    6bb4:	ba fd ff 00 00       	mov    edx,0xfffd
    6bb9:	e9 4d fe ff ff       	jmp    6a0b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
    6bbe:	66 90                	xchg   ax,ax

0000000000006bc0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>:
      _M_parse_fill_and_align(iterator __first, iterator __last) noexcept
    6bc0:	41 57                	push   r15
    6bc2:	41 56                	push   r14
    6bc4:	41 55                	push   r13
    6bc6:	41 54                	push   r12
    6bc8:	55                   	push   rbp
    6bc9:	53                   	push   rbx
    6bca:	48 89 f3             	mov    rbx,rsi
    6bcd:	48 83 ec 68          	sub    rsp,0x68
	if (*__first != '{')
    6bd1:	44 0f b6 26          	movzx  r12d,BYTE PTR [rsi]
    6bd5:	41 80 fc 7b          	cmp    r12b,0x7b
    6bd9:	0f 84 31 01 00 00    	je     6d10 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x150>
    6bdf:	49 89 fd             	mov    r13,rdi
    6be2:	48 89 d5             	mov    rbp,rdx
		if (!__uv.empty())
    6be5:	48 39 d6             	cmp    rsi,rdx
    6be8:	0f 84 e2 00 00 00    	je     6cd0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
	  _M_read_utf8();
    6bee:	66 48 0f 6e c6       	movq   xmm0,rsi
    6bf3:	31 c0                	xor    eax,eax
    6bf5:	48 89 e7             	mov    rdi,rsp
    6bf8:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
    6bfd:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    6c01:	66 89 44 24 18       	mov    WORD PTR [rsp+0x18],ax
    6c06:	0f 11 44 24 08       	movups XMMWORD PTR [rsp+0x8],xmm0
    6c0b:	c6 44 24 1a 00       	mov    BYTE PTR [rsp+0x1a],0x0
    6c10:	e8 db fd ff ff       	call   69f0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
	auto __tmp = *this;
    6c15:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    6c1a:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
	  _M_read_utf8();
    6c1f:	44 0f b6 74 24 18    	movzx  r14d,BYTE PTR [rsp+0x18]
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6c25:	0f b6 74 24 19       	movzx  esi,BYTE PTR [rsp+0x19]
	auto __tmp = *this;
    6c2a:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
    6c2f:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
	  _M_read_utf8();
    6c35:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
	auto __tmp = *this;
    6c3a:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6c3f:	41 0f b6 c6          	movzx  eax,r14b
	  _M_read_utf8();
    6c43:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [rsp+0x1a]
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6c48:	83 c0 01             	add    eax,0x1
	auto __tmp = *this;
    6c4b:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6c50:	39 f0                	cmp    eax,esi
    6c52:	74 5c                	je     6cb0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0xf0>
      operator*() const { return _M_buf[_M_buf_index]; }
    6c54:	42 8b 4c b4 30       	mov    ecx,DWORD PTR [rsp+r14*4+0x30]
    if (__c < 0xD800) [[likely]]
    6c59:	81 f9 ff d7 00 00    	cmp    ecx,0xd7ff
    6c5f:	0f 87 1b 01 00 00    	ja     6d80 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x1c0>
		      if (auto __next = __beg.base(); __next != __last)
    6c65:	48 39 d5             	cmp    rbp,rdx
    6c68:	74 66                	je     6cd0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
			if (_Align __align = _S_align(*__next))
    6c6a:	0f b6 02             	movzx  eax,BYTE PTR [rdx]
	switch (__c)
    6c6d:	3c 3e                	cmp    al,0x3e
    6c6f:	0f 84 b3 00 00 00    	je     6d28 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x168>
    6c75:	3c 5e                	cmp    al,0x5e
    6c77:	0f 84 d3 00 00 00    	je     6d50 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x190>
    6c7d:	be 01 00 00 00       	mov    esi,0x1
    6c82:	3c 3c                	cmp    al,0x3c
    6c84:	75 4a                	jne    6cd0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
			    _M_align = __align;
    6c86:	41 0f b6 45 00       	movzx  eax,BYTE PTR [r13+0x0]
			    _M_fill = __c;
    6c8b:	41 89 4d 08          	mov    DWORD PTR [r13+0x8],ecx
			    _M_align = __align;
    6c8f:	83 e0 fc             	and    eax,0xfffffffc
    6c92:	09 f0                	or     eax,esi
    6c94:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
      }
    6c98:	48 83 c4 68          	add    rsp,0x68
			    return ++__next;
    6c9c:	48 8d 42 01          	lea    rax,[rdx+0x1]
      }
    6ca0:	5b                   	pop    rbx
    6ca1:	5d                   	pop    rbp
    6ca2:	41 5c                	pop    r12
    6ca4:	41 5d                	pop    r13
    6ca6:	41 5e                	pop    r14
    6ca8:	41 5f                	pop    r15
    6caa:	c3                   	ret
    6cab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6cb0:	48 39 d5             	cmp    rbp,rdx
    6cb3:	74 1b                	je     6cd0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
    6cb5:	48 01 d1             	add    rcx,rdx
	    if (_M_curr() == _M_last)
    6cb8:	48 39 cd             	cmp    rbp,rcx
    6cbb:	0f 85 9f 00 00 00    	jne    6d60 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x1a0>
    6cc1:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    6cc8:	00 00 00 00 
    6ccc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	switch (__c)
    6cd0:	41 80 fc 3e          	cmp    r12b,0x3e
    6cd4:	74 62                	je     6d38 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x178>
    6cd6:	41 80 fc 5e          	cmp    r12b,0x5e
    6cda:	74 64                	je     6d40 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x180>
    6cdc:	ba 01 00 00 00       	mov    edx,0x1
    6ce1:	41 80 fc 3c          	cmp    r12b,0x3c
    6ce5:	75 29                	jne    6d10 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x150>
		_M_align = __align;
    6ce7:	41 0f b6 45 00       	movzx  eax,BYTE PTR [r13+0x0]
		_M_fill = ' ';
    6cec:	41 c7 45 08 20 00 00 	mov    DWORD PTR [r13+0x8],0x20
    6cf3:	00 
		_M_align = __align;
    6cf4:	83 e0 fc             	and    eax,0xfffffffc
    6cf7:	09 d0                	or     eax,edx
    6cf9:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
      }
    6cfd:	48 83 c4 68          	add    rsp,0x68
		return __first + 1;
    6d01:	48 8d 43 01          	lea    rax,[rbx+0x1]
      }
    6d05:	5b                   	pop    rbx
    6d06:	5d                   	pop    rbp
    6d07:	41 5c                	pop    r12
    6d09:	41 5d                	pop    r13
    6d0b:	41 5e                	pop    r14
    6d0d:	41 5f                	pop    r15
    6d0f:	c3                   	ret
    6d10:	48 83 c4 68          	add    rsp,0x68
	return __first;
    6d14:	48 89 d8             	mov    rax,rbx
      }
    6d17:	5b                   	pop    rbx
    6d18:	5d                   	pop    rbp
    6d19:	41 5c                	pop    r12
    6d1b:	41 5d                	pop    r13
    6d1d:	41 5e                	pop    r14
    6d1f:	41 5f                	pop    r15
    6d21:	c3                   	ret
    6d22:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	switch (__c)
    6d28:	be 02 00 00 00       	mov    esi,0x2
    6d2d:	e9 54 ff ff ff       	jmp    6c86 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0xc6>
    6d32:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    6d38:	ba 02 00 00 00       	mov    edx,0x2
    6d3d:	eb a8                	jmp    6ce7 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x127>
    6d3f:	90                   	nop
    6d40:	ba 03 00 00 00       	mov    edx,0x3
    6d45:	eb a0                	jmp    6ce7 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x127>
    6d47:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    6d4e:	00 00 
    6d50:	be 03 00 00 00       	mov    esi,0x3
    6d55:	e9 2c ff ff ff       	jmp    6c86 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0xc6>
    6d5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  _M_read_utf8();
    6d60:	48 89 e7             	mov    rdi,rsp
    6d63:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
    6d68:	e8 83 fc ff ff       	call   69f0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
    6d6d:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
      }
    6d72:	e9 dd fe ff ff       	jmp    6c54 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x94>
    6d77:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    6d7e:	00 00 
    return 0xDFFF < __c && __c <= 0x10FFFF;
    6d80:	8d 81 00 20 ff ff    	lea    eax,[rcx-0xe000]
		    if (__is_scalar_value(__c))
    6d86:	3d ff 1f 10 00       	cmp    eax,0x101fff
    6d8b:	0f 87 3f ff ff ff    	ja     6cd0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
    6d91:	e9 cf fe ff ff       	jmp    6c65 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0xa5>
    6d96:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    6d9d:	00 00 00 

0000000000006da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>:
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
    6da0:	41 56                	push   r14
	__spec._M_type = __type;
    6da2:	89 d0                	mov    eax,edx
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
    6da4:	41 55                	push   r13
	__spec._M_type = __type;
    6da6:	83 e0 0f             	and    eax,0xf
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
    6da9:	41 54                	push   r12
	__spec._M_type = __type;
    6dab:	c1 e0 03             	shl    eax,0x3
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
    6dae:	55                   	push   rbp
    6daf:	48 89 fd             	mov    rbp,rdi
    6db2:	53                   	push   rbx
    6db3:	48 83 ec 10          	sub    rsp,0x10
      constexpr const_iterator end() const noexcept { return _M_end; }
    6db7:	4c 8b 76 08          	mov    r14,QWORD PTR [rsi+0x8]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    6dbb:	48 8b 1e             	mov    rbx,QWORD PTR [rsi]
	_Spec<_CharT> __spec{};
    6dbe:	48 c7 44 24 04 00 00 	mov    QWORD PTR [rsp+0x4],0x0
    6dc5:	00 00 
    6dc7:	c7 44 24 0c 20 00 00 	mov    DWORD PTR [rsp+0xc],0x20
    6dce:	00 
	__spec._M_type = __type;
    6dcf:	88 44 24 05          	mov    BYTE PTR [rsp+0x5],al
	  if (__first == __last || *__first == '}')
    6dd3:	49 39 de             	cmp    r14,rbx
    6dd6:	0f 84 fc 00 00 00    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    6ddc:	80 3b 7d             	cmp    BYTE PTR [rbx],0x7d
    6ddf:	0f 84 f3 00 00 00    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    6de5:	49 89 f4             	mov    r12,rsi
    6de8:	41 89 d5             	mov    r13d,edx
	__first = __spec._M_parse_fill_and_align(__first, __last);
    6deb:	48 89 de             	mov    rsi,rbx
    6dee:	4c 89 f2             	mov    rdx,r14
    6df1:	48 8d 7c 24 04       	lea    rdi,[rsp+0x4]
    6df6:	e8 c5 fd ff ff       	call   6bc0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
    6dfb:	48 89 c3             	mov    rbx,rax
	  if (__first == __last || *__first == '}')
    6dfe:	4c 39 f0             	cmp    rax,r14
    6e01:	0f 84 d1 00 00 00    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    6e07:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6e0a:	3c 7d                	cmp    al,0x7d
    6e0c:	0f 84 c6 00 00 00    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
      _S_sign(_CharT __c) noexcept
    6e12:	8d 50 e0             	lea    edx,[rax-0x20]
    6e15:	80 fa 0d             	cmp    dl,0xd
    6e18:	0f 87 f2 00 00 00    	ja     6f10 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x170>
    6e1e:	0f b6 d2             	movzx  edx,dl
    6e21:	48 8d 0d b8 e2 00 00 	lea    rcx,[rip+0xe2b8]        # 150e0 <CSWTCH.1104>
    6e28:	8b 14 91             	mov    edx,DWORD PTR [rcx+rdx*4]
	if (_Sign __sign = _S_sign(*__first))
    6e2b:	85 d2                	test   edx,edx
    6e2d:	0f 85 85 00 00 00    	jne    6eb8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x118>
	if (*__first == '#')
    6e33:	3c 23                	cmp    al,0x23
    6e35:	0f 84 b5 01 00 00    	je     6ff0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x250>
	bool __arg_id = false;
    6e3b:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    6e40:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
    6e45:	48 8d 54 24 08       	lea    rdx,[rsp+0x8]
    6e4a:	4d 89 e0             	mov    r8,r12
    6e4d:	4c 89 f6             	mov    rsi,r14
    6e50:	48 89 df             	mov    rdi,rbx
    6e53:	e8 88 f3 ff ff       	call   61e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next != __first)
    6e58:	48 39 c3             	cmp    rbx,rax
    6e5b:	74 1f                	je     6e7c <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0xdc>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    6e5d:	0f b6 4c 24 03       	movzx  ecx,BYTE PTR [rsp+0x3]
    6e62:	8d 51 01             	lea    edx,[rcx+0x1]
    6e65:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [rsp+0x4]
    6e6a:	83 e2 03             	and    edx,0x3
    6e6d:	c1 e2 07             	shl    edx,0x7
    6e70:	66 81 e1 7f fe       	and    cx,0xfe7f
    6e75:	09 ca                	or     edx,ecx
    6e77:	66 89 54 24 04       	mov    WORD PTR [rsp+0x4],dx
	  if (__first == __last || *__first == '}')
    6e7c:	49 39 c6             	cmp    r14,rax
    6e7f:	74 54                	je     6ed5 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x135>
    6e81:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6e84:	80 fa 7d             	cmp    dl,0x7d
    6e87:	0f 84 bb 00 00 00    	je     6f48 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1a8>
	if (*__first == 'L')
    6e8d:	80 fa 4c             	cmp    dl,0x4c
    6e90:	0f 84 8a 01 00 00    	je     7020 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x280>
	switch (*__first)
    6e96:	83 ea 42             	sub    edx,0x42
    6e99:	80 fa 36             	cmp    dl,0x36
    6e9c:	0f 87 de 00 00 00    	ja     6f80 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1e0>
    6ea2:	48 8d 0d 93 e6 00 00 	lea    rcx,[rip+0xe693]        # 1553c <CSWTCH.1104+0x45c>
    6ea9:	0f b6 d2             	movzx  edx,dl
    6eac:	48 63 14 91          	movsxd rdx,DWORD PTR [rcx+rdx*4]
    6eb0:	48 01 ca             	add    rdx,rcx
    6eb3:	ff e2                	jmp    rdx
    6eb5:	0f 1f 00             	nop    DWORD PTR [rax]
	    _M_sign = __sign;
    6eb8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [rsp+0x4]
    6ebd:	83 e2 03             	and    edx,0x3
    6ec0:	c1 e2 02             	shl    edx,0x2
    6ec3:	83 e0 f3             	and    eax,0xfffffff3
    6ec6:	09 d0                	or     eax,edx
	    return __first + 1;
    6ec8:	48 8d 53 01          	lea    rdx,[rbx+0x1]
	    _M_sign = __sign;
    6ecc:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
	  if (__first == __last || *__first == '}')
    6ed0:	49 39 d6             	cmp    r14,rdx
    6ed3:	75 23                	jne    6ef8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x158>
	  return __first;
    6ed5:	4c 89 f3             	mov    rbx,r14
	  _M_spec = __spec;
    6ed8:	48 8b 44 24 04       	mov    rax,QWORD PTR [rsp+0x4]
    6edd:	48 89 45 00          	mov    QWORD PTR [rbp+0x0],rax
    6ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [rsp+0xc]
    6ee5:	89 45 08             	mov    DWORD PTR [rbp+0x8],eax
      }
    6ee8:	48 83 c4 10          	add    rsp,0x10
    6eec:	48 89 d8             	mov    rax,rbx
    6eef:	5b                   	pop    rbx
    6ef0:	5d                   	pop    rbp
    6ef1:	41 5c                	pop    r12
    6ef3:	41 5d                	pop    r13
    6ef5:	41 5e                	pop    r14
    6ef7:	c3                   	ret
	  if (__first == __last || *__first == '}')
    6ef8:	0f b6 43 01          	movzx  eax,BYTE PTR [rbx+0x1]
    6efc:	3c 7d                	cmp    al,0x7d
    6efe:	0f 84 43 01 00 00    	je     7047 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x2a7>
	if (*__first == '#')
    6f04:	3c 23                	cmp    al,0x23
    6f06:	0f 84 e7 00 00 00    	je     6ff3 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x253>
    6f0c:	48 89 d3             	mov    rbx,rdx
    6f0f:	90                   	nop
	if (*__first == '0')
    6f10:	3c 30                	cmp    al,0x30
    6f12:	0f 85 23 ff ff ff    	jne    6e3b <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x9b>
	    ++__first;
    6f18:	48 8d 43 01          	lea    rax,[rbx+0x1]
	    _M_zero_fill = true;
    6f1c:	80 4c 24 04 40       	or     BYTE PTR [rsp+0x4],0x40
	  if (__first == __last || *__first == '}')
    6f21:	49 39 c6             	cmp    r14,rax
    6f24:	74 af                	je     6ed5 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x135>
    6f26:	0f b6 53 01          	movzx  edx,BYTE PTR [rbx+0x1]
    6f2a:	80 fa 7d             	cmp    dl,0x7d
    6f2d:	74 19                	je     6f48 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1a8>
	bool __arg_id = false;
    6f2f:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	if (*__first == '0')
    6f34:	80 fa 30             	cmp    dl,0x30
    6f37:	74 4c                	je     6f85 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1e5>
    6f39:	48 89 c3             	mov    rbx,rax
    6f3c:	e9 ff fe ff ff       	jmp    6e40 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0xa0>
    6f41:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  return __first;
    6f48:	48 89 c3             	mov    rbx,rax
    6f4b:	eb 8b                	jmp    6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
	    ++__first;
    6f4d:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    6f51:	b8 05 00 00 00       	mov    eax,0x5
    6f56:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    6f5d:	00 00 00 
		__spec._M_type = _Pres_s; // same value (and meaning) as "none"
    6f60:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
    6f65:	c1 e0 03             	shl    eax,0x3
    6f68:	83 e2 87             	and    edx,0xffffff87
    6f6b:	09 d0                	or     eax,edx
    6f6d:	88 44 24 05          	mov    BYTE PTR [rsp+0x5],al
	  if (__first == __last || *__first == '}')
    6f71:	49 39 de             	cmp    r14,rbx
    6f74:	0f 84 5e ff ff ff    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    6f7a:	48 89 d8             	mov    rax,rbx
    6f7d:	0f 1f 00             	nop    DWORD PTR [rax]
    6f80:	80 38 7d             	cmp    BYTE PTR [rax],0x7d
    6f83:	74 c3                	je     6f48 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1a8>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    6f85:	e8 c6 c1 ff ff       	call   3150 <abort@plt>
    6f8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    ++__first;
    6f90:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    6f94:	b8 06 00 00 00       	mov    eax,0x6
    6f99:	eb c5                	jmp    6f60 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    ++__first;
    6f9b:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    6f9f:	b8 03 00 00 00       	mov    eax,0x3
    6fa4:	eb ba                	jmp    6f60 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    ++__first;
    6fa6:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    6faa:	b8 04 00 00 00       	mov    eax,0x4
    6faf:	eb af                	jmp    6f60 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    ++__first;
    6fb1:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    6fb5:	b8 01 00 00 00       	mov    eax,0x1
    6fba:	eb a4                	jmp    6f60 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    ++__first;
    6fbc:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    6fc0:	b8 02 00 00 00       	mov    eax,0x2
    6fc5:	eb 99                	jmp    6f60 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    if (__type != _AsBool)
    6fc7:	45 85 ed             	test   r13d,r13d
    6fca:	74 b9                	je     6f85 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1e5>
		++__first;
    6fcc:	48 8d 58 01          	lea    rbx,[rax+0x1]
    6fd0:	b8 07 00 00 00       	mov    eax,0x7
    6fd5:	eb 89                	jmp    6f60 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    if (__type == _AsBool)
    6fd7:	45 85 ed             	test   r13d,r13d
    6fda:	75 a9                	jne    6f85 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1e5>
		++__first;
    6fdc:	48 8d 58 01          	lea    rbx,[rax+0x1]
    6fe0:	31 c0                	xor    eax,eax
    6fe2:	e9 79 ff ff ff       	jmp    6f60 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
    6fe7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    6fee:	00 00 
    6ff0:	48 89 da             	mov    rdx,rbx
	    ++__first;
    6ff3:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
	    _M_alt = true;
    6ff7:	80 4c 24 04 10       	or     BYTE PTR [rsp+0x4],0x10
	  if (__first == __last || *__first == '}')
    6ffc:	49 39 de             	cmp    r14,rbx
    6fff:	0f 84 d3 fe ff ff    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7005:	0f b6 42 01          	movzx  eax,BYTE PTR [rdx+0x1]
    7009:	3c 7d                	cmp    al,0x7d
    700b:	0f 84 c7 fe ff ff    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7011:	e9 fa fe ff ff       	jmp    6f10 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x170>
    7016:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    701d:	00 00 00 
	    ++__first;
    7020:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    _M_localized = true;
    7024:	80 4c 24 04 20       	or     BYTE PTR [rsp+0x4],0x20
	  if (__first == __last || *__first == '}')
    7029:	49 39 de             	cmp    r14,rbx
    702c:	0f 84 a6 fe ff ff    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7032:	0f b6 50 01          	movzx  edx,BYTE PTR [rax+0x1]
    7036:	48 89 d8             	mov    rax,rbx
    7039:	80 fa 7d             	cmp    dl,0x7d
    703c:	0f 84 96 fe ff ff    	je     6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7042:	e9 4f fe ff ff       	jmp    6e96 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0xf6>
	  return __first;
    7047:	48 89 d3             	mov    rbx,rdx
    704a:	e9 89 fe ff ff       	jmp    6ed8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    704f:	90                   	nop

0000000000007050 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)>:
	_M_parse(_ParseContext& __pc, _ChronoParts __parts)
    7050:	41 57                	push   r15
	  _ChronoSpec<_CharT> __spec{};
    7052:	66 0f ef c0          	pxor   xmm0,xmm0
	_M_parse(_ParseContext& __pc, _ChronoParts __parts)
    7056:	41 56                	push   r14
    7058:	41 55                	push   r13
    705a:	41 54                	push   r12
    705c:	55                   	push   rbp
    705d:	48 89 fd             	mov    rbp,rdi
    7060:	53                   	push   rbx
    7061:	48 83 ec 48          	sub    rsp,0x48
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    7065:	48 8b 1e             	mov    rbx,QWORD PTR [rsi]
      constexpr const_iterator end() const noexcept { return _M_end; }
    7068:	4c 8b 7e 08          	mov    r15,QWORD PTR [rsi+0x8]
	  _ChronoSpec<_CharT> __spec{};
    706c:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    7071:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
    7076:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
    707d:	00 
	    if (__first == __last || *__first == '}')
    707e:	49 39 df             	cmp    r15,rbx
    7081:	0f 84 49 01 00 00    	je     71d0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    7087:	80 3b 7d             	cmp    BYTE PTR [rbx],0x7d
    708a:	0f 84 40 01 00 00    	je     71d0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    7090:	49 89 f6             	mov    r14,rsi
    7093:	41 89 d4             	mov    r12d,edx
	  __first = __spec._M_parse_fill_and_align(__first, __last);
    7096:	48 89 de             	mov    rsi,rbx
    7099:	4c 89 fa             	mov    rdx,r15
    709c:	48 8d 7c 24 20       	lea    rdi,[rsp+0x20]
    70a1:	e8 1a fb ff ff       	call   6bc0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
    70a6:	48 89 c3             	mov    rbx,rax
	    if (__first == __last || *__first == '}')
    70a9:	4c 39 f8             	cmp    rax,r15
    70ac:	0f 84 1e 01 00 00    	je     71d0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    70b2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    70b5:	3c 7d                	cmp    al,0x7d
    70b7:	0f 84 13 01 00 00    	je     71d0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
	bool __arg_id = false;
    70bd:	c6 44 24 1e 00       	mov    BYTE PTR [rsp+0x1e],0x0
	if (*__first == '0')
    70c2:	3c 30                	cmp    al,0x30
    70c4:	0f 84 30 02 00 00    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    70ca:	48 8d 4c 24 1e       	lea    rcx,[rsp+0x1e]
    70cf:	48 8d 54 24 24       	lea    rdx,[rsp+0x24]
    70d4:	4d 89 f0             	mov    r8,r14
    70d7:	4c 89 fe             	mov    rsi,r15
    70da:	48 89 df             	mov    rdi,rbx
    70dd:	e8 fe f0 ff ff       	call   61e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
    70e2:	49 89 c5             	mov    r13,rax
	if (__next != __first)
    70e5:	48 39 c3             	cmp    rbx,rax
    70e8:	74 1f                	je     7109 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0xb9>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    70ea:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [rsp+0x1e]
    70ef:	0f b7 54 24 20       	movzx  edx,WORD PTR [rsp+0x20]
    70f4:	83 c0 01             	add    eax,0x1
    70f7:	66 81 e2 7f fe       	and    dx,0xfe7f
    70fc:	83 e0 03             	and    eax,0x3
    70ff:	c1 e0 07             	shl    eax,0x7
    7102:	09 d0                	or     eax,edx
    7104:	66 89 44 24 20       	mov    WORD PTR [rsp+0x20],ax
    7109:	4d 39 ef             	cmp    r15,r13
    710c:	0f 84 ee 00 00 00    	je     7200 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1b0>
    7112:	41 0f b6 4d 00       	movzx  ecx,BYTE PTR [r13+0x0]
    7117:	80 f9 7d             	cmp    cl,0x7d
    711a:	0f 84 e0 00 00 00    	je     7200 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1b0>
	  if (__parts & _ChronoParts::_Duration)
    7120:	44 89 e0             	mov    eax,r12d
    7123:	25 80 00 00 00       	and    eax,0x80
    7128:	89 44 24 0c          	mov    DWORD PTR [rsp+0xc],eax
    712c:	0f 84 ee 00 00 00    	je     7220 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1d0>
	if (__first[0] != '.')
    7132:	80 f9 2e             	cmp    cl,0x2e
    7135:	0f 85 e5 00 00 00    	jne    7220 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1d0>
	iterator __next = ++__first;
    713b:	49 83 c5 01          	add    r13,0x1
	bool __arg_id = false;
    713f:	c6 44 24 1f 00       	mov    BYTE PTR [rsp+0x1f],0x0
	if (__next != __last)
    7144:	4d 39 ef             	cmp    r15,r13
    7147:	0f 84 ad 01 00 00    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
    714d:	48 8d 4c 24 1f       	lea    rcx,[rsp+0x1f]
    7152:	48 8d 54 24 26       	lea    rdx,[rsp+0x26]
    7157:	4d 89 f0             	mov    r8,r14
    715a:	4c 89 fe             	mov    rsi,r15
    715d:	4c 89 ef             	mov    rdi,r13
    7160:	e8 7b f0 ff ff       	call   61e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
    7165:	48 89 c3             	mov    rbx,rax
	if (__next == __first)
    7168:	49 39 c5             	cmp    r13,rax
    716b:	0f 84 89 01 00 00    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
    7171:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [rsp+0x1f]
    7176:	0f b6 44 24 21       	movzx  eax,BYTE PTR [rsp+0x21]
    717b:	8d 54 12 02          	lea    edx,[rdx+rdx*1+0x2]
    717f:	83 e0 f9             	and    eax,0xfffffff9
    7182:	83 e2 06             	and    edx,0x6
    7185:	09 d0                	or     eax,edx
    7187:	88 44 24 21          	mov    BYTE PTR [rsp+0x21],al
	    if (__first == __last || *__first == '}')
    718b:	49 39 df             	cmp    r15,rbx
    718e:	74 40                	je     71d0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    7190:	0f b6 0b             	movzx  ecx,BYTE PTR [rbx]
    7193:	80 f9 7d             	cmp    cl,0x7d
    7196:	74 38                	je     71d0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
	if (*__first == 'L')
    7198:	80 f9 4c             	cmp    cl,0x4c
    719b:	74 08                	je     71a5 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x155>
    719d:	49 89 dd             	mov    r13,rbx
    71a0:	e9 80 00 00 00       	jmp    7225 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1d5>
	      __first = __spec._M_parse_precision(__first, __last, __pc);
    71a5:	49 89 dd             	mov    r13,rbx
    71a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    71af:	00 
	    ++__first;
    71b0:	49 8d 5d 01          	lea    rbx,[r13+0x1]
	    _M_localized = true;
    71b4:	80 4c 24 20 20       	or     BYTE PTR [rsp+0x20],0x20
	    if (__first == __last || *__first == '}')
    71b9:	49 39 df             	cmp    r15,rbx
    71bc:	74 12                	je     71d0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    71be:	41 0f b6 4d 01       	movzx  ecx,BYTE PTR [r13+0x1]
    71c3:	80 f9 7d             	cmp    cl,0x7d
    71c6:	75 d5                	jne    719d <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x14d>
    71c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    71cf:	00 
	    _M_spec = __spec;
    71d0:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    71d6:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    71da:	66 0f 6f 44 24 30    	movdqa xmm0,XMMWORD PTR [rsp+0x30]
    71e0:	0f 11 45 10          	movups XMMWORD PTR [rbp+0x10],xmm0
	}
    71e4:	48 83 c4 48          	add    rsp,0x48
    71e8:	48 89 d8             	mov    rax,rbx
    71eb:	5b                   	pop    rbx
    71ec:	5d                   	pop    rbp
    71ed:	41 5c                	pop    r12
    71ef:	41 5d                	pop    r13
    71f1:	41 5e                	pop    r14
    71f3:	41 5f                	pop    r15
    71f5:	c3                   	ret
    71f6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    71fd:	00 00 00 
	    _M_spec = __spec;
    7200:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
	    return __first;
    7206:	4c 89 eb             	mov    rbx,r13
	    _M_spec = __spec;
    7209:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    720d:	66 0f 6f 44 24 30    	movdqa xmm0,XMMWORD PTR [rsp+0x30]
    7213:	0f 11 45 10          	movups XMMWORD PTR [rbp+0x10],xmm0
    7217:	eb cb                	jmp    71e4 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x194>
    7219:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	if (*__first == 'L')
    7220:	80 f9 4c             	cmp    cl,0x4c
    7223:	74 8b                	je     71b0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x160>
	    __string_view __str(__first, __last - __first);
    7225:	4d 89 fe             	mov    r14,r15
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    7228:	be 7d 00 00 00       	mov    esi,0x7d
    722d:	4c 89 ef             	mov    rdi,r13
    7230:	88 4c 24 08          	mov    BYTE PTR [rsp+0x8],cl
    7234:	4d 29 ee             	sub    r14,r13
    7237:	4c 89 f2             	mov    rdx,r14
    723a:	e8 e1 bf ff ff       	call   3220 <memchr@plt>
    723f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [rsp+0x8]
    7244:	48 85 c0             	test   rax,rax
    7247:	48 89 c3             	mov    rbx,rax
    724a:	0f 84 00 03 00 00    	je     7550 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x500>
	    __ret = __p - this->_M_str;
    7250:	48 89 c2             	mov    rdx,rax
    7253:	4c 29 ea             	sub    rdx,r13
	    if (__end != __str.npos)
    7256:	48 83 fa ff          	cmp    rdx,0xffffffffffffffff
    725a:	0f 84 f0 02 00 00    	je     7550 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x500>
      if (__pos < this->_M_len)
    7260:	48 85 d2             	test   rdx,rdx
    7263:	74 24                	je     7289 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x239>
    7265:	be 7b 00 00 00       	mov    esi,0x7b
    726a:	4c 89 ef             	mov    rdi,r13
    726d:	88 4c 24 08          	mov    BYTE PTR [rsp+0x8],cl
    7271:	e8 aa bf ff ff       	call   3220 <memchr@plt>
	  if (__p)
    7276:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [rsp+0x8]
    727b:	48 85 c0             	test   rax,rax
    727e:	74 09                	je     7289 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x239>
	    __ret = __p - this->_M_str;
    7280:	4c 29 e8             	sub    rax,r13
	    if (__str.find('{') != __str.npos)
    7283:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
    7287:	75 71                	jne    72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	  const auto __chrono_specs = __first++; // Skip leading '%'
    7289:	4d 8d 7d 01          	lea    r15,[r13+0x1]
	  if (*__chrono_specs != '%')
    728d:	80 f9 25             	cmp    cl,0x25
    7290:	75 68                	jne    72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	  while (__first != __last)
    7292:	49 39 df             	cmp    r15,rbx
    7295:	74 63                	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	  int __needed = 0;
    7297:	45 31 c0             	xor    r8d,r8d
	  _CharT __mod{};
    729a:	31 d2                	xor    edx,edx
	      switch (__c)
    729c:	4c 8d 35 75 e3 00 00 	lea    r14,[rip+0xe375]        # 15618 <CSWTCH.1104+0x538>
    72a3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    72aa:	00 00 00 00 
    72ae:	66 90                	xchg   ax,ax
	      _CharT __c = *__first++;
    72b0:	41 0f b6 07          	movzx  eax,BYTE PTR [r15]
    72b4:	49 8d 7f 01          	lea    rdi,[r15+0x1]
	      switch (__c)
    72b8:	3c 7a                	cmp    al,0x7a
    72ba:	7f 3e                	jg     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
    72bc:	3c 50                	cmp    al,0x50
    72be:	0f 8e dc 00 00 00    	jle    73a0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x350>
    72c4:	83 e8 51             	sub    eax,0x51
    72c7:	3c 29                	cmp    al,0x29
    72c9:	77 2f                	ja     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
    72cb:	0f b6 c0             	movzx  eax,al
    72ce:	49 63 04 86          	movsxd rax,DWORD PTR [r14+rax*4]
    72d2:	4c 01 f0             	add    rax,r14
    72d5:	ff e0                	jmp    rax
    72d7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    72de:	00 00 
		  __needed = _TimeOfDay;
    72e0:	41 b8 10 00 00 00    	mov    r8d,0x10
    72e6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    72ed:	00 00 00 
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    72f0:	80 fa 45             	cmp    dl,0x45
    72f3:	74 05                	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		    || (__mod == 'O' && !(__allowed_mods & _Mod_O)))
    72f5:	80 fa 4f             	cmp    dl,0x4f
    72f8:	75 26                	jne    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    72fa:	e8 51 be ff ff       	call   3150 <abort@plt>
    72ff:	90                   	nop
	      switch (__c)
    7300:	3c 42                	cmp    al,0x42
    7302:	0f 84 40 01 00 00    	je     7448 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3f8>
    7308:	3c 43                	cmp    al,0x43
    730a:	0f 85 18 01 00 00    	jne    7428 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3d8>
		  __needed = _Year;
    7310:	41 b8 01 00 00 00    	mov    r8d,0x1
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7316:	80 fa 45             	cmp    dl,0x45
    7319:	75 da                	jne    72f5 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a5>
    731b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if ((__parts & __needed) != __needed)
    7320:	44 89 e0             	mov    eax,r12d
    7323:	44 89 44 24 08       	mov    DWORD PTR [rsp+0x8],r8d
    7328:	f7 d0                	not    eax
    732a:	44 85 c0             	test   eax,r8d
    732d:	75 cb                	jne    72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
      if (__pos < this->_M_len)
    732f:	48 89 da             	mov    rdx,rbx
    7332:	48 29 fa             	sub    rdx,rdi
    7335:	0f 84 b5 00 00 00    	je     73f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3a0>
    733b:	be 25 00 00 00       	mov    esi,0x25
    7340:	48 89 3c 24          	mov    QWORD PTR [rsp],rdi
    7344:	e8 d7 be ff ff       	call   3220 <memchr@plt>
	  if (__p)
    7349:	48 85 c0             	test   rax,rax
    734c:	0f 84 9e 00 00 00    	je     73f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3a0>
	      if (__pos == 0)
    7352:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    7356:	44 8b 44 24 08       	mov    r8d,DWORD PTR [rsp+0x8]
    735b:	48 29 f8             	sub    rax,rdi
    735e:	74 38                	je     7398 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x348>
		  if (__pos == __string_view::npos)
    7360:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
    7364:	0f 84 86 00 00 00    	je     73f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3a0>
		    __first += __pos + 1;
    736a:	4c 8d 7c 07 01       	lea    r15,[rdi+rax*1+0x1]
	      __mod = _CharT();
    736f:	31 d2                	xor    edx,edx
	  while (__first != __last)
    7371:	49 39 df             	cmp    r15,rbx
    7374:	0f 85 36 ff ff ff    	jne    72b0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x260>
    737a:	e9 7b ff ff ff       	jmp    72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
    737f:	90                   	nop
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7380:	80 fa 45             	cmp    dl,0x45
    7383:	0f 84 71 ff ff ff    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _TimeOfDay;
    7389:	41 b8 10 00 00 00    	mov    r8d,0x10
    738f:	eb 8f                	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    7391:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		++__first;
    7398:	49 83 c7 02          	add    r15,0x2
	      __mod = _CharT();
    739c:	31 d2                	xor    edx,edx
    739e:	eb d1                	jmp    7371 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x321>
	      switch (__c)
    73a0:	0f 84 54 ff ff ff    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
    73a6:	3c 43                	cmp    al,0x43
    73a8:	0f 8e 52 ff ff ff    	jle    7300 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2b0>
    73ae:	8d 48 bc             	lea    ecx,[rax-0x44]
    73b1:	be 01 00 00 00       	mov    esi,0x1
    73b6:	48 d3 e6             	shl    rsi,cl
    73b9:	40 f6 c6 0d          	test   sil,0xd
    73bd:	0f 85 5d 01 00 00    	jne    7520 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x4d0>
    73c3:	f7 c6 30 02 00 00    	test   esi,0x230
    73c9:	75 b5                	jne    7380 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x330>
    73cb:	f7 c6 02 08 00 00    	test   esi,0x802
    73d1:	0f 84 23 ff ff ff    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  if (__mod) [[unlikely]]
    73d7:	84 d2                	test   dl,dl
    73d9:	0f 85 11 ff ff ff    	jne    72f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
	      _CharT __c = *__first++;
    73df:	49 89 ff             	mov    r15,rdi
		  __mod = __c;
    73e2:	89 c2                	mov    edx,eax
    73e4:	eb 8b                	jmp    7371 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x321>
    73e6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    73ed:	00 00 00 
	  _M_spec = __spec;
    73f0:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
		 = __string_view(__chrono_specs, __first - __chrono_specs);
    73f6:	48 89 d8             	mov    rax,rbx
	  _M_spec._M_chrono_specs
    73f9:	4c 89 6d 18          	mov    QWORD PTR [rbp+0x18],r13
		 = __string_view(__chrono_specs, __first - __chrono_specs);
    73fd:	4c 29 e8             	sub    rax,r13
    7400:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	  _M_spec = __spec;
    7404:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
	  return __first;
    7408:	e9 d7 fd ff ff       	jmp    71e4 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x194>
    740d:	0f 1f 00             	nop    DWORD PTR [rax]
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7410:	80 fa 45             	cmp    dl,0x45
    7413:	0f 84 e1 fe ff ff    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Date;
    7419:	41 b8 0f 00 00 00    	mov    r8d,0xf
    741f:	e9 fc fe ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    7424:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      switch (__c)
    7428:	3c 25                	cmp    al,0x25
    742a:	0f 84 c0 fe ff ff    	je     72f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7430:	3c 41                	cmp    al,0x41
    7432:	0f 85 c2 fe ff ff    	jne    72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Weekday;
    7438:	41 b8 08 00 00 00    	mov    r8d,0x8
    743e:	e9 ad fe ff ff       	jmp    72f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7443:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      switch (__c)
    7448:	41 b8 02 00 00 00    	mov    r8d,0x2
    744e:	e9 9d fe ff ff       	jmp    72f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7453:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7458:	80 fa 45             	cmp    dl,0x45
    745b:	0f 84 99 fe ff ff    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Day;
    7461:	41 b8 04 00 00 00    	mov    r8d,0x4
    7467:	e9 b4 fe ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    746c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7470:	80 fa 45             	cmp    dl,0x45
    7473:	0f 84 81 fe ff ff    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Weekday;
    7479:	41 b8 08 00 00 00    	mov    r8d,0x8
    747f:	e9 9c fe ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    7484:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _Duration;
    7488:	41 b8 80 00 00 00    	mov    r8d,0x80
    748e:	e9 5d fe ff ff       	jmp    72f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7493:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		  __needed = _TimeZone;
    7498:	41 b8 20 00 00 00    	mov    r8d,0x20
		  break;
    749e:	e9 4d fe ff ff       	jmp    72f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    74a3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		  __needed = _TimeOfDay;
    74a8:	41 b8 10 00 00 00    	mov    r8d,0x10
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    74ae:	80 fa 45             	cmp    dl,0x45
    74b1:	0f 85 3e fe ff ff    	jne    72f5 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a5>
    74b7:	e9 64 fe ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    74bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _DateTime;
    74c0:	41 b8 1f 00 00 00    	mov    r8d,0x1f
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    74c6:	80 fa 45             	cmp    dl,0x45
    74c9:	0f 85 26 fe ff ff    	jne    72f5 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a5>
    74cf:	e9 4c fe ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    74d4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    74d8:	80 fa 45             	cmp    dl,0x45
    74db:	0f 84 19 fe ff ff    	je     72fa <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Month;
    74e1:	41 b8 02 00 00 00    	mov    r8d,0x2
    74e7:	e9 34 fe ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    74ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _Date;
    74f0:	8b 44 24 0c          	mov    eax,DWORD PTR [rsp+0xc]
    74f4:	85 c0                	test   eax,eax
    74f6:	b8 0f 00 00 00       	mov    eax,0xf
    74fb:	44 0f 44 c0          	cmove  r8d,eax
    74ff:	e9 ec fd ff ff       	jmp    72f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7504:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _Date;
    7508:	41 b8 0f 00 00 00    	mov    r8d,0xf
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    750e:	80 fa 45             	cmp    dl,0x45
    7511:	0f 85 de fd ff ff    	jne    72f5 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a5>
    7517:	e9 04 fe ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    751c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _Date;
    7520:	41 b8 0f 00 00 00    	mov    r8d,0xf
    7526:	e9 c5 fd ff ff       	jmp    72f0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    752b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		  __needed = _Year;
    7530:	41 b8 01 00 00 00    	mov    r8d,0x1
    7536:	e9 e5 fd ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    753b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      switch (__c)
    7540:	41 b8 20 00 00 00    	mov    r8d,0x20
    7546:	e9 d5 fd ff ff       	jmp    7320 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    754b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    if (__end != __str.npos)
    7550:	4c 89 f2             	mov    rdx,r14
	  auto __last = __pc.end();
    7553:	4c 89 fb             	mov    rbx,r15
    7556:	e9 0a fd ff ff       	jmp    7265 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x215>
    755b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000007560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
    basic_string<_CharT, _Traits, _Alloc>::
    7560:	41 57                	push   r15
    7562:	41 56                	push   r14
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    7564:	4c 8d 77 10          	lea    r14,[rdi+0x10]
    7568:	41 55                	push   r13
    756a:	41 54                	push   r12
    756c:	49 89 cc             	mov    r12,rcx
    756f:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
    7573:	55                   	push   rbp
    7574:	48 89 f5             	mov    rbp,rsi
    7577:	53                   	push   rbx
    7578:	48 89 fb             	mov    rbx,rdi
    757b:	48 83 ec 28          	sub    rsp,0x28
      { return _M_string_length; }
    757f:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
    7583:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
      const size_type __how_much = length() - __pos - __len1;
    7588:	48 89 c6             	mov    rsi,rax
    758b:	48 29 ce             	sub    rsi,rcx
      size_type __new_capacity = length() + __len2 - __len1;
    758e:	4c 89 c1             	mov    rcx,r8
    7591:	48 29 d1             	sub    rcx,rdx
      const size_type __how_much = length() - __pos - __len1;
    7594:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
      size_type __new_capacity = length() + __len2 - __len1;
    7599:	4c 8d 3c 01          	lea    r15,[rcx+rax*1]
	if (_M_data() == _M_local_data())
    759d:	4c 3b 37             	cmp    r14,QWORD PTR [rdi]
    75a0:	74 2e                	je     75d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x70>
	return _M_is_local() ? size_type(_S_local_capacity)
    75a2:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
      if (__capacity > max_size())
    75a6:	4d 85 ff             	test   r15,r15
    75a9:	0f 88 79 01 00 00    	js     7728 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x1c8>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    75af:	4c 39 f8             	cmp    rax,r15
    75b2:	73 3c                	jae    75f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x90>
    75b4:	48 01 c0             	add    rax,rax
    75b7:	49 39 c7             	cmp    r15,rax
    75ba:	73 34                	jae    75f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x90>
	  if (__capacity > max_size())
    75bc:	48 85 c0             	test   rax,rax
    75bf:	0f 89 03 01 00 00    	jns    76c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x168>
    75c5:	e8 16 bb ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
    75ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      if (__capacity > max_size())
    75d0:	4d 85 ff             	test   r15,r15
    75d3:	0f 88 4f 01 00 00    	js     7728 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x1c8>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    75d9:	49 8d 47 f0          	lea    rax,[r15-0x10]
    75dd:	48 83 f8 0d          	cmp    rax,0xd
    75e1:	0f 86 31 01 00 00    	jbe    7718 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x1b8>
    75e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    75ee:	00 00 
	if (__builtin_expect(__n > this->_M_max_size(), false))
    75f0:	4c 89 ff             	mov    rdi,r15
    75f3:	48 83 c7 01          	add    rdi,0x1
    75f7:	78 cc                	js     75c5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x65>
    75f9:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    75fe:	e8 dd bb ff ff       	call   31e0 <operator new(unsigned long)@plt>
      if (__pos)
    7603:	48 85 ed             	test   rbp,rbp
    7606:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
    760b:	49 89 c5             	mov    r13,rax
    760e:	74 22                	je     7632 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xd2>
      { return _M_dataplus._M_p; }
    7610:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
	if (__n == 1)
    7613:	48 83 fd 01          	cmp    rbp,0x1
    7617:	0f 84 bb 00 00 00    	je     76d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x178>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    761d:	48 89 ea             	mov    rdx,rbp
    7620:	48 89 c7             	mov    rdi,rax
    7623:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
    7628:	e8 83 bb ff ff       	call   31b0 <memcpy@plt>
    762d:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
      if (__s && __len2)
    7632:	4d 85 e4             	test   r12,r12
    7635:	74 29                	je     7660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x100>
    7637:	4d 85 c0             	test   r8,r8
    763a:	74 24                	je     7660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x100>
	this->_S_copy(__r + __pos, __s, __len2);
    763c:	49 8d 7c 2d 00       	lea    rdi,[r13+rbp*1+0x0]
    7641:	49 83 f8 01          	cmp    r8,0x1
    7645:	0f 84 9d 00 00 00    	je     76e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x188>
    764b:	4c 89 c2             	mov    rdx,r8
    764e:	4c 89 e6             	mov    rsi,r12
    7651:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
    7656:	e8 55 bb ff ff       	call   31b0 <memcpy@plt>
    765b:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
      if (__how_much)
    7660:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
      { return _M_dataplus._M_p; }
    7665:	4c 8b 23             	mov    r12,QWORD PTR [rbx]
    7668:	48 85 c0             	test   rax,rax
    766b:	75 33                	jne    76a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x140>
	if (_M_data() == _M_local_data())
    766d:	4d 39 e6             	cmp    r14,r12
    7670:	74 10                	je     7682 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x122>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7672:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7676:	4c 89 e7             	mov    rdi,r12
    7679:	48 8d 70 01          	lea    rsi,[rax+0x1]
    767d:	e8 7e bb ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
    7682:	4c 89 2b             	mov    QWORD PTR [rbx],r13
      { _M_allocated_capacity = __capacity; }
    7685:	4c 89 7b 10          	mov    QWORD PTR [rbx+0x10],r15
    }
    7689:	48 83 c4 28          	add    rsp,0x28
    768d:	5b                   	pop    rbx
    768e:	5d                   	pop    rbp
    768f:	41 5c                	pop    r12
    7691:	41 5d                	pop    r13
    7693:	41 5e                	pop    r14
    7695:	41 5f                	pop    r15
    7697:	c3                   	ret
    7698:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    769f:	00 
		      _M_data() + __pos + __len1, __how_much);
    76a0:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
	this->_S_copy(__r + __pos + __len2,
    76a5:	4a 8d 7c 05 00       	lea    rdi,[rbp+r8*1+0x0]
    76aa:	4c 01 ef             	add    rdi,r13
		      _M_data() + __pos + __len1, __how_much);
    76ad:	4c 01 e6             	add    rsi,r12
	if (__n == 1)
    76b0:	48 83 f8 01          	cmp    rax,0x1
    76b4:	74 52                	je     7708 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x1a8>
    76b6:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    76bb:	e8 f0 ba ff ff       	call   31b0 <memcpy@plt>
      }
    76c0:	eb ab                	jmp    766d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x10d>
    76c2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    76c8:	48 8d 78 01          	lea    rdi,[rax+0x1]
	  __capacity = 2 * __old_capacity;
    76cc:	49 89 c7             	mov    r15,rax
    76cf:	e9 25 ff ff ff       	jmp    75f9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x99>
    76d4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	__c1 = __c2;
    76d8:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    76db:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
      }
    76df:	e9 4e ff ff ff       	jmp    7632 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xd2>
    76e4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	__c1 = __c2;
    76e8:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
      { return _M_dataplus._M_p; }
    76ed:	4c 8b 23             	mov    r12,QWORD PTR [rbx]
    76f0:	88 07                	mov    BYTE PTR [rdi],al
      if (__how_much)
    76f2:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    76f7:	48 85 c0             	test   rax,rax
    76fa:	0f 84 6d ff ff ff    	je     766d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x10d>
    7700:	eb 9e                	jmp    76a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x140>
    7702:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    7708:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    770b:	88 07                	mov    BYTE PTR [rdi],al
      }
    770d:	e9 5b ff ff ff       	jmp    766d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x10d>
    7712:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  __capacity = 2 * __old_capacity;
    7718:	41 bf 1e 00 00 00    	mov    r15d,0x1e
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    771e:	bf 1f 00 00 00       	mov    edi,0x1f
    7723:	e9 d1 fe ff ff       	jmp    75f9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x99>
	std::__throw_length_error(__N("basic_string::_M_create"));
    7728:	48 8d 3d e9 d9 00 00 	lea    rdi,[rip+0xd9e9]        # 15118 <CSWTCH.1104+0x38>
    772f:	e8 fc b9 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    7734:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    773b:	00 00 00 
    773e:	66 90                	xchg   ax,ax

0000000000007740 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()>:
      : _M_current(__i) { }
    7740:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
	if (__s.empty()) [[unlikely]]
    7744:	4c 8b 47 18          	mov    r8,QWORD PTR [rdi+0x18]
    7748:	49 29 c8             	sub    r8,rcx
    774b:	0f 84 af 00 00 00    	je     7800 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0xc0>
	if (this->max_size() - (this->size() - __n1) < __n2)
    7751:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    7758:	ff ff 7f 
      _M_overflow() override
    775b:	55                   	push   rbp
    775c:	53                   	push   rbx
    775d:	48 89 fb             	mov    rbx,rdi
    7760:	48 83 ec 08          	sub    rsp,0x8
      { return _M_string_length; }
    7764:	48 8b b7 28 01 00 00 	mov    rsi,QWORD PTR [rdi+0x128]
	if (this->max_size() - (this->size() - __n1) < __n2)
    776b:	48 29 f0             	sub    rax,rsi
    776e:	4c 39 c0             	cmp    rax,r8
    7771:	0f 82 8a 00 00 00    	jb     7801 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0xc1>
      { return _M_dataplus._M_p; }
    7777:	48 8b bf 20 01 00 00 	mov    rdi,QWORD PTR [rdi+0x120]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    777e:	48 8d 83 30 01 00 00 	lea    rax,[rbx+0x130]
      const size_type __len = __n + this->size();
    7785:	49 8d 2c 30          	lea    rbp,[r8+rsi*1]
	if (_M_data() == _M_local_data())
    7789:	48 39 c7             	cmp    rdi,rax
    778c:	74 62                	je     77f0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0xb0>
	return _M_is_local() ? size_type(_S_local_capacity)
    778e:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
      if (__len <= this->capacity())
    7795:	48 39 e8             	cmp    rax,rbp
    7798:	72 16                	jb     77b0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0x70>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    779a:	48 01 f7             	add    rdi,rsi
	if (__n == 1)
    779d:	49 83 f8 01          	cmp    r8,0x1
    77a1:	74 3d                	je     77e0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0xa0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    77a3:	4c 89 c2             	mov    rdx,r8
    77a6:	48 89 ce             	mov    rsi,rcx
    77a9:	e8 02 ba ff ff       	call   31b0 <memcpy@plt>
      }
    77ae:	eb 0e                	jmp    77be <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0x7e>
	  _M_seq.append(__s.data(), __s.size());
    77b0:	48 8d bb 20 01 00 00 	lea    rdi,[rbx+0x120]
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    77b7:	31 d2                	xor    edx,edx
    77b9:	e8 a2 fd ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
	__c1 = __c2;
    77be:	48 8b 83 20 01 00 00 	mov    rax,QWORD PTR [rbx+0x120]
      { _M_string_length = __length; }
    77c5:	48 89 ab 28 01 00 00 	mov    QWORD PTR [rbx+0x128],rbp
    77cc:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
      { _M_next = _M_span.begin(); }
    77d0:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    77d4:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
      }
    77d8:	48 83 c4 08          	add    rsp,0x8
    77dc:	5b                   	pop    rbx
    77dd:	5d                   	pop    rbp
    77de:	c3                   	ret
    77df:	90                   	nop
    77e0:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    77e3:	88 07                	mov    BYTE PTR [rdi],al
      }
    77e5:	eb d7                	jmp    77be <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0x7e>
    77e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    77ee:	00 00 
	return _M_is_local() ? size_type(_S_local_capacity)
    77f0:	b8 0f 00 00 00       	mov    eax,0xf
    77f5:	eb 9e                	jmp    7795 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0x55>
    77f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    77fe:	00 00 
    7800:	c3                   	ret
	  __throw_length_error(__N(__s));
    7801:	48 8d 3d b3 d9 00 00 	lea    rdi,[rip+0xd9b3]        # 151bb <CSWTCH.1104+0xdb>
    7808:	e8 23 b9 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    780d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000007810 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)>:
      _M_reserve(size_t __n) override
    7810:	41 57                	push   r15
    7812:	41 56                	push   r14
    7814:	4c 8d b7 30 01 00 00 	lea    r14,[rdi+0x130]
    781b:	41 55                	push   r13
    781d:	41 54                	push   r12
    781f:	55                   	push   rbp
    7820:	48 89 f5             	mov    rbp,rsi
    7823:	53                   	push   rbx
    7824:	48 89 fb             	mov    rbx,rdi
    7827:	48 83 ec 18          	sub    rsp,0x18
    782b:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
    { return __lhs.base() - __rhs.base(); }
    782f:	4c 8b 47 18          	mov    r8,QWORD PTR [rdi+0x18]
	    if (this->_M_used().size()) [[unlikely]]
    7833:	49 39 c8             	cmp    r8,rcx
    7836:	0f 85 4c 01 00 00    	jne    7988 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x178>
      { return _M_string_length; }
    783c:	4c 8b ab 28 01 00 00 	mov    r13,QWORD PTR [rbx+0x128]
      { return _M_dataplus._M_p; }
    7843:	4c 8b a3 20 01 00 00 	mov    r12,QWORD PTR [rbx+0x120]
	      _M_seq.__resize_and_overwrite(__sz + __n,
    784a:	4c 01 ed             	add    rbp,r13
	if (_M_data() == _M_local_data())
    784d:	4d 39 f4             	cmp    r12,r14
    7850:	0f 84 ea 00 00 00    	je     7940 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x130>
	return _M_is_local() ? size_type(_S_local_capacity)
    7856:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
      if (__res <= __capacity)
    785d:	48 39 e8             	cmp    rax,rbp
    7860:	72 3e                	jb     78a0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x90>
      { _M_string_length = __length; }
    7862:	48 89 ab 28 01 00 00 	mov    QWORD PTR [rbx+0x128],rbp
	__c1 = __c2;
    7869:	41 c6 04 2c 00       	mov    BYTE PTR [r12+rbp*1],0x0
      { return _M_dataplus._M_p; }
    786e:	48 8b 83 20 01 00 00 	mov    rax,QWORD PTR [rbx+0x120]
      { return _M_string_length; }
    7875:	48 8b 93 28 01 00 00 	mov    rdx,QWORD PTR [rbx+0x128]
	_M_span = __s;
    787c:	48 89 43 08          	mov    QWORD PTR [rbx+0x8],rax
      { return __normal_iterator(_M_current + __n); }
    7880:	4c 01 e8             	add    rax,r13
    7883:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
      }
    7887:	48 89 d8             	mov    rax,rbx
	_M_span = __s;
    788a:	48 89 53 10          	mov    QWORD PTR [rbx+0x10],rdx
      }
    788e:	48 83 c4 18          	add    rsp,0x18
    7892:	5b                   	pop    rbx
    7893:	5d                   	pop    rbp
    7894:	41 5c                	pop    r12
    7896:	41 5d                	pop    r13
    7898:	41 5e                	pop    r14
    789a:	41 5f                	pop    r15
    789c:	c3                   	ret
    789d:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__capacity > max_size())
    78a0:	48 85 ed             	test   rbp,rbp
    78a3:	0f 88 6e 01 00 00    	js     7a17 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x207>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    78a9:	4c 8d 3c 00          	lea    r15,[rax+rax*1]
    78ad:	4c 39 fd             	cmp    rbp,r15
    78b0:	72 7e                	jb     7930 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x120>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    78b2:	48 89 ef             	mov    rdi,rbp
    78b5:	49 89 ef             	mov    r15,rbp
    78b8:	48 83 c7 01          	add    rdi,0x1
    78bc:	78 7b                	js     7939 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x129>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    78be:	e8 1d b9 ff ff       	call   31e0 <operator new(unsigned long)@plt>
      { return _M_dataplus._M_p; }
    78c3:	48 8b 8b 20 01 00 00 	mov    rcx,QWORD PTR [rbx+0x120]
    78ca:	49 89 c4             	mov    r12,rax
      this->_S_copy(__tmp, _M_data(), length() + 1);
    78cd:	48 8b 83 28 01 00 00 	mov    rax,QWORD PTR [rbx+0x128]
    78d4:	48 8d 50 01          	lea    rdx,[rax+0x1]
	if (__n == 1)
    78d8:	48 85 c0             	test   rax,rax
    78db:	0f 84 8f 00 00 00    	je     7970 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x160>
	if (__n == 0)
    78e1:	48 85 d2             	test   rdx,rdx
    78e4:	75 2a                	jne    7910 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x100>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    78e6:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    78ed:	48 89 cf             	mov    rdi,rcx
    78f0:	48 8d 70 01          	lea    rsi,[rax+0x1]
    78f4:	e8 07 b9 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
    78f9:	4c 89 a3 20 01 00 00 	mov    QWORD PTR [rbx+0x120],r12
      { _M_allocated_capacity = __capacity; }
    7900:	4c 89 bb 30 01 00 00 	mov    QWORD PTR [rbx+0x130],r15
    7907:	e9 56 ff ff ff       	jmp    7862 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x52>
    790c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    7910:	48 89 ce             	mov    rsi,rcx
    7913:	4c 89 e7             	mov    rdi,r12
    7916:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    791b:	e8 90 b8 ff ff       	call   31b0 <memcpy@plt>
	if (_M_data() == _M_local_data())
    7920:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    7925:	49 39 ce             	cmp    r14,rcx
    7928:	75 bc                	jne    78e6 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xd6>
    792a:	eb cd                	jmp    78f9 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xe9>
    792c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    7930:	49 8d 7f 01          	lea    rdi,[r15+0x1]
	  if (__capacity > max_size())
    7934:	4d 85 ff             	test   r15,r15
    7937:	79 85                	jns    78be <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xae>
	    std::__throw_bad_alloc();
    7939:	e8 a2 b7 ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
    793e:	66 90                	xchg   ax,ax
      if (__res <= __capacity)
    7940:	48 83 fd 0f          	cmp    rbp,0xf
    7944:	0f 86 18 ff ff ff    	jbe    7862 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x52>
      if (__capacity > max_size())
    794a:	48 85 ed             	test   rbp,rbp
    794d:	0f 88 c4 00 00 00    	js     7a17 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x207>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    7953:	48 83 fd 1d          	cmp    rbp,0x1d
    7957:	0f 87 55 ff ff ff    	ja     78b2 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xa2>
    795d:	bf 1f 00 00 00       	mov    edi,0x1f
	  __capacity = 2 * __old_capacity;
    7962:	41 bf 1e 00 00 00    	mov    r15d,0x1e
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    7968:	e9 51 ff ff ff       	jmp    78be <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xae>
    796d:	0f 1f 00             	nop    DWORD PTR [rax]
	__c1 = __c2;
    7970:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    7973:	41 88 04 24          	mov    BYTE PTR [r12],al
    7977:	49 39 ce             	cmp    r14,rcx
    797a:	0f 85 66 ff ff ff    	jne    78e6 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xd6>
    7980:	e9 74 ff ff ff       	jmp    78f9 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xe9>
    7985:	0f 1f 00             	nop    DWORD PTR [rax]
      { return _M_string_length; }
    7988:	48 8b b7 28 01 00 00 	mov    rsi,QWORD PTR [rdi+0x128]
    { return __lhs.base() - __rhs.base(); }
    798f:	49 29 c8             	sub    r8,rcx
	if (this->max_size() - (this->size() - __n1) < __n2)
    7992:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    7999:	ff ff 7f 
    799c:	48 29 f0             	sub    rax,rsi
    799f:	4c 39 c0             	cmp    rax,r8
    79a2:	72 7f                	jb     7a23 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x213>
      { return _M_dataplus._M_p; }
    79a4:	48 8b bf 20 01 00 00 	mov    rdi,QWORD PTR [rdi+0x120]
      const size_type __len = __n + this->size();
    79ab:	4e 8d 24 06          	lea    r12,[rsi+r8*1]
	if (_M_data() == _M_local_data())
    79af:	4c 39 f7             	cmp    rdi,r14
    79b2:	74 5c                	je     7a10 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x200>
	return _M_is_local() ? size_type(_S_local_capacity)
    79b4:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
      if (__len <= this->capacity())
    79bb:	4c 39 e0             	cmp    rax,r12
    79be:	72 40                	jb     7a00 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1f0>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    79c0:	48 01 f7             	add    rdi,rsi
	if (__n == 1)
    79c3:	49 83 f8 01          	cmp    r8,0x1
    79c7:	74 2f                	je     79f8 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1e8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    79c9:	4c 89 c2             	mov    rdx,r8
    79cc:	48 89 ce             	mov    rsi,rcx
    79cf:	e8 dc b7 ff ff       	call   31b0 <memcpy@plt>
	__c1 = __c2;
    79d4:	48 8b 83 20 01 00 00 	mov    rax,QWORD PTR [rbx+0x120]
      { _M_string_length = __length; }
    79db:	4c 89 a3 28 01 00 00 	mov    QWORD PTR [rbx+0x128],r12
    79e2:	42 c6 04 20 00       	mov    BYTE PTR [rax+r12*1],0x0
      { _M_next = _M_span.begin(); }
    79e7:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    79eb:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
    79ef:	e9 48 fe ff ff       	jmp    783c <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x2c>
    79f4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    79f8:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    79fb:	88 07                	mov    BYTE PTR [rdi],al
      }
    79fd:	eb d5                	jmp    79d4 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1c4>
    79ff:	90                   	nop
	  _M_seq.append(__s.data(), __s.size());
    7a00:	48 8d bb 20 01 00 00 	lea    rdi,[rbx+0x120]
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    7a07:	31 d2                	xor    edx,edx
    7a09:	e8 52 fb ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    7a0e:	eb c4                	jmp    79d4 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1c4>
	return _M_is_local() ? size_type(_S_local_capacity)
    7a10:	b8 0f 00 00 00       	mov    eax,0xf
    7a15:	eb a4                	jmp    79bb <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1ab>
	std::__throw_length_error(__N("basic_string::_M_create"));
    7a17:	48 8d 3d fa d6 00 00 	lea    rdi,[rip+0xd6fa]        # 15118 <CSWTCH.1104+0x38>
    7a1e:	e8 0d b7 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
	  __throw_length_error(__N(__s));
    7a23:	48 8d 3d 91 d7 00 00 	lea    rdi,[rip+0xd791]        # 151bb <CSWTCH.1104+0xdb>
    7a2a:	e8 01 b7 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    7a2f:	90                   	nop

0000000000007a30 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)>:
      _M_bump(size_t __n) override
    7a30:	41 55                	push   r13
    7a32:	41 54                	push   r12
    7a34:	55                   	push   rbp
    7a35:	53                   	push   rbx
    7a36:	48 89 fb             	mov    rbx,rdi
    7a39:	48 83 ec 08          	sub    rsp,0x8
    7a3d:	48 8b 6f 18          	mov    rbp,QWORD PTR [rdi+0x18]
      { return _M_string_length; }
    7a41:	4c 8b a7 28 01 00 00 	mov    r12,QWORD PTR [rdi+0x128]
    7a48:	48 2b 6f 08          	sub    rbp,QWORD PTR [rdi+0x8]
	    _M_seq.resize(__s.size() + __n);
    7a4c:	48 01 f5             	add    rbp,rsi
      if (__size < __n)
    7a4f:	49 39 ec             	cmp    r12,rbp
    7a52:	72 3c                	jb     7a90 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x60>
      else if (__n < __size)
    7a54:	4c 39 e5             	cmp    rbp,r12
    7a57:	73 12                	jae    7a6b <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x3b>
	__c1 = __c2;
    7a59:	48 8b 83 20 01 00 00 	mov    rax,QWORD PTR [rbx+0x120]
      { _M_string_length = __length; }
    7a60:	48 89 ab 28 01 00 00 	mov    QWORD PTR [rbx+0x128],rbp
    7a67:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
	    this->_M_reset(this->_M_buf);
    7a6b:	48 8d 43 20          	lea    rax,[rbx+0x20]
	_M_span = __s;
    7a6f:	48 c7 43 10 00 01 00 	mov    QWORD PTR [rbx+0x10],0x100
    7a76:	00 
    7a77:	48 89 43 08          	mov    QWORD PTR [rbx+0x8],rax
	_M_next = __s.begin() + __pos;
    7a7b:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
      }
    7a7f:	48 83 c4 08          	add    rsp,0x8
    7a83:	5b                   	pop    rbx
    7a84:	5d                   	pop    rbp
    7a85:	41 5c                	pop    r12
    7a87:	41 5d                	pop    r13
    7a89:	c3                   	ret
    7a8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	if (this->max_size() - (this->size() - __n1) < __n2)
    7a90:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    7a97:	ff ff 7f 
	this->append(__n - __size, __c);
    7a9a:	49 89 ed             	mov    r13,rbp
    7a9d:	4d 29 e5             	sub    r13,r12
    7aa0:	4c 29 e0             	sub    rax,r12
    7aa3:	4c 39 e8             	cmp    rax,r13
    7aa6:	72 6f                	jb     7b17 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0xe7>
      { return _M_dataplus._M_p; }
    7aa8:	48 8b bf 20 01 00 00 	mov    rdi,QWORD PTR [rdi+0x120]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    7aaf:	48 8d 83 30 01 00 00 	lea    rax,[rbx+0x130]
	if (_M_data() == _M_local_data())
    7ab6:	48 39 c7             	cmp    rdi,rax
    7ab9:	74 55                	je     7b10 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0xe0>
	return _M_is_local() ? size_type(_S_local_capacity)
    7abb:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
      if (__new_size <= this->capacity())
    7ac2:	48 39 e8             	cmp    rax,rbp
    7ac5:	72 29                	jb     7af0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0xc0>
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    7ac7:	4c 01 e7             	add    rdi,r12
	if (__n == 1)
    7aca:	49 83 fd 01          	cmp    r13,0x1
    7ace:	74 10                	je     7ae0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0xb0>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    7ad0:	4c 89 ea             	mov    rdx,r13
    7ad3:	31 f6                	xor    esi,esi
    7ad5:	e8 66 b6 ff ff       	call   3140 <memset@plt>
    7ada:	e9 7a ff ff ff       	jmp    7a59 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x29>
    7adf:	90                   	nop
	__c1 = __c2;
    7ae0:	c6 07 00             	mov    BYTE PTR [rdi],0x0
      }
    7ae3:	e9 71 ff ff ff       	jmp    7a59 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x29>
    7ae8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    7aef:	00 
	    _M_seq.resize(__s.size() + __n);
    7af0:	48 8d bb 20 01 00 00 	lea    rdi,[rbx+0x120]
	this->_M_mutate(__pos1, __n1, 0, __n2);
    7af7:	4d 89 e8             	mov    r8,r13
    7afa:	31 c9                	xor    ecx,ecx
    7afc:	31 d2                	xor    edx,edx
    7afe:	4c 89 e6             	mov    rsi,r12
    7b01:	e8 5a fa ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
    7b06:	48 8b bb 20 01 00 00 	mov    rdi,QWORD PTR [rbx+0x120]
    7b0d:	eb b8                	jmp    7ac7 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x97>
    7b0f:	90                   	nop
	return _M_is_local() ? size_type(_S_local_capacity)
    7b10:	b8 0f 00 00 00       	mov    eax,0xf
    7b15:	eb ab                	jmp    7ac2 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x92>
	  __throw_length_error(__N(__s));
    7b17:	48 8d 3d 3a d6 00 00 	lea    rdi,[rip+0xd63a]        # 15158 <CSWTCH.1104+0x78>
    7b1e:	e8 0d b6 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    7b23:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    7b2a:	00 00 00 
    7b2d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000007b30 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>:
      parse(basic_format_parse_context<_CharT>& __pc)
    7b30:	41 55                	push   r13
    7b32:	41 54                	push   r12
    7b34:	49 89 fc             	mov    r12,rdi
    7b37:	55                   	push   rbp
    7b38:	53                   	push   rbx
    7b39:	48 83 ec 18          	sub    rsp,0x18
      constexpr const_iterator end() const noexcept { return _M_end; }
    7b3d:	4c 8b 6e 08          	mov    r13,QWORD PTR [rsi+0x8]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    7b41:	48 8b 1e             	mov    rbx,QWORD PTR [rsi]
	_Spec<_CharT> __spec{};
    7b44:	48 c7 44 24 04 00 00 	mov    QWORD PTR [rsp+0x4],0x0
    7b4b:	00 00 
    7b4d:	c7 44 24 0c 20 00 00 	mov    DWORD PTR [rsp+0xc],0x20
    7b54:	00 
	  if (__first == __last || *__first == '}')
    7b55:	49 39 dd             	cmp    r13,rbx
    7b58:	0f 84 c9 00 00 00    	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7b5e:	80 3b 7d             	cmp    BYTE PTR [rbx],0x7d
    7b61:	0f 84 c0 00 00 00    	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7b67:	48 89 f5             	mov    rbp,rsi
	__first = __spec._M_parse_fill_and_align(__first, __last);
    7b6a:	48 8d 7c 24 04       	lea    rdi,[rsp+0x4]
    7b6f:	48 89 de             	mov    rsi,rbx
    7b72:	4c 89 ea             	mov    rdx,r13
    7b75:	e8 46 f0 ff ff       	call   6bc0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
    7b7a:	48 89 c3             	mov    rbx,rax
	  if (__first == __last || *__first == '}')
    7b7d:	4c 39 e8             	cmp    rax,r13
    7b80:	0f 84 a1 00 00 00    	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7b86:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    7b89:	3c 7d                	cmp    al,0x7d
    7b8b:	0f 84 96 00 00 00    	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
      _S_sign(_CharT __c) noexcept
    7b91:	8d 50 e0             	lea    edx,[rax-0x20]
    7b94:	80 fa 0d             	cmp    dl,0xd
    7b97:	0f 87 c3 00 00 00    	ja     7c60 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x130>
    7b9d:	0f b6 d2             	movzx  edx,dl
    7ba0:	48 8d 0d 39 d5 00 00 	lea    rcx,[rip+0xd539]        # 150e0 <CSWTCH.1104>
    7ba7:	8b 14 91             	mov    edx,DWORD PTR [rcx+rdx*4]
	if (_Sign __sign = _S_sign(*__first))
    7baa:	85 d2                	test   edx,edx
    7bac:	0f 85 6e 01 00 00    	jne    7d20 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x1f0>
	if (*__first == '#')
    7bb2:	3c 23                	cmp    al,0x23
    7bb4:	0f 84 7e 02 00 00    	je     7e38 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x308>
	if (__first[0] != '.')
    7bba:	3c 2e                	cmp    al,0x2e
    7bbc:	0f 85 8e 01 00 00    	jne    7d50 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x220>
	iterator __next = ++__first;
    7bc2:	48 83 c3 01          	add    rbx,0x1
	bool __arg_id = false;
    7bc6:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	if (__next != __last)
    7bcb:	49 39 dd             	cmp    r13,rbx
    7bce:	0f 84 aa 01 00 00    	je     7d7e <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x24e>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
    7bd4:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
    7bd9:	48 8d 54 24 0a       	lea    rdx,[rsp+0xa]
    7bde:	49 89 e8             	mov    r8,rbp
    7be1:	4c 89 ee             	mov    rsi,r13
    7be4:	48 89 df             	mov    rdi,rbx
    7be7:	e8 f4 e5 ff ff       	call   61e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next == __first)
    7bec:	48 39 c3             	cmp    rbx,rax
    7bef:	0f 84 89 01 00 00    	je     7d7e <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x24e>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
    7bf5:	0f b6 4c 24 03       	movzx  ecx,BYTE PTR [rsp+0x3]
    7bfa:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
    7bff:	8d 4c 09 02          	lea    ecx,[rcx+rcx*1+0x2]
    7c03:	83 e2 f9             	and    edx,0xfffffff9
    7c06:	83 e1 06             	and    ecx,0x6
    7c09:	09 ca                	or     edx,ecx
    7c0b:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	  if (__first == __last || *__first == '}')
    7c0f:	49 39 c5             	cmp    r13,rax
    7c12:	0f 84 29 01 00 00    	je     7d41 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x211>
    7c18:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    7c1b:	80 fa 7d             	cmp    dl,0x7d
    7c1e:	0f 85 cf 00 00 00    	jne    7cf3 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x1c3>
	  return __first;
    7c24:	48 89 c3             	mov    rbx,rax
	  _M_spec = __spec;
    7c27:	48 8b 44 24 04       	mov    rax,QWORD PTR [rsp+0x4]
    7c2c:	49 89 04 24          	mov    QWORD PTR [r12],rax
    7c30:	8b 44 24 0c          	mov    eax,DWORD PTR [rsp+0xc]
    7c34:	41 89 44 24 08       	mov    DWORD PTR [r12+0x8],eax
      }
    7c39:	48 83 c4 18          	add    rsp,0x18
    7c3d:	48 89 d8             	mov    rax,rbx
    7c40:	5b                   	pop    rbx
    7c41:	5d                   	pop    rbp
    7c42:	41 5c                	pop    r12
    7c44:	41 5d                	pop    r13
    7c46:	c3                   	ret
	  if (__first == __last || *__first == '}')
    7c47:	0f b6 43 01          	movzx  eax,BYTE PTR [rbx+0x1]
    7c4b:	3c 7d                	cmp    al,0x7d
    7c4d:	0f 84 55 02 00 00    	je     7ea8 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x378>
	if (*__first == '#')
    7c53:	3c 23                	cmp    al,0x23
    7c55:	0f 84 e0 01 00 00    	je     7e3b <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x30b>
    7c5b:	48 89 d3             	mov    rbx,rdx
    7c5e:	66 90                	xchg   ax,ax
	if (*__first == '0')
    7c60:	3c 30                	cmp    al,0x30
    7c62:	0f 85 52 ff ff ff    	jne    7bba <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x8a>
	    ++__first;
    7c68:	48 8d 43 01          	lea    rax,[rbx+0x1]
	    _M_zero_fill = true;
    7c6c:	80 4c 24 04 40       	or     BYTE PTR [rsp+0x4],0x40
	  if (__first == __last || *__first == '}')
    7c71:	49 39 c5             	cmp    r13,rax
    7c74:	0f 84 c7 00 00 00    	je     7d41 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x211>
    7c7a:	0f b6 53 01          	movzx  edx,BYTE PTR [rbx+0x1]
	  return __first;
    7c7e:	48 89 c3             	mov    rbx,rax
	  if (__first == __last || *__first == '}')
    7c81:	80 fa 7d             	cmp    dl,0x7d
    7c84:	74 a1                	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
	if (__first[0] != '.')
    7c86:	80 fa 2e             	cmp    dl,0x2e
    7c89:	0f 84 33 ff ff ff    	je     7bc2 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x92>
	bool __arg_id = false;
    7c8f:	c6 44 24 02 00       	mov    BYTE PTR [rsp+0x2],0x0
	if (*__first == '0')
    7c94:	80 fa 30             	cmp    dl,0x30
    7c97:	0f 84 e1 00 00 00    	je     7d7e <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x24e>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    7c9d:	48 8d 4c 24 02       	lea    rcx,[rsp+0x2]
    7ca2:	48 8d 54 24 08       	lea    rdx,[rsp+0x8]
    7ca7:	49 89 e8             	mov    r8,rbp
    7caa:	4c 89 ee             	mov    rsi,r13
    7cad:	48 89 df             	mov    rdi,rbx
    7cb0:	e8 2b e5 ff ff       	call   61e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next != __first)
    7cb5:	48 39 c3             	cmp    rbx,rax
    7cb8:	74 1f                	je     7cd9 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x1a9>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    7cba:	0f b6 4c 24 02       	movzx  ecx,BYTE PTR [rsp+0x2]
    7cbf:	8d 51 01             	lea    edx,[rcx+0x1]
    7cc2:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [rsp+0x4]
    7cc7:	83 e2 03             	and    edx,0x3
    7cca:	c1 e2 07             	shl    edx,0x7
    7ccd:	66 81 e1 7f fe       	and    cx,0xfe7f
    7cd2:	09 ca                	or     edx,ecx
    7cd4:	66 89 54 24 04       	mov    WORD PTR [rsp+0x4],dx
	  if (__first == __last || *__first == '}')
    7cd9:	49 39 c5             	cmp    r13,rax
    7cdc:	74 63                	je     7d41 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x211>
    7cde:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    7ce1:	80 fa 7d             	cmp    dl,0x7d
    7ce4:	0f 84 3a ff ff ff    	je     7c24 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf4>
	if (__first[0] != '.')
    7cea:	80 fa 2e             	cmp    dl,0x2e
    7ced:	0f 84 ad 01 00 00    	je     7ea0 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x370>
	if (*__first == 'L')
    7cf3:	80 fa 4c             	cmp    dl,0x4c
    7cf6:	0f 84 64 01 00 00    	je     7e60 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x330>
	switch (*__first)
    7cfc:	83 ea 41             	sub    edx,0x41
    7cff:	80 fa 26             	cmp    dl,0x26
    7d02:	77 6c                	ja     7d70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
    7d04:	48 8d 0d b5 d9 00 00 	lea    rcx,[rip+0xd9b5]        # 156c0 <CSWTCH.1104+0x5e0>
    7d0b:	0f b6 d2             	movzx  edx,dl
    7d0e:	48 63 14 91          	movsxd rdx,DWORD PTR [rcx+rdx*4]
    7d12:	48 01 ca             	add    rdx,rcx
    7d15:	ff e2                	jmp    rdx
    7d17:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    7d1e:	00 00 
	    _M_sign = __sign;
    7d20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [rsp+0x4]
    7d25:	83 e2 03             	and    edx,0x3
    7d28:	c1 e2 02             	shl    edx,0x2
    7d2b:	83 e0 f3             	and    eax,0xfffffff3
    7d2e:	09 d0                	or     eax,edx
	    return __first + 1;
    7d30:	48 8d 53 01          	lea    rdx,[rbx+0x1]
	    _M_sign = __sign;
    7d34:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
	  if (__first == __last || *__first == '}')
    7d38:	49 39 d5             	cmp    r13,rdx
    7d3b:	0f 85 06 ff ff ff    	jne    7c47 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x117>
	  return __first;
    7d41:	4c 89 eb             	mov    rbx,r13
    7d44:	e9 de fe ff ff       	jmp    7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7d49:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	bool __arg_id = false;
    7d50:	c6 44 24 02 00       	mov    BYTE PTR [rsp+0x2],0x0
    7d55:	e9 43 ff ff ff       	jmp    7c9d <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
	switch (*__first)
    7d5a:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_a;
    7d5d:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    7d62:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_a;
    7d66:	83 e2 87             	and    edx,0xffffff87
    7d69:	83 ca 08             	or     edx,0x8
    7d6c:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	  if (__first == __last || *__first == '}')
    7d70:	49 39 c5             	cmp    r13,rax
    7d73:	74 cc                	je     7d41 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x211>
    7d75:	80 38 7d             	cmp    BYTE PTR [rax],0x7d
    7d78:	0f 84 a6 fe ff ff    	je     7c24 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf4>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    7d7e:	e8 cd b3 ff ff       	call   3150 <abort@plt>
	switch (*__first)
    7d83:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_g;
    7d86:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    7d8b:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_g;
    7d8f:	83 e2 87             	and    edx,0xffffff87
    7d92:	83 ca 38             	or     edx,0x38
    7d95:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    7d99:	eb d5                	jmp    7d70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    7d9b:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_f;
    7d9e:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    7da3:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_f;
    7da7:	83 e2 87             	and    edx,0xffffff87
    7daa:	83 ca 28             	or     edx,0x28
    7dad:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    7db1:	eb bd                	jmp    7d70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    7db3:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_e;
    7db6:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    7dbb:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_e;
    7dbf:	83 e2 87             	and    edx,0xffffff87
    7dc2:	83 ca 18             	or     edx,0x18
    7dc5:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    7dc9:	eb a5                	jmp    7d70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    7dcb:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_G;
    7dce:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    7dd3:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_G;
    7dd7:	83 e2 87             	and    edx,0xffffff87
    7dda:	83 ca 40             	or     edx,0x40
    7ddd:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    7de1:	eb 8d                	jmp    7d70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    7de3:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_F;
    7de6:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    7deb:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_F;
    7def:	83 e2 87             	and    edx,0xffffff87
    7df2:	83 ca 30             	or     edx,0x30
    7df5:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    7df9:	e9 72 ff ff ff       	jmp    7d70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    7dfe:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_E;
    7e01:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    7e06:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_E;
    7e0a:	83 e2 87             	and    edx,0xffffff87
    7e0d:	83 ca 20             	or     edx,0x20
    7e10:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    7e14:	e9 57 ff ff ff       	jmp    7d70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    7e19:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_A;
    7e1c:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    7e21:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_A;
    7e25:	83 e2 87             	and    edx,0xffffff87
    7e28:	83 ca 10             	or     edx,0x10
    7e2b:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    7e2f:	e9 3c ff ff ff       	jmp    7d70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
    7e34:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    7e38:	48 89 da             	mov    rdx,rbx
	    ++__first;
    7e3b:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
	    _M_alt = true;
    7e3f:	80 4c 24 04 10       	or     BYTE PTR [rsp+0x4],0x10
	  if (__first == __last || *__first == '}')
    7e44:	49 39 dd             	cmp    r13,rbx
    7e47:	0f 84 da fd ff ff    	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7e4d:	0f b6 42 01          	movzx  eax,BYTE PTR [rdx+0x1]
    7e51:	3c 7d                	cmp    al,0x7d
    7e53:	0f 84 ce fd ff ff    	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7e59:	e9 02 fe ff ff       	jmp    7c60 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x130>
    7e5e:	66 90                	xchg   ax,ax
	    ++__first;
    7e60:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    _M_localized = true;
    7e64:	80 4c 24 04 20       	or     BYTE PTR [rsp+0x4],0x20
	  if (__first == __last || *__first == '}')
    7e69:	49 39 dd             	cmp    r13,rbx
    7e6c:	0f 84 b5 fd ff ff    	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7e72:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
    7e76:	3c 7d                	cmp    al,0x7d
    7e78:	0f 84 a9 fd ff ff    	je     7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
	switch (*__first)
    7e7e:	83 e8 41             	sub    eax,0x41
    7e81:	3c 26                	cmp    al,0x26
    7e83:	77 13                	ja     7e98 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x368>
    7e85:	48 8d 15 d0 d8 00 00 	lea    rdx,[rip+0xd8d0]        # 1575c <CSWTCH.1104+0x67c>
    7e8c:	0f b6 c0             	movzx  eax,al
    7e8f:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    7e93:	48 01 d0             	add    rax,rdx
    7e96:	ff e0                	jmp    rax
    7e98:	48 89 d8             	mov    rax,rbx
    7e9b:	e9 d5 fe ff ff       	jmp    7d75 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x245>
	    __first = __spec._M_parse_width(__first, __last, __pc);
    7ea0:	48 89 c3             	mov    rbx,rax
    7ea3:	e9 1a fd ff ff       	jmp    7bc2 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x92>
	  return __first;
    7ea8:	48 89 d3             	mov    rbx,rdx
    7eab:	e9 77 fd ff ff       	jmp    7c27 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>

0000000000007eb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>:
      push_back(_CharT __c)
    7eb0:	41 57                	push   r15
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    7eb2:	4c 8d 7f 10          	lea    r15,[rdi+0x10]
      push_back(_CharT __c)
    7eb6:	89 f1                	mov    ecx,esi
    7eb8:	41 56                	push   r14
    7eba:	41 55                	push   r13
    7ebc:	41 54                	push   r12
    7ebe:	55                   	push   rbp
    7ebf:	53                   	push   rbx
    7ec0:	48 89 fb             	mov    rbx,rdi
    7ec3:	48 83 ec 18          	sub    rsp,0x18
      { return _M_string_length; }
    7ec7:	48 8b 6f 08          	mov    rbp,QWORD PTR [rdi+0x8]
      { return _M_dataplus._M_p; }
    7ecb:	4c 8b 27             	mov    r12,QWORD PTR [rdi]
	if (__size + 1 > this->capacity())
    7ece:	4c 8d 6d 01          	lea    r13,[rbp+0x1]
	if (_M_data() == _M_local_data())
    7ed2:	4d 39 e7             	cmp    r15,r12
    7ed5:	0f 84 95 00 00 00    	je     7f70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0xc0>
	return _M_is_local() ? size_type(_S_local_capacity)
    7edb:	4c 8b 77 10          	mov    r14,QWORD PTR [rdi+0x10]
	if (__size + 1 > this->capacity())
    7edf:	4d 39 ee             	cmp    r14,r13
    7ee2:	72 24                	jb     7f08 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x58>
	__c1 = __c2;
    7ee4:	41 88 0c 2c          	mov    BYTE PTR [r12+rbp*1],cl
    7ee8:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_string_length = __length; }
    7eeb:	4c 89 6b 08          	mov    QWORD PTR [rbx+0x8],r13
    7eef:	c6 44 28 01 00       	mov    BYTE PTR [rax+rbp*1+0x1],0x0
      }
    7ef4:	48 83 c4 18          	add    rsp,0x18
    7ef8:	5b                   	pop    rbx
    7ef9:	5d                   	pop    rbp
    7efa:	41 5c                	pop    r12
    7efc:	41 5d                	pop    r13
    7efe:	41 5e                	pop    r14
    7f00:	41 5f                	pop    r15
    7f02:	c3                   	ret
    7f03:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      if (__capacity > max_size())
    7f08:	4d 85 ed             	test   r13,r13
    7f0b:	0f 88 d1 00 00 00    	js     7fe2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x132>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    7f11:	4d 01 f6             	add    r14,r14
    7f14:	4d 39 f5             	cmp    r13,r14
    7f17:	0f 82 b3 00 00 00    	jb     7fd0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x120>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    7f1d:	48 89 ef             	mov    rdi,rbp
    7f20:	4d 89 ee             	mov    r14,r13
    7f23:	48 83 c7 02          	add    rdi,0x2
    7f27:	0f 88 b0 00 00 00    	js     7fdd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x12d>
    7f2d:	89 0c 24             	mov    DWORD PTR [rsp],ecx
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    7f30:	e8 ab b2 ff ff       	call   31e0 <operator new(unsigned long)@plt>
      if (__pos)
    7f35:	48 85 ed             	test   rbp,rbp
      { return _M_dataplus._M_p; }
    7f38:	4c 8b 03             	mov    r8,QWORD PTR [rbx]
    7f3b:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
    7f3e:	49 89 c4             	mov    r12,rax
    7f41:	75 53                	jne    7f96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0xe6>
	if (_M_data() == _M_local_data())
    7f43:	4d 39 c7             	cmp    r15,r8
    7f46:	74 16                	je     7f5e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0xae>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7f48:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7f4c:	4c 89 c7             	mov    rdi,r8
    7f4f:	89 0c 24             	mov    DWORD PTR [rsp],ecx
    7f52:	48 8d 70 01          	lea    rsi,[rax+0x1]
    7f56:	e8 a5 b2 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    7f5b:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
      { _M_dataplus._M_p = __p; }
    7f5e:	4c 89 23             	mov    QWORD PTR [rbx],r12
      { _M_allocated_capacity = __capacity; }
    7f61:	4c 89 73 10          	mov    QWORD PTR [rbx+0x10],r14
    }
    7f65:	e9 7a ff ff ff       	jmp    7ee4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x34>
    7f6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	if (__size + 1 > this->capacity())
    7f70:	49 83 fd 10          	cmp    r13,0x10
    7f74:	0f 85 6a ff ff ff    	jne    7ee4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x34>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    7f7a:	bf 1f 00 00 00       	mov    edi,0x1f
    7f7f:	89 34 24             	mov    DWORD PTR [rsp],esi
	  __capacity = 2 * __old_capacity;
    7f82:	41 be 1e 00 00 00    	mov    r14d,0x1e
    7f88:	e8 53 b2 ff ff       	call   31e0 <operator new(unsigned long)@plt>
      { return _M_dataplus._M_p; }
    7f8d:	4c 8b 03             	mov    r8,QWORD PTR [rbx]
    7f90:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
    7f93:	49 89 c4             	mov    r12,rax
	if (__n == 1)
    7f96:	48 83 fd 01          	cmp    rbp,0x1
    7f9a:	74 24                	je     7fc0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x110>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    7f9c:	4c 89 c6             	mov    rsi,r8
    7f9f:	48 89 ea             	mov    rdx,rbp
    7fa2:	4c 89 e7             	mov    rdi,r12
    7fa5:	89 4c 24 0c          	mov    DWORD PTR [rsp+0xc],ecx
    7fa9:	4c 89 04 24          	mov    QWORD PTR [rsp],r8
    7fad:	e8 fe b1 ff ff       	call   31b0 <memcpy@plt>
    7fb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [rsp+0xc]
    7fb6:	4c 8b 04 24          	mov    r8,QWORD PTR [rsp]
      }
    7fba:	eb 87                	jmp    7f43 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x93>
    7fbc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	__c1 = __c2;
    7fc0:	41 0f b6 00          	movzx  eax,BYTE PTR [r8]
    7fc4:	41 88 04 24          	mov    BYTE PTR [r12],al
      }
    7fc8:	e9 76 ff ff ff       	jmp    7f43 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x93>
    7fcd:	0f 1f 00             	nop    DWORD PTR [rax]
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    7fd0:	49 8d 7e 01          	lea    rdi,[r14+0x1]
	  if (__capacity > max_size())
    7fd4:	4d 85 f6             	test   r14,r14
    7fd7:	0f 89 50 ff ff ff    	jns    7f2d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x7d>
	    std::__throw_bad_alloc();
    7fdd:	e8 fe b0 ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
	std::__throw_length_error(__N("basic_string::_M_create"));
    7fe2:	48 8d 3d 2f d1 00 00 	lea    rdi,[rip+0xd12f]        # 15118 <CSWTCH.1104+0x38>
    7fe9:	e8 42 b1 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    7fee:	66 90                	xchg   ax,ax

0000000000007ff0 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)>:
      parse(basic_format_parse_context<_CharT>& __pc)
    7ff0:	41 55                	push   r13
    7ff2:	41 54                	push   r12
    7ff4:	49 89 fc             	mov    r12,rdi
    7ff7:	55                   	push   rbp
    7ff8:	53                   	push   rbx
    7ff9:	48 83 ec 18          	sub    rsp,0x18
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    7ffd:	48 8b 06             	mov    rax,QWORD PTR [rsi]
      constexpr const_iterator end() const noexcept { return _M_end; }
    8000:	4c 8b 6e 08          	mov    r13,QWORD PTR [rsi+0x8]
	_Spec<_CharT> __spec{};
    8004:	48 c7 44 24 04 00 00 	mov    QWORD PTR [rsp+0x4],0x0
    800b:	00 00 
    800d:	c7 44 24 0c 20 00 00 	mov    DWORD PTR [rsp+0xc],0x20
    8014:	00 
	  if (__first == __last || *__first == '}')
    8015:	4c 39 e8             	cmp    rax,r13
    8018:	0f 84 32 01 00 00    	je     8150 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x160>
    801e:	80 38 7d             	cmp    BYTE PTR [rax],0x7d
    8021:	0f 84 df 00 00 00    	je     8106 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    8027:	48 89 f3             	mov    rbx,rsi
	__first = __spec._M_parse_fill_and_align(__first, __last);
    802a:	48 8d 7c 24 04       	lea    rdi,[rsp+0x4]
    802f:	4c 89 ea             	mov    rdx,r13
    8032:	48 89 c6             	mov    rsi,rax
    8035:	e8 86 eb ff ff       	call   6bc0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
    803a:	48 89 c5             	mov    rbp,rax
	  if (__first == __last || *__first == '}')
    803d:	4c 39 e8             	cmp    rax,r13
    8040:	0f 84 0a 01 00 00    	je     8150 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x160>
    8046:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    8049:	3c 7d                	cmp    al,0x7d
    804b:	0f 84 d7 00 00 00    	je     8128 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x138>
	bool __arg_id = false;
    8051:	c6 44 24 02 00       	mov    BYTE PTR [rsp+0x2],0x0
	if (*__first == '0')
    8056:	3c 30                	cmp    al,0x30
    8058:	0f 84 ff 00 00 00    	je     815d <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    805e:	48 8d 4c 24 02       	lea    rcx,[rsp+0x2]
    8063:	48 8d 54 24 08       	lea    rdx,[rsp+0x8]
    8068:	49 89 d8             	mov    r8,rbx
    806b:	4c 89 ee             	mov    rsi,r13
    806e:	48 89 ef             	mov    rdi,rbp
    8071:	e8 6a e1 ff ff       	call   61e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next != __first)
    8076:	48 39 c5             	cmp    rbp,rax
    8079:	74 1f                	je     809a <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0xaa>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    807b:	0f b6 4c 24 02       	movzx  ecx,BYTE PTR [rsp+0x2]
    8080:	8d 51 01             	lea    edx,[rcx+0x1]
    8083:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [rsp+0x4]
    8088:	83 e2 03             	and    edx,0x3
    808b:	c1 e2 07             	shl    edx,0x7
    808e:	66 81 e1 7f fe       	and    cx,0xfe7f
    8093:	09 ca                	or     edx,ecx
    8095:	66 89 54 24 04       	mov    WORD PTR [rsp+0x4],dx
	  if (__first == __last || *__first == '}')
    809a:	49 39 c5             	cmp    r13,rax
    809d:	74 67                	je     8106 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    809f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    80a2:	80 fa 7d             	cmp    dl,0x7d
    80a5:	74 5f                	je     8106 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
	if (__first[0] != '.')
    80a7:	80 fa 2e             	cmp    dl,0x2e
    80aa:	0f 85 a8 00 00 00    	jne    8158 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x168>
	iterator __next = ++__first;
    80b0:	48 8d 68 01          	lea    rbp,[rax+0x1]
	bool __arg_id = false;
    80b4:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	if (__next != __last)
    80b9:	49 39 ed             	cmp    r13,rbp
    80bc:	0f 84 9b 00 00 00    	je     815d <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
    80c2:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
    80c7:	48 8d 54 24 0a       	lea    rdx,[rsp+0xa]
    80cc:	49 89 d8             	mov    r8,rbx
    80cf:	4c 89 ee             	mov    rsi,r13
    80d2:	48 89 ef             	mov    rdi,rbp
    80d5:	e8 06 e1 ff ff       	call   61e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next == __first)
    80da:	48 39 c5             	cmp    rbp,rax
    80dd:	74 7e                	je     815d <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
    80df:	0f b6 4c 24 03       	movzx  ecx,BYTE PTR [rsp+0x3]
    80e4:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
    80e9:	8d 4c 09 02          	lea    ecx,[rcx+rcx*1+0x2]
    80ed:	83 e2 f9             	and    edx,0xfffffff9
    80f0:	83 e1 06             	and    ecx,0x6
    80f3:	09 ca                	or     edx,ecx
    80f5:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	  if (__first == __last || *__first == '}')
    80f9:	49 39 c5             	cmp    r13,rax
    80fc:	74 08                	je     8106 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    80fe:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    8101:	80 fa 7d             	cmp    dl,0x7d
    8104:	75 52                	jne    8158 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x168>
	  _M_spec = __spec;
    8106:	48 8b 54 24 04       	mov    rdx,QWORD PTR [rsp+0x4]
    810b:	49 89 14 24          	mov    QWORD PTR [r12],rdx
    810f:	8b 54 24 0c          	mov    edx,DWORD PTR [rsp+0xc]
    8113:	41 89 54 24 08       	mov    DWORD PTR [r12+0x8],edx
      }
    8118:	48 83 c4 18          	add    rsp,0x18
    811c:	5b                   	pop    rbx
    811d:	5d                   	pop    rbp
    811e:	41 5c                	pop    r12
    8120:	41 5d                	pop    r13
    8122:	c3                   	ret
    8123:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  return __first;
    8128:	48 89 e8             	mov    rax,rbp
    812b:	eb d9                	jmp    8106 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    812d:	0f 1f 00             	nop    DWORD PTR [rax]
	  ++__first;
    8130:	48 8d 50 01          	lea    rdx,[rax+0x1]
	  if (__first == __last || *__first == '}')
    8134:	4c 39 ea             	cmp    rdx,r13
    8137:	74 17                	je     8150 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x160>
    8139:	80 78 01 7d          	cmp    BYTE PTR [rax+0x1],0x7d
    813d:	75 1e                	jne    815d <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
    813f:	49 89 d5             	mov    r13,rdx
    8142:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    8149:	00 00 00 00 
    814d:	0f 1f 00             	nop    DWORD PTR [rax]
	  return __first;
    8150:	4c 89 e8             	mov    rax,r13
    8153:	eb b1                	jmp    8106 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    8155:	0f 1f 00             	nop    DWORD PTR [rax]
	if (*__first == 's')
    8158:	80 fa 73             	cmp    dl,0x73
    815b:	74 d3                	je     8130 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x140>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    815d:	e8 ee af ff ff       	call   3150 <abort@plt>
    8162:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8169:	00 00 00 
    816c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000008170 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>:
	_M_R_T(const _Tp& __t, typename _FormatContext::iterator __out,
    8170:	41 57                	push   r15
    8172:	66 0f ef d2          	pxor   xmm2,xmm2
    8176:	48 8d 0d c3 37 01 00 	lea    rcx,[rip+0x137c3]        # 1b940 <vtable for std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >+0x10>
    817d:	49 89 d7             	mov    r15,rdx
    8180:	41 56                	push   r14
    8182:	66 48 0f 6e c9       	movq   xmm1,rcx
    8187:	41 55                	push   r13
    8189:	41 54                	push   r12
    818b:	55                   	push   rbp
    818c:	53                   	push   rbx
    818d:	48 81 ec 88 01 00 00 	sub    rsp,0x188
    8194:	f2 0f 10 06          	movsd  xmm0,QWORD PTR [rsi]
    8198:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    819d:	44 89 44 24 04       	mov    DWORD PTR [rsp+0x4],r8d
    81a2:	66 0f 2f c2          	comisd xmm0,xmm2
    81a6:	66 48 0f 6e e0       	movq   xmm4,rax
    81ab:	66 0f 6c cc          	punpcklqdq xmm1,xmm4
#if __cpp_lib_three_way_comparison
    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      requires three_way_comparable<common_type_t<_Rep1, _Rep2>>
      constexpr auto
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    81af:	0f 8a 7b 01 00 00    	jp     8330 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1c0>
    81b5:	74 06                	je     81bd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4d>
    81b7:	0f 86 73 01 00 00    	jbe    8330 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1c0>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    81bd:	f2 0f 10 1d 73 06 01 	movsd  xmm3,QWORD PTR [rip+0x10673]        # 18838 <std::__unicode::__v15_1_0::__width_edges+0x478>
    81c4:	00 
    81c5:	66 0f 28 d0          	movapd xmm2,xmm0
      : _M_span(__span), _M_next(__span.begin())
    81c9:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    81ce:	45 31 c0             	xor    r8d,r8d
    81d1:	48 8d 44 24 10       	lea    rax,[rsp+0x10]
    81d6:	48 8d 4c 24 20       	lea    rcx,[rsp+0x20]
    81db:	be 09 00 00 00       	mov    esi,0x9
      : _M_span(__span), _M_next(__span.begin())
    81e0:	48 c7 44 24 50 00 01 	mov    QWORD PTR [rsp+0x50],0x100
    81e7:	00 00 
    81e9:	f2 0f 5e d3          	divsd  xmm2,xmm3
    81ed:	48 8d 7c 24 40       	lea    rdi,[rsp+0x40]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    81f2:	48 8d 9c 24 70 01 00 	lea    rbx,[rsp+0x170]
    81f9:	00 
      { _M_string_length = __length; }
    81fa:	48 c7 84 24 68 01 00 	mov    QWORD PTR [rsp+0x168],0x0
    8201:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    8206:	48 89 9c 24 60 01 00 	mov    QWORD PTR [rsp+0x160],rbx
    820d:	00 
	__c1 = __c2;
    820e:	c6 84 24 70 01 00 00 	mov    BYTE PTR [rsp+0x170],0x0
    8215:	00 
    8216:	48 c7 44 24 20 51 00 	mov    QWORD PTR [rsp+0x20],0x51
    821d:	00 00 
    821f:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
      { }
    8224:	0f 29 4c 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm1
	    return _ToDur(static_cast<__to_rep>(
    8229:	f2 48 0f 2c d2       	cvttsd2si rdx,xmm2
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    822e:	66 0f ef d2          	pxor   xmm2,xmm2
    8232:	f2 48 0f 2a d2       	cvtsi2sd xmm2,rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
    8237:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    823c:	48 8d 15 8d cf 00 00 	lea    rdx,[rip+0xcf8d]        # 151d0 <CSWTCH.1104+0xf0>
    8243:	f2 0f 59 d3          	mulsd  xmm2,xmm3
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    8247:	f2 0f 5c c2          	subsd  xmm0,xmm2
    824b:	f2 0f 11 44 24 08    	movsd  QWORD PTR [rsp+0x8],xmm0
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    8251:	f2 0f 5e 05 e7 05 01 	divsd  xmm0,QWORD PTR [rip+0x105e7]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x480>
    8258:	00 
	    return _ToDur(static_cast<__to_rep>(
    8259:	f2 4c 0f 2c e8       	cvttsd2si r13,xmm0
    825e:	e8 4d dd ff ff       	call   5fb0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
      : _M_current(__i) { }
    8263:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    { return __lhs.base() - __rhs.base(); }
    8268:	4c 8b 44 24 58       	mov    r8,QWORD PTR [rsp+0x58]
      { return _M_string_length; }
    826d:	48 8b b4 24 68 01 00 	mov    rsi,QWORD PTR [rsp+0x168]
    8274:	00 
    8275:	48 89 f1             	mov    rcx,rsi
	if (this->_M_used().size() != 0)
    8278:	4c 39 c0             	cmp    rax,r8
    827b:	0f 85 bf 00 00 00    	jne    8340 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1d0>
      { return _M_dataplus._M_p; }
    8281:	48 8b 94 24 60 01 00 	mov    rdx,QWORD PTR [rsp+0x160]
    8288:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    8289:	4c 8d 64 24 30       	lea    r12,[rsp+0x30]
    828e:	4c 89 64 24 20       	mov    QWORD PTR [rsp+0x20],r12
	if (_M_data() == _M_local_data())
    8293:	48 39 da             	cmp    rdx,rbx
    8296:	0f 84 cc 02 00 00    	je     8568 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3f8>
      { _M_allocated_capacity = __capacity; }
    829c:	48 8b 84 24 70 01 00 	mov    rax,QWORD PTR [rsp+0x170]
    82a3:	00 
      { _M_dataplus._M_p = __p; }
    82a4:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
      { return _M_string_length; }
    82a9:	48 89 f1             	mov    rcx,rsi
      { _M_allocated_capacity = __capacity; }
    82ac:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
			 "9999999999999999") + 2 * (__n & 0x7f),
    82b1:	4b 8d 44 2d 00       	lea    rax,[r13+r13*1+0x0]
	};
    82b6:	48 8d 35 7b d1 00 00 	lea    rsi,[rip+0xd17b]        # 15438 <CSWTCH.1104+0x358>
      { _M_string_length = __length; }
    82bd:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
			 "9999999999999999") + 2 * (__n & 0x7f),
    82c2:	25 fe 00 00 00       	and    eax,0xfe
	};
    82c7:	48 01 f0             	add    rax,rsi
	  __s[__s.size() - 2] = __sv[0];
    82ca:	0f b6 30             	movzx  esi,BYTE PTR [rax]
    82cd:	40 88 74 0a fe       	mov    BYTE PTR [rdx+rcx*1-0x2],sil
	  __s[__s.size() - 1] = __sv[1];
    82d2:	0f b6 48 01          	movzx  ecx,BYTE PTR [rax+0x1]
    82d6:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
    82db:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
    82e0:	88 4c 02 ff          	mov    BYTE PTR [rdx+rax*1-0x1],cl
      { return _M_string_length; }
    82e4:	48 8b 6c 24 28       	mov    rbp,QWORD PTR [rsp+0x28]
	  if (__str.size())
    82e9:	48 85 ed             	test   rbp,rbp
    82ec:	0f 85 c6 01 00 00    	jne    84b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x348>
	  if (__secs)
    82f2:	80 7c 24 04 00       	cmp    BYTE PTR [rsp+0x4],0x0
    82f7:	0f 85 e3 00 00 00    	jne    83e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x270>
      { return _M_dataplus._M_p; }
    82fd:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
	if (_M_data() == _M_local_data())
    8302:	4c 39 e7             	cmp    rdi,r12
    8305:	74 0e                	je     8315 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    8307:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    830c:	48 8d 70 01          	lea    rsi,[rax+0x1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    8310:	e8 eb ae ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    8315:	48 81 c4 88 01 00 00 	add    rsp,0x188
    831c:	4c 89 f8             	mov    rax,r15
    831f:	5b                   	pop    rbx
    8320:	5d                   	pop    rbp
    8321:	41 5c                	pop    r12
    8323:	41 5d                	pop    r13
    8325:	41 5e                	pop    r14
    8327:	41 5f                	pop    r15
    8329:	c3                   	ret
    832a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    8330:	66 0f 57 05 98 04 01 	xorpd  xmm0,XMMWORD PTR [rip+0x10498]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x410>
    8337:	00 
    8338:	e9 80 fe ff ff       	jmp    81bd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4d>
    833d:	0f 1f 00             	nop    DWORD PTR [rax]
	if (this->max_size() - (this->size() - __n1) < __n2)
    8340:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffffffff
    8347:	ff ff 7f 
    834a:	49 29 c0             	sub    r8,rax
    834d:	48 29 f2             	sub    rdx,rsi
    8350:	4c 39 c2             	cmp    rdx,r8
    8353:	0f 82 bb 02 00 00    	jb     8614 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4a4>
      { return _M_dataplus._M_p; }
    8359:	48 8b bc 24 60 01 00 	mov    rdi,QWORD PTR [rsp+0x160]
    8360:	00 
      const size_type __len = __n + this->size();
    8361:	4e 8d 24 06          	lea    r12,[rsi+r8*1]
	if (_M_data() == _M_local_data())
    8365:	48 39 df             	cmp    rdi,rbx
    8368:	0f 84 6a 02 00 00    	je     85d8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x468>
	return _M_is_local() ? size_type(_S_local_capacity)
    836e:	48 8b 94 24 70 01 00 	mov    rdx,QWORD PTR [rsp+0x170]
    8375:	00 
      if (__len <= this->capacity())
    8376:	4c 39 e2             	cmp    rdx,r12
    8379:	0f 82 c1 01 00 00    	jb     8540 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3d0>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    837f:	48 01 f7             	add    rdi,rsi
	if (__n == 1)
    8382:	49 83 f8 01          	cmp    r8,0x1
    8386:	0f 84 5c 02 00 00    	je     85e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x478>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    838c:	4c 89 c2             	mov    rdx,r8
    838f:	48 89 c6             	mov    rsi,rax
    8392:	e8 19 ae ff ff       	call   31b0 <memcpy@plt>
	__c1 = __c2;
    8397:	48 8b 84 24 60 01 00 	mov    rax,QWORD PTR [rsp+0x160]
    839e:	00 
      { _M_string_length = __length; }
    839f:	4c 89 a4 24 68 01 00 	mov    QWORD PTR [rsp+0x168],r12
    83a6:	00 
    83a7:	42 c6 04 20 00       	mov    BYTE PTR [rax+r12*1],0x0
      { _M_next = _M_span.begin(); }
    83ac:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    83b1:	4c 8d 64 24 30       	lea    r12,[rsp+0x30]
      { return _M_dataplus._M_p; }
    83b6:	48 8b 94 24 60 01 00 	mov    rdx,QWORD PTR [rsp+0x160]
    83bd:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    83be:	4c 89 64 24 20       	mov    QWORD PTR [rsp+0x20],r12
    83c3:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
	if (_M_data() == _M_local_data())
    83c8:	48 39 da             	cmp    rdx,rbx
    83cb:	0f 84 8f 01 00 00    	je     8560 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3f0>
    83d1:	48 8b b4 24 68 01 00 	mov    rsi,QWORD PTR [rsp+0x168]
    83d8:	00 
    83d9:	e9 be fe ff ff       	jmp    829c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x12c>
    83de:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    83e0:	49 8b 47 18          	mov    rax,QWORD PTR [r15+0x18]
    83e4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    83e8:	49 89 57 18          	mov    QWORD PTR [r15+0x18],rdx
	*_M_next++ = __c;
    83ec:	c6 00 3a             	mov    BYTE PTR [rax],0x3a
    { return __lhs.base() - __rhs.base(); }
    83ef:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
	{ return this->_M_extent_value; }
    83f3:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    83f7:	48 89 f8             	mov    rax,rdi
    83fa:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    83fe:	48 39 d8             	cmp    rax,rbx
    8401:	0f 84 f1 01 00 00    	je     85f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x488>
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    8407:	45 0f b6 ed          	movzx  r13d,r13b
    840b:	66 0f ef c0          	pxor   xmm0,xmm0
	  __count = this->size() - __offset;
    840f:	48 29 c3             	sub    rbx,rax
      { return this->_M_len; }
    8412:	bd 02 00 00 00       	mov    ebp,0x2
    8417:	f2 49 0f 2a c5       	cvtsi2sd xmm0,r13
    841c:	f2 0f 59 05 1c 04 01 	mulsd  xmm0,QWORD PTR [rip+0x1041c]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x480>
    8423:	00 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    8424:	f2 0f 10 4c 24 08    	movsd  xmm1,QWORD PTR [rsp+0x8]
	};
    842a:	48 8d 0d 07 d0 00 00 	lea    rcx,[rip+0xd007]        # 15438 <CSWTCH.1104+0x358>
    8431:	f2 0f 5c c8          	subsd  xmm1,xmm0
	    return _ToDur(static_cast<__to_rep>(__d.count()));
    8435:	f2 48 0f 2c d1       	cvttsd2si rdx,xmm1
			 "9999999999999999") + 2 * (__n & 0x7f),
    843a:	4c 8d 2c 12          	lea    r13,[rdx+rdx*1]
    843e:	41 81 e5 fe 00 00 00 	and    r13d,0xfe
	};
    8445:	49 01 cd             	add    r13,rcx
	while (__to.size() <= __s.size())
    8448:	48 83 fb 02          	cmp    rbx,0x2
    844c:	77 52                	ja     84a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x330>
    844e:	48 39 dd             	cmp    rbp,rbx
    8451:	48 89 da             	mov    rdx,rbx
    8454:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    8458:	48 85 d2             	test   rdx,rdx
    845b:	74 08                	je     8465 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2f5>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    845d:	4c 89 ee             	mov    rsi,r13
    8460:	e8 4b ad ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8465:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    8468:	49 01 5f 18          	add    QWORD PTR [r15+0x18],rbx
    846c:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    846f:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
    8472:	48 29 dd             	sub    rbp,rbx
    8475:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8477:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    847b:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    847f:	48 89 f8             	mov    rax,rdi
    8482:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8486:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8489:	48 39 dd             	cmp    rbp,rbx
    848c:	73 c0                	jae    844e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2de>
	if (__s.size())
    848e:	48 85 ed             	test   rbp,rbp
    8491:	0f 84 66 fe ff ff    	je     82fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x18d>
    8497:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    849e:	00 00 
    84a0:	48 89 ea             	mov    rdx,rbp
    84a3:	4c 89 ee             	mov    rsi,r13
    84a6:	e8 05 ad ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    84ab:	49 01 6f 18          	add    QWORD PTR [r15+0x18],rbp
    84af:	e9 49 fe ff ff       	jmp    82fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x18d>
    84b4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    { return __lhs.base() - __rhs.base(); }
    84b8:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    84bc:	4d 8b 77 10          	mov    r14,QWORD PTR [r15+0x10]
      { return _M_dataplus._M_p; }
    84c0:	48 8b 5c 24 20       	mov    rbx,QWORD PTR [rsp+0x20]
    84c5:	48 89 f8             	mov    rax,rdi
    84c8:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    84cc:	49 29 c6             	sub    r14,rax
	while (__to.size() <= __s.size())
    84cf:	4c 39 f5             	cmp    rbp,r14
    84d2:	72 55                	jb     8529 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3b9>
    84d4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    84db:	00 00 00 00 
    84df:	90                   	nop
    84e0:	4c 39 f5             	cmp    rbp,r14
    84e3:	4c 89 f2             	mov    rdx,r14
    84e6:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    84ea:	48 85 d2             	test   rdx,rdx
    84ed:	74 08                	je     84f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x387>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    84ef:	48 89 de             	mov    rsi,rbx
    84f2:	e8 b9 ac ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    84f7:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    84fa:	4d 01 77 18          	add    QWORD PTR [r15+0x18],r14
    84fe:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    8501:	4c 01 f3             	add    rbx,r14
	this->_M_len -= __n;
    8504:	4c 29 f5             	sub    rbp,r14
    8507:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8509:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    850d:	4d 8b 77 10          	mov    r14,QWORD PTR [r15+0x10]
    8511:	48 89 f8             	mov    rax,rdi
    8514:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8518:	49 29 c6             	sub    r14,rax
	while (__to.size() <= __s.size())
    851b:	4c 39 f5             	cmp    rbp,r14
    851e:	73 c0                	jae    84e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x370>
	if (__s.size())
    8520:	48 85 ed             	test   rbp,rbp
    8523:	0f 84 c9 fd ff ff    	je     82f2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x182>
    8529:	48 89 ea             	mov    rdx,rbp
    852c:	48 89 de             	mov    rsi,rbx
    852f:	e8 7c ac ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    8534:	49 01 6f 18          	add    QWORD PTR [r15+0x18],rbp
    8538:	e9 b5 fd ff ff       	jmp    82f2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x182>
    853d:	0f 1f 00             	nop    DWORD PTR [rax]
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    8540:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
    8547:	00 
    8548:	48 89 c1             	mov    rcx,rax
    854b:	31 d2                	xor    edx,edx
    854d:	e8 0e f0 ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    8552:	e9 40 fe ff ff       	jmp    8397 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x227>
    8557:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    855e:	00 00 
	    if (_M_string_length > _S_local_capacity)
    8560:	48 8b 8c 24 68 01 00 	mov    rcx,QWORD PTR [rsp+0x168]
    8567:	00 
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    8568:	48 8d 41 01          	lea    rax,[rcx+0x1]
    856c:	4c 89 e7             	mov    rdi,r12
    856f:	48 89 da             	mov    rdx,rbx
    8572:	83 f8 08             	cmp    eax,0x8
    8575:	73 39                	jae    85b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x440>
    8577:	31 f6                	xor    esi,esi
    8579:	a8 04                	test   al,0x4
    857b:	74 09                	je     8586 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x416>
    857d:	8b 32                	mov    esi,DWORD PTR [rdx]
    857f:	89 37                	mov    DWORD PTR [rdi],esi
    8581:	be 04 00 00 00       	mov    esi,0x4
    8586:	a8 02                	test   al,0x2
    8588:	74 0e                	je     8598 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x428>
    858a:	44 0f b7 04 32       	movzx  r8d,WORD PTR [rdx+rsi*1]
    858f:	66 44 89 04 37       	mov    WORD PTR [rdi+rsi*1],r8w
    8594:	48 83 c6 02          	add    rsi,0x2
    8598:	a8 01                	test   al,0x1
    859a:	74 07                	je     85a3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x433>
    859c:	0f b6 04 32          	movzx  eax,BYTE PTR [rdx+rsi*1]
    85a0:	88 04 37             	mov    BYTE PTR [rdi+rsi*1],al
    85a3:	4c 89 e2             	mov    rdx,r12
    85a6:	e9 06 fd ff ff       	jmp    82b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x141>
    85ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    85b0:	89 c7                	mov    edi,eax
    85b2:	31 d2                	xor    edx,edx
    85b4:	83 e7 f8             	and    edi,0xfffffff8
    85b7:	89 d6                	mov    esi,edx
    85b9:	83 c2 08             	add    edx,0x8
    85bc:	4c 8b 04 33          	mov    r8,QWORD PTR [rbx+rsi*1]
    85c0:	4d 89 04 34          	mov    QWORD PTR [r12+rsi*1],r8
    85c4:	39 fa                	cmp    edx,edi
    85c6:	72 ef                	jb     85b7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x447>
    85c8:	49 8d 3c 14          	lea    rdi,[r12+rdx*1]
    85cc:	48 01 da             	add    rdx,rbx
    85cf:	eb a6                	jmp    8577 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x407>
    85d1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	return _M_is_local() ? size_type(_S_local_capacity)
    85d8:	ba 0f 00 00 00       	mov    edx,0xf
    85dd:	e9 94 fd ff ff       	jmp    8376 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x206>
    85e2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	__c1 = __c2;
    85e8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    85eb:	88 07                	mov    BYTE PTR [rdi],al
      }
    85ed:	e9 a5 fd ff ff       	jmp    8397 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x227>
    85f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  _M_overflow();
    85f8:	49 8b 07             	mov    rax,QWORD PTR [r15]
    85fb:	4c 89 ff             	mov    rdi,r15
    85fe:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8600:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
	{ return this->_M_extent_value; }
    8604:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    8608:	48 89 f8             	mov    rax,rdi
    860b:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
      }
    860f:	e9 f3 fd ff ff       	jmp    8407 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x297>
	  __throw_length_error(__N(__s));
    8614:	48 8d 3d a0 cb 00 00 	lea    rdi,[rip+0xcba0]        # 151bb <CSWTCH.1104+0xdb>
    861b:	e8 10 ab ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>

0000000000008620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>:
	_M_x(const _Tp& __t, typename _FormatContext::iterator __out,
    8620:	41 57                	push   r15
    8622:	41 56                	push   r14
    8624:	41 55                	push   r13
    8626:	41 54                	push   r12
    8628:	49 89 f4             	mov    r12,rsi
    862b:	55                   	push   rbp
    862c:	48 89 d5             	mov    rbp,rdx
    862f:	53                   	push   rbx
    8630:	44 89 c3             	mov    ebx,r8d
    8633:	48 83 ec 78          	sub    rsp,0x78
	  if (!_M_spec._M_localized)
    8637:	f6 07 20             	test   BYTE PTR [rdi],0x20
    863a:	0f 85 68 01 00 00    	jne    87a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x188>
	    return std::locale::classic();
    8640:	e8 5b ac ff ff       	call   32a0 <std::locale::classic()@plt>
    8645:	4c 8d 6c 24 18       	lea    r13,[rsp+0x18]
    864a:	48 89 c6             	mov    rsi,rax
    864d:	4c 89 ef             	mov    rdi,r13
    8650:	e8 3b ab ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    8655:	48 8d 3d a4 3b 01 00 	lea    rdi,[rip+0x13ba4]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    865c:	e8 bf aa ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    8661:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    8666:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    866a:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    866e:	0f 83 4e 02 00 00    	jae    88c2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a2>
    8674:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    8678:	48 85 ff             	test   rdi,rdi
    867b:	0f 84 41 02 00 00    	je     88c2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a2>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    8681:	31 c9                	xor    ecx,ecx
    8683:	48 8d 15 56 35 01 00 	lea    rdx,[rip+0x13556]        # 1bbe0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    868a:	48 8d 35 cf 34 01 00 	lea    rsi,[rip+0x134cf]        # 1bb60 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    8691:	e8 9a ab ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    8696:	48 85 c0             	test   rax,rax
    8699:	0f 84 23 02 00 00    	je     88c2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a2>
	__date[0] = _M_data->_M_date_format;
    869f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
	  const _CharT* __rep = __date_reps[__mod];
    86a3:	0f b6 db             	movzx  ebx,bl
    86a6:	f3 0f 6f 40 10       	movdqu xmm0,XMMWORD PTR [rax+0x10]
    86ab:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    86b0:	4c 8b 7c dc 20       	mov    r15,QWORD PTR [rsp+rbx*8+0x20]
	  if (!*__rep)
    86b5:	41 80 3f 00          	cmp    BYTE PTR [r15],0x0
    86b9:	0f 84 14 02 00 00    	je     88d3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2b3>
	: allocator_type(__a), _M_p(__dat) { }
    86bf:	48 8d 44 24 50       	lea    rax,[rsp+0x50]
    86c4:	4c 8d 74 24 60       	lea    r14,[rsp+0x60]
	return __builtin_strlen(__s);
    86c9:	4c 89 ff             	mov    rdi,r15
      { _M_string_length = __length; }
    86cc:	48 c7 44 24 58 03 00 	mov    QWORD PTR [rsp+0x58],0x3
    86d3:	00 00 
	: allocator_type(__a), _M_p(__dat) { }
    86d5:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    86d9:	4c 89 74 24 50       	mov    QWORD PTR [rsp+0x50],r14
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    86de:	c7 44 24 60 7b 3a 7d 	mov    DWORD PTR [rsp+0x60],0x7d3a7b
    86e5:	00 
	return __builtin_strlen(__s);
    86e6:	e8 05 aa ff ff       	call   30f0 <strlen@plt>
    86eb:	48 89 c3             	mov    rbx,rax
	if (this->max_size() - (this->size() - __n1) < __n2)
    86ee:	48 b8 fd ff ff ff ff 	movabs rax,0x7ffffffffffffffd
    86f5:	ff ff 7f 
    86f8:	48 39 c3             	cmp    rbx,rax
    86fb:	0f 84 c6 01 00 00    	je     88c7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a7>
      const size_type __new_size = __old_size + __len2 - __len1;
    8701:	4c 8d 53 03          	lea    r10,[rbx+0x3]
      if (__new_size <= this->capacity())
    8705:	49 83 fa 0f          	cmp    r10,0xf
    8709:	0f 87 41 01 00 00    	ja     8850 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x230>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    870f:	4d 39 f7             	cmp    r15,r14
    8712:	0f 83 f0 00 00 00    	jae    8808 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1e8>
    8718:	4c 89 f0             	mov    rax,r14
	      if (__how_much && __len1 != __len2)
    871b:	48 85 db             	test   rbx,rbx
    871e:	0f 85 ac 00 00 00    	jne    87d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1b0>
      { _M_string_length = __length; }
    8724:	4c 89 54 24 58       	mov    QWORD PTR [rsp+0x58],r10
	__c1 = __c2;
    8729:	48 8d 4c 24 30       	lea    rcx,[rsp+0x30]
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    872e:	48 89 ef             	mov    rdi,rbp
    8731:	45 31 c0             	xor    r8d,r8d
    8734:	c6 44 18 03 00       	mov    BYTE PTR [rax+rbx*1+0x3],0x0
				 std::make_format_args<_FormatContext>(__t));
    8739:	48 8d 05 70 30 00 00 	lea    rax,[rip+0x3070]        # b7b0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    8740:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
    8745:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    874a:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    874f:	48 89 4c 24 48       	mov    QWORD PTR [rsp+0x48],rcx
    8754:	48 8d 4c 24 40       	lea    rcx,[rsp+0x40]
    8759:	48 89 c6             	mov    rsi,rax
    875c:	4c 89 64 24 30       	mov    QWORD PTR [rsp+0x30],r12
    8761:	48 c7 44 24 40 d1 00 	mov    QWORD PTR [rsp+0x40],0xd1
    8768:	00 00 
    876a:	e8 41 d8 ff ff       	call   5fb0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
      { return _M_dataplus._M_p; }
    876f:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
    8774:	48 89 c3             	mov    rbx,rax
	if (_M_data() == _M_local_data())
    8777:	4c 39 f7             	cmp    rdi,r14
    877a:	74 0e                	je     878a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x16a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    877c:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
    8781:	48 8d 70 01          	lea    rsi,[rax+0x1]
    8785:	e8 76 aa ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    878a:	4c 89 ef             	mov    rdi,r13
    878d:	e8 2e ab ff ff       	call   32c0 <std::locale::~locale()@plt>
    8792:	48 83 c4 78          	add    rsp,0x78
    8796:	48 89 d8             	mov    rax,rbx
    8799:	5b                   	pop    rbx
    879a:	5d                   	pop    rbp
    879b:	41 5c                	pop    r12
    879d:	41 5d                	pop    r13
    879f:	41 5e                	pop    r14
    87a1:	41 5f                	pop    r15
    87a3:	c3                   	ret
    87a4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (!_M_hasval)
    87a8:	80 79 20 00          	cmp    BYTE PTR [rcx+0x20],0x0
    87ac:	4c 8d 71 18          	lea    r14,[rcx+0x18]
    87b0:	0f 84 ca 00 00 00    	je     8880 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x260>
      std::locale locale() { return _M_loc.value(); }
    87b6:	4c 8d 6c 24 18       	lea    r13,[rsp+0x18]
    87bb:	4c 89 f6             	mov    rsi,r14
    87be:	4c 89 ef             	mov    rdi,r13
    87c1:	e8 ca a9 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    87c6:	e9 8a fe ff ff       	jmp    8655 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x35>
    87cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    87d0:	c6 44 1c 62 7d       	mov    BYTE PTR [rsp+rbx*1+0x62],0x7d
	if (__n == 1)
    87d5:	48 83 fb 01          	cmp    rbx,0x1
    87d9:	0f 84 d1 00 00 00    	je     88b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x290>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    87df:	48 8d 7c 24 62       	lea    rdi,[rsp+0x62]
    87e4:	48 89 da             	mov    rdx,rbx
    87e7:	4c 89 fe             	mov    rsi,r15
    87ea:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
    87ee:	e8 bd a9 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
    87f3:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
      }
    87f8:	4c 8b 14 24          	mov    r10,QWORD PTR [rsp]
    87fc:	e9 23 ff ff ff       	jmp    8724 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x104>
    8801:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
    8808:	48 8d 44 24 63       	lea    rax,[rsp+0x63]
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    880d:	4c 39 f8             	cmp    rax,r15
    8810:	0f 82 02 ff ff ff    	jb     8718 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf8>
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
    8816:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    881a:	48 8d 74 24 62       	lea    rsi,[rsp+0x62]
    881f:	49 89 d8             	mov    r8,rbx
    8822:	4c 89 f9             	mov    rcx,r15
    8825:	41 b9 01 00 00 00    	mov    r9d,0x1
    882b:	31 d2                	xor    edx,edx
    882d:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    8832:	e8 79 aa ff ff       	call   32b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>
      { return _M_dataplus._M_p; }
    8837:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
    883c:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    8841:	e9 de fe ff ff       	jmp    8724 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x104>
    8846:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    884d:	00 00 00 
	this->_M_mutate(__pos, __len1, __s, __len2);
    8850:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    8854:	49 89 d8             	mov    r8,rbx
    8857:	4c 89 f9             	mov    rcx,r15
    885a:	31 d2                	xor    edx,edx
    885c:	be 02 00 00 00       	mov    esi,0x2
    8861:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    8866:	e8 f5 ec ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    886b:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
    8870:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    8875:	e9 aa fe ff ff       	jmp    8724 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x104>
    887a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
    8880:	4c 89 f7             	mov    rdi,r14
    8883:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
    8887:	4c 8d 6c 24 18       	lea    r13,[rsp+0x18]
    888c:	e8 df aa ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    8891:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
      std::locale locale() { return _M_loc.value(); }
    8895:	4c 89 f6             	mov    rsi,r14
    8898:	4c 89 ef             	mov    rdi,r13
	  _M_hasval = true;
    889b:	c6 41 20 01          	mov    BYTE PTR [rcx+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
    889f:	e8 ec a8 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    88a4:	e9 ac fd ff ff       	jmp    8655 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x35>
    88a9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	__c1 = __c2;
    88b0:	41 0f b6 07          	movzx  eax,BYTE PTR [r15]
    88b4:	88 44 24 62          	mov    BYTE PTR [rsp+0x62],al
    88b8:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
      }
    88bd:	e9 62 fe ff ff       	jmp    8724 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x104>
      __throw_bad_cast();
    88c2:	e8 99 a9 ff ff       	call   3260 <std::__throw_bad_cast()@plt>
	  __throw_length_error(__N(__s));
    88c7:	48 8d 3d a7 c8 00 00 	lea    rdi,[rip+0xc8a7]        # 15175 <CSWTCH.1104+0x95>
    88ce:	e8 5d a8 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    88d3:	e8 78 a8 ff ff       	call   3150 <abort@plt>
    88d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    88df:	00 

00000000000088e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>:
    __write(_Out __out, basic_string_view<_CharT> __str)
    88e0:	41 55                	push   r13
    88e2:	41 54                	push   r12
    88e4:	55                   	push   rbp
    88e5:	48 89 fd             	mov    rbp,rdi
    88e8:	53                   	push   rbx
    88e9:	48 83 ec 08          	sub    rsp,0x8
	  if (__str.size())
    88ed:	48 85 f6             	test   rsi,rsi
    88f0:	75 0e                	jne    8900 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x20>
    }
    88f2:	48 83 c4 08          	add    rsp,0x8
    88f6:	48 89 e8             	mov    rax,rbp
    88f9:	5b                   	pop    rbx
    88fa:	5d                   	pop    rbp
    88fb:	41 5c                	pop    r12
    88fd:	41 5d                	pop    r13
    88ff:	c3                   	ret
    8900:	48 8b 7f 18          	mov    rdi,QWORD PTR [rdi+0x18]
	  __count = this->size() - __offset;
    8904:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    8908:	49 89 f4             	mov    r12,rsi
    890b:	49 89 d5             	mov    r13,rdx
    890e:	48 89 f8             	mov    rax,rdi
    8911:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    8915:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8918:	48 39 de             	cmp    rsi,rbx
    891b:	72 49                	jb     8966 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x86>
    891d:	0f 1f 00             	nop    DWORD PTR [rax]
    8920:	4c 39 e3             	cmp    rbx,r12
    8923:	4c 89 e2             	mov    rdx,r12
    8926:	48 0f 46 d3          	cmovbe rdx,rbx
	if (__n == 0)
    892a:	48 85 d2             	test   rdx,rdx
    892d:	74 08                	je     8937 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x57>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    892f:	4c 89 ee             	mov    rsi,r13
    8932:	e8 79 a8 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8937:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
      { _M_current += __n; return *this; }
    893b:	48 01 5d 18          	add    QWORD PTR [rbp+0x18],rbx
    893f:	48 89 ef             	mov    rdi,rbp
	this->_M_str += __n;
    8942:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
    8945:	49 29 dc             	sub    r12,rbx
    8948:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    894a:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    894e:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    8952:	48 89 f8             	mov    rax,rdi
    8955:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    8959:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    895c:	49 39 dc             	cmp    r12,rbx
    895f:	73 bf                	jae    8920 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x40>
	if (__s.size())
    8961:	4d 85 e4             	test   r12,r12
    8964:	74 8c                	je     88f2 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x12>
    8966:	4c 89 e2             	mov    rdx,r12
    8969:	4c 89 ee             	mov    rsi,r13
    896c:	e8 3f a8 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    8971:	4c 01 65 18          	add    QWORD PTR [rbp+0x18],r12
    }
    8975:	48 83 c4 08          	add    rsp,0x8
    8979:	48 89 e8             	mov    rax,rbp
    897c:	5b                   	pop    rbx
    897d:	5d                   	pop    rbp
    897e:	41 5c                	pop    r12
    8980:	41 5d                	pop    r13
    8982:	c3                   	ret
    8983:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    898a:	00 00 00 
    898d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000008990 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	_M_locale(_FormatContext& __fc) const
    8990:	41 54                	push   r12
    8992:	53                   	push   rbx
    8993:	48 89 fb             	mov    rbx,rdi
    8996:	48 83 ec 18          	sub    rsp,0x18
	  if (!_M_spec._M_localized)
    899a:	f6 06 20             	test   BYTE PTR [rsi],0x20
    899d:	75 21                	jne    89c0 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x30>
	    return std::locale::classic();
    899f:	e8 fc a8 ff ff       	call   32a0 <std::locale::classic()@plt>
    89a4:	48 89 df             	mov    rdi,rbx
    89a7:	48 89 c6             	mov    rsi,rax
    89aa:	e8 e1 a7 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	}
    89af:	48 83 c4 18          	add    rsp,0x18
    89b3:	48 89 d8             	mov    rax,rbx
    89b6:	5b                   	pop    rbx
    89b7:	41 5c                	pop    r12
    89b9:	c3                   	ret
    89ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      if (!_M_hasval)
    89c0:	80 7a 20 00          	cmp    BYTE PTR [rdx+0x20],0x0
    89c4:	4c 8d 62 18          	lea    r12,[rdx+0x18]
    89c8:	74 16                	je     89e0 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50>
      std::locale locale() { return _M_loc.value(); }
    89ca:	4c 89 e6             	mov    rsi,r12
    89cd:	48 89 df             	mov    rdi,rbx
    89d0:	e8 bb a7 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    89d5:	48 83 c4 18          	add    rsp,0x18
    89d9:	48 89 d8             	mov    rax,rbx
    89dc:	5b                   	pop    rbx
    89dd:	41 5c                	pop    r12
    89df:	c3                   	ret
    89e0:	4c 89 e7             	mov    rdi,r12
    89e3:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    89e8:	e8 83 a9 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    89ed:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
      std::locale locale() { return _M_loc.value(); }
    89f2:	4c 89 e6             	mov    rsi,r12
    89f5:	48 89 df             	mov    rdi,rbx
	  _M_hasval = true;
    89f8:	c6 42 20 01          	mov    BYTE PTR [rdx+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
    89fc:	e8 8f a7 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    8a01:	eb d2                	jmp    89d5 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x45>
    8a03:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8a0a:	00 00 00 
    8a0d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000008a10 <std::__format::_Sink<char>::_M_write(char)>:
      { return __normal_iterator(_M_current++); }
    8a10:	48 8b 47 18          	mov    rax,QWORD PTR [rdi+0x18]
    8a14:	48 8d 50 01          	lea    rdx,[rax+0x1]
    8a18:	48 89 57 18          	mov    QWORD PTR [rdi+0x18],rdx
	*_M_next++ = __c;
    8a1c:	40 88 30             	mov    BYTE PTR [rax],sil
    { return __lhs.base() - __rhs.base(); }
    8a1f:	48 8b 47 18          	mov    rax,QWORD PTR [rdi+0x18]
    8a23:	48 2b 47 08          	sub    rax,QWORD PTR [rdi+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    8a27:	48 39 47 10          	cmp    QWORD PTR [rdi+0x10],rax
    8a2b:	74 03                	je     8a30 <std::__format::_Sink<char>::_M_write(char)+0x20>
      }
    8a2d:	c3                   	ret
    8a2e:	66 90                	xchg   ax,ax
	  _M_overflow();
    8a30:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    8a33:	ff 20                	jmp    QWORD PTR [rax]
    8a35:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8a3c:	00 00 00 
    8a3f:	90                   	nop

0000000000008a40 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>:
    __write_padded(_Out __out, basic_string_view<_CharT> __str,
    8a40:	41 57                	push   r15
    8a42:	49 89 ff             	mov    r15,rdi
    8a45:	41 56                	push   r14
    8a47:	4d 89 c6             	mov    r14,r8
    8a4a:	41 55                	push   r13
    8a4c:	41 54                	push   r12
    8a4e:	55                   	push   rbp
    8a4f:	53                   	push   rbx
    8a50:	48 89 fb             	mov    rbx,rdi
    8a53:	48 81 ec d8 00 00 00 	sub    rsp,0xd8
    8a5a:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    8a5f:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
      __padding_chars[0] = _CharT();
    8a64:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
      if (__align == _Align_centre)
    8a69:	83 f9 03             	cmp    ecx,0x3
    8a6c:	0f 84 4e 02 00 00    	je     8cc0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x280>
      else if (__align == _Align_right)
    8a72:	83 f9 02             	cmp    ecx,0x2
    8a75:	0f 84 05 01 00 00    	je     8b80 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x140>
	if (!__is_single_code_unit<_CharT>(__fill_char)) [[unlikely]]
    8a7b:	41 83 f9 7e          	cmp    r9d,0x7e
    8a7f:	0f 87 c7 03 00 00    	ja     8e4c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x40c>
      if (__max < __buflen)
    8a85:	49 83 f8 1f          	cmp    r8,0x1f
    8a89:	0f 86 51 02 00 00    	jbe    8ce0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2a0>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    8a8f:	66 41 0f 6e c1       	movd   xmm0,r9d
    8a94:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
	  __r = __nfill;
    8a99:	4d 89 c5             	mov    r13,r8
      : _M_len{__len}, _M_str{__str}
    8a9c:	41 be 20 00 00 00    	mov    r14d,0x20
    8aa2:	66 0f 60 c0          	punpcklbw xmm0,xmm0
    8aa6:	66 0f 61 c0          	punpcklwd xmm0,xmm0
    8aaa:	48 89 c5             	mov    rbp,rax
    8aad:	66 0f 70 c0 00       	pshufd xmm0,xmm0,0x0
    8ab2:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
    8ab7:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
	  if (__str.size())
    8abc:	48 85 c0             	test   rax,rax
    8abf:	0f 85 ab 02 00 00    	jne    8d70 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x330>
	while (__n > __padding.size())
    8ac5:	4d 39 ee             	cmp    r14,r13
    8ac8:	0f 83 78 0c 00 00    	jae    9746 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd06>
	  if (__str.size())
    8ace:	4d 85 f6             	test   r14,r14
    8ad1:	0f 84 c6 06 00 00    	je     919d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x75d>
    8ad7:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    8adc:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    8ae1:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    8ae5:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
      { return this->_M_len; }
    8ae9:	4d 89 f4             	mov    r12,r14
	while (__to.size() <= __s.size())
    8aec:	48 8b 6c 24 08       	mov    rbp,QWORD PTR [rsp+0x8]
    8af1:	48 89 f8             	mov    rax,rdi
    8af4:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8af8:	48 29 c3             	sub    rbx,rax
    8afb:	49 39 de             	cmp    r14,rbx
    8afe:	0f 82 34 02 00 00    	jb     8d38 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2f8>
    8b04:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    8b0b:	00 00 00 00 
    8b0f:	90                   	nop
    8b10:	4c 39 e3             	cmp    rbx,r12
    8b13:	4c 89 e2             	mov    rdx,r12
    8b16:	48 0f 46 d3          	cmovbe rdx,rbx
	if (__n == 0)
    8b1a:	48 85 d2             	test   rdx,rdx
    8b1d:	74 08                	je     8b27 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    8b1f:	48 89 ee             	mov    rsi,rbp
    8b22:	e8 89 a6 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8b27:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    8b2a:	49 01 5f 18          	add    QWORD PTR [r15+0x18],rbx
    8b2e:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    8b31:	48 01 dd             	add    rbp,rbx
	this->_M_len -= __n;
    8b34:	49 29 dc             	sub    r12,rbx
    8b37:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8b39:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    8b3d:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    8b41:	48 89 f8             	mov    rax,rdi
    8b44:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8b48:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8b4b:	49 39 dc             	cmp    r12,rbx
    8b4e:	73 c0                	jae    8b10 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd0>
	if (__s.size())
    8b50:	4d 85 e4             	test   r12,r12
    8b53:	0f 85 df 01 00 00    	jne    8d38 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2f8>
	    __n -= __padding.size();
    8b59:	4d 29 f5             	sub    r13,r14
	while (__n > __padding.size())
    8b5c:	4d 39 ee             	cmp    r14,r13
    8b5f:	72 80                	jb     8ae1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa1>
	if (__n != 0)
    8b61:	4d 85 ed             	test   r13,r13
    8b64:	0f 85 a7 01 00 00    	jne    8d11 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2d1>
      return __out;
    8b6a:	4c 89 f8             	mov    rax,r15
    }
    8b6d:	48 81 c4 d8 00 00 00 	add    rsp,0xd8
    8b74:	5b                   	pop    rbx
    8b75:	5d                   	pop    rbp
    8b76:	41 5c                	pop    r12
    8b78:	41 5d                	pop    r13
    8b7a:	41 5e                	pop    r14
    8b7c:	41 5f                	pop    r15
    8b7e:	c3                   	ret
    8b7f:	90                   	nop
	  __l = __nfill;
    8b80:	4d 89 c4             	mov    r12,r8
	  __r = 0;
    8b83:	45 31 ed             	xor    r13d,r13d
	if (!__is_single_code_unit<_CharT>(__fill_char)) [[unlikely]]
    8b86:	41 83 f9 7e          	cmp    r9d,0x7e
    8b8a:	0f 87 c2 02 00 00    	ja     8e52 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x412>
      if (__max < __buflen)
    8b90:	49 83 fe 1f          	cmp    r14,0x1f
    8b94:	77 1a                	ja     8bb0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x170>
	if (__n == 0)
    8b96:	4d 85 f6             	test   r14,r14
    8b99:	75 1b                	jne    8bb6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x176>
	if (__n == 0)
    8b9b:	4d 85 e4             	test   r12,r12
    8b9e:	0f 84 e4 05 00 00    	je     9188 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x748>
    __write(_Out __out, basic_string_view<_CharT> __str)
    8ba4:	eb fe                	jmp    8ba4 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x164>
    8ba6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8bad:	00 00 00 
	__max = __buflen;
    8bb0:	41 be 20 00 00 00    	mov    r14d,0x20
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    8bb6:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    8bbb:	44 89 f2             	mov    edx,r14d
    8bbe:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    8bc3:	41 83 fe 08          	cmp    r14d,0x8
    8bc7:	0f 83 4b 02 00 00    	jae    8e18 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x3d8>
    8bcd:	83 e2 07             	and    edx,0x7
    8bd0:	74 0f                	je     8be1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x1a1>
    8bd2:	31 c9                	xor    ecx,ecx
    8bd4:	89 ce                	mov    esi,ecx
    8bd6:	83 c1 01             	add    ecx,0x1
    8bd9:	44 88 0c 30          	mov    BYTE PTR [rax+rsi*1],r9b
    8bdd:	39 d1                	cmp    ecx,edx
    8bdf:	72 f3                	jb     8bd4 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x194>
	if (__n == 0)
    8be1:	4d 85 e4             	test   r12,r12
    8be4:	0f 84 ae 00 00 00    	je     8c98 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x258>
	while (__n > __padding.size())
    8bea:	4d 39 e6             	cmp    r14,r12
    8bed:	0f 83 fd 01 00 00    	jae    8df0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x3b0>
	  if (__str.size())
    8bf3:	4d 85 f6             	test   r14,r14
    8bf6:	74 ac                	je     8ba4 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x164>
    8bf8:	4c 89 7c 24 28       	mov    QWORD PTR [rsp+0x28],r15
    8bfd:	4c 89 6c 24 20       	mov    QWORD PTR [rsp+0x20],r13
    8c02:	49 89 dd             	mov    r13,rbx
    8c05:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
    8c09:	49 8b 5d 10          	mov    rbx,QWORD PTR [r13+0x10]
      { return this->_M_len; }
    8c0d:	4d 89 f7             	mov    r15,r14
	while (__to.size() <= __s.size())
    8c10:	48 8b 6c 24 08       	mov    rbp,QWORD PTR [rsp+0x8]
    8c15:	48 89 f8             	mov    rax,rdi
    8c18:	49 2b 45 08          	sub    rax,QWORD PTR [r13+0x8]
    8c1c:	48 29 c3             	sub    rbx,rax
    8c1f:	49 39 de             	cmp    r14,rbx
    8c22:	0f 82 28 01 00 00    	jb     8d50 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x310>
    8c28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    8c2f:	00 
    8c30:	49 39 df             	cmp    r15,rbx
    8c33:	48 89 da             	mov    rdx,rbx
    8c36:	49 0f 46 d7          	cmovbe rdx,r15
	if (__n == 0)
    8c3a:	48 85 d2             	test   rdx,rdx
    8c3d:	74 08                	je     8c47 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x207>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    8c3f:	48 89 ee             	mov    rsi,rbp
    8c42:	e8 69 a5 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8c47:	49 8b 45 00          	mov    rax,QWORD PTR [r13+0x0]
      { _M_current += __n; return *this; }
    8c4b:	49 01 5d 18          	add    QWORD PTR [r13+0x18],rbx
    8c4f:	4c 89 ef             	mov    rdi,r13
	this->_M_str += __n;
    8c52:	48 01 dd             	add    rbp,rbx
	this->_M_len -= __n;
    8c55:	49 29 df             	sub    r15,rbx
    8c58:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8c5a:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
    8c5e:	49 8b 5d 10          	mov    rbx,QWORD PTR [r13+0x10]
    8c62:	48 89 f8             	mov    rax,rdi
    8c65:	49 2b 45 08          	sub    rax,QWORD PTR [r13+0x8]
    8c69:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8c6c:	49 39 df             	cmp    r15,rbx
    8c6f:	73 bf                	jae    8c30 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x1f0>
	if (__s.size())
    8c71:	4d 85 ff             	test   r15,r15
    8c74:	0f 85 d6 00 00 00    	jne    8d50 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x310>
	    __n -= __padding.size();
    8c7a:	4d 29 f4             	sub    r12,r14
	while (__n > __padding.size())
    8c7d:	4d 39 e6             	cmp    r14,r12
    8c80:	72 83                	jb     8c05 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x1c5>
	if (__n != 0)
    8c82:	4c 89 eb             	mov    rbx,r13
    8c85:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    8c8a:	4c 8b 6c 24 20       	mov    r13,QWORD PTR [rsp+0x20]
    8c8f:	4d 85 e4             	test   r12,r12
    8c92:	0f 85 58 01 00 00    	jne    8df0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x3b0>
    8c98:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    8c9d:	48 89 c5             	mov    rbp,rax
	  if (__str.size())
    8ca0:	48 85 c0             	test   rax,rax
    8ca3:	0f 85 c7 00 00 00    	jne    8d70 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x330>
	if (__n == 0)
    8ca9:	4d 85 ed             	test   r13,r13
    8cac:	0f 85 13 fe ff ff    	jne    8ac5 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x85>
    8cb2:	e9 b3 fe ff ff       	jmp    8b6a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
    8cb7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    8cbe:	00 00 
	  __l = __nfill / 2;
    8cc0:	4d 89 c4             	mov    r12,r8
	  __r = __l + (__nfill & 1);
    8cc3:	41 83 e0 01          	and    r8d,0x1
	  __l = __nfill / 2;
    8cc7:	49 d1 ec             	shr    r12,1
	  __r = __l + (__nfill & 1);
    8cca:	4f 8d 34 20          	lea    r14,[r8+r12*1]
    8cce:	4d 89 f5             	mov    r13,r14
    8cd1:	e9 b0 fe ff ff       	jmp    8b86 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x146>
    8cd6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8cdd:	00 00 00 
	if (__n == 0)
    8ce0:	4d 85 c0             	test   r8,r8
    8ce3:	0f 84 4e 04 00 00    	je     9137 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x6f7>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    8ce9:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    8cee:	4c 89 c2             	mov    rdx,r8
    8cf1:	44 89 ce             	mov    esi,r9d
	  __r = __nfill;
    8cf4:	4d 89 f5             	mov    r13,r14
    8cf7:	48 89 c7             	mov    rdi,rax
    8cfa:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    8cff:	e8 3c a4 ff ff       	call   3140 <memset@plt>
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
    8d04:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    8d09:	48 89 c5             	mov    rbp,rax
	  if (__str.size())
    8d0c:	48 85 c0             	test   rax,rax
    8d0f:	75 5f                	jne    8d70 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x330>
    8d11:	4d 39 ee             	cmp    r14,r13
    8d14:	4c 89 e8             	mov    rax,r13
    8d17:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
	  __o = __format::__write(std::move(__o), __padding.substr(0, __n));
    8d1c:	4c 89 ff             	mov    rdi,r15
    8d1f:	49 0f 46 c6          	cmovbe rax,r14
    8d23:	48 89 c6             	mov    rsi,rax
    8d26:	e8 b5 fb ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    8d2b:	49 89 c7             	mov    r15,rax
    8d2e:	e9 37 fe ff ff       	jmp    8b6a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
    8d33:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    8d38:	4c 89 e2             	mov    rdx,r12
    8d3b:	48 89 ee             	mov    rsi,rbp
    8d3e:	e8 6d a4 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    8d43:	4d 01 67 18          	add    QWORD PTR [r15+0x18],r12
    8d47:	e9 0d fe ff ff       	jmp    8b59 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x119>
    8d4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    8d50:	4c 89 fa             	mov    rdx,r15
    8d53:	48 89 ee             	mov    rsi,rbp
    8d56:	e8 55 a4 ff ff       	call   31b0 <memcpy@plt>
    8d5b:	4d 01 7d 18          	add    QWORD PTR [r13+0x18],r15
    8d5f:	e9 16 ff ff ff       	jmp    8c7a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x23a>
	  if (__str.size())
    8d64:	48 8b 6c 24 10       	mov    rbp,QWORD PTR [rsp+0x10]
    8d69:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    { return __lhs.base() - __rhs.base(); }
    8d70:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    8d74:	4d 8b 67 10          	mov    r12,QWORD PTR [r15+0x10]
    8d78:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
    8d7d:	48 89 f8             	mov    rax,rdi
    8d80:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8d84:	49 29 c4             	sub    r12,rax
	while (__to.size() <= __s.size())
    8d87:	4c 39 64 24 10       	cmp    QWORD PTR [rsp+0x10],r12
    8d8c:	72 4b                	jb     8dd9 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x399>
    8d8e:	66 90                	xchg   ax,ax
    8d90:	4c 39 e5             	cmp    rbp,r12
    8d93:	4c 89 e2             	mov    rdx,r12
    8d96:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    8d9a:	48 85 d2             	test   rdx,rdx
    8d9d:	74 08                	je     8da7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x367>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    8d9f:	48 89 de             	mov    rsi,rbx
    8da2:	e8 09 a4 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8da7:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    8daa:	4d 01 67 18          	add    QWORD PTR [r15+0x18],r12
    8dae:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    8db1:	4c 01 e3             	add    rbx,r12
	this->_M_len -= __n;
    8db4:	4c 29 e5             	sub    rbp,r12
    8db7:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8db9:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    8dbd:	4d 8b 67 10          	mov    r12,QWORD PTR [r15+0x10]
    8dc1:	48 89 f8             	mov    rax,rdi
    8dc4:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8dc8:	49 29 c4             	sub    r12,rax
	while (__to.size() <= __s.size())
    8dcb:	4c 39 e5             	cmp    rbp,r12
    8dce:	73 c0                	jae    8d90 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x350>
	if (__s.size())
    8dd0:	48 85 ed             	test   rbp,rbp
    8dd3:	0f 84 d0 fe ff ff    	je     8ca9 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x269>
    8dd9:	48 89 ea             	mov    rdx,rbp
    8ddc:	48 89 de             	mov    rsi,rbx
    8ddf:	e8 cc a3 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    8de4:	49 01 6f 18          	add    QWORD PTR [r15+0x18],rbp
    8de8:	e9 bc fe ff ff       	jmp    8ca9 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x269>
    8ded:	0f 1f 00             	nop    DWORD PTR [rax]
    8df0:	4d 39 e6             	cmp    r14,r12
    8df3:	4c 89 e0             	mov    rax,r12
    8df6:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
	  __o = __format::__write(std::move(__o), __padding.substr(0, __n));
    8dfb:	48 89 df             	mov    rdi,rbx
    8dfe:	49 0f 46 c6          	cmovbe rax,r14
    8e02:	48 89 c6             	mov    rsi,rax
    8e05:	e8 d6 fa ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    8e0a:	49 89 c7             	mov    r15,rax
    8e0d:	e9 86 fe ff ff       	jmp    8c98 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x258>
    8e12:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    8e18:	48 b8 01 01 01 01 01 	movabs rax,0x101010101010101
    8e1f:	01 01 01 
    8e22:	41 0f b6 c9          	movzx  ecx,r9b
    8e26:	44 89 f6             	mov    esi,r14d
    8e29:	48 0f af c8          	imul   rcx,rax
    8e2d:	83 e6 f8             	and    esi,0xfffffff8
    8e30:	31 c0                	xor    eax,eax
    8e32:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    8e37:	89 c7                	mov    edi,eax
    8e39:	83 c0 08             	add    eax,0x8
    8e3c:	49 89 0c 3a          	mov    QWORD PTR [r10+rdi*1],rcx
    8e40:	39 f0                	cmp    eax,esi
    8e42:	72 ee                	jb     8e32 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x3f2>
    8e44:	4c 01 d0             	add    rax,r10
    8e47:	e9 81 fd ff ff       	jmp    8bcd <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x18d>
	  __r = __nfill;
    8e4c:	4d 89 c5             	mov    r13,r8
	  __l = 0;
    8e4f:	45 31 e4             	xor    r12d,r12d
	    const char32_t __arr[1]{ __fill_char };
    8e52:	44 89 4c 24 5c       	mov    DWORD PTR [rsp+0x5c],r9d
    if (__c < 0xD800) [[likely]]
    8e57:	41 81 f9 ff d7 00 00 	cmp    r9d,0xd7ff
    8e5e:	0f 87 8f 07 00 00    	ja     95f3 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xbb3>
  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      return _Nd - std::__countl_zero(__x);
    8e64:	41 0f bd c1          	bsr    eax,r9d
    8e68:	8d 70 01             	lea    esi,[rax+0x1]
	  }
	else
	  {
	    static_assert(sizeof(_ToFmt) == 1);
	    int __bits = std::bit_width((uint32_t)__c);
	    if (__bits <= 7) [[likely]]
    8e6b:	83 f8 06             	cmp    eax,0x6
    8e6e:	0f 85 cd 09 00 00    	jne    9841 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe01>
	      {
		_M_buf[0] = __c;
    8e74:	44 89 ca             	mov    edx,r9d
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
		_M_buf_last = 1;
    8e77:	bf 01 00 00 00       	mov    edi,0x1
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
    8e7c:	31 c0                	xor    eax,eax
    8e7e:	31 f6                	xor    esi,esi
    8e80:	31 c9                	xor    ecx,ecx
	_Alloc_hider(pointer __dat, const _Alloc& __a)
    8e82:	0f b6 c0             	movzx  eax,al
    8e85:	40 0f b6 f6          	movzx  esi,sil
    8e89:	0f b6 c9             	movzx  ecx,cl
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
    8e8c:	45 31 c9             	xor    r9d,r9d
    8e8f:	c1 e0 08             	shl    eax,0x8
	: allocator_type(__a), _M_p(__dat) { }
    8e92:	4c 8d 94 24 90 00 00 	lea    r10,[rsp+0x90]
    8e99:	00 
	size_type __len = 0;
    8e9a:	31 ed                	xor    ebp,ebp
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
    8e9c:	45 31 db             	xor    r11d,r11d
    8e9f:	09 f0                	or     eax,esi
    8ea1:	48 8d 74 24 5c       	lea    rsi,[rsp+0x5c]
    8ea6:	4c 8d 74 24 60       	lea    r14,[rsp+0x60]
	: allocator_type(__a), _M_p(__dat) { }
    8eab:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
    8eb0:	c1 e0 08             	shl    eax,0x8
    8eb3:	66 48 0f 6e c6       	movq   xmm0,rsi
    8eb8:	4c 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],r10
    8ebf:	00 
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
    8ec0:	45 31 d2             	xor    r10d,r10d
    8ec3:	09 c8                	or     eax,ecx
    8ec5:	0f b6 ca             	movzx  ecx,dl
    8ec8:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    8ecc:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
    8ed3:	00 00 00 00 00 
    8ed8:	c1 e0 08             	shl    eax,0x8
    8edb:	c6 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],0x0
    8ee2:	00 
    8ee3:	4c 8d 84 24 8f 00 00 	lea    r8,[rsp+0x8f]
    8eea:	00 
    8eeb:	09 c8                	or     eax,ecx
    8eed:	40 88 bc 24 b9 00 00 	mov    BYTE PTR [rsp+0xb9],dil
    8ef4:	00 
    8ef5:	89 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],eax
    8efc:	c6 84 24 ba 00 00 00 	mov    BYTE PTR [rsp+0xba],0x1
    8f03:	01 
    8f04:	4c 89 74 24 08       	mov    QWORD PTR [rsp+0x8],r14
    8f09:	4c 89 b4 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],r14
    8f10:	00 
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
    8f11:	0f 11 84 24 a8 00 00 	movups XMMWORD PTR [rsp+0xa8],xmm0
    8f18:	00 
    8f19:	eb 36                	jmp    8f51 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x511>
    8f1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	else if (_M_buf_index + 1 < _M_buf_last)
    8f20:	0f 8d da 00 00 00    	jge    9000 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5c0>
    8f26:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
    8f2d:	00 
	  ++_M_buf_index;
    8f2e:	41 83 c3 01          	add    r11d,0x1
    8f32:	41 b9 01 00 00 00    	mov    r9d,0x1
    8f38:	48 89 ce             	mov    rsi,rcx
	while (__beg != __end && __len < __capacity)
    8f3b:	48 83 fd 0f          	cmp    rbp,0xf
    8f3f:	0f 84 e7 02 00 00    	je     922c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x7ec>
      operator*() const { return _M_buf[_M_buf_index]; }
    8f45:	41 0f b6 c3          	movzx  eax,r11b
    8f49:	0f b6 94 04 a0 00 00 	movzx  edx,BYTE PTR [rsp+rax*1+0xa0]
    8f50:	00 
	    _M_local_buf[__len++] = *__beg;
    8f51:	48 83 c5 01          	add    rbp,0x1
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    8f55:	41 8d 43 01          	lea    eax,[r11+0x1]
    8f59:	41 88 14 28          	mov    BYTE PTR [r8+rbp*1],dl
    8f5d:	0f b6 c0             	movzx  eax,al
    8f60:	40 0f b6 d7          	movzx  edx,dil
    8f64:	39 d0                	cmp    eax,edx
    8f66:	75 b8                	jne    8f20 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x4e0>
    8f68:	4c 39 f6             	cmp    rsi,r14
    8f6b:	0f 84 8f 00 00 00    	je     9000 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5c0>
	++__i;
    8f71:	48 8d 56 04          	lea    rdx,[rsi+0x4]
	    if (_M_curr() == _M_last)
    8f75:	4c 39 f2             	cmp    rdx,r14
    8f78:	0f 84 9f 00 00 00    	je     901d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5dd>
	char32_t __c = *_M_curr()++;
    8f7e:	48 8d 46 08          	lea    rax,[rsi+0x8]
    8f82:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    8f89:	00 
    8f8a:	8b 46 04             	mov    eax,DWORD PTR [rsi+0x4]
    if (__c < 0xD800) [[likely]]
    8f8d:	3d ff d7 00 00       	cmp    eax,0xd7ff
    8f92:	0f 87 08 02 00 00    	ja     91a0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x760>
      if (__x == 0)
    8f98:	85 c0                	test   eax,eax
    8f9a:	0f 84 a6 06 00 00    	je     9646 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc06>
      return _Nd - std::__countl_zero(__x);
    8fa0:	0f bd c8             	bsr    ecx,eax
    8fa3:	8d 71 01             	lea    esi,[rcx+0x1]
	    if (__bits <= 7) [[likely]]
    8fa6:	83 fe 07             	cmp    esi,0x7
    8fa9:	0f 8f 3e 08 00 00    	jg     97ed <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xdad>
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
    8faf:	31 ff                	xor    edi,edi
		_M_buf[0] = __c;
    8fb1:	88 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],al
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
    8fb8:	c6 84 24 a1 00 00 00 	mov    BYTE PTR [rsp+0xa1],0x0
    8fbf:	00 
    8fc0:	66 89 bc 24 a2 00 00 	mov    WORD PTR [rsp+0xa2],di
    8fc7:	00 
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    8fc8:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    8fcf:	00 
	while (__beg != __end && __len < __capacity)
    8fd0:	48 83 fd 0f          	cmp    rbp,0xf
    8fd4:	0f 84 c8 05 00 00    	je     95a2 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb62>
	    _M_local_buf[__len++] = *__beg;
    8fda:	48 83 c5 01          	add    rbp,0x1
    8fde:	48 89 d6             	mov    rsi,rdx
		_M_buf_last = 1;
    8fe1:	bf 01 00 00 00       	mov    edi,0x1
    8fe6:	45 31 db             	xor    r11d,r11d
    8fe9:	41 88 04 28          	mov    BYTE PTR [r8+rbp*1],al
    8fed:	41 ba 01 00 00 00    	mov    r10d,0x1
    8ff3:	41 b9 01 00 00 00    	mov    r9d,0x1
    8ff9:	e9 6a ff ff ff       	jmp    8f68 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x528>
    8ffe:	66 90                	xchg   ax,ax
	while (__beg != __end && __len < __capacity)
    9000:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
    9007:	00 
    9008:	48 89 ce             	mov    rsi,rcx
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    900b:	4c 39 f1             	cmp    rcx,r14
    900e:	0f 85 27 ff ff ff    	jne    8f3b <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x4fb>
    9014:	45 84 db             	test   r11b,r11b
    9017:	0f 85 1e ff ff ff    	jne    8f3b <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x4fb>
    901d:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
      { _M_string_length = __length; }
    9022:	48 89 ac 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rbp
    9029:	00 
	    while (__l-- > 0)
    902a:	4d 8d 7c 24 ff       	lea    r15,[r12-0x1]
	__c1 = __c2;
    902f:	c6 04 2a 00          	mov    BYTE PTR [rdx+rbp*1],0x0
      { return _M_dataplus._M_p; }
    9033:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    903a:	00 
      { return _M_string_length; }
    903b:	4c 8b b4 24 88 00 00 	mov    r14,QWORD PTR [rsp+0x88]
    9042:	00 
      { return _M_dataplus._M_p; }
    9043:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    9048:	4d 85 e4             	test   r12,r12
    904b:	74 0f                	je     905c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x61c>
	  if (__str.size())
    904d:	4d 85 f6             	test   r14,r14
    9050:	0f 85 93 04 00 00    	jne    94e9 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xaa9>
	    while (__l-- > 0)
    9056:	49 83 ef 01          	sub    r15,0x1
    905a:	73 fa                	jae    9056 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x616>
	    __out = __format::__write(std::move(__out), __str);
    905c:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    9061:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    9066:	48 89 df             	mov    rdi,rbx
	    while (__r-- > 0)
    9069:	4d 8d 7d ff          	lea    r15,[r13-0x1]
	    __out = __format::__write(std::move(__out), __str);
    906d:	e8 6e f8 ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    9072:	48 89 c3             	mov    rbx,rax
	    while (__r-- > 0)
    9075:	4d 85 ed             	test   r13,r13
    9078:	74 0b                	je     9085 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x645>
	  if (__str.size())
    907a:	4d 85 f6             	test   r14,r14
    907d:	75 3f                	jne    90be <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x67e>
	    while (__r-- > 0)
    907f:	49 83 ef 01          	sub    r15,0x1
    9083:	73 fa                	jae    907f <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x63f>
      { _M_dispose(); }
    9085:	48 8d bc 24 80 00 00 	lea    rdi,[rsp+0x80]
    908c:	00 
	    return __out;
    908d:	48 89 5c 24 08       	mov    QWORD PTR [rsp+0x8],rbx
    9092:	e8 59 c8 ff ff       	call   58f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
    9097:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    909c:	e9 cc fa ff ff       	jmp    8b6d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12d>
	while (__to.size() <= __s.size())
    90a1:	4c 8b 6c 24 08       	mov    r13,QWORD PTR [rsp+0x8]
      { return this->_M_len; }
    90a6:	4d 89 f4             	mov    r12,r14
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    90a9:	4c 89 e2             	mov    rdx,r12
    90ac:	4c 89 ee             	mov    rsi,r13
    90af:	e8 fc a0 ff ff       	call   31b0 <memcpy@plt>
    90b4:	4c 01 63 18          	add    QWORD PTR [rbx+0x18],r12
	    while (__r-- > 0)
    90b8:	49 83 ef 01          	sub    r15,0x1
    90bc:	72 c7                	jb     9085 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x645>
    90be:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    90c2:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    { return __lhs.base() - __rhs.base(); }
    90c6:	48 89 fa             	mov    rdx,rdi
    90c9:	48 2b 53 08          	sub    rdx,QWORD PTR [rbx+0x8]
    90cd:	48 29 d0             	sub    rax,rdx
    90d0:	48 89 c5             	mov    rbp,rax
	while (__to.size() <= __s.size())
    90d3:	49 39 c6             	cmp    r14,rax
    90d6:	72 c9                	jb     90a1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x661>
    90d8:	4c 8b 6c 24 08       	mov    r13,QWORD PTR [rsp+0x8]
    90dd:	4d 89 f4             	mov    r12,r14
    90e0:	4c 39 e5             	cmp    rbp,r12
    90e3:	4c 89 e2             	mov    rdx,r12
    90e6:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    90ea:	48 85 d2             	test   rdx,rdx
    90ed:	74 08                	je     90f7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x6b7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    90ef:	4c 89 ee             	mov    rsi,r13
    90f2:	e8 b9 a0 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    90f7:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_current += __n; return *this; }
    90fa:	48 01 6b 18          	add    QWORD PTR [rbx+0x18],rbp
    90fe:	48 89 df             	mov    rdi,rbx
	this->_M_str += __n;
    9101:	49 01 ed             	add    r13,rbp
	this->_M_len -= __n;
    9104:	49 29 ec             	sub    r12,rbp
    9107:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    9109:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    910d:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    9111:	48 89 fa             	mov    rdx,rdi
    9114:	48 89 c5             	mov    rbp,rax
    9117:	48 2b 53 08          	sub    rdx,QWORD PTR [rbx+0x8]
    911b:	48 29 d5             	sub    rbp,rdx
	while (__to.size() <= __s.size())
    911e:	49 39 ec             	cmp    r12,rbp
    9121:	73 bd                	jae    90e0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x6a0>
	if (__s.size())
    9123:	4d 85 e4             	test   r12,r12
    9126:	0f 85 7d ff ff ff    	jne    90a9 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x669>
	    while (__r-- > 0)
    912c:	49 83 ef 01          	sub    r15,0x1
    9130:	73 94                	jae    90c6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x686>
    9132:	e9 4e ff ff ff       	jmp    9085 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x645>
    9137:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    913c:	48 89 c5             	mov    rbp,rax
	  if (__str.size())
    913f:	48 85 c0             	test   rax,rax
    9142:	0f 84 22 fa ff ff    	je     8b6a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
    9148:	48 8b 7f 18          	mov    rdi,QWORD PTR [rdi+0x18]
    914c:	4d 8b 67 10          	mov    r12,QWORD PTR [r15+0x10]
	  __r = __nfill;
    9150:	45 31 ed             	xor    r13d,r13d
    9153:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
    9158:	48 89 f8             	mov    rax,rdi
    915b:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    915f:	49 29 c4             	sub    r12,rax
	while (__to.size() <= __s.size())
    9162:	4c 39 64 24 10       	cmp    QWORD PTR [rsp+0x10],r12
    9167:	0f 83 23 fc ff ff    	jae    8d90 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x350>
    916d:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
    9172:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
    9177:	48 89 da             	mov    rdx,rbx
    917a:	e8 31 a0 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    917f:	49 01 5f 18          	add    QWORD PTR [r15+0x18],rbx
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
    9183:	e9 e2 f9 ff ff       	jmp    8b6a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
	  if (__str.size())
    9188:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
    918e:	0f 85 d0 fb ff ff    	jne    8d64 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x324>
	if (__n == 0)
    9194:	4d 85 ed             	test   r13,r13
    9197:	0f 84 cd f9 ff ff    	je     8b6a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
    __write(_Out __out, basic_string_view<_CharT> __str)
    919d:	eb fe                	jmp    919d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x75d>
    919f:	90                   	nop
    return 0xDFFF < __c && __c <= 0x10FFFF;
    91a0:	8d 88 00 20 ff ff    	lea    ecx,[rax-0xe000]
	if (!__is_scalar_value(__c)) [[unlikely]]
    91a6:	81 f9 ff 1f 10 00    	cmp    ecx,0x101fff
    91ac:	0f 87 34 05 00 00    	ja     96e6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xca6>
    91b2:	0f bd c8             	bsr    ecx,eax
		_M_buf[0] = 0xC0 | (__c >> 6);
		_M_buf[1] = 0x80 | (__c & 0x3F);
		_M_buf[2] = _M_buf[3] = 0;
		_M_buf_last = 2;
	      }
	    else if (__bits <= 16)
    91b5:	83 f9 0f             	cmp    ecx,0xf
    91b8:	0f 84 2d 05 00 00    	je     96eb <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xcab>
	      }
	    else
	      {
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    91be:	89 c7                	mov    edi,eax
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    91c0:	89 c1                	mov    ecx,eax
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    91c2:	89 c6                	mov    esi,eax
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    91c4:	83 e0 3f             	and    eax,0x3f
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    91c7:	c1 ef 06             	shr    edi,0x6
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    91ca:	c1 e0 08             	shl    eax,0x8
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    91cd:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    91d4:	00 
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    91d5:	c1 ee 0c             	shr    esi,0xc
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    91d8:	83 e7 3f             	and    edi,0x3f
    91db:	c1 e9 12             	shr    ecx,0x12
    91de:	09 f8                	or     eax,edi
    91e0:	83 e6 3f             	and    esi,0x3f
    91e3:	0f b6 c9             	movzx  ecx,cl
    91e6:	c1 e0 08             	shl    eax,0x8
    91e9:	09 f0                	or     eax,esi
    91eb:	c1 e0 08             	shl    eax,0x8
    91ee:	09 c8                	or     eax,ecx
    91f0:	8b 0d 0e be 00 00    	mov    ecx,DWORD PTR [rip+0xbe0e]        # 15004 <_IO_stdin_used+0x4>
    91f6:	09 c8                	or     eax,ecx
    91f8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],eax
    91ff:	48 83 fd 0f          	cmp    rbp,0xf
    9203:	0f 84 91 05 00 00    	je     979a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd5a>
	    _M_local_buf[__len++] = *__beg;
    9209:	0f b6 84 24 a0 00 00 	movzx  eax,BYTE PTR [rsp+0xa0]
    9210:	00 
    9211:	48 83 c5 01          	add    rbp,0x1
		_M_buf[3] = 0x80 | (__c & 0x3F);
		_M_buf_last = 4;
    9215:	bf 04 00 00 00       	mov    edi,0x4
    921a:	41 88 04 28          	mov    BYTE PTR [r8+rbp*1],al
	  __c = _S_error();
    921e:	45 31 db             	xor    r11d,r11d
    9221:	41 ba 01 00 00 00    	mov    r10d,0x1
    9227:	e9 fa fc ff ff       	jmp    8f26 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x4e6>
    922c:	45 84 c9             	test   r9b,r9b
    922f:	0f 84 b1 03 00 00    	je     95e6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xba6>
    9235:	44 88 9c 24 b8 00 00 	mov    BYTE PTR [rsp+0xb8],r11b
    923c:	00 
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    923d:	45 84 db             	test   r11b,r11b
    9240:	0f 94 c0             	sete   al
    9243:	45 84 d2             	test   r10b,r10b
    9246:	0f 85 73 03 00 00    	jne    95bf <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb7f>
    924c:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    9251:	48 39 f1             	cmp    rcx,rsi
    9254:	75 08                	jne    925e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x81e>
    9256:	84 c0                	test   al,al
    9258:	0f 85 80 05 00 00    	jne    97de <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd9e>
    925e:	41 be 0f 00 00 00    	mov    r14d,0xf
    9264:	41 bf 0f 00 00 00    	mov    r15d,0xf
    926a:	4c 89 64 24 30       	mov    QWORD PTR [rsp+0x30],r12
    926f:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    9274:	4c 89 6c 24 38       	mov    QWORD PTR [rsp+0x38],r13
    9279:	4d 89 fc             	mov    r12,r15
    927c:	4d 89 f5             	mov    r13,r14
    927f:	45 89 de             	mov    r14d,r11d
    9282:	48 89 5c 24 40       	mov    QWORD PTR [rsp+0x40],rbx
    9287:	48 89 cb             	mov    rbx,rcx
    928a:	eb 25                	jmp    92b1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x871>
    928c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9290:	48 8b 9c 24 b0 00 00 	mov    rbx,QWORD PTR [rsp+0xb0]
    9297:	00 
	else if (_M_buf_index + 1 < _M_buf_last)
    9298:	0f 8d da 00 00 00    	jge    9378 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x938>
	  ++_M_buf_index;
    929e:	41 83 c6 01          	add    r14d,0x1
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    92a2:	49 83 c7 01          	add    r15,0x1
	  ++_M_buf_index;
    92a6:	44 88 b4 24 b8 00 00 	mov    BYTE PTR [rsp+0xb8],r14b
    92ad:	00 
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    92ae:	4d 89 c5             	mov    r13,r8
		__capacity = __len + 1;
    92b1:	4d 8d 45 01          	lea    r8,[r13+0x1]
	    if (__len == __capacity)
    92b5:	4d 39 fc             	cmp    r12,r15
    92b8:	0f 84 02 01 00 00    	je     93c0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x980>
      { return _M_dataplus._M_p; }
    92be:	48 8b ac 24 80 00 00 	mov    rbp,QWORD PTR [rsp+0x80]
    92c5:	00 
      operator*() const { return _M_buf[_M_buf_index]; }
    92c6:	41 0f b6 c6          	movzx  eax,r14b
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    92ca:	0f b6 94 24 b9 00 00 	movzx  edx,BYTE PTR [rsp+0xb9]
    92d1:	00 
	__c1 = __c2;
    92d2:	0f b6 84 04 a0 00 00 	movzx  eax,BYTE PTR [rsp+rax*1+0xa0]
    92d9:	00 
    92da:	42 88 44 2d 00       	mov    BYTE PTR [rbp+r13*1+0x0],al
    92df:	41 0f b6 c6          	movzx  eax,r14b
    92e3:	83 c0 01             	add    eax,0x1
    92e6:	39 d0                	cmp    eax,edx
    92e8:	75 a6                	jne    9290 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x850>
    92ea:	4c 39 d3             	cmp    rbx,r10
    92ed:	0f 84 7e 01 00 00    	je     9471 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa31>
    92f3:	48 8d 53 04          	lea    rdx,[rbx+0x4]
	    if (_M_curr() == _M_last)
    92f7:	4c 39 d2             	cmp    rdx,r10
    92fa:	0f 84 9b 00 00 00    	je     939b <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x95b>
	char32_t __c = *_M_curr()++;
    9300:	48 8d 43 08          	lea    rax,[rbx+0x8]
    9304:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    930b:	00 
    930c:	8b 43 04             	mov    eax,DWORD PTR [rbx+0x4]
    if (__c < 0xD800) [[likely]]
    930f:	3d ff d7 00 00       	cmp    eax,0xd7ff
    9314:	0f 87 33 03 00 00    	ja     964d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc0d>
	_M_buf_index = 0;
    931a:	c6 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],0x0
    9321:	00 
      if (__x == 0)
    9322:	85 c0                	test   eax,eax
    9324:	0f 84 b5 02 00 00    	je     95df <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb9f>
      return _Nd - std::__countl_zero(__x);
    932a:	0f bd c8             	bsr    ecx,eax
    932d:	83 c1 01             	add    ecx,0x1
	    if (__bits <= 7) [[likely]]
    9330:	83 f9 07             	cmp    ecx,0x7
    9333:	0f 8f 6b 04 00 00    	jg     97a4 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd64>
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
    9339:	31 c9                	xor    ecx,ecx
    933b:	c6 84 24 a1 00 00 00 	mov    BYTE PTR [rsp+0xa1],0x0
    9342:	00 
    9343:	66 89 8c 24 a2 00 00 	mov    WORD PTR [rsp+0xa2],cx
    934a:	00 
		_M_buf[0] = __c;
    934b:	88 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],al
    9352:	b8 01 00 00 00       	mov    eax,0x1
		_M_buf_last = 1;
    9357:	88 84 24 b9 00 00 00 	mov    BYTE PTR [rsp+0xb9],al
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    935e:	49 83 c7 01          	add    r15,0x1
    9362:	48 89 d3             	mov    rbx,rdx
    9365:	45 31 f6             	xor    r14d,r14d
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    9368:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    936f:	00 
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
    9370:	e9 39 ff ff ff       	jmp    92ae <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x86e>
    9375:	0f 1f 00             	nop    DWORD PTR [rax]
    9378:	44 0f b6 b4 24 b8 00 	movzx  r14d,BYTE PTR [rsp+0xb8]
    937f:	00 00 
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    9381:	4c 39 d3             	cmp    rbx,r10
    9384:	0f 94 c0             	sete   al
    9387:	45 84 f6             	test   r14b,r14b
    938a:	0f 94 c2             	sete   dl
    938d:	49 83 c7 01          	add    r15,0x1
    9391:	21 d0                	and    eax,edx
    9393:	84 c0                	test   al,al
    9395:	0f 84 13 ff ff ff    	je     92ae <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x86e>
    939b:	4c 8b 64 24 30       	mov    r12,QWORD PTR [rsp+0x30]
    93a0:	4c 8b 6c 24 38       	mov    r13,QWORD PTR [rsp+0x38]
    93a5:	4c 89 c5             	mov    rbp,r8
    93a8:	48 8b 5c 24 40       	mov    rbx,QWORD PTR [rsp+0x40]
    93ad:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    93b4:	00 
    93b5:	e9 68 fc ff ff       	jmp    9022 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5e2>
    93ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      if (__capacity > max_size())
    93c0:	4d 85 c0             	test   r8,r8
    93c3:	0f 88 b5 04 00 00    	js     987e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe3e>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    93c9:	4d 39 c4             	cmp    r12,r8
    93cc:	0f 82 b5 00 00 00    	jb     9487 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa47>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    93d2:	bf 01 00 00 00       	mov    edi,0x1
    93d7:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
		__capacity = __len + 1;
    93dc:	45 31 e4             	xor    r12d,r12d
    93df:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    93e4:	e8 f7 9d ff ff       	call   31e0 <operator new(unsigned long)@plt>
    93e9:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    93ee:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
    93f3:	4c 8b 9c 24 80 00 00 	mov    r11,QWORD PTR [rsp+0x80]
    93fa:	00 
    93fb:	48 89 c5             	mov    rbp,rax
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    93fe:	4c 89 de             	mov    rsi,r11
    9401:	4c 89 ea             	mov    rdx,r13
    9404:	48 89 ef             	mov    rdi,rbp
    9407:	4c 89 44 24 48       	mov    QWORD PTR [rsp+0x48],r8
    940c:	4c 89 54 24 28       	mov    QWORD PTR [rsp+0x28],r10
    9411:	4c 89 5c 24 08       	mov    QWORD PTR [rsp+0x8],r11
    9416:	e8 95 9d ff ff       	call   31b0 <memcpy@plt>
    941b:	4c 8b 44 24 48       	mov    r8,QWORD PTR [rsp+0x48]
    9420:	4c 8b 54 24 28       	mov    r10,QWORD PTR [rsp+0x28]
    9425:	4c 8b 5c 24 08       	mov    r11,QWORD PTR [rsp+0x8]
	if (_M_data() == _M_local_data())
    942a:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    942f:	49 39 c3             	cmp    r11,rax
    9432:	74 28                	je     945c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa1c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    9434:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    943b:	00 
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    943c:	4c 89 df             	mov    rdi,r11
    943f:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
    9444:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    9449:	48 8d 70 01          	lea    rsi,[rax+0x1]
    944d:	e8 ae 9d ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    9452:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
    9457:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
      { _M_dataplus._M_p = __p; }
    945c:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
    9463:	00 
      { _M_allocated_capacity = __capacity; }
    9464:	4c 89 a4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r12
    946b:	00 
    946c:	e9 55 fe ff ff       	jmp    92c6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x886>
    9471:	44 0f b6 b4 24 b8 00 	movzx  r14d,BYTE PTR [rsp+0xb8]
    9478:	00 00 
    947a:	48 8b 9c 24 b0 00 00 	mov    rbx,QWORD PTR [rsp+0xb0]
    9481:	00 
    9482:	e9 fa fe ff ff       	jmp    9381 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x941>
    9487:	4d 01 e4             	add    r12,r12
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    948a:	4d 39 e0             	cmp    r8,r12
    948d:	73 48                	jae    94d7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa97>
	  if (__capacity > max_size())
    948f:	4d 85 e4             	test   r12,r12
    9492:	0f 88 34 01 00 00    	js     95cc <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb8c>
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    9498:	4b 8d 7c 00 ff       	lea    rdi,[r8+r8*1-0x1]
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    949d:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
    94a2:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    94a7:	e8 34 9d ff ff       	call   31e0 <operator new(unsigned long)@plt>
	if (__n == 1)
    94ac:	49 83 ff 01          	cmp    r15,0x1
    94b0:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
      { return _M_dataplus._M_p; }
    94b5:	4c 8b 9c 24 80 00 00 	mov    r11,QWORD PTR [rsp+0x80]
    94bc:	00 
	if (__n == 1)
    94bd:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
    94c2:	48 89 c5             	mov    rbp,rax
    94c5:	0f 85 06 01 00 00    	jne    95d1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb91>
	__c1 = __c2;
    94cb:	41 0f b6 03          	movzx  eax,BYTE PTR [r11]
    94cf:	88 45 00             	mov    BYTE PTR [rbp+0x0],al
      }
    94d2:	e9 53 ff ff ff       	jmp    942a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x9ea>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    94d7:	4c 89 ef             	mov    rdi,r13
    94da:	48 83 c7 02          	add    rdi,0x2
    94de:	0f 88 e8 00 00 00    	js     95cc <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb8c>
    94e4:	4d 89 c4             	mov    r12,r8
    94e7:	eb b4                	jmp    949d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa5d>
    94e9:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    94ed:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    94f1:	4c 89 6c 24 20       	mov    QWORD PTR [rsp+0x20],r13
    94f6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    94fd:	00 00 00 
    { return __lhs.base() - __rhs.base(); }
    9500:	48 89 fa             	mov    rdx,rdi
    9503:	48 2b 53 08          	sub    rdx,QWORD PTR [rbx+0x8]
    9507:	48 29 d0             	sub    rax,rdx
    950a:	48 89 c5             	mov    rbp,rax
	while (__to.size() <= __s.size())
    950d:	49 39 c6             	cmp    r14,rax
    9510:	72 66                	jb     9578 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb38>
    9512:	4c 8b 64 24 08       	mov    r12,QWORD PTR [rsp+0x8]
      { return this->_M_len; }
    9517:	4d 89 f5             	mov    r13,r14
    951a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    9520:	4c 39 ed             	cmp    rbp,r13
    9523:	4c 89 ea             	mov    rdx,r13
    9526:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    952a:	48 85 d2             	test   rdx,rdx
    952d:	74 08                	je     9537 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xaf7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    952f:	4c 89 e6             	mov    rsi,r12
    9532:	e8 79 9c ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    9537:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_current += __n; return *this; }
    953a:	48 01 6b 18          	add    QWORD PTR [rbx+0x18],rbp
    953e:	48 89 df             	mov    rdi,rbx
	this->_M_str += __n;
    9541:	49 01 ec             	add    r12,rbp
	this->_M_len -= __n;
    9544:	49 29 ed             	sub    r13,rbp
    9547:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    9549:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    954d:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    9551:	48 89 fa             	mov    rdx,rdi
    9554:	48 89 c5             	mov    rbp,rax
    9557:	48 2b 53 08          	sub    rdx,QWORD PTR [rbx+0x8]
    955b:	48 29 d5             	sub    rbp,rdx
	while (__to.size() <= __s.size())
    955e:	49 39 ed             	cmp    r13,rbp
    9561:	73 bd                	jae    9520 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xae0>
	if (__s.size())
    9563:	4d 85 ed             	test   r13,r13
    9566:	75 18                	jne    9580 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb40>
	    while (__l-- > 0)
    9568:	49 83 ef 01          	sub    r15,0x1
    956c:	73 92                	jae    9500 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xac0>
    956e:	4c 8b 6c 24 20       	mov    r13,QWORD PTR [rsp+0x20]
    9573:	e9 e4 fa ff ff       	jmp    905c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x61c>
	while (__to.size() <= __s.size())
    9578:	4c 8b 64 24 08       	mov    r12,QWORD PTR [rsp+0x8]
      { return this->_M_len; }
    957d:	4d 89 f5             	mov    r13,r14
    9580:	4c 89 ea             	mov    rdx,r13
    9583:	4c 89 e6             	mov    rsi,r12
    9586:	e8 25 9c ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    958b:	4c 01 6b 18          	add    QWORD PTR [rbx+0x18],r13
	    while (__l-- > 0)
    958f:	49 83 ef 01          	sub    r15,0x1
    9593:	72 d9                	jb     956e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb2e>
    9595:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    9599:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    959d:	e9 5e ff ff ff       	jmp    9500 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xac0>
		_M_buf_last = 1;
    95a2:	bf 01 00 00 00       	mov    edi,0x1
    95a7:	c6 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],0x0
    95ae:	00 
    95af:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
    95b6:	00 
	while (__beg != __end && __len < __capacity)
    95b7:	45 31 db             	xor    r11d,r11d
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    95ba:	b8 01 00 00 00       	mov    eax,0x1
    95bf:	40 88 bc 24 b9 00 00 	mov    BYTE PTR [rsp+0xb9],dil
    95c6:	00 
    95c7:	e9 80 fc ff ff       	jmp    924c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x80c>
	    std::__throw_bad_alloc();
    95cc:	e8 0f 9b ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
	if (__n == 0)
    95d1:	4d 85 ff             	test   r15,r15
    95d4:	0f 84 50 fe ff ff    	je     942a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x9ea>
    95da:	e9 1f fe ff ff       	jmp    93fe <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x9be>
    95df:	31 c0                	xor    eax,eax
    95e1:	e9 53 fd ff ff       	jmp    9339 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x8f9>
    95e6:	b8 01 00 00 00       	mov    eax,0x1
    95eb:	45 31 db             	xor    r11d,r11d
    95ee:	e9 50 fc ff ff       	jmp    9243 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x803>
    return 0xDFFF < __c && __c <= 0x10FFFF;
    95f3:	41 8d 81 00 20 ff ff 	lea    eax,[r9-0xe000]
	if (!__is_scalar_value(__c)) [[unlikely]]
    95fa:	3d ff 1f 10 00       	cmp    eax,0x101fff
    95ff:	0f 87 b1 00 00 00    	ja     96b6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc76>
    9605:	41 0f bd c1          	bsr    eax,r9d
	    else if (__bits <= 16)
    9609:	83 f8 0f             	cmp    eax,0xf
    960c:	0f 84 aa 00 00 00    	je     96bc <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc7c>
		_M_buf[0] = 0xC0 | (__c >> 6);
    9612:	44 89 ce             	mov    esi,r9d
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9615:	44 89 c9             	mov    ecx,r9d
		_M_buf[3] = 0x80 | (__c & 0x3F);
    9618:	44 89 c8             	mov    eax,r9d
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    961b:	44 89 ca             	mov    edx,r9d
		_M_buf[0] = 0xC0 | (__c >> 6);
    961e:	c1 ee 06             	shr    esi,0x6
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9621:	c1 e9 0c             	shr    ecx,0xc
		_M_buf[3] = 0x80 | (__c & 0x3F);
    9624:	83 e0 3f             	and    eax,0x3f
		_M_buf_last = 4;
    9627:	bf 04 00 00 00       	mov    edi,0x4
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    962c:	83 e6 3f             	and    esi,0x3f
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    962f:	c1 ea 12             	shr    edx,0x12
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9632:	83 e1 3f             	and    ecx,0x3f
		_M_buf[3] = 0x80 | (__c & 0x3F);
    9635:	83 c8 80             	or     eax,0xffffff80
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    9638:	83 ce 80             	or     esi,0xffffff80
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    963b:	83 ca f0             	or     edx,0xfffffff0
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    963e:	83 c9 80             	or     ecx,0xffffff80
	      }
	  }
      }
    9641:	e9 3c f8 ff ff       	jmp    8e82 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x442>
    9646:	31 c0                	xor    eax,eax
    9648:	e9 62 f9 ff ff       	jmp    8faf <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x56f>
    return 0xDFFF < __c && __c <= 0x10FFFF;
    964d:	8d 88 00 20 ff ff    	lea    ecx,[rax-0xe000]
	_M_buf_index = 0;
    9653:	c6 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],0x0
    965a:	00 
	if (!__is_scalar_value(__c)) [[unlikely]]
    965b:	81 f9 ff 1f 10 00    	cmp    ecx,0x101fff
    9661:	0f 87 ee 00 00 00    	ja     9755 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd15>
    9667:	0f bd c8             	bsr    ecx,eax
	    else if (__bits <= 16)
    966a:	83 f9 0f             	cmp    ecx,0xf
    966d:	0f 84 e7 00 00 00    	je     975a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd1a>
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    9673:	89 c7                	mov    edi,eax
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    9675:	89 c1                	mov    ecx,eax
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9677:	89 c6                	mov    esi,eax
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    9679:	83 e0 3f             	and    eax,0x3f
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    967c:	c1 ef 06             	shr    edi,0x6
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    967f:	c1 e0 08             	shl    eax,0x8
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9682:	c1 ee 0c             	shr    esi,0xc
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    9685:	83 e7 3f             	and    edi,0x3f
    9688:	c1 e9 12             	shr    ecx,0x12
    968b:	09 f8                	or     eax,edi
    968d:	83 e6 3f             	and    esi,0x3f
    9690:	0f b6 c9             	movzx  ecx,cl
    9693:	c1 e0 08             	shl    eax,0x8
    9696:	09 f0                	or     eax,esi
    9698:	c1 e0 08             	shl    eax,0x8
    969b:	09 c8                	or     eax,ecx
    969d:	8b 0d 61 b9 00 00    	mov    ecx,DWORD PTR [rip+0xb961]        # 15004 <_IO_stdin_used+0x4>
    96a3:	09 c8                	or     eax,ecx
    96a5:	89 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],eax
      }
    96ac:	b8 04 00 00 00       	mov    eax,0x4
    96b1:	e9 a1 fc ff ff       	jmp    9357 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x917>
	  __c = _S_error();
    96b6:	41 b9 fd ff 00 00    	mov    r9d,0xfffd
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    96bc:	44 89 c9             	mov    ecx,r9d
		_M_buf[0] = 0xE0 | (__c >> 12);
    96bf:	44 89 ca             	mov    edx,r9d
		_M_buf[2] = 0x80 | (__c & 0x3F);
    96c2:	44 89 ce             	mov    esi,r9d
		_M_buf_last = 3;
    96c5:	bf 03 00 00 00       	mov    edi,0x3
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    96ca:	c1 e9 06             	shr    ecx,0x6
		_M_buf[0] = 0xE0 | (__c >> 12);
    96cd:	c1 ea 0c             	shr    edx,0xc
		_M_buf[2] = 0x80 | (__c & 0x3F);
    96d0:	83 e6 3f             	and    esi,0x3f
		_M_buf[3] = 0;
    96d3:	31 c0                	xor    eax,eax
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    96d5:	83 e1 3f             	and    ecx,0x3f
		_M_buf[0] = 0xE0 | (__c >> 12);
    96d8:	83 ca e0             	or     edx,0xffffffe0
		_M_buf[2] = 0x80 | (__c & 0x3F);
    96db:	83 ce 80             	or     esi,0xffffff80
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    96de:	83 c9 80             	or     ecx,0xffffff80
    96e1:	e9 9c f7 ff ff       	jmp    8e82 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x442>
	  __c = _S_error();
    96e6:	b8 fd ff 00 00       	mov    eax,0xfffd
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    96eb:	89 c1                	mov    ecx,eax
		_M_buf[0] = 0xE0 | (__c >> 12);
    96ed:	89 c6                	mov    esi,eax
		_M_buf[2] = 0x80 | (__c & 0x3F);
    96ef:	83 e0 3f             	and    eax,0x3f
		_M_buf[3] = 0;
    96f2:	c6 84 24 a3 00 00 00 	mov    BYTE PTR [rsp+0xa3],0x0
    96f9:	00 
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    96fa:	c1 e9 06             	shr    ecx,0x6
		_M_buf[0] = 0xE0 | (__c >> 12);
    96fd:	c1 ee 0c             	shr    esi,0xc
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9700:	83 c8 80             	or     eax,0xffffff80
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    9703:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    970a:	00 
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    970b:	83 e1 3f             	and    ecx,0x3f
		_M_buf[0] = 0xE0 | (__c >> 12);
    970e:	83 ce e0             	or     esi,0xffffffe0
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9711:	88 84 24 a2 00 00 00 	mov    BYTE PTR [rsp+0xa2],al
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9718:	83 c9 80             	or     ecx,0xffffff80
		_M_buf[0] = 0xE0 | (__c >> 12);
    971b:	40 88 b4 24 a0 00 00 	mov    BYTE PTR [rsp+0xa0],sil
    9722:	00 
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9723:	88 8c 24 a1 00 00 00 	mov    BYTE PTR [rsp+0xa1],cl
    972a:	48 83 fd 0f          	cmp    rbp,0xf
    972e:	0f 84 36 01 00 00    	je     986a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe2a>
	    _M_local_buf[__len++] = *__beg;
    9734:	48 83 c5 01          	add    rbp,0x1
		_M_buf_last = 3;
    9738:	bf 03 00 00 00       	mov    edi,0x3
    973d:	41 88 34 28          	mov    BYTE PTR [r8+rbp*1],sil
      operator++()
    9741:	e9 d8 fa ff ff       	jmp    921e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x7de>
    9746:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    974b:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    9750:	e9 bc f5 ff ff       	jmp    8d11 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2d1>
	  __c = _S_error();
    9755:	b8 fd ff 00 00       	mov    eax,0xfffd
		_M_buf[0] = 0xE0 | (__c >> 12);
    975a:	89 c1                	mov    ecx,eax
		_M_buf[3] = 0;
    975c:	c6 84 24 a3 00 00 00 	mov    BYTE PTR [rsp+0xa3],0x0
    9763:	00 
		_M_buf[0] = 0xE0 | (__c >> 12);
    9764:	c1 e9 0c             	shr    ecx,0xc
    9767:	83 c9 e0             	or     ecx,0xffffffe0
    976a:	88 8c 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],cl
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9771:	89 c1                	mov    ecx,eax
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9773:	83 e0 3f             	and    eax,0x3f
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9776:	c1 e9 06             	shr    ecx,0x6
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9779:	83 c8 80             	or     eax,0xffffff80
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    977c:	83 e1 3f             	and    ecx,0x3f
		_M_buf[2] = 0x80 | (__c & 0x3F);
    977f:	88 84 24 a2 00 00 00 	mov    BYTE PTR [rsp+0xa2],al
    9786:	b8 03 00 00 00       	mov    eax,0x3
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    978b:	83 c9 80             	or     ecx,0xffffff80
    978e:	88 8c 24 a1 00 00 00 	mov    BYTE PTR [rsp+0xa1],cl
    9795:	e9 bd fb ff ff       	jmp    9357 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x917>
		_M_buf_last = 4;
    979a:	bf 04 00 00 00       	mov    edi,0x4
    979f:	e9 03 fe ff ff       	jmp    95a7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb67>
		_M_buf[1] = 0x80 | (__c & 0x3F);
    97a4:	89 c6                	mov    esi,eax
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    97a6:	89 c7                	mov    edi,eax
		_M_buf[1] = 0x80 | (__c & 0x3F);
    97a8:	83 e6 3f             	and    esi,0x3f
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    97ab:	c1 ef 06             	shr    edi,0x6
		_M_buf[1] = 0x80 | (__c & 0x3F);
    97ae:	83 ce 80             	or     esi,0xffffff80
	    else if (__bits <= 11)
    97b1:	83 f9 0b             	cmp    ecx,0xb
    97b4:	7f a4                	jg     975a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd1a>
		_M_buf[0] = 0xC0 | (__c >> 6);
    97b6:	89 f8                	mov    eax,edi
		_M_buf[1] = 0x80 | (__c & 0x3F);
    97b8:	40 88 b4 24 a1 00 00 	mov    BYTE PTR [rsp+0xa1],sil
    97bf:	00 
		_M_buf[0] = 0xC0 | (__c >> 6);
    97c0:	83 c8 c0             	or     eax,0xffffffc0
    97c3:	88 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],al
		_M_buf[2] = _M_buf[3] = 0;
    97ca:	31 c0                	xor    eax,eax
    97cc:	66 89 84 24 a2 00 00 	mov    WORD PTR [rsp+0xa2],ax
    97d3:	00 
    97d4:	b8 02 00 00 00       	mov    eax,0x2
    97d9:	e9 79 fb ff ff       	jmp    9357 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x917>
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    97de:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
    97e3:	bd 0f 00 00 00       	mov    ebp,0xf
    97e8:	e9 35 f8 ff ff       	jmp    9022 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5e2>
		_M_buf[1] = 0x80 | (__c & 0x3F);
    97ed:	89 c7                	mov    edi,eax
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    97ef:	89 c1                	mov    ecx,eax
		_M_buf[1] = 0x80 | (__c & 0x3F);
    97f1:	83 e7 3f             	and    edi,0x3f
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    97f4:	c1 e9 06             	shr    ecx,0x6
		_M_buf[1] = 0x80 | (__c & 0x3F);
    97f7:	83 cf 80             	or     edi,0xffffff80
	    else if (__bits <= 11)
    97fa:	83 fe 0b             	cmp    esi,0xb
    97fd:	0f 8f e8 fe ff ff    	jg     96eb <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xcab>
		_M_buf[0] = 0xC0 | (__c >> 6);
    9803:	89 c8                	mov    eax,ecx
		_M_buf[2] = _M_buf[3] = 0;
    9805:	31 f6                	xor    esi,esi
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9807:	40 88 bc 24 a1 00 00 	mov    BYTE PTR [rsp+0xa1],dil
    980e:	00 
		_M_buf[0] = 0xC0 | (__c >> 6);
    980f:	83 c8 c0             	or     eax,0xffffffc0
		_M_buf[2] = _M_buf[3] = 0;
    9812:	66 89 b4 24 a2 00 00 	mov    WORD PTR [rsp+0xa2],si
    9819:	00 
		_M_buf[0] = 0xC0 | (__c >> 6);
    981a:	88 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],al
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    9821:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    9828:	00 
	while (__beg != __end && __len < __capacity)
    9829:	48 83 fd 0f          	cmp    rbp,0xf
    982d:	74 45                	je     9874 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe34>
	    _M_local_buf[__len++] = *__beg;
    982f:	48 83 c5 01          	add    rbp,0x1
		_M_buf_last = 2;
    9833:	bf 02 00 00 00       	mov    edi,0x2
    9838:	41 88 04 28          	mov    BYTE PTR [r8+rbp*1],al
      operator++()
    983c:	e9 dd f9 ff ff       	jmp    921e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x7de>
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9841:	44 89 c9             	mov    ecx,r9d
		_M_buf[0] = 0xC0 | (__c >> 6);
    9844:	44 89 ca             	mov    edx,r9d
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9847:	83 e1 3f             	and    ecx,0x3f
		_M_buf[0] = 0xC0 | (__c >> 6);
    984a:	c1 ea 06             	shr    edx,0x6
		_M_buf[1] = 0x80 | (__c & 0x3F);
    984d:	83 c9 80             	or     ecx,0xffffff80
	    else if (__bits <= 11)
    9850:	83 fe 0b             	cmp    esi,0xb
    9853:	0f 8f 63 fe ff ff    	jg     96bc <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc7c>
		_M_buf[0] = 0xC0 | (__c >> 6);
    9859:	83 ca c0             	or     edx,0xffffffc0
		_M_buf_last = 2;
    985c:	bf 02 00 00 00       	mov    edi,0x2
		_M_buf[2] = _M_buf[3] = 0;
    9861:	31 c0                	xor    eax,eax
    9863:	31 f6                	xor    esi,esi
    9865:	e9 18 f6 ff ff       	jmp    8e82 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x442>
		_M_buf_last = 3;
    986a:	bf 03 00 00 00       	mov    edi,0x3
    986f:	e9 33 fd ff ff       	jmp    95a7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb67>
		_M_buf_last = 2;
    9874:	bf 02 00 00 00       	mov    edi,0x2
    9879:	e9 29 fd ff ff       	jmp    95a7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb67>
	std::__throw_length_error(__N("basic_string::_M_create"));
    987e:	48 8d 3d 93 b8 00 00 	lea    rdi,[rip+0xb893]        # 15118 <CSWTCH.1104+0x38>
    9885:	e8 a6 98 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    988a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000009890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>:
    __write_padded_as_spec(basic_string_view<type_identity_t<_CharT>> __str,
    9890:	41 55                	push   r13
    9892:	49 89 d2             	mov    r10,rdx
    9895:	49 89 f5             	mov    r13,rsi
    9898:	4c 89 c2             	mov    rdx,r8
    989b:	41 54                	push   r12
    989d:	49 89 fc             	mov    r12,rdi
    98a0:	48 89 cf             	mov    rdi,rcx
    98a3:	44 89 ce             	mov    esi,r9d
    98a6:	55                   	push   rbp
    98a7:	53                   	push   rbx
    98a8:	48 83 ec 48          	sub    rsp,0x48
	  if (_M_width_kind == _WP_value)
    98ac:	41 0f b7 08          	movzx  ecx,WORD PTR [r8]
    98b0:	66 81 e1 80 01       	and    cx,0x180
    98b5:	66 81 f9 80 00       	cmp    cx,0x80
    98ba:	74 24                	je     98e0 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x50>
	  else if (_M_width_kind == _WP_from_arg)
    98bc:	66 81 f9 00 01       	cmp    cx,0x100
    98c1:	0f 84 d9 00 00 00    	je     99a0 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x110>
      iterator out() { return std::move(_M_out); }
    98c7:	48 8b 6f 10          	mov    rbp,QWORD PTR [rdi+0x10]
	  if (__str.size())
    98cb:	4d 85 e4             	test   r12,r12
    98ce:	75 50                	jne    9920 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x90>
    }
    98d0:	48 83 c4 48          	add    rsp,0x48
    98d4:	48 89 e8             	mov    rax,rbp
    98d7:	5b                   	pop    rbx
    98d8:	5d                   	pop    rbp
    98d9:	41 5c                	pop    r12
    98db:	41 5d                	pop    r13
    98dd:	c3                   	ret
    98de:	66 90                	xchg   ax,ax
	    __width = _M_width;
    98e0:	45 0f b7 40 04       	movzx  r8d,WORD PTR [r8+0x4]
      if (__width <= __estimated_width)
    98e5:	4d 39 c2             	cmp    r10,r8
    98e8:	73 dd                	jae    98c7 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x37>
      if (__spec._M_align)
    98ea:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    98ed:	48 8b 7f 10          	mov    rdi,QWORD PTR [rdi+0x10]
	__align = __spec._M_align;
    98f1:	41 89 c9             	mov    r9d,ecx
    98f4:	41 83 e1 03          	and    r9d,0x3
    98f8:	83 e1 03             	and    ecx,0x3
    98fb:	41 0f 45 f1          	cmovne esi,r9d
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    98ff:	44 8b 4a 08          	mov    r9d,DWORD PTR [rdx+0x8]
    }
    9903:	48 83 c4 48          	add    rsp,0x48
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    9907:	4c 89 ea             	mov    rdx,r13
    }
    990a:	5b                   	pop    rbx
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    990b:	4d 29 d0             	sub    r8,r10
    }
    990e:	5d                   	pop    rbp
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    990f:	89 f1                	mov    ecx,esi
    9911:	4c 89 e6             	mov    rsi,r12
    }
    9914:	41 5c                	pop    r12
    9916:	41 5d                	pop    r13
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    9918:	e9 23 f1 ff ff       	jmp    8a40 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
    991d:	0f 1f 00             	nop    DWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    9920:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    9924:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    9928:	48 89 f8             	mov    rax,rdi
    992b:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    992f:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    9932:	49 39 dc             	cmp    r12,rbx
    9935:	72 53                	jb     998a <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0xfa>
    9937:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    993e:	00 00 
    9940:	49 39 dc             	cmp    r12,rbx
    9943:	48 89 da             	mov    rdx,rbx
    9946:	49 0f 46 d4          	cmovbe rdx,r12
    994a:	48 85 d2             	test   rdx,rdx
    994d:	74 08                	je     9957 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0xc7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    994f:	4c 89 ee             	mov    rsi,r13
    9952:	e8 59 98 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    9957:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
      { _M_current += __n; return *this; }
    995b:	48 01 5d 18          	add    QWORD PTR [rbp+0x18],rbx
    995f:	48 89 ef             	mov    rdi,rbp
	this->_M_str += __n;
    9962:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
    9965:	49 29 dc             	sub    r12,rbx
    9968:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    996a:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    996e:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    9972:	48 89 f8             	mov    rax,rdi
    9975:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    9979:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    997c:	49 39 dc             	cmp    r12,rbx
    997f:	73 bf                	jae    9940 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0xb0>
	if (__s.size())
    9981:	4d 85 e4             	test   r12,r12
    9984:	0f 84 46 ff ff ff    	je     98d0 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x40>
    998a:	4c 89 e2             	mov    rdx,r12
    998d:	4c 89 ee             	mov    rsi,r13
    9990:	e8 1b 98 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    9995:	4c 01 65 18          	add    QWORD PTR [rbp+0x18],r12
	return __format::__write(__fc.out(), __str);
    9999:	e9 32 ff ff ff       	jmp    98d0 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x40>
    999e:	66 90                	xchg   ax,ax
	if (__i < _M_packed_size)
    99a0:	0f b6 0f             	movzx  ecx,BYTE PTR [rdi]
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    99a3:	45 0f b7 48 04       	movzx  r9d,WORD PTR [r8+0x4]
	if (__i < _M_packed_size)
    99a8:	41 89 c8             	mov    r8d,ecx
    99ab:	83 e1 0f             	and    ecx,0xf
    99ae:	41 83 e0 0f          	and    r8d,0xf
    99b2:	49 39 c9             	cmp    r9,rcx
    99b5:	73 59                	jae    9a10 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x180>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    99b7:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
    99ba:	4b 8d 0c 89          	lea    rcx,[r9+r9*4]
	    __arg._M_val = _M_values[__i];
    99be:	49 c1 e1 04          	shl    r9,0x4
    99c2:	4c 03 4f 08          	add    r9,QWORD PTR [rdi+0x8]
    99c6:	66 41 0f 6f 01       	movdqa xmm0,XMMWORD PTR [r9]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    99cb:	49 c1 e8 04          	shr    r8,0x4
    99cf:	49 d3 e8             	shr    r8,cl
	    __arg._M_val = _M_values[__i];
    99d2:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    99d6:	4c 89 c1             	mov    rcx,r8
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    99d9:	83 e1 1f             	and    ecx,0x1f
    __int_from_arg(const basic_format_arg<_Context>& __arg)
    99dc:	88 4c 24 10          	mov    BYTE PTR [rsp+0x10],cl
    99e0:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
	  switch (__type)
    99e5:	4c 8d 05 0c be 00 00 	lea    r8,[rip+0xbe0c]        # 157f8 <CSWTCH.1104+0x718>
    99ec:	0f b6 c9             	movzx  ecx,cl
    99ef:	49 63 0c 88          	movsxd rcx,DWORD PTR [r8+rcx*4]
    99f3:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    99f8:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
    99fe:	4c 01 c1             	add    rcx,r8
    9a01:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
    9a06:	ff e1                	jmp    rcx
    9a08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    9a0f:	00 
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    9a10:	45 84 c0             	test   r8b,r8b
    9a13:	75 0c                	jne    9a21 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x191>
    9a15:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
    9a18:	48 c1 e9 04          	shr    rcx,0x4
    9a1c:	49 39 c9             	cmp    r9,rcx
    9a1f:	72 4f                	jb     9a70 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x1e0>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    9a21:	e8 2a 97 ff ff       	call   3150 <abort@plt>
    9a26:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    9a2d:	00 00 00 
	      if (__arg >= 0)
    9a30:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
    9a35:	4d 85 c0             	test   r8,r8
    9a38:	0f 89 a7 fe ff ff    	jns    98e5 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x55>
    9a3e:	eb e1                	jmp    9a21 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x191>
	      return __arg;
    9a40:	44 8b 44 24 20       	mov    r8d,DWORD PTR [rsp+0x20]
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
    9a45:	e9 9b fe ff ff       	jmp    98e5 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x55>
	      if (__arg >= 0)
    9a4a:	4c 63 44 24 20       	movsxd r8,DWORD PTR [rsp+0x20]
    9a4f:	45 85 c0             	test   r8d,r8d
    9a52:	0f 89 8d fe ff ff    	jns    98e5 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x55>
    9a58:	eb c7                	jmp    9a21 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x191>
    9a5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __arg;
    9a60:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
    9a65:	e9 7b fe ff ff       	jmp    98e5 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x55>
    9a6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  __arg = _M_args[__i];
    9a70:	49 c1 e1 05          	shl    r9,0x5
    9a74:	4c 03 4f 08          	add    r9,QWORD PTR [rdi+0x8]
    9a78:	f3 41 0f 6f 01       	movdqu xmm0,XMMWORD PTR [r9]
    9a7d:	41 0f b6 49 10       	movzx  ecx,BYTE PTR [r9+0x10]
    9a82:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
    9a86:	e9 51 ff ff ff       	jmp    99dc <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x14c>
    9a8b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000009a90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>:
	_M_format_to_ostream(const _Tp& __t, _FormatContext& __fc,
    9a90:	41 57                	push   r15
    9a92:	41 89 cf             	mov    r15d,ecx
    9a95:	41 56                	push   r14
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9a97:	4c 8d 35 32 20 01 00 	lea    r14,[rip+0x12032]        # 1bad0 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    9a9e:	41 55                	push   r13
    9aa0:	4c 8d 2d 61 21 01 00 	lea    r13,[rip+0x12161]        # 1bc08 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
    9aa7:	41 54                	push   r12
    9aa9:	66 49 0f 6e dd       	movq   xmm3,r13
    9aae:	55                   	push   rbp
    9aaf:	53                   	push   rbx
    9ab0:	48 81 ec a8 03 00 00 	sub    rsp,0x3a8
      basic_ios()
    9ab7:	f3 0f 7e 15 e1 22 01 	movq   xmm2,QWORD PTR [rip+0x122e1]        # 1bda0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x230>
    9abe:	00 
    9abf:	f3 0f 7e 0d d9 22 01 	movq   xmm1,QWORD PTR [rip+0x122d9]        # 1bda0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x230>
    9ac6:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9ac7:	48 8d 84 24 10 01 00 	lea    rax,[rsp+0x110]
    9ace:	00 
    9acf:	48 89 7c 24 38       	mov    QWORD PTR [rsp+0x38],rdi
    9ad4:	48 8d ac 24 a0 00 00 	lea    rbp,[rsp+0xa0]
    9adb:	00 
    9adc:	48 89 c7             	mov    rdi,rax
    9adf:	66 0f 6c d3          	punpcklqdq xmm2,xmm3
    9ae3:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    9ae8:	0f 16 0d b9 22 01 00 	movhps xmm1,QWORD PTR [rip+0x122b9]        # 1bda8 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x2c8>
    9aef:	0f 29 54 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm2
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    9af4:	4c 8d a4 24 00 01 00 	lea    r12,[rsp+0x100]
    9afb:	00 
    9afc:	0f 29 4c 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm1
    9b01:	48 89 74 24 48       	mov    QWORD PTR [rsp+0x48],rsi
    9b06:	48 89 54 24 40       	mov    QWORD PTR [rsp+0x40],rdx
    9b0b:	48 89 6c 24 30       	mov    QWORD PTR [rsp+0x30],rbp
    9b10:	e8 9b 95 ff ff       	call   30b0 <std::ios_base::ios_base()@plt>
      { this->init(0); }
    9b15:	48 8b 1d ac 20 01 00 	mov    rbx,QWORD PTR [rip+0x120ac]        # 1bbc8 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x8>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9b1c:	31 d2                	xor    edx,edx
    9b1e:	31 f6                	xor    esi,esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9b20:	66 0f ef c0          	pxor   xmm0,xmm0
    9b24:	48 8b 0d a5 20 01 00 	mov    rcx,QWORD PTR [rip+0x120a5]        # 1bbd0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9b2b:	66 89 94 24 f0 01 00 	mov    WORD PTR [rsp+0x1f0],dx
    9b32:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9b33:	0f 11 84 24 f8 01 00 	movups XMMWORD PTR [rsp+0x1f8],xmm0
    9b3a:	00 
    9b3b:	0f 11 84 24 08 02 00 	movups XMMWORD PTR [rsp+0x208],xmm0
    9b42:	00 
    9b43:	48 03 6b e8          	add    rbp,QWORD PTR [rbx-0x18]
    9b47:	4c 89 b4 24 10 01 00 	mov    QWORD PTR [rsp+0x110],r14
    9b4e:	00 
    9b4f:	48 89 ef             	mov    rdi,rbp
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9b52:	48 c7 84 24 e8 01 00 	mov    QWORD PTR [rsp+0x1e8],0x0
    9b59:	00 00 00 00 00 
    9b5e:	48 89 9c 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rbx
    9b65:	00 
    9b66:	48 89 4d 00          	mov    QWORD PTR [rbp+0x0],rcx
    9b6a:	e8 21 97 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
      : __ostream_type(), _M_stringbuf(ios_base::out)
    9b6f:	48 8d 0d 3a 20 01 00 	lea    rcx,[rip+0x1203a]        # 1bbb0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    9b76:	66 0f 6f 4c 24 10    	movdqa xmm1,XMMWORD PTR [rsp+0x10]
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    9b7c:	66 0f ef c0          	pxor   xmm0,xmm0
    9b80:	48 89 8c 24 10 01 00 	mov    QWORD PTR [rsp+0x110],rcx
    9b87:	00 
      _M_buf_locale(locale())
    9b88:	48 8d 8c 24 e0 00 00 	lea    rcx,[rsp+0xe0]
    9b8f:	00 
    9b90:	48 89 cf             	mov    rdi,rcx
    9b93:	48 89 4c 24 50       	mov    QWORD PTR [rsp+0x50],rcx
    9b98:	0f 29 8c 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm1
    9b9f:	00 
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    9ba0:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    9ba7:	00 
    9ba8:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    9baf:	00 
    9bb0:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    9bb7:	00 
      _M_buf_locale(locale())
    9bb8:	e8 b3 97 ff ff       	call   3370 <std::locale::locale()@plt>
      { this->init(&_M_stringbuf); }
    9bbd:	48 8d 8c 24 a8 00 00 	lea    rcx,[rsp+0xa8]
    9bc4:	00 
    9bc5:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
      : __streambuf_type(), _M_mode(__mode), _M_string()
    9bca:	4c 89 ac 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],r13
    9bd1:	00 
      { this->init(&_M_stringbuf); }
    9bd2:	48 89 ce             	mov    rsi,rcx
      : __streambuf_type(), _M_mode(__mode), _M_string()
    9bd5:	c7 84 24 e8 00 00 00 	mov    DWORD PTR [rsp+0xe8],0x10
    9bdc:	10 00 00 00 
    9be0:	4c 89 a4 24 f0 00 00 	mov    QWORD PTR [rsp+0xf0],r12
    9be7:	00 
      { _M_string_length = __length; }
    9be8:	48 c7 84 24 f8 00 00 	mov    QWORD PTR [rsp+0xf8],0x0
    9bef:	00 00 00 00 00 
	__c1 = __c2;
    9bf4:	c6 84 24 00 01 00 00 	mov    BYTE PTR [rsp+0x100],0x0
    9bfb:	00 
      { this->init(&_M_stringbuf); }
    9bfc:	48 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],rcx
    9c01:	e8 8a 96 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
	  if (!_M_spec._M_localized)
    9c06:	48 8b 44 24 38       	mov    rax,QWORD PTR [rsp+0x38]
    9c0b:	f6 00 20             	test   BYTE PTR [rax],0x20
    9c0e:	0f 85 1c 05 00 00    	jne    a130 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6a0>
	    return std::locale::classic();
    9c14:	e8 87 96 ff ff       	call   32a0 <std::locale::classic()@plt>
    9c19:	48 8d ac 24 80 00 00 	lea    rbp,[rsp+0x80]
    9c20:	00 
    9c21:	48 89 c6             	mov    rsi,rax
    9c24:	48 89 ef             	mov    rdi,rbp
    9c27:	e8 64 95 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __os.imbue(_M_locale(__fc));
    9c2c:	48 8d 84 24 20 02 00 	lea    rax,[rsp+0x220]
    9c33:	00 
    9c34:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    9c39:	48 89 ea             	mov    rdx,rbp
    9c3c:	48 89 c7             	mov    rdi,rax
    9c3f:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    9c43:	e8 48 94 ff ff       	call   3090 <std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@plt>
    9c48:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    9c4c:	e8 6f 96 ff ff       	call   32c0 <std::locale::~locale()@plt>
    9c51:	48 89 ef             	mov    rdi,rbp
    9c54:	e8 67 96 ff ff       	call   32c0 <std::locale::~locale()@plt>
		    if (__is_neg) [[unlikely]]
    9c59:	45 84 ff             	test   r15b,r15b
    9c5c:	0f 85 3e 06 00 00    	jne    a2a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x810>
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9c62:	4c 8d bc 24 90 02 00 	lea    r15,[rsp+0x290]
    9c69:	00 
    9c6a:	4c 89 ff             	mov    rdi,r15
    9c6d:	e8 3e 94 ff ff       	call   30b0 <std::ios_base::ios_base()@plt>
    9c72:	48 8b 15 57 1f 01 00 	mov    rdx,QWORD PTR [rip+0x11f57]        # 1bbd0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9c79:	31 c0                	xor    eax,eax
    9c7b:	31 f6                	xor    esi,esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9c7d:	66 0f ef c0          	pxor   xmm0,xmm0
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9c81:	66 89 84 24 70 03 00 	mov    WORD PTR [rsp+0x370],ax
    9c88:	00 
    9c89:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9c8d:	0f 11 84 24 78 03 00 	movups XMMWORD PTR [rsp+0x378],xmm0
    9c94:	00 
    9c95:	0f 11 84 24 88 03 00 	movups XMMWORD PTR [rsp+0x388],xmm0
    9c9c:	00 
    9c9d:	48 03 43 e8          	add    rax,QWORD PTR [rbx-0x18]
    9ca1:	4c 89 b4 24 90 02 00 	mov    QWORD PTR [rsp+0x290],r14
    9ca8:	00 
    9ca9:	48 89 c7             	mov    rdi,rax
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9cac:	48 c7 84 24 68 03 00 	mov    QWORD PTR [rsp+0x368],0x0
    9cb3:	00 00 00 00 00 
    9cb8:	48 89 9c 24 20 02 00 	mov    QWORD PTR [rsp+0x220],rbx
    9cbf:	00 
    9cc0:	48 89 10             	mov    QWORD PTR [rax],rdx
    9cc3:	e8 c8 95 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
      : __ostream_type(), _M_stringbuf(ios_base::out)
    9cc8:	48 8d 0d e1 1e 01 00 	lea    rcx,[rip+0x11ee1]        # 1bbb0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    9ccf:	66 0f 6f 64 24 10    	movdqa xmm4,XMMWORD PTR [rsp+0x10]
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    9cd5:	66 0f ef c0          	pxor   xmm0,xmm0
    9cd9:	48 89 8c 24 90 02 00 	mov    QWORD PTR [rsp+0x290],rcx
    9ce0:	00 
      _M_buf_locale(locale())
    9ce1:	48 8d 8c 24 60 02 00 	lea    rcx,[rsp+0x260]
    9ce8:	00 
    9ce9:	48 89 cf             	mov    rdi,rcx
    9cec:	48 89 4c 24 58       	mov    QWORD PTR [rsp+0x58],rcx
    9cf1:	0f 29 a4 24 20 02 00 	movaps XMMWORD PTR [rsp+0x220],xmm4
    9cf8:	00 
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    9cf9:	0f 29 84 24 30 02 00 	movaps XMMWORD PTR [rsp+0x230],xmm0
    9d00:	00 
    9d01:	0f 29 84 24 40 02 00 	movaps XMMWORD PTR [rsp+0x240],xmm0
    9d08:	00 
    9d09:	0f 29 84 24 50 02 00 	movaps XMMWORD PTR [rsp+0x250],xmm0
    9d10:	00 
      _M_buf_locale(locale())
    9d11:	e8 5a 96 ff ff       	call   3370 <std::locale::locale()@plt>
      { this->init(&_M_stringbuf); }
    9d16:	48 8d 94 24 28 02 00 	lea    rdx,[rsp+0x228]
    9d1d:	00 
    9d1e:	4c 89 ff             	mov    rdi,r15
      : __streambuf_type(), _M_mode(__mode), _M_string()
    9d21:	4c 89 ac 24 28 02 00 	mov    QWORD PTR [rsp+0x228],r13
    9d28:	00 
      { this->init(&_M_stringbuf); }
    9d29:	48 89 d6             	mov    rsi,rdx
    9d2c:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    9d31:	4c 8d ac 24 80 02 00 	lea    r13,[rsp+0x280]
    9d38:	00 
      : __streambuf_type(), _M_mode(__mode), _M_string()
    9d39:	c7 84 24 68 02 00 00 	mov    DWORD PTR [rsp+0x268],0x10
    9d40:	10 00 00 00 
    9d44:	4c 89 ac 24 70 02 00 	mov    QWORD PTR [rsp+0x270],r13
    9d4b:	00 
      { _M_string_length = __length; }
    9d4c:	48 c7 84 24 78 02 00 	mov    QWORD PTR [rsp+0x278],0x0
    9d53:	00 00 00 00 00 
    9d58:	c6 84 24 80 02 00 00 	mov    BYTE PTR [rsp+0x280],0x0
    9d5f:	00 
      { this->init(&_M_stringbuf); }
    9d60:	e8 2b 95 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
      __s.flags(__os.flags());
    9d65:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    9d6c:	00 
    9d6d:	48 8b 74 24 30       	mov    rsi,QWORD PTR [rsp+0x30]
     *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),
     *  the global C++ locale.
    */
    locale
    getloc() const
    { return _M_ios_locale; }
    9d72:	48 89 ef             	mov    rdi,rbp
    9d75:	48 03 70 e8          	add    rsi,QWORD PTR [rax-0x18]
      _M_flags = __fmtfl;
    9d79:	8b 46 18             	mov    eax,DWORD PTR [rsi+0x18]
    { return _M_ios_locale; }
    9d7c:	48 81 c6 d0 00 00 00 	add    rsi,0xd0
      _M_flags = __fmtfl;
    9d83:	89 84 24 a8 02 00 00 	mov    DWORD PTR [rsp+0x2a8],eax
    { return _M_ios_locale; }
    9d8a:	e8 01 94 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      __s.imbue(__os.getloc());
    9d8f:	48 89 ea             	mov    rdx,rbp
    9d92:	4c 89 fe             	mov    rsi,r15
    9d95:	48 8d 7c 24 78       	lea    rdi,[rsp+0x78]
    9d9a:	48 89 7c 24 68       	mov    QWORD PTR [rsp+0x68],rdi
    9d9f:	e8 ec 92 ff ff       	call   3090 <std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@plt>
    9da4:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    9da9:	e8 12 95 ff ff       	call   32c0 <std::locale::~locale()@plt>
    9dae:	48 89 ef             	mov    rdi,rbp
    9db1:	e8 0a 95 ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_insert(__f); }
    9db6:	48 8b 54 24 48       	mov    rdx,QWORD PTR [rsp+0x48]
    9dbb:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
      __s.precision(__os.precision());
    9dbf:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    9dc6:	00 
    9dc7:	f2 0f 10 02          	movsd  xmm0,QWORD PTR [rdx]
    { return _M_precision; }
    9dcb:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
      _M_precision = __prec;
    9dcf:	48 8b 84 04 a8 00 00 	mov    rax,QWORD PTR [rsp+rax*1+0xa8]
    9dd6:	00 
    9dd7:	48 89 84 24 98 02 00 	mov    QWORD PTR [rsp+0x298],rax
    9dde:	00 
    9ddf:	e8 2c 95 ff ff       	call   3310 <std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)@plt>
    9de4:	48 8b 84 24 20 02 00 	mov    rax,QWORD PTR [rsp+0x220]
    9deb:	00 
      { return _M_streambuf; }
    9dec:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    9df0:	48 8b bc 04 08 03 00 	mov    rdi,QWORD PTR [rsp+rax*1+0x308]
    9df7:	00 

      ///  Write character to streambuf.  Calls streambuf.sputc().
      ostreambuf_iterator&
      operator=(_CharT __c)
      {
	if (!_M_failed &&
    9df8:	48 85 ff             	test   rdi,rdi
    9dfb:	0f 85 17 03 00 00    	jne    a118 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x688>
      pptr() const { return _M_out_cur; }
    9e01:	48 8b 84 24 50 02 00 	mov    rax,QWORD PTR [rsp+0x250]
    9e08:	00 
      { return _M_dataplus._M_p; }
    9e09:	48 8b 94 24 70 02 00 	mov    rdx,QWORD PTR [rsp+0x270]
    9e10:	00 
	if (char_type* __pptr = this->pptr())
    9e11:	48 85 c0             	test   rax,rax
    9e14:	0f 84 96 03 00 00    	je     a1b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x720>
      egptr() const { return _M_in_end; }
    9e1a:	48 8b 8c 24 40 02 00 	mov    rcx,QWORD PTR [rsp+0x240]
    9e21:	00 
	    if (!__egptr || __pptr > __egptr)
    9e22:	48 85 c9             	test   rcx,rcx
    9e25:	0f 84 35 03 00 00    	je     a160 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6d0>
    9e2b:	48 39 c1             	cmp    rcx,rax
    9e2e:	0f 82 2c 03 00 00    	jb     a160 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6d0>
	    _M_string._M_set_length(_M_high_mark() - this->pbase());
    9e34:	48 2b 8c 24 48 02 00 	sub    rcx,QWORD PTR [rsp+0x248]
    9e3b:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    9e3c:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
    9e43:	00 
      { _M_string_length = __length; }
    9e44:	48 89 8c 24 78 02 00 	mov    QWORD PTR [rsp+0x278],rcx
    9e4b:	00 
    9e4c:	c6 04 0a 00          	mov    BYTE PTR [rdx+rcx*1],0x0
      { return _M_dataplus._M_p; }
    9e50:	48 8b 94 24 70 02 00 	mov    rdx,QWORD PTR [rsp+0x270]
    9e57:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    9e58:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
    9e5f:	00 
	if (_M_data() == _M_local_data())
    9e60:	4c 39 ea             	cmp    rdx,r13
    9e63:	0f 84 67 03 00 00    	je     a1d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x740>
      { _M_allocated_capacity = __capacity; }
    9e69:	48 8b 84 24 80 02 00 	mov    rax,QWORD PTR [rsp+0x280]
    9e70:	00 
      { _M_dataplus._M_p = __p; }
    9e71:	48 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rdx
    9e78:	00 
      { _M_allocated_capacity = __capacity; }
    9e79:	48 89 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rax
    9e80:	00 
      { return _M_string_length; }
    9e81:	48 8b 84 24 78 02 00 	mov    rax,QWORD PTR [rsp+0x278]
    9e88:	00 
	_M_sync(_M_string.data(), 0, 0);
    9e89:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    9e8e:	31 c9                	xor    ecx,ecx
    9e90:	31 d2                	xor    edx,edx
    9e92:	4c 89 ee             	mov    rsi,r13
      { _M_string_length = __length; }
    9e95:	48 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rax
    9e9c:	00 
      { _M_dataplus._M_p = __p; }
    9e9d:	4c 89 ac 24 70 02 00 	mov    QWORD PTR [rsp+0x270],r13
    9ea4:	00 
      { _M_string_length = __length; }
    9ea5:	48 c7 84 24 78 02 00 	mov    QWORD PTR [rsp+0x278],0x0
    9eac:	00 00 00 00 00 
    9eb1:	c6 84 24 80 02 00 00 	mov    BYTE PTR [rsp+0x280],0x0
    9eb8:	00 
    9eb9:	e8 b2 93 ff ff       	call   3270 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>
    operator<<(basic_ostream<_CharT, _Traits>& __os,
	       const basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 586. string inserter not a formatted function
      return __ostream_insert(__os, __str.data(), __str.size());
    9ebe:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    9ec3:	48 8b 94 24 88 00 00 	mov    rdx,QWORD PTR [rsp+0x88]
    9eca:	00 
    9ecb:	48 8b b4 24 80 00 00 	mov    rsi,QWORD PTR [rsp+0x80]
    9ed2:	00 
    9ed3:	e8 68 93 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
      { return _M_dataplus._M_p; }
    9ed8:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
    9edf:	00 
	if (_M_data() == _M_local_data())
    9ee0:	48 39 ef             	cmp    rdi,rbp
    9ee3:	74 11                	je     9ef6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x466>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    9ee5:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    9eec:	00 
    9eed:	48 8d 70 01          	lea    rsi,[rax+0x1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    9ef1:	e8 0a 93 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    9ef6:	66 0f 6f 6c 24 20    	movdqa xmm5,XMMWORD PTR [rsp+0x20]
      { return _M_dataplus._M_p; }
    9efc:	48 8b bc 24 70 02 00 	mov    rdi,QWORD PTR [rsp+0x270]
    9f03:	00 
    9f04:	48 8d 05 a5 1c 01 00 	lea    rax,[rip+0x11ca5]        # 1bbb0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    9f0b:	48 89 84 24 90 02 00 	mov    QWORD PTR [rsp+0x290],rax
    9f12:	00 
    9f13:	0f 29 ac 24 20 02 00 	movaps XMMWORD PTR [rsp+0x220],xmm5
    9f1a:	00 
	if (_M_data() == _M_local_data())
    9f1b:	4c 39 ef             	cmp    rdi,r13
    9f1e:	74 11                	je     9f31 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4a1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    9f20:	48 8b 84 24 80 02 00 	mov    rax,QWORD PTR [rsp+0x280]
    9f27:	00 
    9f28:	48 8d 70 01          	lea    rsi,[rax+0x1]
    9f2c:	e8 cf 92 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    9f31:	48 8b 7c 24 58       	mov    rdi,QWORD PTR [rsp+0x58]
    9f36:	48 8d 05 b3 1b 01 00 	lea    rax,[rip+0x11bb3]        # 1baf0 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    9f3d:	48 89 84 24 28 02 00 	mov    QWORD PTR [rsp+0x228],rax
    9f44:	00 
    9f45:	e8 76 93 ff ff       	call   32c0 <std::locale::~locale()@plt>
      ~basic_ostream() { }
    9f4a:	48 8b 43 e8          	mov    rax,QWORD PTR [rbx-0x18]
    9f4e:	48 8b 0d 7b 1c 01 00 	mov    rcx,QWORD PTR [rip+0x11c7b]        # 1bbd0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      ~basic_ios() { }
    9f55:	4c 89 ff             	mov    rdi,r15
    9f58:	48 89 9c 24 20 02 00 	mov    QWORD PTR [rsp+0x220],rbx
    9f5f:	00 
    9f60:	48 89 8c 04 20 02 00 	mov    QWORD PTR [rsp+rax*1+0x220],rcx
    9f67:	00 
    9f68:	4c 89 b4 24 90 02 00 	mov    QWORD PTR [rsp+0x290],r14
    9f6f:	00 
    9f70:	e8 5b 91 ff ff       	call   30d0 <std::ios_base::~ios_base()@plt>
      pptr() const { return _M_out_cur; }
    9f75:	48 8b 8c 24 d0 00 00 	mov    rcx,QWORD PTR [rsp+0xd0]
    9f7c:	00 
      { return _M_dataplus._M_p; }
    9f7d:	48 8b 94 24 f0 00 00 	mov    rdx,QWORD PTR [rsp+0xf0]
    9f84:	00 
	if (char_type* __pptr = this->pptr())
    9f85:	48 85 c9             	test   rcx,rcx
    9f88:	0f 84 9a 02 00 00    	je     a228 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x798>
      egptr() const { return _M_in_end; }
    9f8e:	48 8b 84 24 c0 00 00 	mov    rax,QWORD PTR [rsp+0xc0]
    9f95:	00 
	    if (!__egptr || __pptr > __egptr)
    9f96:	48 85 c0             	test   rax,rax
    9f99:	0f 84 b9 01 00 00    	je     a158 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6c8>
    9f9f:	48 39 c8             	cmp    rax,rcx
    9fa2:	0f 82 b0 01 00 00    	jb     a158 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6c8>
	    _M_string._M_set_length(_M_high_mark() - this->pbase());
    9fa8:	48 2b 84 24 c8 00 00 	sub    rax,QWORD PTR [rsp+0xc8]
    9faf:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    9fb0:	4c 8d ac 24 30 02 00 	lea    r13,[rsp+0x230]
    9fb7:	00 
      { _M_string_length = __length; }
    9fb8:	48 89 84 24 f8 00 00 	mov    QWORD PTR [rsp+0xf8],rax
    9fbf:	00 
    9fc0:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
    9fc4:	48 8b 94 24 f0 00 00 	mov    rdx,QWORD PTR [rsp+0xf0]
    9fcb:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    9fcc:	4c 89 ac 24 20 02 00 	mov    QWORD PTR [rsp+0x220],r13
    9fd3:	00 
	if (_M_data() == _M_local_data())
    9fd4:	4c 39 e2             	cmp    rdx,r12
    9fd7:	0f 84 73 02 00 00    	je     a250 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x7c0>
      { _M_allocated_capacity = __capacity; }
    9fdd:	48 8b 84 24 00 01 00 	mov    rax,QWORD PTR [rsp+0x100]
    9fe4:	00 
      { _M_dataplus._M_p = __p; }
    9fe5:	48 89 94 24 20 02 00 	mov    QWORD PTR [rsp+0x220],rdx
    9fec:	00 
      { _M_allocated_capacity = __capacity; }
    9fed:	48 89 84 24 30 02 00 	mov    QWORD PTR [rsp+0x230],rax
    9ff4:	00 
      { return _M_string_length; }
    9ff5:	48 8b 84 24 f8 00 00 	mov    rax,QWORD PTR [rsp+0xf8]
    9ffc:	00 
	_M_sync(_M_string.data(), 0, 0);
    9ffd:	48 8b 7c 24 60       	mov    rdi,QWORD PTR [rsp+0x60]
    a002:	31 c9                	xor    ecx,ecx
    a004:	31 d2                	xor    edx,edx
    a006:	4c 89 e6             	mov    rsi,r12
      { _M_string_length = __length; }
    a009:	48 89 84 24 28 02 00 	mov    QWORD PTR [rsp+0x228],rax
    a010:	00 
      { _M_dataplus._M_p = __p; }
    a011:	4c 89 a4 24 f0 00 00 	mov    QWORD PTR [rsp+0xf0],r12
    a018:	00 
      { _M_string_length = __length; }
    a019:	48 c7 84 24 f8 00 00 	mov    QWORD PTR [rsp+0xf8],0x0
    a020:	00 00 00 00 00 
    a025:	c6 84 24 00 01 00 00 	mov    BYTE PTR [rsp+0x100],0x0
    a02c:	00 
    a02d:	e8 3e 92 ff ff       	call   3270 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>
	      return __format::__write_padded_as_spec(__str, __str.size(),
    a032:	4c 8b 44 24 38       	mov    r8,QWORD PTR [rsp+0x38]
    a037:	48 8b 4c 24 40       	mov    rcx,QWORD PTR [rsp+0x40]
    a03c:	41 b9 01 00 00 00    	mov    r9d,0x1
    a042:	48 8b bc 24 20 02 00 	mov    rdi,QWORD PTR [rsp+0x220]
    a049:	00 
      { return _M_string_length; }
    a04a:	48 8b 94 24 28 02 00 	mov    rdx,QWORD PTR [rsp+0x228]
    a051:	00 
    a052:	48 89 fe             	mov    rsi,rdi
    a055:	48 89 d7             	mov    rdi,rdx
    a058:	e8 33 f8 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
      { return _M_dataplus._M_p; }
    a05d:	48 8b bc 24 20 02 00 	mov    rdi,QWORD PTR [rsp+0x220]
    a064:	00 
    a065:	48 89 c5             	mov    rbp,rax
	if (_M_data() == _M_local_data())
    a068:	4c 39 ef             	cmp    rdi,r13
    a06b:	74 11                	je     a07e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x5ee>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    a06d:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    a074:	00 
    a075:	48 8d 70 01          	lea    rsi,[rax+0x1]
    a079:	e8 82 91 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    a07e:	66 0f 6f 74 24 20    	movdqa xmm6,XMMWORD PTR [rsp+0x20]
      { return _M_dataplus._M_p; }
    a084:	48 8b bc 24 f0 00 00 	mov    rdi,QWORD PTR [rsp+0xf0]
    a08b:	00 
    a08c:	48 8d 05 1d 1b 01 00 	lea    rax,[rip+0x11b1d]        # 1bbb0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    a093:	48 89 84 24 10 01 00 	mov    QWORD PTR [rsp+0x110],rax
    a09a:	00 
    a09b:	0f 29 b4 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm6
    a0a2:	00 
	if (_M_data() == _M_local_data())
    a0a3:	4c 39 e7             	cmp    rdi,r12
    a0a6:	74 11                	je     a0b9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x629>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    a0a8:	48 8b 84 24 00 01 00 	mov    rax,QWORD PTR [rsp+0x100]
    a0af:	00 
    a0b0:	48 8d 70 01          	lea    rsi,[rax+0x1]
    a0b4:	e8 47 91 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    a0b9:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
    a0be:	48 8d 05 2b 1a 01 00 	lea    rax,[rip+0x11a2b]        # 1baf0 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    a0c5:	48 89 84 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],rax
    a0cc:	00 
    a0cd:	e8 ee 91 ff ff       	call   32c0 <std::locale::~locale()@plt>
    a0d2:	48 8b 43 e8          	mov    rax,QWORD PTR [rbx-0x18]
    a0d6:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
    a0db:	48 89 9c 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rbx
    a0e2:	00 
    a0e3:	48 8b 1d e6 1a 01 00 	mov    rbx,QWORD PTR [rip+0x11ae6]        # 1bbd0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
    a0ea:	48 89 9c 04 a0 00 00 	mov    QWORD PTR [rsp+rax*1+0xa0],rbx
    a0f1:	00 
    a0f2:	4c 89 b4 24 10 01 00 	mov    QWORD PTR [rsp+0x110],r14
    a0f9:	00 
    a0fa:	e8 d1 8f ff ff       	call   30d0 <std::ios_base::~ios_base()@plt>
	}
    a0ff:	48 81 c4 a8 03 00 00 	add    rsp,0x3a8
    a106:	48 89 e8             	mov    rax,rbp
    a109:	5b                   	pop    rbx
    a10a:	5d                   	pop    rbp
    a10b:	41 5c                	pop    r12
    a10d:	41 5d                	pop    r13
    a10f:	41 5e                	pop    r14
    a111:	41 5f                	pop    r15
    a113:	c3                   	ret
    a114:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      pptr() const { return _M_out_cur; }
    a118:	48 8b 47 28          	mov    rax,QWORD PTR [rdi+0x28]
	if (__builtin_expect(this->pptr() < this->epptr(), true))
    a11c:	48 3b 47 30          	cmp    rax,QWORD PTR [rdi+0x30]
    a120:	73 4e                	jae    a170 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6e0>
	    *this->pptr() = __c;
    a122:	c6 00 73             	mov    BYTE PTR [rax],0x73
       *  @param  __n  The delta by which to move.
       *
       *  This just advances the write position without returning any data.
      */
      void
      pbump(int __n) { _M_out_cur += __n; }
    a125:	48 83 47 28 01       	add    QWORD PTR [rdi+0x28],0x1
    a12a:	e9 d2 fc ff ff       	jmp    9e01 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x371>
    a12f:	90                   	nop
      if (!_M_hasval)
    a130:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    a135:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    a139:	48 8d 70 18          	lea    rsi,[rax+0x18]
    a13d:	74 41                	je     a180 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6f0>
      std::locale locale() { return _M_loc.value(); }
    a13f:	48 8d ac 24 80 00 00 	lea    rbp,[rsp+0x80]
    a146:	00 
    a147:	48 89 ef             	mov    rdi,rbp
    a14a:	e8 41 90 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    a14f:	e9 d8 fa ff ff       	jmp    9c2c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x19c>
    a154:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      return __pptr;  // Underlying sequence is [pbase, pptr).
    a158:	48 89 c8             	mov    rax,rcx
    a15b:	e9 48 fe ff ff       	jmp    9fa8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x518>
    a160:	48 89 c1             	mov    rcx,rax
    a163:	e9 cc fc ff ff       	jmp    9e34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3a4>
    a168:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    a16f:	00 
	  __ret = this->overflow(traits_type::to_int_type(__c));
    a170:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    a173:	be 73 00 00 00       	mov    esi,0x73
    a178:	ff 50 68             	call   QWORD PTR [rax+0x68]
    a17b:	e9 81 fc ff ff       	jmp    9e01 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x371>
    a180:	48 89 f7             	mov    rdi,rsi
    a183:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
    a187:	48 8d ac 24 80 00 00 	lea    rbp,[rsp+0x80]
    a18e:	00 
    a18f:	e8 dc 91 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    a194:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    a199:	48 8b 34 24          	mov    rsi,QWORD PTR [rsp]
      std::locale locale() { return _M_loc.value(); }
    a19d:	48 89 ef             	mov    rdi,rbp
	  _M_hasval = true;
    a1a0:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
    a1a4:	e8 e7 8f ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    a1a9:	e9 7e fa ff ff       	jmp    9c2c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x19c>
    a1ae:	66 90                	xchg   ax,ax
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a1b0:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
    a1b7:	00 
    a1b8:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
    a1bf:	00 
	if (_M_data() == _M_local_data())
    a1c0:	4c 39 ea             	cmp    rdx,r13
    a1c3:	0f 85 a0 fc ff ff    	jne    9e69 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3d9>
    a1c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	    if (_M_string_length > _S_local_capacity)
    a1d0:	48 8b 84 24 78 02 00 	mov    rax,QWORD PTR [rsp+0x278]
    a1d7:	00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a1d8:	48 89 ef             	mov    rdi,rbp
    a1db:	4c 89 e9             	mov    rcx,r13
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    a1de:	48 8d 50 01          	lea    rdx,[rax+0x1]
    a1e2:	83 fa 08             	cmp    edx,0x8
    a1e5:	0f 83 12 01 00 00    	jae    a2fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x86d>
    a1eb:	31 f6                	xor    esi,esi
    a1ed:	f6 c2 04             	test   dl,0x4
    a1f0:	74 09                	je     a1fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x76b>
    a1f2:	8b 31                	mov    esi,DWORD PTR [rcx]
    a1f4:	89 37                	mov    DWORD PTR [rdi],esi
    a1f6:	be 04 00 00 00       	mov    esi,0x4
    a1fb:	f6 c2 02             	test   dl,0x2
    a1fe:	74 0e                	je     a20e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x77e>
    a200:	44 0f b7 04 31       	movzx  r8d,WORD PTR [rcx+rsi*1]
    a205:	66 44 89 04 37       	mov    WORD PTR [rdi+rsi*1],r8w
    a20a:	48 83 c6 02          	add    rsi,0x2
    a20e:	83 e2 01             	and    edx,0x1
    a211:	0f 84 72 fc ff ff    	je     9e89 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3f9>
    a217:	0f b6 14 31          	movzx  edx,BYTE PTR [rcx+rsi*1]
    a21b:	88 14 37             	mov    BYTE PTR [rdi+rsi*1],dl
    a21e:	e9 66 fc ff ff       	jmp    9e89 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3f9>
    a223:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a228:	4c 8d ac 24 30 02 00 	lea    r13,[rsp+0x230]
    a22f:	00 
    a230:	4c 89 ac 24 20 02 00 	mov    QWORD PTR [rsp+0x220],r13
    a237:	00 
	if (_M_data() == _M_local_data())
    a238:	4c 39 e2             	cmp    rdx,r12
    a23b:	0f 85 9c fd ff ff    	jne    9fdd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x54d>
    a241:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    a248:	00 00 00 00 
    a24c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	    if (_M_string_length > _S_local_capacity)
    a250:	48 8b 84 24 f8 00 00 	mov    rax,QWORD PTR [rsp+0xf8]
    a257:	00 
    a258:	4c 89 ef             	mov    rdi,r13
    a25b:	4c 89 e1             	mov    rcx,r12
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    a25e:	48 8d 50 01          	lea    rdx,[rax+0x1]
    a262:	83 fa 08             	cmp    edx,0x8
    a265:	73 70                	jae    a2d7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x847>
    a267:	31 f6                	xor    esi,esi
    a269:	f6 c2 04             	test   dl,0x4
    a26c:	74 09                	je     a277 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x7e7>
    a26e:	8b 31                	mov    esi,DWORD PTR [rcx]
    a270:	89 37                	mov    DWORD PTR [rdi],esi
    a272:	be 04 00 00 00       	mov    esi,0x4
    a277:	f6 c2 02             	test   dl,0x2
    a27a:	74 0e                	je     a28a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x7fa>
    a27c:	44 0f b7 04 31       	movzx  r8d,WORD PTR [rcx+rsi*1]
    a281:	66 44 89 04 37       	mov    WORD PTR [rdi+rsi*1],r8w
    a286:	48 83 c6 02          	add    rsi,0x2
    a28a:	83 e2 01             	and    edx,0x1
    a28d:	0f 84 6a fd ff ff    	je     9ffd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x56d>
    a293:	0f b6 14 31          	movzx  edx,BYTE PTR [rcx+rsi*1]
    a297:	88 14 37             	mov    BYTE PTR [rdi+rsi*1],dl
    a29a:	e9 5e fd ff ff       	jmp    9ffd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x56d>
    a29f:	90                   	nop
      if (__out.width() != 0)
    a2a0:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    a2a7:	00 
    a2a8:	c6 84 24 20 02 00 00 	mov    BYTE PTR [rsp+0x220],0x2d
    a2af:	2d 
    { return _M_width; }
    a2b0:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    a2b4:	48 83 bc 04 b0 00 00 	cmp    QWORD PTR [rsp+rax*1+0xb0],0x0
    a2bb:	00 00 
    a2bd:	74 65                	je     a324 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x894>
	return __ostream_insert(__out, &__c, 1);
    a2bf:	48 8b 34 24          	mov    rsi,QWORD PTR [rsp]
    a2c3:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    a2c8:	ba 01 00 00 00       	mov    edx,0x1
    a2cd:	e8 6e 8f ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    a2d2:	e9 8b f9 ff ff       	jmp    9c62 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1d2>
    a2d7:	89 d7                	mov    edi,edx
    a2d9:	31 c9                	xor    ecx,ecx
    a2db:	83 e7 f8             	and    edi,0xfffffff8
    a2de:	89 ce                	mov    esi,ecx
    a2e0:	83 c1 08             	add    ecx,0x8
    a2e3:	4d 8b 04 34          	mov    r8,QWORD PTR [r12+rsi*1]
    a2e7:	4d 89 44 35 00       	mov    QWORD PTR [r13+rsi*1+0x0],r8
    a2ec:	39 f9                	cmp    ecx,edi
    a2ee:	72 ee                	jb     a2de <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x84e>
    a2f0:	49 8d 7c 0d 00       	lea    rdi,[r13+rcx*1+0x0]
    a2f5:	4c 01 e1             	add    rcx,r12
    a2f8:	e9 6a ff ff ff       	jmp    a267 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x7d7>
    a2fd:	89 d7                	mov    edi,edx
    a2ff:	31 c9                	xor    ecx,ecx
    a301:	83 e7 f8             	and    edi,0xfffffff8
    a304:	89 ce                	mov    esi,ecx
    a306:	83 c1 08             	add    ecx,0x8
    a309:	4d 8b 44 35 00       	mov    r8,QWORD PTR [r13+rsi*1+0x0]
    a30e:	4c 89 44 35 00       	mov    QWORD PTR [rbp+rsi*1+0x0],r8
    a313:	39 f9                	cmp    ecx,edi
    a315:	72 ed                	jb     a304 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x874>
    a317:	48 8d 7c 0d 00       	lea    rdi,[rbp+rcx*1+0x0]
    a31c:	4c 01 e9             	add    rcx,r13
    a31f:	e9 c7 fe ff ff       	jmp    a1eb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x75b>
      __out.put(__c);
    a324:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    a329:	be 2d 00 00 00       	mov    esi,0x2d
    a32e:	e8 fd 8c ff ff       	call   3030 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt>
      return __out;
    a333:	e9 2a f9 ff ff       	jmp    9c62 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1d2>
    a338:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    a33f:	00 

000000000000a340 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>:
	_M_format(const _Tp& __t, _FormatContext& __fc,
    a340:	41 57                	push   r15
    a342:	41 56                	push   r14
    a344:	41 55                	push   r13
    a346:	41 54                	push   r12
    a348:	55                   	push   rbp
    a349:	53                   	push   rbx
    a34a:	48 81 ec 58 02 00 00 	sub    rsp,0x258
      { return this->_M_str; }
    a351:	48 8b 6f 18          	mov    rbp,QWORD PTR [rdi+0x18]
      { return this->_M_str + this->_M_len; }
    a355:	4c 8b 67 10          	mov    r12,QWORD PTR [rdi+0x10]
    a359:	f3 0f 7e 05 57 17 01 	movq   xmm0,QWORD PTR [rip+0x11757]        # 1bab8 <vtable for std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >+0x28>
    a360:	00 
    a361:	4c 8d 84 24 30 01 00 	lea    r8,[rsp+0x130]
    a368:	00 
    a369:	48 89 7c 24 10       	mov    QWORD PTR [rsp+0x10],rdi
    a36e:	66 49 0f 6e d8       	movq   xmm3,r8
    a373:	49 01 ec             	add    r12,rbp
    a376:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    a37b:	88 0c 24             	mov    BYTE PTR [rsp],cl
    a37e:	66 0f 6c c3          	punpcklqdq xmm0,xmm3
	  if (__first == __last)
    a382:	49 39 ec             	cmp    r12,rbp
    a385:	0f 84 bd 0f 00 00    	je     b348 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1008>
	      if (_M_spec._M_width_kind == __format::_WP_none)
    a38b:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a390:	48 8d 9c 24 40 02 00 	lea    rbx,[rsp+0x240]
    a397:	00 
      : _M_span(__span), _M_next(__span.begin())
    a398:	48 c7 84 24 20 01 00 	mov    QWORD PTR [rsp+0x120],0x100
    a39f:	00 00 01 00 00 
    a3a4:	4c 89 84 24 28 01 00 	mov    QWORD PTR [rsp+0x128],r8
    a3ab:	00 
    a3ac:	48 89 9c 24 30 02 00 	mov    QWORD PTR [rsp+0x230],rbx
    a3b3:	00 
      { _M_string_length = __length; }
    a3b4:	48 c7 84 24 38 02 00 	mov    QWORD PTR [rsp+0x238],0x0
    a3bb:	00 00 00 00 00 
	__c1 = __c2;
    a3c0:	c6 84 24 40 02 00 00 	mov    BYTE PTR [rsp+0x240],0x0
    a3c7:	00 
      { }
    a3c8:	0f 29 84 24 10 01 00 	movaps XMMWORD PTR [rsp+0x110],xmm0
    a3cf:	00 
    a3d0:	66 f7 00 80 01       	test   WORD PTR [rax],0x180
    a3d5:	0f 84 0d 02 00 00    	je     a5e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a8>
	  bool __write_direct = false;
    a3db:	c6 44 24 5f 00       	mov    BYTE PTR [rsp+0x5f],0x0
    a3e0:	4c 8d 94 24 10 01 00 	lea    r10,[rsp+0x110]
    a3e7:	00 
		__out = __sink.out();
    a3e8:	4d 89 d7             	mov    r15,r10
	      switch (__c)
    a3eb:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
	  ++__first; // Skip leading '%' at start of chrono-specs.
    a3f0:	48 83 c5 01          	add    rbp,0x1
	  _CharT __mod{};
    a3f4:	45 31 ed             	xor    r13d,r13d
	      switch (__c)
    a3f7:	4d 89 fe             	mov    r14,r15
    a3fa:	48 89 5c 24 50       	mov    QWORD PTR [rsp+0x50],rbx
    a3ff:	90                   	nop
	      _CharT __c = *__first++;
    a400:	44 0f b6 7d 00       	movzx  r15d,BYTE PTR [rbp+0x0]
    a405:	48 8d 5d 01          	lea    rbx,[rbp+0x1]
	      switch (__c)
    a409:	41 80 ff 6a          	cmp    r15b,0x6a
    a40d:	0f 8f 3d 05 00 00    	jg     a950 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x610>
    a413:	41 80 ff 58          	cmp    r15b,0x58
    a417:	0f 8f c3 08 00 00    	jg     ace0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x9a0>
    a41d:	41 8d 47 db          	lea    eax,[r15-0x25]
    a421:	3c 33                	cmp    al,0x33
    a423:	0f 87 ab 00 00 00    	ja     a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    a429:	48 8d 0d 1c b4 00 00 	lea    rcx,[rip+0xb41c]        # 1584c <CSWTCH.1104+0x76c>
    a430:	0f b6 c0             	movzx  eax,al
    a433:	48 63 04 81          	movsxd rax,DWORD PTR [rcx+rax*4]
    a437:	48 01 c8             	add    rax,rcx
    a43a:	ff e0                	jmp    rax
    a43c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (__is_neg)
    a440:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a444:	0f 85 86 10 00 00    	jne    b4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1190>
	_S_hms(const _Tp& __t)
    a44a:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    a44f:	66 0f ef c9          	pxor   xmm1,xmm1
    a453:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    a457:	66 0f 2f c1          	comisd xmm0,xmm1
    a45b:	7a 04                	jp     a461 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x121>
    a45d:	74 0a                	je     a469 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x129>
    a45f:	77 08                	ja     a469 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x129>
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    a461:	66 0f 57 05 67 e3 00 	xorpd  xmm0,XMMWORD PTR [rip+0xe367]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x410>
    a468:	00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a469:	f2 0f 5e 05 c7 e3 00 	divsd  xmm0,QWORD PTR [rip+0xe3c7]        # 18838 <std::__unicode::__v15_1_0::__width_edges+0x478>
    a470:	00 
	    return _ToDur(static_cast<__to_rep>(
    a471:	f2 48 0f 2c d0       	cvttsd2si rdx,xmm0
	  if (__mod) [[unlikely]]
    a476:	41 80 fd 4f          	cmp    r13b,0x4f
    a47a:	0f 84 19 11 00 00    	je     b599 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1259>
	  if (__conv == _CharT('I'))
    a480:	41 80 ff 49          	cmp    r15b,0x49
    a484:	0f 84 76 10 00 00    	je     b500 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x11c0>
			 "9999999999999999") + 2 * (__n & 0x7f),
    a48a:	48 8d 04 12          	lea    rax,[rdx+rdx*1]
    a48e:	25 fe 00 00 00       	and    eax,0xfe
	};
    a493:	48 8d 15 9e af 00 00 	lea    rdx,[rip+0xaf9e]        # 15438 <CSWTCH.1104+0x358>
	  return __format::__write(std::move(__out), _S_two_digits(__i));
    a49a:	4c 89 f7             	mov    rdi,r14
    a49d:	48 c7 44 24 40 02 00 	mov    QWORD PTR [rsp+0x40],0x2
    a4a4:	00 00 
	};
    a4a6:	48 01 d0             	add    rax,rdx
    a4a9:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    a4ae:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    a4b3:	48 8b 54 24 48       	mov    rdx,QWORD PTR [rsp+0x48]
	  return __format::__write(std::move(__out), _S_two_digits(__i));
    a4b8:	48 89 c6             	mov    rsi,rax
    a4bb:	e8 20 e4 ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    a4c0:	49 89 c6             	mov    r14,rax
    a4c3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    a4ca:	00 00 00 00 
    a4ce:	66 90                	xchg   ax,ax
		  break;
    a4d0:	c6 04 24 00          	mov    BYTE PTR [rsp],0x0
      if (__pos < this->_M_len)
    a4d4:	4d 89 e7             	mov    r15,r12
    a4d7:	49 29 df             	sub    r15,rbx
    a4da:	0f 84 b0 00 00 00    	je     a590 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x250>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    a4e0:	4c 89 fa             	mov    rdx,r15
    a4e3:	be 25 00 00 00       	mov    esi,0x25
    a4e8:	48 89 df             	mov    rdi,rbx
    a4eb:	e8 30 8d ff ff       	call   3220 <memchr@plt>
	  if (__p)
    a4f0:	48 85 c0             	test   rax,rax
    a4f3:	0f 84 d7 07 00 00    	je     acd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x990>
	      if (__pos == 0)
    a4f9:	48 29 d8             	sub    rax,rbx
    a4fc:	0f 84 3e 04 00 00    	je     a940 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x600>
		  if (__pos == __str.npos)
    a502:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
    a506:	0f 84 c4 07 00 00    	je     acd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x990>
		      __first += __pos + 1;
    a50c:	48 8d 6c 03 01       	lea    rbp,[rbx+rax*1+0x1]
    a511:	49 89 c7             	mov    r15,rax
    { return __lhs.base() - __rhs.base(); }
    a514:	49 8b 7e 18          	mov    rdi,QWORD PTR [r14+0x18]
    a518:	4d 8b 6e 10          	mov    r13,QWORD PTR [r14+0x10]
    a51c:	48 89 f8             	mov    rax,rdi
    a51f:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
    a523:	49 29 c5             	sub    r13,rax
	while (__to.size() <= __s.size())
    a526:	4d 39 ef             	cmp    r15,r13
    a529:	0f 82 e9 09 00 00    	jb     af18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xbd8>
    a52f:	90                   	nop
    a530:	4d 39 ef             	cmp    r15,r13
    a533:	4c 89 ea             	mov    rdx,r13
    a536:	49 0f 46 d7          	cmovbe rdx,r15
	if (__n == 0)
    a53a:	48 85 d2             	test   rdx,rdx
    a53d:	74 08                	je     a547 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x207>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a53f:	48 89 de             	mov    rsi,rbx
    a542:	e8 69 8c ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    a547:	49 8b 06             	mov    rax,QWORD PTR [r14]
      { _M_current += __n; return *this; }
    a54a:	4d 01 6e 18          	add    QWORD PTR [r14+0x18],r13
    a54e:	4c 89 f7             	mov    rdi,r14
	this->_M_str += __n;
    a551:	4c 01 eb             	add    rbx,r13
	this->_M_len -= __n;
    a554:	4d 29 ef             	sub    r15,r13
    a557:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    a559:	49 8b 7e 18          	mov    rdi,QWORD PTR [r14+0x18]
    a55d:	4d 8b 6e 10          	mov    r13,QWORD PTR [r14+0x10]
    a561:	48 89 f8             	mov    rax,rdi
    a564:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
    a568:	49 29 c5             	sub    r13,rax
	while (__to.size() <= __s.size())
    a56b:	4d 39 ef             	cmp    r15,r13
    a56e:	73 c0                	jae    a530 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1f0>
	if (__s.size())
    a570:	4d 85 ff             	test   r15,r15
    a573:	0f 85 9f 09 00 00    	jne    af18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xbd8>
    a579:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      __mod = _CharT();
    a580:	45 31 ed             	xor    r13d,r13d
	  while (__first != __last);
    a583:	4c 39 e5             	cmp    rbp,r12
    a586:	0f 85 74 fe ff ff    	jne    a400 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xc0>
    a58c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	    if (__write_direct)
    a590:	80 7c 24 5f 00       	cmp    BYTE PTR [rsp+0x5f],0x0
    a595:	48 8b 5c 24 50       	mov    rbx,QWORD PTR [rsp+0x50]
	      return __out;
    a59a:	4c 89 f5             	mov    rbp,r14
	    if (__write_direct)
    a59d:	0f 84 8d 09 00 00    	je     af30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xbf0>
      { return _M_dataplus._M_p; }
    a5a3:	48 8b bc 24 30 02 00 	mov    rdi,QWORD PTR [rsp+0x230]
    a5aa:	00 
    class _Seq_sink final : public _Buf_sink<typename _Seq::value_type>
    a5ab:	48 8d 05 8e 13 01 00 	lea    rax,[rip+0x1138e]        # 1b940 <vtable for std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >+0x10>
    a5b2:	48 89 84 24 10 01 00 	mov    QWORD PTR [rsp+0x110],rax
    a5b9:	00 
	if (_M_data() == _M_local_data())
    a5ba:	48 39 df             	cmp    rdi,rbx
    a5bd:	74 11                	je     a5d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x290>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    a5bf:	48 8b 84 24 40 02 00 	mov    rax,QWORD PTR [rsp+0x240]
    a5c6:	00 
    a5c7:	48 8d 70 01          	lea    rsi,[rax+0x1]
    a5cb:	e8 30 8c ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    a5d0:	48 81 c4 58 02 00 00 	add    rsp,0x258
    a5d7:	48 89 e8             	mov    rax,rbp
    a5da:	5b                   	pop    rbx
    a5db:	5d                   	pop    rbp
    a5dc:	41 5c                	pop    r12
    a5de:	41 5d                	pop    r13
    a5e0:	41 5e                	pop    r14
    a5e2:	41 5f                	pop    r15
    a5e4:	c3                   	ret
    a5e5:	0f 1f 00             	nop    DWORD PTR [rax]
      iterator out() { return std::move(_M_out); }
    a5e8:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
		  __write_direct = true;
    a5ed:	c6 44 24 5f 01       	mov    BYTE PTR [rsp+0x5f],0x1
    a5f2:	4c 8b 78 10          	mov    r15,QWORD PTR [rax+0x10]
    a5f6:	e9 f0 fd ff ff       	jmp    a3eb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xab>
    a5fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		  __out = _M_R_T(__t, __print_sign(), __fc, __c == 'T');
    a600:	45 31 c0             	xor    r8d,r8d
    a603:	41 80 ff 54          	cmp    r15b,0x54
    a607:	41 0f 94 c0          	sete   r8b
	      if (__is_neg)
    a60b:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a60f:	0f 85 7b 0e 00 00    	jne    b490 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1150>
		  __out = _M_R_T(__t, __print_sign(), __fc, __c == 'T');
    a615:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    a61a:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    a61f:	4c 89 f2             	mov    rdx,r14
    a622:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    a627:	e8 44 db ff ff       	call   8170 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
		  break;
    a62c:	c6 04 24 00          	mov    BYTE PTR [rsp],0x0
		  __out = _M_R_T(__t, __print_sign(), __fc, __c == 'T');
    a630:	49 89 c6             	mov    r14,rax
		  break;
    a633:	e9 9c fe ff ff       	jmp    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
	      if (__is_neg)
    a638:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a63c:	0f 85 1e 0e 00 00    	jne    b460 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1120>
	_S_hms(const _Tp& __t)
    a642:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    a647:	66 0f ef c9          	pxor   xmm1,xmm1
    a64b:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    a64f:	66 0f 2f c1          	comisd xmm0,xmm1
    a653:	0f 8a a7 00 00 00    	jp     a700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3c0>
    a659:	74 06                	je     a661 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x321>
    a65b:	0f 86 9f 00 00 00    	jbe    a700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3c0>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a661:	f2 0f 10 15 cf e1 00 	movsd  xmm2,QWORD PTR [rip+0xe1cf]        # 18838 <std::__unicode::__v15_1_0::__width_edges+0x478>
    a668:	00 
    a669:	66 0f 28 c8          	movapd xmm1,xmm0
    a66d:	f2 0f 5e ca          	divsd  xmm1,xmm2
	    return _ToDur(static_cast<__to_rep>(
    a671:	f2 48 0f 2c c1       	cvttsd2si rax,xmm1
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    a676:	66 0f ef c9          	pxor   xmm1,xmm1
    a67a:	f2 48 0f 2a c8       	cvtsi2sd xmm1,rax
    a67f:	f2 0f 59 ca          	mulsd  xmm1,xmm2
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a683:	f2 0f 10 15 b5 e1 00 	movsd  xmm2,QWORD PTR [rip+0xe1b5]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x480>
    a68a:	00 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    a68b:	f2 0f 5c c1          	subsd  xmm0,xmm1
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a68f:	66 0f 28 c8          	movapd xmm1,xmm0
    a693:	f2 0f 5e ca          	divsd  xmm1,xmm2
	    return _ToDur(static_cast<__to_rep>(
    a697:	f2 48 0f 2c c1       	cvttsd2si rax,xmm1
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    a69c:	66 0f ef c9          	pxor   xmm1,xmm1
    a6a0:	0f b6 c0             	movzx  eax,al
    a6a3:	f2 48 0f 2a c8       	cvtsi2sd xmm1,rax
    a6a8:	f2 0f 59 ca          	mulsd  xmm1,xmm2
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    a6ac:	f2 0f 5c c1          	subsd  xmm0,xmm1
	    return _ToDur(static_cast<__to_rep>(__d.count()));
    a6b0:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
	  if (__mod) [[unlikely]] // %OS
    a6b5:	41 80 fd 4f          	cmp    r13b,0x4f
    a6b9:	0f 84 50 0f 00 00    	je     b60f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x12cf>
			 "9999999999999999") + 2 * (__n & 0x7f),
    a6bf:	48 01 c0             	add    rax,rax
	};
    a6c2:	48 8d 15 6f ad 00 00 	lea    rdx,[rip+0xad6f]        # 15438 <CSWTCH.1104+0x358>
	    __out = __format::__write(std::move(__out),
    a6c9:	4c 89 f7             	mov    rdi,r14
    a6cc:	48 c7 44 24 20 02 00 	mov    QWORD PTR [rsp+0x20],0x2
    a6d3:	00 00 
			 "9999999999999999") + 2 * (__n & 0x7f),
    a6d5:	25 fe 00 00 00       	and    eax,0xfe
	};
    a6da:	48 01 d0             	add    rax,rdx
    a6dd:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
    a6e2:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    a6e7:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
	    __out = __format::__write(std::move(__out),
    a6ec:	48 89 c6             	mov    rsi,rax
    a6ef:	e8 ec e1 ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    a6f4:	49 89 c6             	mov    r14,rax
	  return __out;
    a6f7:	e9 d4 fd ff ff       	jmp    a4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x190>
    a6fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    a700:	66 0f 57 05 c8 e0 00 	xorpd  xmm0,XMMWORD PTR [rip+0xe0c8]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x410>
    a707:	00 
    a708:	e9 54 ff ff ff       	jmp    a661 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x321>
		  __out = _M_X(__t, __print_sign(), __fc, __mod == 'E');
    a70d:	41 80 fd 45          	cmp    r13b,0x45
    a711:	41 0f 94 c5          	sete   r13b
	      if (__is_neg)
    a715:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a719:	0f 85 11 0d 00 00    	jne    b430 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x10f0>
	  auto __t = _S_floor_seconds(__tt);
    a71f:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    a724:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
	  if (!_M_spec._M_localized)
    a728:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
	  auto __t = _S_floor_seconds(__tt);
    a72d:	f2 0f 11 84 24 90 00 	movsd  QWORD PTR [rsp+0x90],xmm0
    a734:	00 00 
	  if (!_M_spec._M_localized)
    a736:	f6 00 20             	test   BYTE PTR [rax],0x20
    a739:	0f 85 b1 09 00 00    	jne    b0f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xdb0>
	    return std::locale::classic();
    a73f:	e8 5c 8b ff ff       	call   32a0 <std::locale::classic()@plt>
    a744:	48 89 c6             	mov    rsi,rax
    a747:	48 8d 84 24 98 00 00 	lea    rax,[rsp+0x98]
    a74e:	00 
    a74f:	48 89 c7             	mov    rdi,rax
    a752:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    a756:	e8 35 8a ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    a75b:	48 8d 3d 9e 1a 01 00 	lea    rdi,[rip+0x11a9e]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    a762:	e8 b9 89 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    a767:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
    a76e:	00 
    a76f:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    a773:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    a777:	0f 83 2d 10 00 00    	jae    b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
    a77d:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    a781:	48 85 ff             	test   rdi,rdi
    a784:	0f 84 20 10 00 00    	je     b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    a78a:	31 c9                	xor    ecx,ecx
    a78c:	48 8d 15 4d 14 01 00 	lea    rdx,[rip+0x1144d]        # 1bbe0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    a793:	48 8d 35 c6 13 01 00 	lea    rsi,[rip+0x113c6]        # 1bb60 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    a79a:	e8 91 8a ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    a79f:	48 85 c0             	test   rax,rax
    a7a2:	0f 84 02 10 00 00    	je     b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
	__time[0] = _M_data->_M_time_format;
    a7a8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
	  const _CharT* __rep = __time_reps[__mod];
    a7ac:	41 83 e5 01          	and    r13d,0x1
    a7b0:	f3 0f 6f 40 20       	movdqu xmm0,XMMWORD PTR [rax+0x20]
    a7b5:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    a7bc:	00 
    a7bd:	4a 8b 8c ec a0 00 00 	mov    rcx,QWORD PTR [rsp+r13*8+0xa0]
    a7c4:	00 
	  if (!*__rep)
    a7c5:	80 39 00             	cmp    BYTE PTR [rcx],0x0
    a7c8:	0f 85 52 08 00 00    	jne    b020 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xce0>
	    return _M_R_T(__t, std::move(__out), __ctx, true);
    a7ce:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    a7d3:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    a7d8:	4c 89 f2             	mov    rdx,r14
    a7db:	48 8d b4 24 90 00 00 	lea    rsi,[rsp+0x90]
    a7e2:	00 
    a7e3:	41 b8 01 00 00 00    	mov    r8d,0x1
    a7e9:	e8 82 d9 ff ff       	call   8170 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
    a7ee:	49 89 c6             	mov    r14,rax
	}
    a7f1:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    a7f5:	e8 c6 8a ff ff       	call   32c0 <std::locale::~locale()@plt>
    a7fa:	e9 d1 fc ff ff       	jmp    a4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x190>
      { return __normal_iterator(_M_current++); }
    a7ff:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    a803:	48 8d 50 01          	lea    rdx,[rax+0x1]
    a807:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    a80b:	c6 00 25             	mov    BYTE PTR [rax],0x25
    { return __lhs.base() - __rhs.base(); }
    a80e:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    a812:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    a816:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    a81a:	0f 85 b4 fc ff ff    	jne    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
	  _M_overflow();
    a820:	49 8b 06             	mov    rax,QWORD PTR [r14]
    a823:	4c 89 f7             	mov    rdi,r14
    a826:	ff 10                	call   QWORD PTR [rax]
      }
    a828:	e9 a7 fc ff ff       	jmp    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
	{ return __r; }
    a82d:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
	      if (__is_neg)
    a832:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a836:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
    a83a:	0f 85 20 0b 00 00    	jne    b360 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1020>
	_M_set(_Tp __v) noexcept
    a840:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x81
    a847:	00 81 00 00 00 
			     std::make_format_args(__args...));
    a84c:	f2 0f 11 84 24 d0 00 	movsd  QWORD PTR [rsp+0xd0],xmm0
    a853:	00 00 
      basic_format_args<_Context>::
    a855:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    a85c:	00 
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    a85d:	4c 89 f7             	mov    rdi,r14
    a860:	45 31 c0             	xor    r8d,r8d
    a863:	be 02 00 00 00       	mov    esi,0x2
    a868:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    a86f:	00 
    a870:	48 8d 15 a0 a9 00 00 	lea    rdx,[rip+0xa9a0]        # 15217 <CSWTCH.1104+0x137>
    a877:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    a87e:	00 
    a87f:	e8 2c b7 ff ff       	call   5fb0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
    a884:	49 89 c6             	mov    r14,rax
    a887:	e9 44 fc ff ff       	jmp    a4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x190>
    a88c:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a890:	0f 85 0a 0b 00 00    	jne    b3a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1060>
	_S_hms(const _Tp& __t)
    a896:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    a89b:	66 0f ef c9          	pxor   xmm1,xmm1
    a89f:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    a8a3:	66 0f 2f c1          	comisd xmm0,xmm1
    a8a7:	0f 8a 83 00 00 00    	jp     a930 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x5f0>
    a8ad:	74 02                	je     a8b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x571>
    a8af:	76 7f                	jbe    a930 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x5f0>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a8b1:	f2 0f 10 15 7f df 00 	movsd  xmm2,QWORD PTR [rip+0xdf7f]        # 18838 <std::__unicode::__v15_1_0::__width_edges+0x478>
    a8b8:	00 
    a8b9:	66 0f 28 c8          	movapd xmm1,xmm0
    a8bd:	f2 0f 5e ca          	divsd  xmm1,xmm2
	    return _ToDur(static_cast<__to_rep>(
    a8c1:	f2 48 0f 2c c1       	cvttsd2si rax,xmm1
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    a8c6:	66 0f ef c9          	pxor   xmm1,xmm1
    a8ca:	f2 48 0f 2a c8       	cvtsi2sd xmm1,rax
    a8cf:	f2 0f 59 ca          	mulsd  xmm1,xmm2
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    a8d3:	f2 0f 5c c1          	subsd  xmm0,xmm1
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a8d7:	f2 0f 5e 05 61 df 00 	divsd  xmm0,QWORD PTR [rip+0xdf61]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x480>
    a8de:	00 
	    return _ToDur(static_cast<__to_rep>(
    a8df:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
	  if (__mod) [[unlikely]] // %OM
    a8e4:	41 80 fd 4f          	cmp    r13b,0x4f
    a8e8:	0f 84 81 0d 00 00    	je     b66f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x132f>
			 "9999999999999999") + 2 * (__n & 0x7f),
    a8ee:	48 01 c0             	add    rax,rax
	};
    a8f1:	48 8d 15 40 ab 00 00 	lea    rdx,[rip+0xab40]        # 15438 <CSWTCH.1104+0x358>
	  return __format::__write(std::move(__out), _S_two_digits(__i));
    a8f8:	4c 89 f7             	mov    rdi,r14
    a8fb:	48 c7 44 24 30 02 00 	mov    QWORD PTR [rsp+0x30],0x2
    a902:	00 00 
			 "9999999999999999") + 2 * (__n & 0x7f),
    a904:	25 fe 00 00 00       	and    eax,0xfe
	};
    a909:	48 01 d0             	add    rax,rdx
    a90c:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
    a911:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    a916:	48 8b 54 24 38       	mov    rdx,QWORD PTR [rsp+0x38]
	  return __format::__write(std::move(__out), _S_two_digits(__i));
    a91b:	48 89 c6             	mov    rsi,rax
    a91e:	e8 bd df ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    a923:	49 89 c6             	mov    r14,rax
    a926:	e9 a5 fb ff ff       	jmp    a4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x190>
    a92b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    a930:	66 0f 57 05 98 de 00 	xorpd  xmm0,XMMWORD PTR [rip+0xde98]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x410>
    a937:	00 
    a938:	e9 74 ff ff ff       	jmp    a8b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x571>
    a93d:	0f 1f 00             	nop    DWORD PTR [rax]
		++__first;
    a940:	48 83 c5 02          	add    rbp,0x2
    a944:	e9 37 fc ff ff       	jmp    a580 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x240>
    a949:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      switch (__c)
    a950:	41 83 ef 6d          	sub    r15d,0x6d
    a954:	41 80 ff 10          	cmp    r15b,0x10
    a958:	0f 87 76 fb ff ff    	ja     a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    a95e:	48 8d 35 b7 af 00 00 	lea    rsi,[rip+0xafb7]        # 1591c <CSWTCH.1104+0x83c>
    a965:	45 0f b6 ff          	movzx  r15d,r15b
    a969:	4a 63 04 be          	movsxd rax,DWORD PTR [rsi+r15*4]
    a96d:	48 01 f0             	add    rax,rsi
    a970:	ff e0                	jmp    rax
    a972:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
		  __out = _M_x(__t, std::move(__out), __fc, __mod == 'E');
    a978:	45 31 c0             	xor    r8d,r8d
    a97b:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    a980:	41 80 fd 45          	cmp    r13b,0x45
    a984:	4c 89 f2             	mov    rdx,r14
    a987:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    a98c:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    a991:	41 0f 94 c0          	sete   r8b
    a995:	e8 86 dc ff ff       	call   8620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
    a99a:	49 89 c6             	mov    r14,rax
		  break;
    a99d:	e9 32 fb ff ff       	jmp    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    a9a2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      { return __normal_iterator(_M_current++); }
    a9a8:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    a9ac:	48 8d 50 01          	lea    rdx,[rax+0x1]
    a9b0:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    a9b4:	c6 00 09             	mov    BYTE PTR [rax],0x9
    { return __lhs.base() - __rhs.base(); }
    a9b7:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    a9bb:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    a9bf:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    a9c3:	0f 85 0b fb ff ff    	jne    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    a9c9:	e9 52 fe ff ff       	jmp    a820 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4e0>
    a9ce:	66 90                	xchg   ax,ax
	      if (__is_neg)
    a9d0:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a9d4:	0f 85 26 0a 00 00    	jne    b400 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x10c0>
	  auto __t = _S_floor_seconds(__tt);
    a9da:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    a9df:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
	  if (!_M_spec._M_localized)
    a9e3:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
	  auto __t = _S_floor_seconds(__tt);
    a9e8:	f2 0f 11 84 24 88 00 	movsd  QWORD PTR [rsp+0x88],xmm0
    a9ef:	00 00 
	  if (!_M_spec._M_localized)
    a9f1:	f6 00 20             	test   BYTE PTR [rax],0x20
    a9f4:	0f 85 26 07 00 00    	jne    b120 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xde0>
	    return std::locale::classic();
    a9fa:	e8 a1 88 ff ff       	call   32a0 <std::locale::classic()@plt>
    a9ff:	4c 8d ac 24 a0 00 00 	lea    r13,[rsp+0xa0]
    aa06:	00 
    aa07:	48 89 c6             	mov    rsi,rax
    aa0a:	4c 89 ef             	mov    rdi,r13
    aa0d:	e8 7e 87 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    aa12:	48 8d 3d e7 17 01 00 	lea    rdi,[rip+0x117e7]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    aa19:	e8 02 87 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    aa1e:	48 8b 94 24 a0 00 00 	mov    rdx,QWORD PTR [rsp+0xa0]
    aa25:	00 
    aa26:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    aa2a:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    aa2e:	0f 83 76 0d 00 00    	jae    b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
    aa34:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    aa38:	48 85 ff             	test   rdi,rdi
    aa3b:	0f 84 69 0d 00 00    	je     b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    aa41:	31 c9                	xor    ecx,ecx
    aa43:	48 8d 15 96 11 01 00 	lea    rdx,[rip+0x11196]        # 1bbe0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    aa4a:	48 8d 35 0f 11 01 00 	lea    rsi,[rip+0x1110f]        # 1bb60 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    aa51:	e8 da 87 ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    aa56:	48 85 c0             	test   rax,rax
    aa59:	0f 84 4b 0d 00 00    	je     b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
	__ampm_format[0] = _M_data->_M_am_pm_format;
    aa5f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
	: allocator_type(__a), _M_p(__dat) { }
    aa63:	4c 8d bc 24 e0 00 00 	lea    r15,[rsp+0xe0]
    aa6a:	00 
    aa6b:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
    aa6f:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    aa76:	00 
    aa77:	4c 89 bc 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r15
    aa7e:	00 
    aa7f:	48 89 04 24          	mov    QWORD PTR [rsp],rax
	return __builtin_strlen(__s);
    aa83:	48 89 cf             	mov    rdi,rcx
    aa86:	48 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],rcx
      { _M_string_length = __length; }
    aa8b:	48 c7 84 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],0x3
    aa92:	00 03 00 00 00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    aa97:	c7 84 24 e0 00 00 00 	mov    DWORD PTR [rsp+0xe0],0x7d3a7b
    aa9e:	7b 3a 7d 00 
	return __builtin_strlen(__s);
    aaa2:	e8 49 86 ff ff       	call   30f0 <strlen@plt>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
    aaa7:	48 8b 4c 24 60       	mov    rcx,QWORD PTR [rsp+0x60]
    aaac:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    aab0:	31 d2                	xor    edx,edx
    aab2:	49 89 c0             	mov    r8,rax
    aab5:	be 02 00 00 00       	mov    esi,0x2
    aaba:	e8 91 99 ff ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
				 std::make_format_args<_FormatContext>(__t));
    aabf:	48 8d 84 24 88 00 00 	lea    rax,[rsp+0x88]
    aac6:	00 
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    aac7:	4c 89 f7             	mov    rdi,r14
    aaca:	45 31 c0             	xor    r8d,r8d
    aacd:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
    aad4:	00 
    aad5:	48 8d 05 d4 0c 00 00 	lea    rax,[rip+0xcd4]        # b7b0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    aadc:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    aae3:	00 
    aae4:	48 8b 94 24 d0 00 00 	mov    rdx,QWORD PTR [rsp+0xd0]
    aaeb:	00 
    aaec:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    aaf3:	00 
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    aaf4:	48 8b 84 24 d8 00 00 	mov    rax,QWORD PTR [rsp+0xd8]
    aafb:	00 
    aafc:	48 89 8c 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rcx
    ab03:	00 
    ab04:	48 8d 8c 24 b0 00 00 	lea    rcx,[rsp+0xb0]
    ab0b:	00 
    ab0c:	48 c7 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],0xd1
    ab13:	00 d1 00 00 00 
    ab18:	48 89 c6             	mov    rsi,rax
    ab1b:	e8 90 b4 ff ff       	call   5fb0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
      { return _M_dataplus._M_p; }
    ab20:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    ab27:	00 
    ab28:	49 89 c6             	mov    r14,rax
	if (_M_data() == _M_local_data())
    ab2b:	4c 39 ff             	cmp    rdi,r15
    ab2e:	74 11                	je     ab41 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x801>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    ab30:	48 8b 84 24 e0 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    ab37:	00 
    ab38:	48 8d 70 01          	lea    rsi,[rax+0x1]
    ab3c:	e8 bf 86 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    ab41:	4c 89 ef             	mov    rdi,r13
    ab44:	e8 77 87 ff ff       	call   32c0 <std::locale::~locale()@plt>
		  break;
    ab49:	c6 04 24 00          	mov    BYTE PTR [rsp],0x0
    ab4d:	e9 82 f9 ff ff       	jmp    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    ab52:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	return __format::__write(std::move(__out), __s);
    ab58:	4c 89 f7             	mov    rdi,r14
    ab5b:	be 01 00 00 00       	mov    esi,0x1
    ab60:	48 8d 15 b3 a6 00 00 	lea    rdx,[rip+0xa6b3]        # 1521a <CSWTCH.1104+0x13a>
    ab67:	e8 74 dd ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    ab6c:	49 89 c6             	mov    r14,rax
		  break;
    ab6f:	e9 60 f9 ff ff       	jmp    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    ab74:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	_S_hms(const _Tp& __t)
    ab78:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    ab7d:	66 0f ef c9          	pxor   xmm1,xmm1
    ab81:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    ab85:	66 0f 2f c1          	comisd xmm0,xmm1
    ab89:	0f 8a 31 01 00 00    	jp     acc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x980>
    ab8f:	74 06                	je     ab97 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x857>
    ab91:	0f 86 29 01 00 00    	jbe    acc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x980>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    ab97:	f2 0f 5e 05 99 dc 00 	divsd  xmm0,QWORD PTR [rip+0xdc99]        # 18838 <std::__unicode::__v15_1_0::__width_edges+0x478>
    ab9e:	00 
	    return _ToDur(static_cast<__to_rep>(
    ab9f:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
    aba4:	48 89 44 24 60       	mov    QWORD PTR [rsp+0x60],rax
	  if (!_M_spec._M_localized)
    aba9:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    abae:	f6 00 20             	test   BYTE PTR [rax],0x20
    abb1:	0f 85 39 04 00 00    	jne    aff0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xcb0>
	    return std::locale::classic();
    abb7:	e8 e4 86 ff ff       	call   32a0 <std::locale::classic()@plt>
    abbc:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
    abc3:	00 
    abc4:	48 89 c6             	mov    rsi,rax
    abc7:	4c 89 ef             	mov    rdi,r13
    abca:	e8 c1 85 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    abcf:	48 8d 3d 2a 16 01 00 	lea    rdi,[rip+0x1162a]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    abd6:	e8 45 85 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    abdb:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    abe2:	00 
    abe3:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    abe7:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    abeb:	0f 83 b9 0b 00 00    	jae    b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
    abf1:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    abf5:	48 85 ff             	test   rdi,rdi
    abf8:	0f 84 ac 0b 00 00    	je     b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    abfe:	31 c9                	xor    ecx,ecx
    ac00:	48 8d 15 d9 0f 01 00 	lea    rdx,[rip+0x10fd9]        # 1bbe0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    ac07:	48 8d 35 52 0f 01 00 	lea    rsi,[rip+0x10f52]        # 1bb60 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    ac0e:	e8 1d 86 ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    ac13:	48 85 c0             	test   rax,rax
    ac16:	0f 84 8e 0b 00 00    	je     b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
	__ampm[0] = _M_data->_M_am;
    ac1c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    ac20:	4c 89 f7             	mov    rdi,r14
    ac23:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    ac2a:	00 
    ac2b:	be 02 00 00 00       	mov    esi,0x2
    ac30:	48 8d 15 e0 a5 00 00 	lea    rdx,[rip+0xa5e0]        # 15217 <CSWTCH.1104+0x137>
    ac37:	f3 0f 6f 40 40       	movdqu xmm0,XMMWORD PTR [rax+0x40]
	    _M_set(static_cast<_Td>(__v));
    ac3c:	31 c0                	xor    eax,eax
    ac3e:	48 83 7c 24 60 0b    	cmp    QWORD PTR [rsp+0x60],0xb
    ac44:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0xa1
    ac4b:	00 a1 00 00 00 
    ac50:	0f 9f c0             	setg   al
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    ac53:	45 31 c0             	xor    r8d,r8d
    ac56:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    ac5d:	00 
			     std::make_format_args(__args...));
    ac5e:	48 8b 84 c4 b0 00 00 	mov    rax,QWORD PTR [rsp+rax*8+0xb0]
    ac65:	00 
    ac66:	48 89 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],rax
    ac6d:	00 
      basic_format_args<_Context>::
    ac6e:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    ac75:	00 
    ac76:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    ac7d:	00 
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    ac7e:	e8 2d b3 ff ff       	call   5fb0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
	}
    ac83:	4c 89 ef             	mov    rdi,r13
    ac86:	49 89 c6             	mov    r14,rax
    ac89:	e8 32 86 ff ff       	call   32c0 <std::locale::~locale()@plt>
		  break;
    ac8e:	e9 41 f8 ff ff       	jmp    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    ac93:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      { return __normal_iterator(_M_current++); }
    ac98:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    ac9c:	48 8d 50 01          	lea    rdx,[rax+0x1]
    aca0:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    aca4:	c6 00 0a             	mov    BYTE PTR [rax],0xa
    { return __lhs.base() - __rhs.base(); }
    aca7:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    acab:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    acaf:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    acb3:	0f 85 1b f8 ff ff    	jne    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    acb9:	e9 62 fb ff ff       	jmp    a820 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4e0>
    acbe:	66 90                	xchg   ax,ax
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    acc0:	66 0f 57 05 08 db 00 	xorpd  xmm0,XMMWORD PTR [rip+0xdb08]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x410>
    acc7:	00 
    acc8:	e9 ca fe ff ff       	jmp    ab97 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x857>
    accd:	0f 1f 00             	nop    DWORD PTR [rax]
		  if (__pos == __str.npos)
    acd0:	4c 89 e5             	mov    rbp,r12
    acd3:	e9 3c f8 ff ff       	jmp    a514 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1d4>
    acd8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    acdf:	00 
	      switch (__c)
    ace0:	41 8d 4f a7          	lea    ecx,[r15-0x59]
    ace4:	b8 01 00 00 00       	mov    eax,0x1
    ace9:	48 d3 e0             	shl    rax,cl
    acec:	a9 03 db 00 00       	test   eax,0xdb03
    acf1:	0f 85 57 0a 00 00    	jne    b74e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x140e>
    acf7:	41 80 ff 6a          	cmp    r15b,0x6a
    acfb:	0f 84 d8 01 00 00    	je     aed9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xb99>
    ad01:	41 80 ff 63          	cmp    r15b,0x63
    ad05:	0f 85 c9 f7 ff ff    	jne    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
    ad0b:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
		  __out = _M_c(__t, std::move(__out), __fc, __mod == 'E');
    ad10:	41 80 fd 45          	cmp    r13b,0x45
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    ad14:	4c 8d ac 24 e0 00 00 	lea    r13,[rsp+0xe0]
    ad1b:	00 
      { _M_string_length = __length; }
    ad1c:	48 c7 84 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],0x0
    ad23:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    ad28:	4c 89 ac 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r13
    ad2f:	00 
    ad30:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
	  if (!_M_spec._M_localized)
    ad34:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
		  __out = _M_c(__t, std::move(__out), __fc, __mod == 'E');
    ad39:	0f 94 44 24 60       	sete   BYTE PTR [rsp+0x60]
	__c1 = __c2;
    ad3e:	c6 84 24 e0 00 00 00 	mov    BYTE PTR [rsp+0xe0],0x0
    ad45:	00 
	  auto __t = _S_floor_seconds(__tt);
    ad46:	f2 0f 11 44 24 70    	movsd  QWORD PTR [rsp+0x70],xmm0
	  if (!_M_spec._M_localized)
    ad4c:	f6 00 20             	test   BYTE PTR [rax],0x20
    ad4f:	0f 85 fb 03 00 00    	jne    b150 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe10>
	    return std::locale::classic();
    ad55:	e8 46 85 ff ff       	call   32a0 <std::locale::classic()@plt>
    ad5a:	48 89 c6             	mov    rsi,rax
    ad5d:	48 8d 44 24 78       	lea    rax,[rsp+0x78]
    ad62:	48 89 c7             	mov    rdi,rax
    ad65:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
    ad6a:	e8 21 84 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    ad6f:	48 8d 3d 8a 14 01 00 	lea    rdi,[rip+0x1148a]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    ad76:	e8 a5 83 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    ad7b:	48 8b 54 24 78       	mov    rdx,QWORD PTR [rsp+0x78]
    ad80:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    ad84:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    ad88:	0f 83 1c 0a 00 00    	jae    b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
    ad8e:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    ad92:	48 85 ff             	test   rdi,rdi
    ad95:	0f 84 0f 0a 00 00    	je     b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    ad9b:	31 c9                	xor    ecx,ecx
    ad9d:	48 8d 15 3c 0e 01 00 	lea    rdx,[rip+0x10e3c]        # 1bbe0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    ada4:	48 8d 35 b5 0d 01 00 	lea    rsi,[rip+0x10db5]        # 1bb60 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    adab:	e8 80 84 ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    adb0:	48 85 c0             	test   rax,rax
    adb3:	0f 84 f1 09 00 00    	je     b7aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146a>
	__dt[0] = _M_data->_M_date_time_format;
    adb9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
      { return _M_string_length; }
    adbd:	48 8b 94 24 d8 00 00 	mov    rdx,QWORD PTR [rsp+0xd8]
    adc4:	00 
    adc5:	f3 0f 6f 40 30       	movdqu xmm0,XMMWORD PTR [rax+0x30]
	  if (*__formats[__mod]) [[likely]]
    adca:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
    adcf:	83 e0 01             	and    eax,0x1
    add2:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    add9:	00 
    adda:	4c 8b bc c4 a0 00 00 	mov    r15,QWORD PTR [rsp+rax*8+0xa0]
    ade1:	00 
    ade2:	41 80 3f 00          	cmp    BYTE PTR [r15],0x0
    ade6:	0f 84 e7 08 00 00    	je     b6d3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1393>
	return _M_replace(size_type(0), this->size(), __s,
    adec:	4c 8d 8c 24 d0 00 00 	lea    r9,[rsp+0xd0]
    adf3:	00 
    adf4:	41 b8 04 00 00 00    	mov    r8d,0x4
    adfa:	48 8d 0d d9 a3 00 00 	lea    rcx,[rip+0xa3d9]        # 151da <CSWTCH.1104+0xfa>
    ae01:	31 f6                	xor    esi,esi
    ae03:	4c 89 cf             	mov    rdi,r9
    ae06:	4c 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],r9
    ae0b:	e8 40 96 ff ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
	return __builtin_strlen(__s);
    ae10:	4c 89 ff             	mov    rdi,r15
    ae13:	e8 d8 82 ff ff       	call   30f0 <strlen@plt>
      { return _M_string_length; }
    ae18:	48 8b 8c 24 d8 00 00 	mov    rcx,QWORD PTR [rsp+0xd8]
    ae1f:	00 
	if (__pos > this->size())
    ae20:	4c 8b 4c 24 60       	mov    r9,QWORD PTR [rsp+0x60]
    ae25:	49 89 c0             	mov    r8,rax
    ae28:	48 83 f9 02          	cmp    rcx,0x2
    ae2c:	0f 86 5e 09 00 00    	jbe    b790 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1450>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
    ae32:	4c 89 f9             	mov    rcx,r15
    ae35:	31 d2                	xor    edx,edx
    ae37:	be 03 00 00 00       	mov    esi,0x3
    ae3c:	4c 89 cf             	mov    rdi,r9
    ae3f:	e8 0c 96 ff ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
				 std::make_format_args<_FormatContext>(__t));
    ae44:	48 8d 44 24 70       	lea    rax,[rsp+0x70]
      return __format::__do_vformat_to(std::move(__out), __fmt, __args, &__loc);
    ae49:	4c 8b 7c 24 68       	mov    r15,QWORD PTR [rsp+0x68]
    ae4e:	4c 89 f7             	mov    rdi,r14
    ae51:	48 8b 94 24 d0 00 00 	mov    rdx,QWORD PTR [rsp+0xd0]
    ae58:	00 
    ae59:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
    ae60:	00 
    ae61:	48 8d 05 48 09 00 00 	lea    rax,[rip+0x948]        # b7b0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    ae68:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    ae6f:	00 
    ae70:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    ae77:	00 
    ae78:	4d 89 f8             	mov    r8,r15
    ae7b:	48 8b 84 24 d8 00 00 	mov    rax,QWORD PTR [rsp+0xd8]
    ae82:	00 
    ae83:	48 89 8c 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rcx
    ae8a:	00 
    ae8b:	48 8d 8c 24 b0 00 00 	lea    rcx,[rsp+0xb0]
    ae92:	00 
    ae93:	48 c7 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],0xd1
    ae9a:	00 d1 00 00 00 
    ae9f:	48 89 c6             	mov    rsi,rax
    aea2:	e8 09 b1 ff ff       	call   5fb0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
	}
    aea7:	4c 89 ff             	mov    rdi,r15
    aeaa:	49 89 c6             	mov    r14,rax
    aead:	e8 0e 84 ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_dataplus._M_p; }
    aeb2:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    aeb9:	00 
	if (_M_data() == _M_local_data())
    aeba:	4c 39 ef             	cmp    rdi,r13
    aebd:	0f 84 11 f6 ff ff    	je     a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    aec3:	48 8b 84 24 e0 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    aeca:	00 
    aecb:	48 8d 70 01          	lea    rsi,[rax+0x1]
    aecf:	e8 2c 83 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
		  break;
    aed4:	e9 fb f5 ff ff       	jmp    a4d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x194>
	      if (__is_neg)
    aed9:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    aedd:	0f 85 ed 04 00 00    	jne    b3d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1090>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    aee3:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    aee8:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x41
    aeef:	00 41 00 00 00 
    aef4:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
    aef8:	f2 0f 5e 05 48 d9 00 	divsd  xmm0,QWORD PTR [rip+0xd948]        # 18848 <std::__unicode::__v15_1_0::__width_edges+0x488>
    aeff:	00 
	    return _ToDur(static_cast<__to_rep>(
    af00:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
	      unsigned __d = chrono::duration_cast<chrono::days>(__t).count();
    af05:	89 84 24 d0 00 00 00 	mov    DWORD PTR [rsp+0xd0],eax
      basic_format_args<_Context>::
    af0c:	e9 44 f9 ff ff       	jmp    a855 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x515>
    af11:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    af18:	4c 89 fa             	mov    rdx,r15
    af1b:	48 89 de             	mov    rsi,rbx
    af1e:	e8 8d 82 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    af23:	4d 01 7e 18          	add    QWORD PTR [r14+0x18],r15
    af27:	e9 54 f6 ff ff       	jmp    a580 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x240>
    af2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      { return _M_string_length; }
    af30:	48 8b bc 24 38 02 00 	mov    rdi,QWORD PTR [rsp+0x238]
    af37:	00 
      : _M_current(__i) { }
    af38:	48 8b 8c 24 18 01 00 	mov    rcx,QWORD PTR [rsp+0x118]
    af3f:	00 
    { return __lhs.base() - __rhs.base(); }
    af40:	48 8b 94 24 28 01 00 	mov    rdx,QWORD PTR [rsp+0x128]
    af47:	00 
    af48:	48 89 fe             	mov    rsi,rdi
	if (this->_M_used().size() != 0)
    af4b:	48 39 d1             	cmp    rcx,rdx
    af4e:	0f 85 37 02 00 00    	jne    b18b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe4b>
      { return _M_dataplus._M_p; }
    af54:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    af5b:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    af5c:	48 8d 94 24 e0 00 00 	lea    rdx,[rsp+0xe0]
    af63:	00 
    af64:	48 89 94 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],rdx
    af6b:	00 
	if (_M_data() == _M_local_data())
    af6c:	48 39 d8             	cmp    rax,rbx
    af6f:	0f 84 db 05 00 00    	je     b550 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1210>
      { _M_allocated_capacity = __capacity; }
    af75:	48 8b 94 24 40 02 00 	mov    rdx,QWORD PTR [rsp+0x240]
    af7c:	00 
      { _M_dataplus._M_p = __p; }
    af7d:	48 89 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],rax
    af84:	00 
      { return _M_string_length; }
    af85:	48 89 fe             	mov    rsi,rdi
      { _M_allocated_capacity = __capacity; }
    af88:	48 89 94 24 e0 00 00 	mov    QWORD PTR [rsp+0xe0],rdx
    af8f:	00 
	  return __format::__write_padded_as_spec(__str, __str.size(),
    af90:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
    af95:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    af9a:	48 89 f7             	mov    rdi,rsi
    af9d:	48 89 f2             	mov    rdx,rsi
      { _M_string_length = __length; }
    afa0:	48 89 b4 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],rsi
    afa7:	00 
    afa8:	48 89 c6             	mov    rsi,rax
    afab:	41 b9 01 00 00 00    	mov    r9d,0x1
      { _M_dataplus._M_p = __p; }
    afb1:	48 89 9c 24 30 02 00 	mov    QWORD PTR [rsp+0x230],rbx
    afb8:	00 
      { _M_string_length = __length; }
    afb9:	48 c7 84 24 38 02 00 	mov    QWORD PTR [rsp+0x238],0x0
    afc0:	00 00 00 00 00 
	__c1 = __c2;
    afc5:	c6 84 24 40 02 00 00 	mov    BYTE PTR [rsp+0x240],0x0
    afcc:	00 
    afcd:	e8 be e8 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
      { _M_dispose(); }
    afd2:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
    afd9:	00 
    afda:	48 89 c5             	mov    rbp,rax
    afdd:	e8 0e a9 ff ff       	call   58f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
    afe2:	e9 bc f5 ff ff       	jmp    a5a3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x263>
    afe7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    afee:	00 00 
      if (!_M_hasval)
    aff0:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    aff5:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    aff9:	4c 8d 78 18          	lea    r15,[rax+0x18]
    affd:	0f 84 00 03 00 00    	je     b303 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xfc3>
      std::locale locale() { return _M_loc.value(); }
    b003:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
    b00a:	00 
    b00b:	4c 89 fe             	mov    rsi,r15
    b00e:	4c 89 ef             	mov    rdi,r13
    b011:	e8 7a 81 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    b016:	e9 b4 fb ff ff       	jmp    abcf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x88f>
    b01b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	: allocator_type(__a), _M_p(__dat) { }
    b020:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    b027:	00 
	return __builtin_strlen(__s);
    b028:	48 89 cf             	mov    rdi,rcx
    b02b:	48 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],rcx
    b030:	4c 8d ac 24 e0 00 00 	lea    r13,[rsp+0xe0]
    b037:	00 
    b038:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
    b03d:	4c 89 ac 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r13
    b044:	00 
      { _M_string_length = __length; }
    b045:	48 c7 84 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],0x3
    b04c:	00 03 00 00 00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    b051:	c7 84 24 e0 00 00 00 	mov    DWORD PTR [rsp+0xe0],0x7d3a7b
    b058:	7b 3a 7d 00 
	return __builtin_strlen(__s);
    b05c:	e8 8f 80 ff ff       	call   30f0 <strlen@plt>
	if (this->max_size() - (this->size() - __n1) < __n2)
    b061:	48 8b 4c 24 60       	mov    rcx,QWORD PTR [rsp+0x60]
    b066:	49 89 c0             	mov    r8,rax
    b069:	48 b8 fd ff ff ff ff 	movabs rax,0x7ffffffffffffffd
    b070:	ff ff 7f 
    b073:	49 39 c0             	cmp    r8,rax
    b076:	0f 84 c6 06 00 00    	je     b742 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1402>
      const size_type __new_size = __old_size + __len2 - __len1;
    b07c:	4d 8d 78 03          	lea    r15,[r8+0x3]
      if (__new_size <= this->capacity())
    b080:	49 83 ff 0f          	cmp    r15,0xf
    b084:	0f 87 a7 01 00 00    	ja     b231 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xef1>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    b08a:	4c 39 e9             	cmp    rcx,r13
    b08d:	72 11                	jb     b0a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xd60>
    b08f:	48 8d 84 24 e3 00 00 	lea    rax,[rsp+0xe3]
    b096:	00 
    b097:	48 39 c8             	cmp    rax,rcx
    b09a:	0f 83 b3 06 00 00    	jae    b753 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1413>
    b0a0:	4c 89 e8             	mov    rax,r13
	      if (__how_much && __len1 != __len2)
    b0a3:	4d 85 c0             	test   r8,r8
    b0a6:	0f 84 a8 01 00 00    	je     b254 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf14>
	__c1 = __c2;
    b0ac:	42 c6 84 04 e2 00 00 	mov    BYTE PTR [rsp+r8*1+0xe2],0x7d
    b0b3:	00 7d 
	if (__n == 1)
    b0b5:	49 83 f8 01          	cmp    r8,0x1
    b0b9:	0f 84 68 04 00 00    	je     b527 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x11e7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    b0bf:	4c 89 c2             	mov    rdx,r8
    b0c2:	48 8d bc 24 e2 00 00 	lea    rdi,[rsp+0xe2]
    b0c9:	00 
    b0ca:	48 89 ce             	mov    rsi,rcx
    b0cd:	4c 89 44 24 60       	mov    QWORD PTR [rsp+0x60],r8
    b0d2:	e8 d9 80 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
    b0d7:	48 8b 84 24 d0 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    b0de:	00 
      }
    b0df:	4c 8b 44 24 60       	mov    r8,QWORD PTR [rsp+0x60]
    b0e4:	e9 6b 01 00 00       	jmp    b254 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf14>
    b0e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      if (!_M_hasval)
    b0f0:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b0f5:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    b0f9:	4c 8d 78 18          	lea    r15,[rax+0x18]
    b0fd:	0f 84 2c 02 00 00    	je     b32f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xfef>
      std::locale locale() { return _M_loc.value(); }
    b103:	48 8d 84 24 98 00 00 	lea    rax,[rsp+0x98]
    b10a:	00 
    b10b:	4c 89 fe             	mov    rsi,r15
    b10e:	48 89 c7             	mov    rdi,rax
    b111:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    b115:	e8 76 80 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    b11a:	e9 3c f6 ff ff       	jmp    a75b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x41b>
    b11f:	90                   	nop
      if (!_M_hasval)
    b120:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b125:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    b129:	4c 8d 78 18          	lea    r15,[rax+0x18]
    b12d:	0f 84 e6 01 00 00    	je     b319 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xfd9>
      std::locale locale() { return _M_loc.value(); }
    b133:	4c 8d ac 24 a0 00 00 	lea    r13,[rsp+0xa0]
    b13a:	00 
    b13b:	4c 89 fe             	mov    rsi,r15
    b13e:	4c 89 ef             	mov    rdi,r13
    b141:	e8 4a 80 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    b146:	e9 c7 f8 ff ff       	jmp    aa12 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6d2>
    b14b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      if (!_M_hasval)
    b150:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b155:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    b159:	4c 8d 78 18          	lea    r15,[rax+0x18]
    b15d:	0f 84 8a 01 00 00    	je     b2ed <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xfad>
      std::locale locale() { return _M_loc.value(); }
    b163:	48 8d 44 24 78       	lea    rax,[rsp+0x78]
    b168:	4c 89 fe             	mov    rsi,r15
    b16b:	48 89 c7             	mov    rdi,rax
    b16e:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
    b173:	e8 18 80 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    b178:	e9 f2 fb ff ff       	jmp    ad6f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xa2f>
    b17d:	0f 1f 00             	nop    DWORD PTR [rax]
	      switch (__c)
    b180:	45 89 fd             	mov    r13d,r15d
    b183:	48 89 dd             	mov    rbp,rbx
    b186:	e9 f8 f3 ff ff       	jmp    a583 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x243>
	if (this->max_size() - (this->size() - __n1) < __n2)
    b18b:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    b192:	ff ff 7f 
    b195:	48 29 ca             	sub    rdx,rcx
    b198:	48 29 f8             	sub    rax,rdi
    b19b:	48 39 d0             	cmp    rax,rdx
    b19e:	0f 82 e0 05 00 00    	jb     b784 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1444>
      { return _M_dataplus._M_p; }
    b1a4:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    b1ab:	00 
      const size_type __len = __n + this->size();
    b1ac:	48 8d 2c 3a          	lea    rbp,[rdx+rdi*1]
	if (_M_data() == _M_local_data())
    b1b0:	48 39 d8             	cmp    rax,rbx
    b1b3:	0f 84 7f 05 00 00    	je     b738 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x13f8>
	return _M_is_local() ? size_type(_S_local_capacity)
    b1b9:	48 8b b4 24 40 02 00 	mov    rsi,QWORD PTR [rsp+0x240]
    b1c0:	00 
      if (__len <= this->capacity())
    b1c1:	48 39 ee             	cmp    rsi,rbp
    b1c4:	0f 82 2a 05 00 00    	jb     b6f4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x13b4>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    b1ca:	48 01 c7             	add    rdi,rax
	if (__n == 1)
    b1cd:	48 83 fa 01          	cmp    rdx,0x1
    b1d1:	0f 84 67 03 00 00    	je     b53e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x11fe>
    b1d7:	48 89 ce             	mov    rsi,rcx
    b1da:	e8 d1 7f ff ff       	call   31b0 <memcpy@plt>
	__c1 = __c2;
    b1df:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    b1e6:	00 
      { _M_string_length = __length; }
    b1e7:	48 89 ac 24 38 02 00 	mov    QWORD PTR [rsp+0x238],rbp
    b1ee:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    b1ef:	48 8d 94 24 e0 00 00 	lea    rdx,[rsp+0xe0]
    b1f6:	00 
    b1f7:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
      { _M_next = _M_span.begin(); }
    b1fb:	48 8b 84 24 18 01 00 	mov    rax,QWORD PTR [rsp+0x118]
    b202:	00 
    b203:	48 89 94 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],rdx
    b20a:	00 
    b20b:	48 89 84 24 28 01 00 	mov    QWORD PTR [rsp+0x128],rax
    b212:	00 
      { return _M_dataplus._M_p; }
    b213:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    b21a:	00 
	if (_M_data() == _M_local_data())
    b21b:	48 39 d8             	cmp    rax,rbx
    b21e:	0f 84 24 03 00 00    	je     b548 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1208>
    b224:	48 8b bc 24 38 02 00 	mov    rdi,QWORD PTR [rsp+0x238]
    b22b:	00 
    b22c:	e9 44 fd ff ff       	jmp    af75 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xc35>
	this->_M_mutate(__pos, __len1, __s, __len2);
    b231:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    b236:	31 d2                	xor    edx,edx
    b238:	be 02 00 00 00       	mov    esi,0x2
    b23d:	4c 89 44 24 60       	mov    QWORD PTR [rsp+0x60],r8
    b242:	e8 19 c3 ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
    b247:	48 8b 84 24 d0 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    b24e:	00 
    b24f:	4c 8b 44 24 60       	mov    r8,QWORD PTR [rsp+0x60]
      { _M_string_length = __length; }
    b254:	4c 89 bc 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],r15
    b25b:	00 
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    b25c:	4c 89 f7             	mov    rdi,r14
    b25f:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    b266:	00 
    b267:	42 c6 44 00 03 00    	mov    BYTE PTR [rax+r8*1+0x3],0x0
    b26d:	45 31 c0             	xor    r8d,r8d
				 std::make_format_args<_FormatContext>(__t));
    b270:	48 8d 84 24 90 00 00 	lea    rax,[rsp+0x90]
    b277:	00 
    b278:	48 8b 94 24 d0 00 00 	mov    rdx,QWORD PTR [rsp+0xd0]
    b27f:	00 
    b280:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
    b287:	00 
    b288:	48 8d 05 21 05 00 00 	lea    rax,[rip+0x521]        # b7b0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    b28f:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    b296:	00 
    b297:	48 8b 84 24 d8 00 00 	mov    rax,QWORD PTR [rsp+0xd8]
    b29e:	00 
    b29f:	48 89 8c 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rcx
    b2a6:	00 
    b2a7:	48 8d 8c 24 b0 00 00 	lea    rcx,[rsp+0xb0]
    b2ae:	00 
    b2af:	48 c7 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],0xd1
    b2b6:	00 d1 00 00 00 
    b2bb:	48 89 c6             	mov    rsi,rax
    b2be:	e8 ed ac ff ff       	call   5fb0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
      { return _M_dataplus._M_p; }
    b2c3:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    b2ca:	00 
    b2cb:	49 89 c6             	mov    r14,rax
	if (_M_data() == _M_local_data())
    b2ce:	4c 39 ef             	cmp    rdi,r13
    b2d1:	0f 84 1a f5 ff ff    	je     a7f1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4b1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    b2d7:	48 8b 84 24 e0 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    b2de:	00 
    b2df:	48 8d 70 01          	lea    rsi,[rax+0x1]
    b2e3:	e8 18 7f ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dispose(); }
    b2e8:	e9 04 f5 ff ff       	jmp    a7f1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4b1>
    b2ed:	4c 89 ff             	mov    rdi,r15
    b2f0:	e8 7b 80 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    b2f5:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b2fa:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
    b2fe:	e9 60 fe ff ff       	jmp    b163 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe23>
    b303:	4c 89 ff             	mov    rdi,r15
    b306:	e8 65 80 ff ff       	call   3370 <std::locale::locale()@plt>
    b30b:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b310:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
    b314:	e9 ea fc ff ff       	jmp    b003 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xcc3>
    b319:	4c 89 ff             	mov    rdi,r15
    b31c:	e8 4f 80 ff ff       	call   3370 <std::locale::locale()@plt>
    b321:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b326:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
    b32a:	e9 04 fe ff ff       	jmp    b133 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xdf3>
    b32f:	4c 89 ff             	mov    rdi,r15
    b332:	e8 39 80 ff ff       	call   3370 <std::locale::locale()@plt>
    b337:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b33c:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
    b340:	e9 be fd ff ff       	jmp    b103 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xdc3>
    b345:	0f 1f 00             	nop    DWORD PTR [rax]
	    return _M_format_to_ostream(__t, __fc, __is_neg);
    b348:	0f b6 c9             	movzx  ecx,cl
    b34b:	e8 40 e7 ff ff       	call   9a90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
    b350:	48 89 c5             	mov    rbp,rax
    b353:	e9 78 f2 ff ff       	jmp    a5d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x290>
    b358:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    b35f:	00 
      { return __normal_iterator(_M_current++); }
    b360:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b364:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b368:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b36c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b36f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b373:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b377:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b37b:	0f 85 bf f4 ff ff    	jne    a840 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x500>
	  _M_overflow();
    b381:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b384:	f2 0f 11 04 24       	movsd  QWORD PTR [rsp],xmm0
    b389:	4c 89 f7             	mov    rdi,r14
    b38c:	ff 10                	call   QWORD PTR [rax]
    b38e:	f2 0f 10 04 24       	movsd  xmm0,QWORD PTR [rsp]
      }
    b393:	e9 a8 f4 ff ff       	jmp    a840 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x500>
    b398:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    b39f:	00 
      { return __normal_iterator(_M_current++); }
    b3a0:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b3a4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b3a8:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b3ac:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b3af:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b3b3:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b3b7:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b3bb:	0f 85 d5 f4 ff ff    	jne    a896 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x556>
	  _M_overflow();
    b3c1:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b3c4:	4c 89 f7             	mov    rdi,r14
    b3c7:	ff 10                	call   QWORD PTR [rax]
      }
    b3c9:	e9 c8 f4 ff ff       	jmp    a896 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x556>
    b3ce:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b3d0:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b3d4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b3d8:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b3dc:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b3df:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b3e3:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b3e7:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b3eb:	0f 85 f2 fa ff ff    	jne    aee3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xba3>
	  _M_overflow();
    b3f1:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b3f4:	4c 89 f7             	mov    rdi,r14
    b3f7:	ff 10                	call   QWORD PTR [rax]
      }
    b3f9:	e9 e5 fa ff ff       	jmp    aee3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xba3>
    b3fe:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b400:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b404:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b408:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b40c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b40f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b413:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b417:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b41b:	0f 85 b9 f5 ff ff    	jne    a9da <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x69a>
	  _M_overflow();
    b421:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b424:	4c 89 f7             	mov    rdi,r14
    b427:	ff 10                	call   QWORD PTR [rax]
      }
    b429:	e9 ac f5 ff ff       	jmp    a9da <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x69a>
    b42e:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b430:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b434:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b438:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b43c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b43f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b443:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b447:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b44b:	0f 85 ce f2 ff ff    	jne    a71f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3df>
	  _M_overflow();
    b451:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b454:	4c 89 f7             	mov    rdi,r14
    b457:	ff 10                	call   QWORD PTR [rax]
      }
    b459:	e9 c1 f2 ff ff       	jmp    a71f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3df>
    b45e:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b460:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b464:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b468:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b46c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b46f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b473:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b477:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b47b:	0f 85 c1 f1 ff ff    	jne    a642 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x302>
	  _M_overflow();
    b481:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b484:	4c 89 f7             	mov    rdi,r14
    b487:	ff 10                	call   QWORD PTR [rax]
      }
    b489:	e9 b4 f1 ff ff       	jmp    a642 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x302>
    b48e:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b490:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b494:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b498:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b49c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b49f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b4a3:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b4a7:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b4ab:	0f 85 64 f1 ff ff    	jne    a615 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2d5>
	  _M_overflow();
    b4b1:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b4b4:	44 89 04 24          	mov    DWORD PTR [rsp],r8d
    b4b8:	4c 89 f7             	mov    rdi,r14
    b4bb:	ff 10                	call   QWORD PTR [rax]
    b4bd:	44 8b 04 24          	mov    r8d,DWORD PTR [rsp]
      }
    b4c1:	e9 4f f1 ff ff       	jmp    a615 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2d5>
    b4c6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    b4cd:	00 00 00 
      { return __normal_iterator(_M_current++); }
    b4d0:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b4d4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b4d8:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b4dc:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b4df:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b4e3:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b4e7:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b4eb:	0f 85 59 ef ff ff    	jne    a44a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x10a>
	  _M_overflow();
    b4f1:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b4f4:	4c 89 f7             	mov    rdi,r14
    b4f7:	ff 10                	call   QWORD PTR [rax]
      }
    b4f9:	e9 4c ef ff ff       	jmp    a44a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x10a>
    b4fe:	66 90                	xchg   ax,ax
    b500:	b8 18 00 00 00       	mov    eax,0x18
	      if (__i == 0)
    b505:	85 d2                	test   edx,edx
    b507:	0f 84 86 ef ff ff    	je     a493 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x153>
	      else if (__i > 12)
    b50d:	83 fa 0c             	cmp    edx,0xc
    b510:	0f 8e 74 ef ff ff    	jle    a48a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x14a>
			 "9999999999999999") + 2 * (__n & 0x7f),
    b516:	8d 84 12 e8 00 00 00 	lea    eax,[rdx+rdx*1+0xe8]
    b51d:	25 fe 00 00 00       	and    eax,0xfe
    b522:	e9 6c ef ff ff       	jmp    a493 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x153>
    b527:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    b52a:	88 84 24 e2 00 00 00 	mov    BYTE PTR [rsp+0xe2],al
      { return _M_dataplus._M_p; }
    b531:	48 8b 84 24 d0 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    b538:	00 
      }
    b539:	e9 16 fd ff ff       	jmp    b254 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf14>
	__c1 = __c2;
    b53e:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    b541:	88 07                	mov    BYTE PTR [rdi],al
      }
    b543:	e9 97 fc ff ff       	jmp    b1df <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe9f>
	    if (_M_string_length > _S_local_capacity)
    b548:	48 8b b4 24 38 02 00 	mov    rsi,QWORD PTR [rsp+0x238]
    b54f:	00 
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    b550:	48 8d 46 01          	lea    rax,[rsi+0x1]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    b554:	49 89 d0             	mov    r8,rdx
    b557:	48 89 d9             	mov    rcx,rbx
    b55a:	83 f8 08             	cmp    eax,0x8
    b55d:	0f 83 ae 01 00 00    	jae    b711 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x13d1>
    b563:	31 ff                	xor    edi,edi
    b565:	a8 04                	test   al,0x4
    b567:	74 0a                	je     b573 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1233>
    b569:	8b 39                	mov    edi,DWORD PTR [rcx]
    b56b:	41 89 38             	mov    DWORD PTR [r8],edi
    b56e:	bf 04 00 00 00       	mov    edi,0x4
    b573:	a8 02                	test   al,0x2
    b575:	74 0e                	je     b585 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1245>
    b577:	44 0f b7 0c 39       	movzx  r9d,WORD PTR [rcx+rdi*1]
    b57c:	66 45 89 0c 38       	mov    WORD PTR [r8+rdi*1],r9w
    b581:	48 83 c7 02          	add    rdi,0x2
    b585:	a8 01                	test   al,0x1
    b587:	74 08                	je     b591 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1251>
    b589:	0f b6 04 39          	movzx  eax,BYTE PTR [rcx+rdi*1]
    b58d:	41 88 04 38          	mov    BYTE PTR [r8+rdi*1],al
    b591:	48 89 d0             	mov    rax,rdx
    b594:	e9 f7 f9 ff ff       	jmp    af90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xc50>
	      struct tm __tm{};
    b599:	66 0f ef c0          	pxor   xmm0,xmm0
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b59d:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    b5a2:	4c 8d ac 24 c0 00 00 	lea    r13,[rsp+0xc0]
    b5a9:	00 
	      struct tm __tm{};
    b5aa:	48 c7 84 24 00 01 00 	mov    QWORD PTR [rsp+0x100],0x0
    b5b1:	00 00 00 00 00 
    b5b6:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    b5bd:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b5be:	4c 89 ef             	mov    rdi,r13
	      __tm.tm_hour = __i;
    b5c1:	89 94 24 d8 00 00 00 	mov    DWORD PTR [rsp+0xd8],edx
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b5c8:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
	      struct tm __tm{};
    b5cd:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    b5d4:	00 
    b5d5:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    b5dc:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b5dd:	e8 ae d3 ff ff       	call   8990 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    b5e2:	41 0f be cf          	movsx  ecx,r15b
    b5e6:	48 8d 94 24 d0 00 00 	lea    rdx,[rsp+0xd0]
    b5ed:	00 
    b5ee:	41 b8 4f 00 00 00    	mov    r8d,0x4f
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b5f4:	4c 89 f7             	mov    rdi,r14
    b5f7:	4c 89 ee             	mov    rsi,r13
    b5fa:	e8 71 87 ff ff       	call   3d70 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]>
    b5ff:	4c 89 ef             	mov    rdi,r13
    b602:	49 89 c6             	mov    r14,rax
    b605:	e8 b6 7c ff ff       	call   32c0 <std::locale::~locale()@plt>
    b60a:	e9 c1 ee ff ff       	jmp    a4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x190>
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b60f:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    b614:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
	      struct tm __tm{};
    b619:	66 0f ef c0          	pxor   xmm0,xmm0
	      __tm.tm_sec = (int)__hms.seconds().count();
    b61d:	0f b6 c0             	movzx  eax,al
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b620:	4c 8d ac 24 c0 00 00 	lea    r13,[rsp+0xc0]
    b627:	00 
	      __tm.tm_sec = (int)__hms.seconds().count();
    b628:	89 84 24 d0 00 00 00 	mov    DWORD PTR [rsp+0xd0],eax
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b62f:	4c 89 ef             	mov    rdi,r13
	      struct tm __tm{};
    b632:	0f 11 84 24 d4 00 00 	movups XMMWORD PTR [rsp+0xd4],xmm0
    b639:	00 
    b63a:	c7 84 24 04 01 00 00 	mov    DWORD PTR [rsp+0x104],0x0
    b641:	00 00 00 00 
    b645:	0f 11 84 24 e4 00 00 	movups XMMWORD PTR [rsp+0xe4],xmm0
    b64c:	00 
    b64d:	0f 11 84 24 f4 00 00 	movups XMMWORD PTR [rsp+0xf4],xmm0
    b654:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b655:	e8 36 d3 ff ff       	call   8990 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    b65a:	41 b8 4f 00 00 00    	mov    r8d,0x4f
    b660:	b9 53 00 00 00       	mov    ecx,0x53
    b665:	48 8d 94 24 d0 00 00 	lea    rdx,[rsp+0xd0]
    b66c:	00 
    b66d:	eb 85                	jmp    b5f4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x12b4>
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b66f:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    b674:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
	      struct tm __tm{};
    b679:	66 0f ef c0          	pxor   xmm0,xmm0
	      __tm.tm_min = __i;
    b67d:	0f b6 c0             	movzx  eax,al
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b680:	4c 8d ac 24 c0 00 00 	lea    r13,[rsp+0xc0]
    b687:	00 
	      struct tm __tm{};
    b688:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    b68f:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b690:	4c 89 ef             	mov    rdi,r13
	      __tm.tm_min = __i;
    b693:	89 84 24 d4 00 00 00 	mov    DWORD PTR [rsp+0xd4],eax
	      struct tm __tm{};
    b69a:	48 c7 84 24 00 01 00 	mov    QWORD PTR [rsp+0x100],0x0
    b6a1:	00 00 00 00 00 
    b6a6:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    b6ad:	00 
    b6ae:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    b6b5:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b6b6:	e8 d5 d2 ff ff       	call   8990 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    b6bb:	41 b8 4f 00 00 00    	mov    r8d,0x4f
    b6c1:	b9 4d 00 00 00       	mov    ecx,0x4d
    b6c6:	48 8d 94 24 d0 00 00 	lea    rdx,[rsp+0xd0]
    b6cd:	00 
    b6ce:	e9 21 ff ff ff       	jmp    b5f4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x12b4>
	return _M_replace(size_type(0), this->size(), __s,
    b6d3:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
    b6da:	00 
    b6db:	41 b8 12 00 00 00    	mov    r8d,0x12
    b6e1:	48 8d 0d 0d 9b 00 00 	lea    rcx,[rip+0x9b0d]        # 151f5 <CSWTCH.1104+0x115>
    b6e8:	31 f6                	xor    esi,esi
    b6ea:	e8 61 8d ff ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  traits_type::length(__s));
    b6ef:	e9 50 f7 ff ff       	jmp    ae44 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xb04>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    b6f4:	48 8d 84 24 30 02 00 	lea    rax,[rsp+0x230]
    b6fb:	00 
    b6fc:	49 89 d0             	mov    r8,rdx
    b6ff:	48 89 fe             	mov    rsi,rdi
    b702:	31 d2                	xor    edx,edx
    b704:	48 89 c7             	mov    rdi,rax
    b707:	e8 54 be ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    b70c:	e9 ce fa ff ff       	jmp    b1df <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe9f>
    b711:	41 89 c0             	mov    r8d,eax
    b714:	31 c9                	xor    ecx,ecx
    b716:	41 83 e0 f8          	and    r8d,0xfffffff8
    b71a:	89 cf                	mov    edi,ecx
    b71c:	83 c1 08             	add    ecx,0x8
    b71f:	4c 8b 0c 3b          	mov    r9,QWORD PTR [rbx+rdi*1]
    b723:	4c 89 0c 3a          	mov    QWORD PTR [rdx+rdi*1],r9
    b727:	44 39 c1             	cmp    ecx,r8d
    b72a:	72 ee                	jb     b71a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x13da>
    b72c:	4c 8d 04 0a          	lea    r8,[rdx+rcx*1]
    b730:	48 01 d9             	add    rcx,rbx
    b733:	e9 2b fe ff ff       	jmp    b563 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1223>
	return _M_is_local() ? size_type(_S_local_capacity)
    b738:	be 0f 00 00 00       	mov    esi,0xf
    b73d:	e9 7f fa ff ff       	jmp    b1c1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe81>
	  __throw_length_error(__N(__s));
    b742:	48 8d 3d 2c 9a 00 00 	lea    rdi,[rip+0x9a2c]        # 15175 <CSWTCH.1104+0x95>
    b749:	e8 e2 79 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    b74e:	e8 fd 79 ff ff       	call   3150 <abort@plt>
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
    b753:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    b758:	41 b9 01 00 00 00    	mov    r9d,0x1
    b75e:	31 d2                	xor    edx,edx
    b760:	4c 89 44 24 60       	mov    QWORD PTR [rsp+0x60],r8
    b765:	48 8d b4 24 e2 00 00 	lea    rsi,[rsp+0xe2]
    b76c:	00 
    b76d:	e8 3e 7b ff ff       	call   32b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>
      { return _M_dataplus._M_p; }
    b772:	48 8b 84 24 d0 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    b779:	00 
    b77a:	4c 8b 44 24 60       	mov    r8,QWORD PTR [rsp+0x60]
    b77f:	e9 d0 fa ff ff       	jmp    b254 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf14>
	  __throw_length_error(__N(__s));
    b784:	48 8d 3d 30 9a 00 00 	lea    rdi,[rip+0x9a30]        # 151bb <CSWTCH.1104+0xdb>
    b78b:	e8 a0 79 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    b790:	ba 03 00 00 00       	mov    edx,0x3
    b795:	48 8d 35 43 9a 00 00 	lea    rsi,[rip+0x9a43]        # 151df <CSWTCH.1104+0xff>
    b79c:	48 8d 3d 25 9c 00 00 	lea    rdi,[rip+0x9c25]        # 153c8 <CSWTCH.1104+0x2e8>
    b7a3:	31 c0                	xor    eax,eax
    b7a5:	e8 36 7b ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
      __throw_bad_cast();
    b7aa:	e8 b1 7a ff ff       	call   3260 <std::__throw_bad_cast()@plt>
    b7af:	90                   	nop

000000000000b7b0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>:
	  _S_format(basic_format_parse_context<_CharT>& __parse_ctx,
    b7b0:	41 55                	push   r13
    b7b2:	41 54                	push   r12
    b7b4:	49 89 d4             	mov    r12,rdx
    {
      constexpr typename basic_format_parse_context<_CharT>::iterator
      parse(basic_format_parse_context<_CharT>& __pc)
      {
	using namespace __format;
	auto __it = _M_f._M_parse(__pc, _Duration|_TimeOfDay);
    b7b7:	ba 90 00 00 00       	mov    edx,0x90
    b7bc:	55                   	push   rbp
    b7bd:	48 89 fd             	mov    rbp,rdi
    b7c0:	53                   	push   rbx
    b7c1:	48 89 f3             	mov    rbx,rsi
    b7c4:	48 89 fe             	mov    rsi,rdi
    b7c7:	48 83 ec 38          	sub    rsp,0x38
    b7cb:	4c 8d 6c 24 10       	lea    r13,[rsp+0x10]
    struct _Spec
    b7d0:	c7 44 24 18 20 00 00 	mov    DWORD PTR [rsp+0x18],0x20
    b7d7:	00 
      : _M_len{0}, _M_str{nullptr}
    b7d8:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
    b7df:	00 00 
    b7e1:	4c 89 ef             	mov    rdi,r13
    b7e4:	48 c7 44 24 28 00 00 	mov    QWORD PTR [rsp+0x28],0x0
    b7eb:	00 00 
    b7ed:	e8 5e b8 ff ff       	call   7050 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)>
      advance_to(const_iterator __it) noexcept
    b7f2:	f2 41 0f 10 04 24    	movsd  xmm0,QWORD PTR [r12]
    b7f8:	66 0f ef c9          	pxor   xmm1,xmm1
      { _M_begin = __it; }
    b7fc:	48 89 45 00          	mov    QWORD PTR [rbp+0x0],rax
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    b800:	66 0f 2f c1          	comisd xmm0,xmm1
    b804:	7a 04                	jp     b80a <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)+0x5a>
    b806:	74 02                	je     b80a <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)+0x5a>
    b808:	76 26                	jbe    b830 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)+0x80>
		    return _M_f._M_format(__ud, __fc, true);
		  }
		else
		  return _M_f._M_format(-__d, __fc, true);
	      }
	  return _M_f._M_format(__d, __fc, false);
    b80a:	48 89 da             	mov    rdx,rbx
    b80d:	4c 89 e6             	mov    rsi,r12
    b810:	4c 89 ef             	mov    rdi,r13
    b813:	31 c9                	xor    ecx,ecx
    b815:	e8 26 eb ff ff       	call   a340 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
    b81a:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	  }
    b81e:	48 83 c4 38          	add    rsp,0x38
    b822:	5b                   	pop    rbx
    b823:	5d                   	pop    rbp
    b824:	41 5c                	pop    r12
    b826:	41 5d                	pop    r13
    b828:	c3                   	ret
    b829:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  return _M_f._M_format(-__d, __fc, true);
    b830:	48 8d 74 24 08       	lea    rsi,[rsp+0x8]
    b835:	48 89 da             	mov    rdx,rbx
    b838:	4c 89 ef             	mov    rdi,r13
    b83b:	b9 01 00 00 00       	mov    ecx,0x1
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    b840:	66 0f 57 05 88 cf 00 	xorpd  xmm0,XMMWORD PTR [rip+0xcf88]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x410>
    b847:	00 
    b848:	f2 0f 11 44 24 08    	movsd  QWORD PTR [rsp+0x8],xmm0
    b84e:	e8 ed ea ff ff       	call   a340 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
    b853:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	  }
    b857:	48 83 c4 38          	add    rsp,0x38
    b85b:	5b                   	pop    rbx
    b85c:	5d                   	pop    rbp
    b85d:	41 5c                	pop    r12
    b85f:	41 5d                	pop    r13
    b861:	c3                   	ret
    b862:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    b869:	00 00 00 
    b86c:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    b873:	00 00 00 
    b876:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    b87d:	00 00 00 

000000000000b880 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)>:
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
    b880:	41 55                	push   r13
    b882:	41 89 f2             	mov    r10d,esi
    b885:	4c 89 c6             	mov    rsi,r8
    b888:	41 54                	push   r12
    b88a:	55                   	push   rbp
    b88b:	48 89 fd             	mov    rbp,rdi
    b88e:	48 89 d7             	mov    rdi,rdx
    b891:	53                   	push   rbx
		   const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
    b892:	48 0f be 02          	movsx  rax,BYTE PTR [rdx]
	     && static_cast<signed char>(__gbeg[__idx]) > 0
    b896:	8d 50 ff             	lea    edx,[rax-0x1]
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    b899:	80 fa 7d             	cmp    dl,0x7d
    b89c:	0f 87 5e 01 00 00    	ja     ba00 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x180>
      while (__last - __first > __gbeg[__idx]
    b8a2:	4c 89 ca             	mov    rdx,r9
    b8a5:	4c 29 c2             	sub    rdx,r8
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    b8a8:	48 39 c2             	cmp    rdx,rax
    b8ab:	0f 8e 4f 01 00 00    	jle    ba00 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x180>
	{
	  __last -= __gbeg[__idx];
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
    b8b1:	4c 8d 59 ff          	lea    r11,[rcx-0x1]
      size_t __idx = 0;
    b8b5:	45 31 c0             	xor    r8d,r8d
      size_t __ctr = 0;
    b8b8:	31 c9                	xor    ecx,ecx
    b8ba:	eb 23                	jmp    b8df <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x5f>
    b8bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
    b8c0:	49 83 c0 01          	add    r8,0x1
      while (__last - __first > __gbeg[__idx]
    b8c4:	4a 8d 1c 07          	lea    rbx,[rdi+r8*1]
    b8c8:	48 0f be 03          	movsx  rax,BYTE PTR [rbx]
	     && static_cast<signed char>(__gbeg[__idx]) > 0
    b8cc:	8d 50 ff             	lea    edx,[rax-0x1]
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    b8cf:	80 fa 7d             	cmp    dl,0x7d
    b8d2:	77 27                	ja     b8fb <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x7b>
      while (__last - __first > __gbeg[__idx]
    b8d4:	4c 89 ca             	mov    rdx,r9
    b8d7:	48 29 f2             	sub    rdx,rsi
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    b8da:	48 39 c2             	cmp    rdx,rax
    b8dd:	7e 1c                	jle    b8fb <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x7b>
	  __last -= __gbeg[__idx];
    b8df:	49 29 c1             	sub    r9,rax
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
    b8e2:	4d 39 d8             	cmp    r8,r11
    b8e5:	72 d9                	jb     b8c0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x40>
      while (__last - __first > __gbeg[__idx]
    b8e7:	4a 8d 1c 07          	lea    rbx,[rdi+r8*1]
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
    b8eb:	48 83 c1 01          	add    rcx,0x1
      while (__last - __first > __gbeg[__idx]
    b8ef:	48 0f be 03          	movsx  rax,BYTE PTR [rbx]
	     && static_cast<signed char>(__gbeg[__idx]) > 0
    b8f3:	8d 50 ff             	lea    edx,[rax-0x1]
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    b8f6:	80 fa 7d             	cmp    dl,0x7d
    b8f9:	76 d9                	jbe    b8d4 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x54>
	}

      while (__first != __last)
	*__s++ = *__first++;

      while (__ctr--)
    b8fb:	4c 8d 61 ff          	lea    r12,[rcx-0x1]
	  *__s++ = __sep;	  
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
	    *__s++ = *__first++;
	}

      while (__idx--)
    b8ff:	4d 8d 58 ff          	lea    r11,[r8-0x1]
      while (__first != __last)
    b903:	4c 39 ce             	cmp    rsi,r9
    b906:	0f 84 17 01 00 00    	je     ba23 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x1a3>
    b90c:	4d 89 cd             	mov    r13,r9
      size_t __idx = 0;
    b90f:	31 c0                	xor    eax,eax
    b911:	49 29 f5             	sub    r13,rsi
    b914:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    b91b:	00 00 00 00 
    b91f:	90                   	nop
	*__s++ = *__first++;
    b920:	0f b6 14 06          	movzx  edx,BYTE PTR [rsi+rax*1]
    b924:	88 54 05 00          	mov    BYTE PTR [rbp+rax*1+0x0],dl
      while (__first != __last)
    b928:	48 83 c0 01          	add    rax,0x1
    b92c:	4c 39 e8             	cmp    rax,r13
    b92f:	75 ef                	jne    b920 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xa0>
    b931:	48 89 ea             	mov    rdx,rbp
    b934:	48 29 f2             	sub    rdx,rsi
    b937:	4c 01 ca             	add    rdx,r9
      while (__ctr--)
    b93a:	48 85 c9             	test   rcx,rcx
    b93d:	74 41                	je     b980 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x100>
    b93f:	90                   	nop
	  *__s++ = __sep;	  
    b940:	44 88 12             	mov    BYTE PTR [rdx],r10b
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    b943:	0f b6 33             	movzx  esi,BYTE PTR [rbx]
	  *__s++ = __sep;	  
    b946:	48 8d 6a 01          	lea    rbp,[rdx+0x1]
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    b94a:	40 84 f6             	test   sil,sil
    b94d:	0f 8e a5 00 00 00    	jle    b9f8 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x178>
    b953:	31 c0                	xor    eax,eax
    b955:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    b95c:	00 00 00 00 
	    *__s++ = *__first++;
    b960:	41 0f b6 0c 01       	movzx  ecx,BYTE PTR [r9+rax*1]
    b965:	88 4c 02 01          	mov    BYTE PTR [rdx+rax*1+0x1],cl
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    b969:	48 83 c0 01          	add    rax,0x1
    b96d:	48 39 f0             	cmp    rax,rsi
    b970:	75 ee                	jne    b960 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xe0>
    b972:	48 8d 54 05 00       	lea    rdx,[rbp+rax*1+0x0]
    b977:	49 01 c1             	add    r9,rax
      while (__ctr--)
    b97a:	49 83 ec 01          	sub    r12,0x1
    b97e:	73 c0                	jae    b940 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xc0>
      while (__idx--)
    b980:	4d 85 c0             	test   r8,r8
    b983:	74 5d                	je     b9e2 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x162>
    b985:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    b98c:	00 00 00 00 
	{
	  *__s++ = __sep;	  
    b990:	44 88 12             	mov    BYTE PTR [rdx],r10b
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    b993:	42 0f b6 34 1f       	movzx  esi,BYTE PTR [rdi+r11*1]
	  *__s++ = __sep;	  
    b998:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    b99c:	40 84 f6             	test   sil,sil
    b99f:	7e 4f                	jle    b9f0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x170>
    b9a1:	44 8d 46 ff          	lea    r8d,[rsi-0x1]
    b9a5:	31 c0                	xor    eax,eax
    b9a7:	45 0f b6 c0          	movzx  r8d,r8b
    b9ab:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    b9b2:	00 00 00 00 
    b9b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    b9bd:	00 00 00 
	    *__s++ = *__first++;
    b9c0:	41 0f b6 0c 01       	movzx  ecx,BYTE PTR [r9+rax*1]
    b9c5:	88 4c 02 01          	mov    BYTE PTR [rdx+rax*1+0x1],cl
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    b9c9:	48 83 c0 01          	add    rax,0x1
    b9cd:	48 39 c6             	cmp    rsi,rax
    b9d0:	75 ee                	jne    b9c0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x140>
    b9d2:	4a 8d 54 03 01       	lea    rdx,[rbx+r8*1+0x1]
    b9d7:	4f 8d 4c 01 01       	lea    r9,[r9+r8*1+0x1]
      while (__idx--)
    b9dc:	49 83 eb 01          	sub    r11,0x1
    b9e0:	73 ae                	jae    b990 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x110>
	}

      return __s;
    }
    b9e2:	5b                   	pop    rbx
    b9e3:	48 89 d0             	mov    rax,rdx
    b9e6:	5d                   	pop    rbp
    b9e7:	41 5c                	pop    r12
    b9e9:	41 5d                	pop    r13
    b9eb:	c3                   	ret
    b9ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  *__s++ = __sep;	  
    b9f0:	48 89 da             	mov    rdx,rbx
    b9f3:	eb e7                	jmp    b9dc <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x15c>
    b9f5:	0f 1f 00             	nop    DWORD PTR [rax]
	  *__s++ = __sep;	  
    b9f8:	48 89 ea             	mov    rdx,rbp
    b9fb:	e9 7a ff ff ff       	jmp    b97a <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xfa>
      while (__first != __last)
    ba00:	48 89 ea             	mov    rdx,rbp
    ba03:	49 39 f1             	cmp    r9,rsi
    ba06:	74 da                	je     b9e2 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x162>
      while (__last - __first > __gbeg[__idx]
    ba08:	48 89 fb             	mov    rbx,rdi
      while (__first != __last)
    ba0b:	49 c7 c3 ff ff ff ff 	mov    r11,0xffffffffffffffff
      size_t __ctr = 0;
    ba12:	31 c9                	xor    ecx,ecx
      size_t __idx = 0;
    ba14:	45 31 c0             	xor    r8d,r8d
      while (__first != __last)
    ba17:	49 c7 c4 ff ff ff ff 	mov    r12,0xffffffffffffffff
    ba1e:	e9 e9 fe ff ff       	jmp    b90c <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x8c>
    ba23:	48 89 ea             	mov    rdx,rbp
    ba26:	e9 0f ff ff ff       	jmp    b93a <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xba>
    ba2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ba30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	_M_format_int(string_view __narrow_str, size_t __prefix_len,
    ba30:	55                   	push   rbp
    ba31:	49 89 f3             	mov    r11,rsi
    ba34:	49 89 d1             	mov    r9,rdx
    ba37:	48 89 e5             	mov    rbp,rsp
    ba3a:	41 57                	push   r15
    ba3c:	4d 89 c7             	mov    r15,r8
    ba3f:	41 56                	push   r14
    ba41:	41 55                	push   r13
    ba43:	41 54                	push   r12
    ba45:	53                   	push   rbx
    ba46:	48 89 fb             	mov    rbx,rdi
    ba49:	48 81 ec 88 00 00 00 	sub    rsp,0x88
	  if (_M_width_kind == _WP_value)
    ba50:	0f b7 07             	movzx  eax,WORD PTR [rdi]
	_M_format_int(string_view __narrow_str, size_t __prefix_len,
    ba53:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
	  if (_M_width_kind == _WP_value)
    ba57:	66 25 80 01          	and    ax,0x180
    ba5b:	66 3d 80 00          	cmp    ax,0x80
    ba5f:	74 3f                	je     baa0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x70>
	  else if (_M_width_kind == _WP_from_arg)
    ba61:	66 3d 00 01          	cmp    ax,0x100
    ba65:	0f 84 ad 02 00 00    	je     bd18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e8>
	    __str = __narrow_str;
    ba6b:	49 89 f5             	mov    r13,rsi
    ba6e:	49 89 d4             	mov    r12,rdx
	  if (_M_spec._M_localized)
    ba71:	f6 07 20             	test   BYTE PTR [rdi],0x20
    ba74:	0f 85 de 00 00 00    	jne    bb58 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x128>
    ba7a:	4d 8b 78 10          	mov    r15,QWORD PTR [r8+0x10]
	  if (__str.size())
    ba7e:	4d 85 ed             	test   r13,r13
    ba81:	0f 85 21 03 00 00    	jne    bda8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x378>
	}
    ba87:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
    ba8b:	4c 89 f8             	mov    rax,r15
    ba8e:	5b                   	pop    rbx
    ba8f:	41 5c                	pop    r12
    ba91:	41 5d                	pop    r13
    ba93:	41 5e                	pop    r14
    ba95:	41 5f                	pop    r15
    ba97:	5d                   	pop    rbp
    ba98:	c3                   	ret
    ba99:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	    __width = _M_width;
    baa0:	44 0f b7 77 04       	movzx  r14d,WORD PTR [rdi+0x4]
	    __str = __narrow_str;
    baa5:	4d 89 dd             	mov    r13,r11
    baa8:	4d 89 cc             	mov    r12,r9
	  if (_M_spec._M_localized)
    baab:	f6 03 20             	test   BYTE PTR [rbx],0x20
    baae:	0f 85 a7 00 00 00    	jne    bb5b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x12b>
      iterator out() { return std::move(_M_out); }
    bab4:	4d 8b 7f 10          	mov    r15,QWORD PTR [r15+0x10]
	  if (__width <= __str.size())
    bab8:	4d 39 f5             	cmp    r13,r14
    babb:	73 c1                	jae    ba7e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e>
	  _Align __align = _M_spec._M_align;
    babd:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
	  size_t __nfill = __width - __str.size();
    bac0:	4d 29 ee             	sub    r14,r13
	  char32_t __fill_char = _M_spec._M_fill;
    bac3:	44 8b 4b 08          	mov    r9d,DWORD PTR [rbx+0x8]
	  auto __out = __fc.out();
    bac7:	4c 89 ff             	mov    rdi,r15
	  size_t __nfill = __width - __str.size();
    baca:	4d 89 f0             	mov    r8,r14
	  if (__align == _Align_default)
    bacd:	89 d1                	mov    ecx,edx
    bacf:	83 e1 03             	and    ecx,0x3
    bad2:	75 61                	jne    bb35 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x105>
	      if (_M_spec._M_zero_fill)
    bad4:	83 e2 40             	and    edx,0x40
	      __align = _Align_right;
    bad7:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
    badc:	41 b9 20 00 00 00    	mov    r9d,0x20
	      if (_M_spec._M_zero_fill)
    bae2:	74 51                	je     bb35 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x105>
		  if (__prefix_len != 0)
    bae4:	48 83 7d 88 00       	cmp    QWORD PTR [rbp-0x78],0x0
		  __fill_char = _CharT('0');
    bae9:	41 b9 30 00 00 00    	mov    r9d,0x30
		  if (__prefix_len != 0)
    baef:	74 44                	je     bb35 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x105>
    baf1:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
    baf5:	4c 89 e2             	mov    rdx,r12
    baf8:	44 89 4d 80          	mov    DWORD PTR [rbp-0x80],r9d
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    bafc:	89 8d 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],ecx
    bb02:	4c 39 eb             	cmp    rbx,r13
    bb05:	48 89 d8             	mov    rax,rbx
    bb08:	4c 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r14
    bb0f:	49 0f 47 c5          	cmova  rax,r13
	this->_M_str += __n;
    bb13:	49 01 dc             	add    r12,rbx
	this->_M_len -= __n;
    bb16:	49 29 dd             	sub    r13,rbx
		      __out = __format::__write(std::move(__out),
    bb19:	48 89 c6             	mov    rsi,rax
    bb1c:	e8 bf cd ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
      }
    bb21:	44 8b 4d 80          	mov    r9d,DWORD PTR [rbp-0x80]
    bb25:	8b 8d 78 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x88]
    bb2b:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
    bb32:	48 89 c7             	mov    rdi,rax
	  return __format::__write_padded(std::move(__out), __str,
    bb35:	4d 87 ec             	xchg   r12,r13
    bb38:	4c 89 e6             	mov    rsi,r12
    bb3b:	4c 89 ea             	mov    rdx,r13
    bb3e:	e8 fd ce ff ff       	call   8a40 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
	}
    bb43:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
    bb47:	5b                   	pop    rbx
    bb48:	41 5c                	pop    r12
    bb4a:	41 5d                	pop    r13
    bb4c:	41 5e                	pop    r14
    bb4e:	41 5f                	pop    r15
    bb50:	5d                   	pop    rbp
    bb51:	c3                   	ret
    bb52:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  size_t __width = 0;
    bb58:	45 31 f6             	xor    r14d,r14d
      if (!_M_hasval)
    bb5b:	41 80 7f 20 00       	cmp    BYTE PTR [r15+0x20],0x0
    bb60:	49 8d 77 18          	lea    rsi,[r15+0x18]
    bb64:	0f 84 b6 02 00 00    	je     be20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
      std::locale locale() { return _M_loc.value(); }
    bb6a:	48 8d 45 90          	lea    rax,[rbp-0x70]
    bb6e:	4c 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r9
    bb75:	48 89 c7             	mov    rdi,rax
    bb78:	4c 89 9d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r11
    bb7f:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
    bb83:	e8 08 76 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      if (__l.name() != "C")
    bb88:	48 8d 45 b0          	lea    rax,[rbp-0x50]
    bb8c:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
    bb90:	48 89 c7             	mov    rdi,rax
    bb93:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    bb9a:	e8 61 77 ff ff       	call   3300 <std::locale::name[abi:cxx11]() const@plt>
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    bb9f:	48 83 7d b8 01       	cmp    QWORD PTR [rbp-0x48],0x1
      { return _M_dataplus._M_p; }
    bba4:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
	if (_M_data() == _M_local_data())
    bba8:	48 8d 45 c0          	lea    rax,[rbp-0x40]
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    bbac:	4c 8b 9d 78 ff ff ff 	mov    r11,QWORD PTR [rbp-0x88]
    bbb3:	4c 8b 8d 70 ff ff ff 	mov    r9,QWORD PTR [rbp-0x90]
    bbba:	0f 84 c0 01 00 00    	je     bd80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x350>
	if (_M_data() == _M_local_data())
    bbc0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
    bbc7:	48 39 c7             	cmp    rdi,rax
    bbca:	74 29                	je     bbf5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    bbcc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    bbd0:	4c 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r9
    bbd7:	4c 89 9d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r11
    bbde:	48 8d 70 01          	lea    rsi,[rax+0x1]
    bbe2:	e8 19 76 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    bbe7:	4c 8b 9d 70 ff ff ff 	mov    r11,QWORD PTR [rbp-0x90]
    bbee:	4c 8b 8d 60 ff ff ff 	mov    r9,QWORD PTR [rbp-0xa0]
      const size_t __i = _Facet::id._M_id();
    bbf5:	48 8d 3d c4 05 01 00 	lea    rdi,[rip+0x105c4]        # 1c1c0 <std::__cxx11::numpunct<char>::id@GLIBCXX_3.4.21>
    bbfc:	4c 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r9
    bc03:	4c 89 9d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r11
    bc0a:	e8 11 75 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
    bc0f:	48 89 c2             	mov    rdx,rax
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    bc12:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
      _GLIBCXX_STD_FACET(numpunct<char>);
    bc16:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    bc1a:	4c 8b 04 d0          	mov    r8,QWORD PTR [rax+rdx*8]
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    bc1e:	4d 85 c0             	test   r8,r8
    bc21:	0f 84 11 03 00 00    	je     bf38 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x508>
      { return this->do_grouping(); }
    bc27:	49 8b 00             	mov    rax,QWORD PTR [r8]
    bc2a:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
    bc31:	4c 89 c6             	mov    rsi,r8
    bc34:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
    bc3b:	ff 50 20             	call   QWORD PTR [rax+0x20]
      { return _M_string_length; }
    bc3e:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
      { return _M_dataplus._M_p; }
    bc42:	4c 8b 55 b0          	mov    r10,QWORD PTR [rbp-0x50]
		  if (!__grp.empty())
    bc46:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
    bc4d:	4c 8b 9d 60 ff ff ff 	mov    r11,QWORD PTR [rbp-0xa0]
    bc54:	48 85 c9             	test   rcx,rcx
    bc57:	4c 8b 8d 58 ff ff ff 	mov    r9,QWORD PTR [rbp-0xa8]
    bc5e:	0f 84 86 00 00 00    	je     bcea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ba>
		      size_t __n = __str.size() - __prefix_len;
    bc64:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
    bc68:	4c 89 d8             	mov    rax,r11
    bc6b:	48 29 f0             	sub    rax,rsi
		      auto __p = (_CharT*)__builtin_alloca(2 * __n
    bc6e:	48 8d 44 46 17       	lea    rax,[rsi+rax*2+0x17]
    bc73:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    bc77:	48 29 c4             	sub    rsp,rax
    bc7a:	48 8d 44 24 0f       	lea    rax,[rsp+0xf]
    bc7f:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    bc83:	49 89 c4             	mov    r12,rax
	if (__n == 0)
    bc86:	48 85 f6             	test   rsi,rsi
    bc89:	0f 85 f1 01 00 00    	jne    be80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x450>
		      __s += __prefix_len;
    bc8f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
    bc93:	4c 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r10
      { return this->do_thousands_sep(); }
    bc9a:	4c 89 c7             	mov    rdi,r8
    bc9d:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
    bca4:	4d 8d 2c 01          	lea    r13,[r9+rax*1]
    bca8:	49 8b 00             	mov    rax,QWORD PTR [r8]
		      auto __end = std::__add_grouping(__p + __prefix_len,
    bcab:	4d 01 d9             	add    r9,r11
    bcae:	4c 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r9
    bcb5:	ff 50 18             	call   QWORD PTR [rax+0x18]
    bcb8:	4c 8b 8d 70 ff ff ff 	mov    r9,QWORD PTR [rbp-0x90]
    bcbf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
    bcc6:	4d 89 e8             	mov    r8,r13
    bcc9:	0f be f0             	movsx  esi,al
    bccc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
    bcd0:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
    bcd7:	49 8d 3c 04          	lea    rdi,[r12+rax*1]
    bcdb:	e8 a0 fb ff ff       	call   b880 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)>
    bce0:	4c 8b 55 b0          	mov    r10,QWORD PTR [rbp-0x50]
		      __str = {__p, size_t(__end - __p)};
    bce4:	4c 29 e0             	sub    rax,r12
    bce7:	49 89 c5             	mov    r13,rax
	if (_M_data() == _M_local_data())
    bcea:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
    bcf1:	49 39 c2             	cmp    r10,rax
    bcf4:	74 10                	je     bd06 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    bcf6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    bcfa:	4c 89 d7             	mov    rdi,r10
    bcfd:	48 8d 70 01          	lea    rsi,[rax+0x1]
    bd01:	e8 fa 74 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	    }
    bd06:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
    bd0a:	e8 b1 75 ff ff       	call   32c0 <std::locale::~locale()@plt>
    bd0f:	e9 a0 fd ff ff       	jmp    bab4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x84>
    bd14:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	if (__i < _M_packed_size)
    bd18:	41 0f b6 00          	movzx  eax,BYTE PTR [r8]
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    bd1c:	0f b7 57 04          	movzx  edx,WORD PTR [rdi+0x4]
	if (__i < _M_packed_size)
    bd20:	89 c1                	mov    ecx,eax
    bd22:	83 e0 0f             	and    eax,0xf
    bd25:	83 e1 0f             	and    ecx,0xf
    bd28:	48 39 c2             	cmp    rdx,rax
    bd2b:	0f 83 2f 01 00 00    	jae    be60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x430>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    bd31:	49 8b 00             	mov    rax,QWORD PTR [r8]
    bd34:	48 8d 0c 92          	lea    rcx,[rdx+rdx*4]
	    __arg._M_val = _M_values[__i];
    bd38:	48 c1 e2 04          	shl    rdx,0x4
    bd3c:	49 03 50 08          	add    rdx,QWORD PTR [r8+0x8]
    bd40:	66 0f 6f 02          	movdqa xmm0,XMMWORD PTR [rdx]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    bd44:	48 c1 e8 04          	shr    rax,0x4
    bd48:	48 d3 e8             	shr    rax,cl
	    __arg._M_val = _M_values[__i];
    bd4b:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    bd4f:	83 e0 1f             	and    eax,0x1f
    __int_from_arg(const basic_format_arg<_Context>& __arg)
    bd52:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
    bd55:	66 0f 6f 45 90       	movdqa xmm0,XMMWORD PTR [rbp-0x70]
	  switch (__type)
    bd5a:	48 8d 15 ff 9b 00 00 	lea    rdx,[rip+0x9bff]        # 15960 <CSWTCH.1104+0x880>
    bd61:	0f b6 c0             	movzx  eax,al
    bd64:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    bd68:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    bd6c:	66 0f 6f 45 a0       	movdqa xmm0,XMMWORD PTR [rbp-0x60]
    bd71:	48 01 d0             	add    rax,rdx
    bd74:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    bd78:	ff e0                	jmp    rax
    bd7a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    bd80:	80 3f 43             	cmp    BYTE PTR [rdi],0x43
    bd83:	0f 85 37 fe ff ff    	jne    bbc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x190>
	if (_M_data() == _M_local_data())
    bd89:	48 39 c7             	cmp    rdi,rax
    bd8c:	0f 84 74 ff ff ff    	je     bd06 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    bd92:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    bd96:	48 8d 70 01          	lea    rsi,[rax+0x1]
    bd9a:	e8 61 74 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    bd9f:	e9 62 ff ff ff       	jmp    bd06 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
    bda4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    bda8:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    bdac:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    bdb0:	48 89 f8             	mov    rax,rdi
    bdb3:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    bdb7:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    bdba:	49 39 dd             	cmp    r13,rbx
    bdbd:	72 4a                	jb     be09 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d9>
    bdbf:	90                   	nop
    bdc0:	49 39 dd             	cmp    r13,rbx
    bdc3:	48 89 da             	mov    rdx,rbx
    bdc6:	49 0f 46 d5          	cmovbe rdx,r13
    bdca:	48 85 d2             	test   rdx,rdx
    bdcd:	74 08                	je     bdd7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    bdcf:	4c 89 e6             	mov    rsi,r12
    bdd2:	e8 d9 73 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    bdd7:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    bdda:	49 01 5f 18          	add    QWORD PTR [r15+0x18],rbx
    bdde:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    bde1:	49 01 dc             	add    r12,rbx
	this->_M_len -= __n;
    bde4:	49 29 dd             	sub    r13,rbx
    bde7:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    bde9:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    bded:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    bdf1:	48 89 f8             	mov    rax,rdi
    bdf4:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    bdf8:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    bdfb:	49 39 dd             	cmp    r13,rbx
    bdfe:	73 c0                	jae    bdc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x390>
	if (__s.size())
    be00:	4d 85 ed             	test   r13,r13
    be03:	0f 84 7e fc ff ff    	je     ba87 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x57>
    be09:	4c 89 ea             	mov    rdx,r13
    be0c:	4c 89 e6             	mov    rsi,r12
    be0f:	e8 9c 73 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    be14:	4d 01 6f 18          	add    QWORD PTR [r15+0x18],r13
    be18:	e9 6a fc ff ff       	jmp    ba87 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x57>
    be1d:	0f 1f 00             	nop    DWORD PTR [rax]
    be20:	48 89 f7             	mov    rdi,rsi
    be23:	4c 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r9
    be2a:	4c 89 9d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r11
    be31:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
    be35:	e8 36 75 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    be3a:	41 c6 47 20 01       	mov    BYTE PTR [r15+0x20],0x1
    be3f:	4c 8b 8d 70 ff ff ff 	mov    r9,QWORD PTR [rbp-0x90]
    be46:	4c 8b 9d 78 ff ff ff 	mov    r11,QWORD PTR [rbp-0x88]
    be4d:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
    be51:	e9 14 fd ff ff       	jmp    bb6a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x13a>
    be56:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    be5d:	00 00 00 
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    be60:	84 c9                	test   cl,cl
    be62:	75 10                	jne    be74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    be64:	49 8b 00             	mov    rax,QWORD PTR [r8]
    be67:	48 c1 e8 04          	shr    rax,0x4
    be6b:	48 39 c2             	cmp    rdx,rax
    be6e:	0f 82 a4 00 00 00    	jb     bf18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e8>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    be74:	e8 d7 72 ff ff       	call   3150 <abort@plt>
    be79:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    be80:	48 89 f2             	mov    rdx,rsi
    be83:	48 89 c7             	mov    rdi,rax
    be86:	4c 89 ce             	mov    rsi,r9
    be89:	4c 89 9d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r11
    be90:	4c 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r10
    be97:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
    be9e:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
    bea5:	4c 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r9
    beac:	e8 ff 72 ff ff       	call   31b0 <memcpy@plt>
    beb1:	4c 8b 9d 50 ff ff ff 	mov    r11,QWORD PTR [rbp-0xb0]
    beb8:	4c 8b 95 58 ff ff ff 	mov    r10,QWORD PTR [rbp-0xa8]
    bebf:	4c 8b 85 60 ff ff ff 	mov    r8,QWORD PTR [rbp-0xa0]
    bec6:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
    becd:	4c 8b 8d 70 ff ff ff 	mov    r9,QWORD PTR [rbp-0x90]
    bed4:	e9 b6 fd ff ff       	jmp    bc8f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25f>
	      return __arg;
    bed9:	4c 8b 75 b0          	mov    r14,QWORD PTR [rbp-0x50]
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
    bedd:	e9 c3 fb ff ff       	jmp    baa5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x75>
	      if (__arg >= 0)
    bee2:	4c 8b 75 b0          	mov    r14,QWORD PTR [rbp-0x50]
    bee6:	4d 85 f6             	test   r14,r14
    bee9:	0f 89 b6 fb ff ff    	jns    baa5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x75>
    beef:	eb 83                	jmp    be74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    bef1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      return __arg;
    bef8:	44 8b 75 b0          	mov    r14d,DWORD PTR [rbp-0x50]
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
    befc:	e9 a4 fb ff ff       	jmp    baa5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x75>
	      if (__arg >= 0)
    bf01:	4c 63 75 b0          	movsxd r14,DWORD PTR [rbp-0x50]
    bf05:	45 85 f6             	test   r14d,r14d
    bf08:	0f 89 97 fb ff ff    	jns    baa5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x75>
    bf0e:	e9 61 ff ff ff       	jmp    be74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    bf13:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  __arg = _M_args[__i];
    bf18:	48 c1 e2 05          	shl    rdx,0x5
    bf1c:	49 03 50 08          	add    rdx,QWORD PTR [r8+0x8]
    bf20:	f3 0f 6f 02          	movdqu xmm0,XMMWORD PTR [rdx]
    bf24:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
    bf28:	0f b6 42 10          	movzx  eax,BYTE PTR [rdx+0x10]
    bf2c:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
    bf2f:	0f b6 42 10          	movzx  eax,BYTE PTR [rdx+0x10]
    bf33:	e9 1a fe ff ff       	jmp    bd52 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x322>
      __throw_bad_cast();
    bf38:	e8 23 73 ff ff       	call   3260 <std::__throw_bad_cast()@plt>
    bf3d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000000bf40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    bf40:	41 57                	push   r15
    bf42:	89 f0                	mov    eax,esi
    bf44:	41 56                	push   r14
    bf46:	41 55                	push   r13
    bf48:	41 54                	push   r12
    bf4a:	55                   	push   rbp
    bf4b:	48 89 d5             	mov    rbp,rdx
    bf4e:	53                   	push   rbx
    bf4f:	48 89 fb             	mov    rbx,rdi
    bf52:	48 83 ec 28          	sub    rsp,0x28
	  if (_M_spec._M_type == _Pres_c)
    bf56:	0f b6 57 01          	movzx  edx,BYTE PTR [rdi+0x1]
    bf5a:	89 d1                	mov    ecx,edx
    bf5c:	83 e1 78             	and    ecx,0x78
    bf5f:	80 f9 38             	cmp    cl,0x38
    bf62:	0f 84 a8 00 00 00    	je     c010 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0>
	  switch (_M_spec._M_type)
    bf68:	c0 ea 03             	shr    dl,0x3
    bf6b:	83 e2 0f             	and    edx,0xf
    bf6e:	80 fa 04             	cmp    dl,0x4
    bf71:	0f 84 59 01 00 00    	je     c0d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x190>
    bf77:	0f 87 eb 01 00 00    	ja     c168 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x228>
    bf7d:	80 fa 01             	cmp    dl,0x1
    bf80:	0f 87 d2 00 00 00    	ja     c058 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x118>
      if (__value == 0)
    bf86:	40 84 f6             	test   sil,sil
    bf89:	0f 84 21 02 00 00    	je     c1b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x270>
      _Up __unsigned_val = __value;
    bf8f:	40 0f b6 d6          	movzx  edx,sil
    bf93:	40 80 fe 09          	cmp    sil,0x9
    bf97:	0f 86 6f 03 00 00    	jbe    c30c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3cc>
    bf9d:	41 bf 03 00 00 00    	mov    r15d,0x3
	  if (__value < __b3) return __n + 2;
    bfa3:	be 03 00 00 00       	mov    esi,0x3
	  if (__value < __b2) return __n + 1;
    bfa8:	83 fa 63             	cmp    edx,0x63
    bfab:	0f 86 6b 03 00 00    	jbe    c31c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3dc>
      __detail::__to_chars_10_impl(__first, __len, __val);
    bfb1:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    bfb6:	4c 89 f7             	mov    rdi,r14
      __res.ptr = __first + __len;
    bfb9:	4d 01 f7             	add    r15,r14
      __detail::__to_chars_10_impl(__first, __len, __val);
    bfbc:	e8 af 95 ff ff       	call   5570 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
    bfc1:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
	  char* __start = __buf + 3;
    bfc4:	4c 89 f6             	mov    rsi,r14
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    bfc7:	c0 e8 02             	shr    al,0x2
    bfca:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    bfcd:	83 f8 01             	cmp    eax,0x1
    bfd0:	0f 84 7a 01 00 00    	je     c150 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x210>
      else if (__sign == _Sign_space)
    bfd6:	83 f8 03             	cmp    eax,0x3
    bfd9:	0f 84 e9 01 00 00    	je     c1c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x288>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    bfdf:	4c 89 f8             	mov    rax,r15
			       __start_digits - __start, __fc);
    bfe2:	4c 89 f1             	mov    rcx,r14
      : _M_len{__len}, _M_str{__str}
    bfe5:	48 89 f2             	mov    rdx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    bfe8:	49 89 e8             	mov    r8,rbp
    bfeb:	48 29 f0             	sub    rax,rsi
			       __start_digits - __start, __fc);
    bfee:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    bff1:	48 89 df             	mov    rdi,rbx
    bff4:	48 89 c6             	mov    rsi,rax
    bff7:	e8 34 fa ff ff       	call   ba30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
	}
    bffc:	48 83 c4 28          	add    rsp,0x28
    c000:	5b                   	pop    rbx
    c001:	5d                   	pop    rbp
    c002:	41 5c                	pop    r12
    c004:	41 5d                	pop    r13
    c006:	41 5e                	pop    r14
    c008:	41 5f                	pop    r15
    c00a:	c3                   	ret
    c00b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    c010:	40 84 f6             	test   sil,sil
    c013:	0f 88 31 03 00 00    	js     c34a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x40a>
    c019:	48 8d 4c 24 10       	lea    rcx,[rsp+0x10]
    c01e:	b8 01 00 00 00       	mov    eax,0x1
    c023:	40 88 74 24 10       	mov    BYTE PTR [rsp+0x10],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    c028:	49 89 d8             	mov    r8,rbx
    c02b:	48 89 ce             	mov    rsi,rcx
    c02e:	48 89 c7             	mov    rdi,rax
    c031:	48 89 e9             	mov    rcx,rbp
    c034:	ba 01 00 00 00       	mov    edx,0x1
    c039:	41 b9 01 00 00 00    	mov    r9d,0x1
    c03f:	e8 4c d8 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    c044:	48 83 c4 28          	add    rsp,0x28
    c048:	5b                   	pop    rbx
    c049:	5d                   	pop    rbp
    c04a:	41 5c                	pop    r12
    c04c:	41 5d                	pop    r13
    c04e:	41 5e                	pop    r14
    c050:	41 5f                	pop    r15
    c052:	c3                   	ret
    c053:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    c058:	80 f9 10             	cmp    cl,0x10
    c05b:	4c 8d 25 ba 91 00 00 	lea    r12,[rip+0x91ba]        # 1521c <CSWTCH.1104+0x13c>
    c062:	48 8d 15 b6 91 00 00 	lea    rdx,[rip+0x91b6]        # 1521f <CSWTCH.1104+0x13f>
    c069:	4c 0f 45 e2          	cmovne r12,rdx
      if (__value == 0)
    c06d:	40 84 f6             	test   sil,sil
    c070:	0f 85 5a 01 00 00    	jne    c1d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x290>
    c076:	4c 8d 7c 24 09       	lea    r15,[rsp+0x9]
    c07b:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c080:	b8 30 00 00 00       	mov    eax,0x30
      __first[0] = '1';
    c085:	88 44 24 08          	mov    BYTE PTR [rsp+0x8],al
	  if (_M_spec._M_alt && __base_prefix.size())
    c089:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
    c08c:	a8 10                	test   al,0x10
    c08e:	0f 84 10 01 00 00    	je     c1a4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x264>
    c094:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c09b:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    c0a0:	4c 01 f6             	add    rsi,r14
	      __builtin_memcpy(__start, __base_prefix.data(),
    c0a3:	89 d7                	mov    edi,edx
    c0a5:	85 d2                	test   edx,edx
    c0a7:	0f 84 1a ff ff ff    	je     bfc7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87>
    c0ad:	31 d2                	xor    edx,edx
    c0af:	89 d1                	mov    ecx,edx
    c0b1:	83 c2 01             	add    edx,0x1
    c0b4:	45 0f b6 04 0c       	movzx  r8d,BYTE PTR [r12+rcx*1]
    c0b9:	44 88 04 0e          	mov    BYTE PTR [rsi+rcx*1],r8b
    c0bd:	39 fa                	cmp    edx,edi
    c0bf:	72 ee                	jb     c0af <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x16f>
    c0c1:	e9 01 ff ff ff       	jmp    bfc7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87>
    c0c6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    c0cd:	00 00 00 
	      if (__i != 0)
    c0d0:	40 84 f6             	test   sil,sil
    c0d3:	0f 84 d7 00 00 00    	je     c1b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x270>
      _Up __unsigned_val = __value;
    c0d9:	40 0f b6 ce          	movzx  ecx,sil
	__len = (__to_chars_len_2(__val) + 2) / 3;
    c0dd:	0f bd d1             	bsr    edx,ecx
    c0e0:	44 8d 7a 03          	lea    r15d,[rdx+0x3]
    c0e4:	ba ab aa aa aa       	mov    edx,0xaaaaaaab
    c0e9:	4c 0f af fa          	imul   r15,rdx
    c0ed:	49 c1 ef 21          	shr    r15,0x21
      while (__val >= 0100)
    c0f1:	83 f9 3f             	cmp    ecx,0x3f
    c0f4:	0f 86 32 02 00 00    	jbe    c32c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ec>
	  __val >>= 3;
    c0fa:	89 ca                	mov    edx,ecx
	  __first[__pos] = '0' + __num;
    c0fc:	83 e0 07             	and    eax,0x7
	  __val >>= 3;
    c0ff:	c1 e9 06             	shr    ecx,0x6
	  __val >>= 3;
    c102:	c1 ea 03             	shr    edx,0x3
	  __first[__pos] = '0' + __num;
    c105:	83 c0 30             	add    eax,0x30
	  __num = __val & 7;
    c108:	83 e2 07             	and    edx,0x7
	  __first[__pos] = '0' + __num;
    c10b:	88 44 24 0a          	mov    BYTE PTR [rsp+0xa],al
	  __first[__pos - 1] = '0' + __num;
    c10f:	83 c2 30             	add    edx,0x30
    c112:	88 54 24 09          	mov    BYTE PTR [rsp+0x9],dl
	__first[0] = '0' + __val;
    c116:	83 c1 30             	add    ecx,0x30
    c119:	88 4c 24 08          	mov    BYTE PTR [rsp+0x8],cl
      __res.ptr = __first + __len;
    c11d:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c122:	44 89 f8             	mov    eax,r15d
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    c125:	4c 8d 25 ac 90 00 00 	lea    r12,[rip+0x90ac]        # 151d8 <CSWTCH.1104+0xf8>
    c12c:	4d 8d 3c 06          	lea    r15,[r14+rax*1]
    c130:	ba 01 00 00 00       	mov    edx,0x1
	  if (_M_spec._M_alt && __base_prefix.size())
    c135:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
	  char* __start = __buf + 3;
    c138:	4c 89 f6             	mov    rsi,r14
	  if (_M_spec._M_alt && __base_prefix.size())
    c13b:	a8 10                	test   al,0x10
    c13d:	0f 84 84 fe ff ff    	je     bfc7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87>
	      __start -= __base_prefix.size();
    c143:	48 89 d6             	mov    rsi,rdx
    c146:	48 f7 de             	neg    rsi
    c149:	e9 52 ff ff ff       	jmp    c0a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x160>
    c14e:	66 90                	xchg   ax,ax
    c150:	b8 2b 00 00 00       	mov    eax,0x2b
	*__dest = '+';
    c155:	88 46 ff             	mov    BYTE PTR [rsi-0x1],al
    c158:	48 83 ee 01          	sub    rsi,0x1
    c15c:	e9 7e fe ff ff       	jmp    bfdf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9f>
    c161:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c168:	80 f9 28             	cmp    cl,0x28
    c16b:	0f 84 df 00 00 00    	je     c250 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
      if (__value == 0)
    c171:	40 84 f6             	test   sil,sil
    c174:	0f 85 fe 00 00 00    	jne    c278 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x338>
	  *__first = '0';
    c17a:	c6 44 24 08 30       	mov    BYTE PTR [rsp+0x8],0x30
	      if (_M_spec._M_type == _Pres_X)
    c17f:	4c 8d 7c 24 09       	lea    r15,[rsp+0x9]
    c184:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c189:	4c 8d 25 92 90 00 00 	lea    r12,[rip+0x9092]        # 15222 <CSWTCH.1104+0x142>
    c190:	80 f9 30             	cmp    cl,0x30
    c193:	0f 84 24 01 00 00    	je     c2bd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x37d>
	  if (_M_spec._M_alt && __base_prefix.size())
    c199:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
    c19c:	a8 10                	test   al,0x10
    c19e:	0f 85 f0 fe ff ff    	jne    c094 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x154>
	  char* __start = __buf + 3;
    c1a4:	4c 89 f6             	mov    rsi,r14
    c1a7:	e9 1b fe ff ff       	jmp    bfc7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87>
    c1ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    c1b0:	c6 44 24 08 30       	mov    BYTE PTR [rsp+0x8],0x30
    c1b5:	4c 8d 7c 24 09       	lea    r15,[rsp+0x9]
    c1ba:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c1bf:	e9 fd fd ff ff       	jmp    bfc1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x81>
    c1c4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    c1c8:	b8 20 00 00 00       	mov    eax,0x20
    c1cd:	eb 86                	jmp    c155 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x215>
    c1cf:	90                   	nop
      _Up __unsigned_val = __value;
    c1d0:	40 0f b6 c6          	movzx  eax,sil
    c1d4:	41 bf 20 00 00 00    	mov    r15d,0x20
      unsigned __pos = __len - 1;
    c1da:	ba 1f 00 00 00       	mov    edx,0x1f
	  return __builtin_clz(__x) - __diff;
    c1df:	0f bd f8             	bsr    edi,eax
    c1e2:	83 f7 1f             	xor    edi,0x1f
      return _Nd - std::__countl_zero(__x);
    c1e5:	41 29 ff             	sub    r15d,edi
      while (__pos)
    c1e8:	29 fa                	sub    edx,edi
    c1ea:	74 4a                	je     c236 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f6>
    c1ec:	89 d1                	mov    ecx,edx
    c1ee:	48 8d 74 0c 07       	lea    rsi,[rsp+rcx*1+0x7]
    c1f3:	48 8d 54 0c 08       	lea    rdx,[rsp+rcx*1+0x8]
    c1f8:	b9 1e 00 00 00       	mov    ecx,0x1e
    c1fd:	29 f9                	sub    ecx,edi
    c1ff:	48 29 ce             	sub    rsi,rcx
    c202:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    c209:	00 00 00 00 
    c20d:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    c214:	00 00 00 00 
    c218:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    c21f:	00 
	  __first[__pos--] = '0' + (__val & 1);
    c220:	89 c1                	mov    ecx,eax
      while (__pos)
    c222:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    c226:	d1 e8                	shr    eax,1
	  __first[__pos--] = '0' + (__val & 1);
    c228:	83 e1 01             	and    ecx,0x1
    c22b:	83 c1 30             	add    ecx,0x30
    c22e:	88 4a 01             	mov    BYTE PTR [rdx+0x1],cl
      while (__pos)
    c231:	48 39 d6             	cmp    rsi,rdx
    c234:	75 ea                	jne    c220 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
      __res.ptr = __first + __len;
    c236:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c23b:	4d 63 ff             	movsxd r15,r15d
    c23e:	b8 31 00 00 00       	mov    eax,0x31
    c243:	4d 01 f7             	add    r15,r14
    c246:	e9 3a fe ff ff       	jmp    c085 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x145>
    c24b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      if (__value == 0)
    c250:	40 84 f6             	test   sil,sil
    c253:	0f 85 a7 00 00 00    	jne    c300 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c0>
	  *__first = '0';
    c259:	c6 44 24 08 30       	mov    BYTE PTR [rsp+0x8],0x30
    c25e:	4c 8d 7c 24 09       	lea    r15,[rsp+0x9]
    c263:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c268:	4c 8d 25 b6 8f 00 00 	lea    r12,[rip+0x8fb6]        # 15225 <CSWTCH.1104+0x145>
    c26f:	e9 25 ff ff ff       	jmp    c199 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x259>
    c274:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    c278:	4c 8d 25 a3 8f 00 00 	lea    r12,[rip+0x8fa3]        # 15222 <CSWTCH.1104+0x142>
      _Up __unsigned_val = __value;
    c27f:	0f b6 d0             	movzx  edx,al
      constexpr char __digits[] = {
    c282:	66 0f 6f 05 26 c5 00 	movdqa xmm0,XMMWORD PTR [rip+0xc526]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    c289:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    c28a:	0f bd f2             	bsr    esi,edx
    c28d:	44 8d 7e 04          	lea    r15d,[rsi+0x4]
      constexpr char __digits[] = {
    c291:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    c296:	41 c1 ef 02          	shr    r15d,0x2
      if (__val >= 0x10)
    c29a:	83 fa 0f             	cmp    edx,0xf
    c29d:	77 49                	ja     c2e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a8>
	__first[0] = __digits[__val];
    c29f:	0f b6 44 14 10       	movzx  eax,BYTE PTR [rsp+rdx*1+0x10]
    c2a4:	88 44 24 08          	mov    BYTE PTR [rsp+0x8],al
      __res.ptr = __first + __len;
    c2a8:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c2ad:	44 89 f8             	mov    eax,r15d
    c2b0:	4d 8d 3c 06          	lea    r15,[r14+rax*1]
	      if (_M_spec._M_type == _Pres_X)
    c2b4:	80 f9 30             	cmp    cl,0x30
    c2b7:	0f 85 dc fe ff ff    	jne    c199 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x259>
    c2bd:	4d 89 f5             	mov    r13,r14
		  *__p = __builtin_toupper(*__p);
    c2c0:	41 0f be 7d 00       	movsx  edi,BYTE PTR [r13+0x0]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    c2c5:	49 83 c5 01          	add    r13,0x1
		  *__p = __builtin_toupper(*__p);
    c2c9:	e8 82 70 ff ff       	call   3350 <toupper@plt>
    c2ce:	41 88 45 ff          	mov    BYTE PTR [r13-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    c2d2:	4d 39 fd             	cmp    r13,r15
    c2d5:	75 e9                	jne    c2c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c2d7:	ba 02 00 00 00       	mov    edx,0x2
    c2dc:	e9 54 fe ff ff       	jmp    c135 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f5>
    c2e1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  __first[1] = __digits[__num];
    c2e8:	83 e0 0f             	and    eax,0xf
	  __val >>= 4;
    c2eb:	c1 ea 04             	shr    edx,0x4
	  __first[1] = __digits[__num];
    c2ee:	0f b6 44 04 10       	movzx  eax,BYTE PTR [rsp+rax*1+0x10]
    c2f3:	88 44 24 09          	mov    BYTE PTR [rsp+0x9],al
	  __first[0] = __digits[__val];
    c2f7:	0f b6 44 14 10       	movzx  eax,BYTE PTR [rsp+rdx*1+0x10]
    c2fc:	eb a6                	jmp    c2a4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x364>
    c2fe:	66 90                	xchg   ax,ax
    c300:	4c 8d 25 1e 8f 00 00 	lea    r12,[rip+0x8f1e]        # 15225 <CSWTCH.1104+0x145>
    c307:	e9 73 ff ff ff       	jmp    c27f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x33f>
    c30c:	41 bf 01 00 00 00    	mov    r15d,0x1
	  if (__value < (unsigned)__base) return __n;
    c312:	be 01 00 00 00       	mov    esi,0x1
    c317:	e9 95 fc ff ff       	jmp    bfb1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x71>
	  if (__value < __b2) return __n + 1;
    c31c:	41 bf 02 00 00 00    	mov    r15d,0x2
    c322:	be 02 00 00 00       	mov    esi,0x2
    c327:	e9 85 fc ff ff       	jmp    bfb1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x71>
      if (__val >= 010)
    c32c:	83 f9 07             	cmp    ecx,0x7
    c32f:	0f 86 e1 fd ff ff    	jbe    c116 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d6>
	  __first[1] = '0' + __num;
    c335:	83 e0 07             	and    eax,0x7
	  __val >>= 3;
    c338:	c1 e9 03             	shr    ecx,0x3
	  __first[1] = '0' + __num;
    c33b:	83 c0 30             	add    eax,0x30
	  __first[0] = '0' + __val;
    c33e:	83 c1 30             	add    ecx,0x30
	  __first[1] = '0' + __num;
    c341:	88 44 24 09          	mov    BYTE PTR [rsp+0x9],al
    c345:	e9 cf fd ff ff       	jmp    c119 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d9>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    c34a:	e8 01 6e ff ff       	call   3150 <abort@plt>
    c34f:	90                   	nop

000000000000c350 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(bool __i, basic_format_context<_Out, _CharT>& __fc) const
    c350:	41 57                	push   r15
    c352:	41 56                	push   r14
    c354:	41 55                	push   r13
    c356:	41 54                	push   r12
    c358:	49 89 d4             	mov    r12,rdx
    c35b:	55                   	push   rbp
    c35c:	89 f5                	mov    ebp,esi
    c35e:	53                   	push   rbx
    c35f:	48 89 fb             	mov    rbx,rdi
    c362:	48 83 ec 48          	sub    rsp,0x48
	  if (_M_spec._M_type == _Pres_c)
    c366:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    c36a:	83 e0 78             	and    eax,0x78
    c36d:	3c 38                	cmp    al,0x38
    c36f:	0f 84 eb 00 00 00    	je     c460 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x110>
	  if (_M_spec._M_type != _Pres_s)
    c375:	84 c0                	test   al,al
    c377:	0f 85 c3 00 00 00    	jne    c440 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    c37d:	4c 8d 6c 24 10       	lea    r13,[rsp+0x10]
	__c1 = __c2;
    c382:	c6 44 24 10 00       	mov    BYTE PTR [rsp+0x10],0x0
    c387:	4c 89 2c 24          	mov    QWORD PTR [rsp],r13
      { _M_string_length = __length; }
    c38b:	48 c7 44 24 08 00 00 	mov    QWORD PTR [rsp+0x8],0x0
    c392:	00 00 
	  if (_M_spec._M_localized) [[unlikely]]
    c394:	f6 07 20             	test   BYTE PTR [rdi],0x20
    c397:	0f 85 23 01 00 00    	jne    c4c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x170>
	return __builtin_strlen(__s);
    c39d:	41 be 04 00 00 00    	mov    r14d,0x4
		__s = __i ? "true" : "false";
    c3a3:	48 8d 05 8c 8d 00 00 	lea    rax,[rip+0x8d8c]        # 15136 <CSWTCH.1104+0x56>
    c3aa:	40 84 f6             	test   sil,sil
    c3ad:	75 0d                	jne    c3bc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6c>
    c3af:	41 be 05 00 00 00    	mov    r14d,0x5
    c3b5:	48 8d 05 74 8d 00 00 	lea    rax,[rip+0x8d74]        # 15130 <CSWTCH.1104+0x50>
    c3bc:	48 89 e7             	mov    rdi,rsp
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    c3bf:	4c 39 e8             	cmp    rax,r13
    c3c2:	0f 84 ff 02 00 00    	je     c6c7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x377>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c3c8:	44 89 f1             	mov    ecx,r14d
    c3cb:	31 d2                	xor    edx,edx
    c3cd:	41 f6 c6 04          	test   r14b,0x4
    c3d1:	0f 85 c9 00 00 00    	jne    c4a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x150>
    c3d7:	83 e1 01             	and    ecx,0x1
    c3da:	0f 85 b0 00 00 00    	jne    c490 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x140>
      }
    c3e0:	4c 89 e8             	mov    rax,r13
      { _M_string_length = __length; }
    c3e3:	4c 89 74 24 08       	mov    QWORD PTR [rsp+0x8],r14
	__c1 = __c2;
    c3e8:	42 c6 04 30 00       	mov    BYTE PTR [rax+r14*1],0x0
      { return _M_string_length; }
    c3ed:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    c3f2:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
	  return __format::__write_padded_as_spec(__s, __est_width, __fc,
    c3f6:	49 89 d8             	mov    r8,rbx
    c3f9:	41 b9 01 00 00 00    	mov    r9d,0x1
    c3ff:	4c 89 e1             	mov    rcx,r12
    c402:	48 89 fe             	mov    rsi,rdi
    c405:	48 89 d7             	mov    rdi,rdx
    c408:	e8 83 d4 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
      { return _M_dataplus._M_p; }
    c40d:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    c411:	48 89 c3             	mov    rbx,rax
	if (_M_data() == _M_local_data())
    c414:	4c 39 ef             	cmp    rdi,r13
    c417:	74 0e                	je     c427 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    c419:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    c41e:	48 8d 70 01          	lea    rsi,[rax+0x1]
    c422:	e8 d9 6d ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    c427:	48 83 c4 48          	add    rsp,0x48
    c42b:	48 89 d8             	mov    rax,rbx
    c42e:	5b                   	pop    rbx
    c42f:	5d                   	pop    rbp
    c430:	41 5c                	pop    r12
    c432:	41 5d                	pop    r13
    c434:	41 5e                	pop    r14
    c436:	41 5f                	pop    r15
    c438:	c3                   	ret
    c439:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    c440:	48 83 c4 48          	add    rsp,0x48
	    return format(static_cast<unsigned char>(__i), __fc);
    c444:	40 0f b6 f6          	movzx  esi,sil
	}
    c448:	5b                   	pop    rbx
    c449:	5d                   	pop    rbp
    c44a:	41 5c                	pop    r12
    c44c:	41 5d                	pop    r13
    c44e:	41 5e                	pop    r14
    c450:	41 5f                	pop    r15
	    return format(static_cast<unsigned char>(__i), __fc);
    c452:	e9 e9 fa ff ff       	jmp    bf40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    c457:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    c45e:	00 00 
      : _M_len{__len}, _M_str{__str}
    c460:	b8 01 00 00 00       	mov    eax,0x1
    c465:	48 8d 4c 24 20       	lea    rcx,[rsp+0x20]
    c46a:	40 88 74 24 20       	mov    BYTE PTR [rsp+0x20],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    c46f:	49 89 d8             	mov    r8,rbx
    c472:	48 89 ce             	mov    rsi,rcx
    c475:	48 89 c7             	mov    rdi,rax
    c478:	4c 89 e1             	mov    rcx,r12
    c47b:	ba 01 00 00 00       	mov    edx,0x1
    c480:	41 b9 01 00 00 00    	mov    r9d,0x1
    c486:	e8 05 d4 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
    c48b:	48 89 c3             	mov    rbx,rax
	    return _M_format_character(static_cast<unsigned char>(__i), __fc);
    c48e:	eb 97                	jmp    c427 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c490:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    c494:	88 44 14 10          	mov    BYTE PTR [rsp+rdx*1+0x10],al
    c498:	e9 43 ff ff ff       	jmp    c3e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x90>
    c49d:	0f 1f 00             	nop    DWORD PTR [rax]
    c4a0:	8b 10                	mov    edx,DWORD PTR [rax]
    c4a2:	83 e1 01             	and    ecx,0x1
    c4a5:	89 54 24 10          	mov    DWORD PTR [rsp+0x10],edx
    c4a9:	ba 04 00 00 00       	mov    edx,0x4
    c4ae:	0f 84 2c ff ff ff    	je     c3e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x90>
    c4b4:	eb da                	jmp    c490 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x140>
    c4b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    c4bd:	00 00 00 
      if (!_M_hasval)
    c4c0:	80 7a 20 00          	cmp    BYTE PTR [rdx+0x20],0x0
    c4c4:	4c 8d 7a 18          	lea    r15,[rdx+0x18]
    c4c8:	0f 84 d2 00 00 00    	je     c5a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x250>
      std::locale locale() { return _M_loc.value(); }
    c4ce:	4c 8d 74 24 20       	lea    r14,[rsp+0x20]
    c4d3:	4c 89 fe             	mov    rsi,r15
    c4d6:	4c 89 f7             	mov    rdi,r14
    c4d9:	e8 b2 6c ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    c4de:	48 8d 3d db fc 00 00 	lea    rdi,[rip+0xfcdb]        # 1c1c0 <std::__cxx11::numpunct<char>::id@GLIBCXX_3.4.21>
    c4e5:	e8 36 6c ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
    c4ea:	48 89 c2             	mov    rdx,rax
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    c4ed:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
      _GLIBCXX_STD_FACET(numpunct<char>);
    c4f2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    c4f6:	4c 8b 3c d0          	mov    r15,QWORD PTR [rax+rdx*8]
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    c4fa:	4d 85 ff             	test   r15,r15
    c4fd:	0f 84 e0 01 00 00    	je     c6e3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x393>
	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
    c503:	4c 89 f7             	mov    rdi,r14
    c506:	e8 b5 6d ff ff       	call   32c0 <std::locale::~locale()@plt>
       *
       *  @return  string_type representing printed form of true.
      */
      string_type
      truename() const
      { return this->do_truename(); }
    c50b:	49 8b 07             	mov    rax,QWORD PTR [r15]
	      __s = __i ? __np.truename() : __np.falsename();
    c50e:	40 84 ed             	test   bpl,bpl
    c511:	75 7d                	jne    c590 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
       *
       *  @return  string_type representing printed form of false.
      */
      string_type
      falsename() const
      { return this->do_falsename(); }
    c513:	4c 89 fe             	mov    rsi,r15
    c516:	4c 89 f7             	mov    rdi,r14
    c519:	ff 50 30             	call   QWORD PTR [rax+0x30]
      { return _M_dataplus._M_p; }
    c51c:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    c520:	48 89 c7             	mov    rdi,rax
	if (_M_data() == _M_local_data())
    c523:	4c 39 e8             	cmp    rax,r13
    c526:	0f 84 87 00 00 00    	je     c5b3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x263>
	    if (_M_string_length > _S_local_capacity)
    c52c:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
      { return _M_dataplus._M_p; }
    c531:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
	if (_M_data() == _M_local_data())
    c536:	48 8d 74 24 30       	lea    rsi,[rsp+0x30]
	    if (_M_string_length > _S_local_capacity)
    c53b:	49 89 d0             	mov    r8,rdx
	if (_M_data() == _M_local_data())
    c53e:	48 39 f1             	cmp    rcx,rsi
    c541:	0f 84 9e 00 00 00    	je     c5e5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x295>
    c547:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
    c54c:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
		    __capacity = _M_allocated_capacity;
    c550:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
    c555:	0f 16 44 24 30       	movhps xmm0,QWORD PTR [rsp+0x30]
      { _M_string_length = __length; }
    c55a:	0f 11 44 24 08       	movups XMMWORD PTR [rsp+0x8],xmm0
	    if (__data)
    c55f:	48 85 c0             	test   rax,rax
    c562:	74 6d                	je     c5d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x281>
      { _M_dataplus._M_p = __p; }
    c564:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
      { _M_allocated_capacity = __capacity; }
    c569:	48 89 54 24 30       	mov    QWORD PTR [rsp+0x30],rdx
      { _M_string_length = __length; }
    c56e:	48 c7 44 24 28 00 00 	mov    QWORD PTR [rsp+0x28],0x0
    c575:	00 00 
      { _M_dispose(); }
    c577:	4c 89 f7             	mov    rdi,r14
	__c1 = __c2;
    c57a:	c6 00 00             	mov    BYTE PTR [rax],0x0
    c57d:	e8 6e 93 ff ff       	call   58f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
      { return _M_string_length; }
    c582:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    c587:	e9 66 fe ff ff       	jmp    c3f2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa2>
    c58c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      { return this->do_truename(); }
    c590:	4c 89 fe             	mov    rsi,r15
    c593:	4c 89 f7             	mov    rdi,r14
    c596:	ff 50 28             	call   QWORD PTR [rax+0x28]
    c599:	eb 81                	jmp    c51c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1cc>
    c59b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    c5a0:	4c 89 ff             	mov    rdi,r15
    c5a3:	e8 c8 6d ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    c5a8:	41 c6 44 24 20 01    	mov    BYTE PTR [r12+0x20],0x1
    c5ae:	e9 1b ff ff ff       	jmp    c4ce <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x17e>
      { return _M_dataplus._M_p; }
    c5b3:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
	if (_M_data() == _M_local_data())
    c5b8:	48 8d 74 24 30       	lea    rsi,[rsp+0x30]
    c5bd:	48 39 f2             	cmp    rdx,rsi
    c5c0:	74 1b                	je     c5dd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x28d>
      { return _M_string_length; }
    c5c2:	f3 0f 6f 44 24 28    	movdqu xmm0,XMMWORD PTR [rsp+0x28]
      { _M_dataplus._M_p = __p; }
    c5c8:	48 89 14 24          	mov    QWORD PTR [rsp],rdx
      { _M_string_length = __length; }
    c5cc:	0f 11 44 24 08       	movups XMMWORD PTR [rsp+0x8],xmm0
      { _M_dataplus._M_p = __p; }
    c5d1:	48 89 74 24 20       	mov    QWORD PTR [rsp+0x20],rsi
    c5d6:	48 8d 44 24 30       	lea    rax,[rsp+0x30]
    c5db:	eb 91                	jmp    c56e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x21e>
	    if (_M_string_length > _S_local_capacity)
    c5dd:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
    c5e2:	49 89 d0             	mov    r8,rdx
		if (__str.size())
    c5e5:	48 85 d2             	test   rdx,rdx
    c5e8:	74 3c                	je     c626 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
	if (__n == 1)
    c5ea:	48 83 fa 01          	cmp    rdx,0x1
    c5ee:	0f 84 8d 00 00 00    	je     c681 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x331>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c5f4:	89 d0                	mov    eax,edx
    c5f6:	83 fa 08             	cmp    edx,0x8
    c5f9:	73 3f                	jae    c63a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ea>
    c5fb:	f6 c2 04             	test   dl,0x4
    c5fe:	0f 85 8f 00 00 00    	jne    c693 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x343>
    c604:	85 d2                	test   edx,edx
    c606:	74 18                	je     c620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d0>
    c608:	0f b6 54 24 30       	movzx  edx,BYTE PTR [rsp+0x30]
    c60d:	88 17                	mov    BYTE PTR [rdi],dl
    c60f:	a8 02                	test   al,0x2
    c611:	0f 85 98 00 00 00    	jne    c6af <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x35f>
    c617:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    c61b:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
      { return _M_string_length; }
    c620:	49 89 d0             	mov    r8,rdx
      { return _M_dataplus._M_p; }
    c623:	48 89 f8             	mov    rax,rdi
      { _M_string_length = __length; }
    c626:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
	__c1 = __c2;
    c62b:	42 c6 04 00 00       	mov    BYTE PTR [rax+r8*1],0x0
      { return _M_dataplus._M_p; }
    c630:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
      }
    c635:	e9 34 ff ff ff       	jmp    c56e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x21e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c63a:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    c63f:	48 89 07             	mov    QWORD PTR [rdi],rax
    c642:	89 d0                	mov    eax,edx
    c644:	48 8b 4c 06 f8       	mov    rcx,QWORD PTR [rsi+rax*1-0x8]
    c649:	48 89 4c 07 f8       	mov    QWORD PTR [rdi+rax*1-0x8],rcx
    c64e:	48 8d 4f 08          	lea    rcx,[rdi+0x8]
    c652:	48 89 f8             	mov    rax,rdi
    c655:	48 83 e1 f8          	and    rcx,0xfffffffffffffff8
    c659:	48 29 c8             	sub    rax,rcx
    c65c:	48 29 c6             	sub    rsi,rax
    c65f:	01 d0                	add    eax,edx
    c661:	83 e0 f8             	and    eax,0xfffffff8
    c664:	83 f8 08             	cmp    eax,0x8
    c667:	72 ae                	jb     c617 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c7>
    c669:	83 e0 f8             	and    eax,0xfffffff8
    c66c:	31 d2                	xor    edx,edx
    c66e:	89 d7                	mov    edi,edx
    c670:	83 c2 08             	add    edx,0x8
    c673:	4c 8b 04 3e          	mov    r8,QWORD PTR [rsi+rdi*1]
    c677:	4c 89 04 39          	mov    QWORD PTR [rcx+rdi*1],r8
    c67b:	39 c2                	cmp    edx,eax
    c67d:	72 ef                	jb     c66e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x31e>
    c67f:	eb 96                	jmp    c617 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c7>
	__c1 = __c2;
    c681:	0f b6 44 24 30       	movzx  eax,BYTE PTR [rsp+0x30]
    c686:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_string_length; }
    c688:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
      { return _M_dataplus._M_p; }
    c68d:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
      }
    c691:	eb 93                	jmp    c626 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c693:	8b 54 24 30          	mov    edx,DWORD PTR [rsp+0x30]
    c697:	89 17                	mov    DWORD PTR [rdi],edx
    c699:	8b 54 06 fc          	mov    edx,DWORD PTR [rsi+rax*1-0x4]
    c69d:	89 54 07 fc          	mov    DWORD PTR [rdi+rax*1-0x4],edx
    c6a1:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    c6a5:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
    c6aa:	e9 71 ff ff ff       	jmp    c620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d0>
    c6af:	0f b7 54 06 fe       	movzx  edx,WORD PTR [rsi+rax*1-0x2]
    c6b4:	66 89 54 07 fe       	mov    WORD PTR [rdi+rax*1-0x2],dx
    c6b9:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    c6bd:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
    c6c2:	e9 59 ff ff ff       	jmp    c620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d0>
    c6c7:	45 31 c9             	xor    r9d,r9d
    c6ca:	4d 89 f0             	mov    r8,r14
    c6cd:	4c 89 e9             	mov    rcx,r13
    c6d0:	31 d2                	xor    edx,edx
    c6d2:	4c 89 ee             	mov    rsi,r13
    c6d5:	e8 d6 6b ff ff       	call   32b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>
    c6da:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    c6de:	e9 00 fd ff ff       	jmp    c3e3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x93>
      __throw_bad_cast();
    c6e3:	e8 78 6b ff ff       	call   3260 <std::__throw_bad_cast()@plt>
    c6e8:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    c6ef:	00 00 00 
    c6f2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    c6f9:	00 00 00 
    c6fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000000c700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    c700:	41 57                	push   r15
    c702:	41 56                	push   r14
    c704:	41 89 f6             	mov    r14d,esi
    c707:	41 55                	push   r13
    c709:	41 54                	push   r12
    c70b:	49 89 d4             	mov    r12,rdx
    c70e:	55                   	push   rbp
    c70f:	48 89 fd             	mov    rbp,rdi
    c712:	53                   	push   rbx
    c713:	48 83 ec 58          	sub    rsp,0x58
	  if (_M_spec._M_type == _Pres_c)
    c717:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    c71b:	89 c1                	mov    ecx,eax
    c71d:	83 e1 78             	and    ecx,0x78
    c720:	80 f9 38             	cmp    cl,0x38
    c723:	0f 84 87 01 00 00    	je     c8b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1b0>
	  switch (_M_spec._M_type)
    c729:	c0 e8 03             	shr    al,0x3
    c72c:	83 e0 0f             	and    eax,0xf
	  if (__i < 0)
    c72f:	85 f6                	test   esi,esi
    c731:	0f 88 e1 00 00 00    	js     c818 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x118>
    c737:	89 f6                	mov    esi,esi
	  switch (_M_spec._M_type)
    c739:	3c 04                	cmp    al,0x4
    c73b:	0f 84 ff 02 00 00    	je     ca40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
    c741:	0f 87 b9 01 00 00    	ja     c900 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
    c747:	3c 01                	cmp    al,0x1
    c749:	0f 86 c1 02 00 00    	jbe    ca10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    c74f:	80 f9 10             	cmp    cl,0x10
    c752:	4c 8d 2d c3 8a 00 00 	lea    r13,[rip+0x8ac3]        # 1521c <CSWTCH.1104+0x13c>
    c759:	48 8d 05 bf 8a 00 00 	lea    rax,[rip+0x8abf]        # 1521f <CSWTCH.1104+0x13f>
    c760:	49 0f 44 c5          	cmove  rax,r13
    c764:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
      if (__value == 0)
    c769:	45 85 f6             	test   r14d,r14d
    c76c:	0f 85 d8 00 00 00    	jne    c84a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x14a>
    c772:	b8 30 00 00 00       	mov    eax,0x30
    c777:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
    c77c:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
      __first[0] = '1';
    c781:	88 44 24 23          	mov    BYTE PTR [rsp+0x23],al
	  if (_M_spec._M_alt && __base_prefix.size())
    c785:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    c789:	0f 84 51 02 00 00    	je     c9e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
    c78f:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c796:	b8 02 00 00 00       	mov    eax,0x2
	      __start -= __base_prefix.size();
    c79b:	4c 01 fe             	add    rsi,r15
	      __builtin_memcpy(__start, __base_prefix.data(),
    c79e:	89 c1                	mov    ecx,eax
    c7a0:	85 c0                	test   eax,eax
    c7a2:	74 1c                	je     c7c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc0>
    c7a4:	31 c0                	xor    eax,eax
    c7a6:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
    c7ab:	89 c2                	mov    edx,eax
    c7ad:	83 c0 01             	add    eax,0x1
    c7b0:	0f b6 3c 17          	movzx  edi,BYTE PTR [rdi+rdx*1]
    c7b4:	40 88 3c 16          	mov    BYTE PTR [rsi+rdx*1],dil
    c7b8:	39 c8                	cmp    eax,ecx
    c7ba:	72 ea                	jb     c7a6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa6>
    c7bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    c7c0:	48 8d 56 ff          	lea    rdx,[rsi-0x1]
      if (__i < 0)
    c7c4:	45 85 f6             	test   r14d,r14d
    c7c7:	0f 88 23 02 00 00    	js     c9f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f0>
    c7cd:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    c7d1:	c0 e8 02             	shr    al,0x2
    c7d4:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    c7d7:	83 f8 01             	cmp    eax,0x1
    c7da:	0f 84 20 02 00 00    	je     ca00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x300>
      else if (__sign == _Sign_space)
    c7e0:	83 f8 03             	cmp    eax,0x3
    c7e3:	0f 84 07 03 00 00    	je     caf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    c7e9:	48 29 f3             	sub    rbx,rsi
			       __start_digits - __start, __fc);
    c7ec:	4c 89 f9             	mov    rcx,r15
    c7ef:	48 89 f2             	mov    rdx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    c7f2:	4d 89 e0             	mov    r8,r12
			       __start_digits - __start, __fc);
    c7f5:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    c7f8:	48 89 ef             	mov    rdi,rbp
    c7fb:	48 89 de             	mov    rsi,rbx
    c7fe:	e8 2d f2 ff ff       	call   ba30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
	}
    c803:	48 83 c4 58          	add    rsp,0x58
    c807:	5b                   	pop    rbx
    c808:	5d                   	pop    rbp
    c809:	41 5c                	pop    r12
    c80b:	41 5d                	pop    r13
    c80d:	41 5e                	pop    r14
    c80f:	41 5f                	pop    r15
    c811:	c3                   	ret
    c812:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    c818:	f7 de                	neg    esi
	  switch (_M_spec._M_type)
    c81a:	3c 04                	cmp    al,0x4
    c81c:	0f 84 2e 02 00 00    	je     ca50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x350>
    c822:	0f 87 18 01 00 00    	ja     c940 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
    c828:	3c 01                	cmp    al,0x1
    c82a:	0f 86 d0 02 00 00    	jbe    cb00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    c830:	80 f9 10             	cmp    cl,0x10
    c833:	4c 8d 2d e5 89 00 00 	lea    r13,[rip+0x89e5]        # 1521f <CSWTCH.1104+0x13f>
    c83a:	48 8d 05 db 89 00 00 	lea    rax,[rip+0x89db]        # 1521c <CSWTCH.1104+0x13c>
    c841:	49 0f 45 c5          	cmovne rax,r13
    c845:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
	  return __builtin_clz(__x) - __diff;
    c84a:	44 0f bd c6          	bsr    r8d,esi
      return _Nd - std::__countl_zero(__x);
    c84e:	bb 20 00 00 00       	mov    ebx,0x20
      unsigned __pos = __len - 1;
    c853:	ba 1f 00 00 00       	mov    edx,0x1f
	  return __builtin_clz(__x) - __diff;
    c858:	41 83 f0 1f          	xor    r8d,0x1f
      return _Nd - std::__countl_zero(__x);
    c85c:	44 29 c3             	sub    ebx,r8d
      while (__pos)
    c85f:	44 29 c2             	sub    edx,r8d
    c862:	74 32                	je     c896 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x196>
    c864:	89 d1                	mov    ecx,edx
    c866:	b8 1e 00 00 00       	mov    eax,0x1e
    c86b:	48 8d 7c 0c 1f       	lea    rdi,[rsp+rcx*1+0x1f]
    c870:	44 29 c0             	sub    eax,r8d
    c873:	48 8d 54 0c 20       	lea    rdx,[rsp+rcx*1+0x20]
    c878:	48 29 c7             	sub    rdi,rax
    c87b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  __first[__pos--] = '0' + (__val & 1);
    c880:	89 f1                	mov    ecx,esi
      while (__pos)
    c882:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    c886:	d1 ee                	shr    esi,1
	  __first[__pos--] = '0' + (__val & 1);
    c888:	83 e1 01             	and    ecx,0x1
    c88b:	83 c1 30             	add    ecx,0x30
    c88e:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
      while (__pos)
    c891:	48 39 d7             	cmp    rdi,rdx
    c894:	75 ea                	jne    c880 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x180>
      __res.ptr = __first + __len;
    c896:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    c89b:	48 63 db             	movsxd rbx,ebx
    c89e:	b8 31 00 00 00       	mov    eax,0x31
    c8a3:	4c 01 fb             	add    rbx,r15
    c8a6:	e9 d6 fe ff ff       	jmp    c781 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x81>
    c8ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
    c8b0:	8d 86 80 00 00 00    	lea    eax,[rsi+0x80]
    c8b6:	3d ff 00 00 00       	cmp    eax,0xff
    c8bb:	0f 87 d7 03 00 00    	ja     cc98 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x598>
    c8c1:	48 8d 4c 24 20       	lea    rcx,[rsp+0x20]
    c8c6:	b8 01 00 00 00       	mov    eax,0x1
    c8cb:	40 88 74 24 20       	mov    BYTE PTR [rsp+0x20],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    c8d0:	49 89 e8             	mov    r8,rbp
    c8d3:	48 89 ce             	mov    rsi,rcx
    c8d6:	48 89 c7             	mov    rdi,rax
    c8d9:	4c 89 e1             	mov    rcx,r12
    c8dc:	ba 01 00 00 00       	mov    edx,0x1
    c8e1:	41 b9 01 00 00 00    	mov    r9d,0x1
    c8e7:	e8 a4 cf ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    c8ec:	48 83 c4 58          	add    rsp,0x58
    c8f0:	5b                   	pop    rbx
    c8f1:	5d                   	pop    rbp
    c8f2:	41 5c                	pop    r12
    c8f4:	41 5d                	pop    r13
    c8f6:	41 5e                	pop    r14
    c8f8:	41 5f                	pop    r15
    c8fa:	c3                   	ret
    c8fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c900:	80 f9 28             	cmp    cl,0x28
    c903:	0f 84 ff 02 00 00    	je     cc08 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x508>
      if (__value == 0)
    c909:	45 85 f6             	test   r14d,r14d
    c90c:	0f 85 46 03 00 00    	jne    cc58 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x558>
	  *__first = '0';
    c912:	c6 44 24 23 30       	mov    BYTE PTR [rsp+0x23],0x30
	      if (_M_spec._M_type == _Pres_X)
    c917:	80 f9 30             	cmp    cl,0x30
    c91a:	0f 84 a0 02 00 00    	je     cbc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c0>
    c920:	48 8d 05 fb 88 00 00 	lea    rax,[rip+0x88fb]        # 15222 <CSWTCH.1104+0x142>
    c927:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
    c92c:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    c931:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    c936:	e9 9b 00 00 00       	jmp    c9d6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
    c93b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c940:	80 f9 28             	cmp    cl,0x28
    c943:	4c 8d 2d db 88 00 00 	lea    r13,[rip+0x88db]        # 15225 <CSWTCH.1104+0x145>
    c94a:	48 8d 05 d1 88 00 00 	lea    rax,[rip+0x88d1]        # 15222 <CSWTCH.1104+0x142>
    c951:	49 0f 44 c5          	cmove  rax,r13
    c955:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    c95a:	0f bd c6             	bsr    eax,esi
      constexpr char __digits[] = {
    c95d:	66 0f 6f 05 4b be 00 	movdqa xmm0,XMMWORD PTR [rip+0xbe4b]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    c964:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    c965:	8d 58 04             	lea    ebx,[rax+0x4]
    c968:	c1 eb 02             	shr    ebx,0x2
      constexpr char __digits[] = {
    c96b:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
      unsigned __pos = __len - 1;
    c970:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0x100)
    c973:	81 fe ff 00 00 00    	cmp    esi,0xff
    c979:	76 38                	jbe    c9b3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2b3>
    c97b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  __first[__pos] = __digits[__num];
    c980:	89 f7                	mov    edi,esi
    c982:	89 c2                	mov    edx,eax
    c984:	83 e7 0f             	and    edi,0xf
    c987:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [rsp+rdi*1+0x10]
    c98c:	40 88 7c 14 23       	mov    BYTE PTR [rsp+rdx*1+0x23],dil
	  __val >>= 4;
    c991:	89 f2                	mov    edx,esi
	  __first[__pos - 1] = __digits[__num];
    c993:	8d 78 ff             	lea    edi,[rax-0x1]
	  __val >>= 4;
    c996:	c1 ee 08             	shr    esi,0x8
	  __val >>= 4;
    c999:	c1 ea 04             	shr    edx,0x4
	  __pos -= 2;
    c99c:	83 e8 02             	sub    eax,0x2
	  __first[__pos - 1] = __digits[__num];
    c99f:	83 e2 0f             	and    edx,0xf
    c9a2:	0f b6 54 14 10       	movzx  edx,BYTE PTR [rsp+rdx*1+0x10]
    c9a7:	88 54 3c 23          	mov    BYTE PTR [rsp+rdi*1+0x23],dl
      while (__val >= 0x100)
    c9ab:	81 fe ff 00 00 00    	cmp    esi,0xff
    c9b1:	77 cd                	ja     c980 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x280>
      if (__val >= 0x10)
    c9b3:	83 fe 0f             	cmp    esi,0xf
    c9b6:	0f 87 e4 01 00 00    	ja     cba0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
	__first[0] = __digits[__val];
    c9bc:	0f b6 44 34 10       	movzx  eax,BYTE PTR [rsp+rsi*1+0x10]
      __res.ptr = __first + __len;
    c9c1:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    c9c6:	88 44 24 23          	mov    BYTE PTR [rsp+0x23],al
    c9ca:	4c 01 fb             	add    rbx,r15
	      if (_M_spec._M_type == _Pres_X)
    c9cd:	80 f9 30             	cmp    cl,0x30
    c9d0:	0f 84 00 02 00 00    	je     cbd6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d6>
	  if (_M_spec._M_alt && __base_prefix.size())
    c9d6:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    c9da:	0f 85 af fd ff ff    	jne    c78f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f>
	  char* __start = __buf + 3;
    c9e0:	4c 89 fe             	mov    rsi,r15
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    c9e3:	48 8d 56 ff          	lea    rdx,[rsi-0x1]
      if (__i < 0)
    c9e7:	45 85 f6             	test   r14d,r14d
    c9ea:	0f 89 dd fd ff ff    	jns    c7cd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcd>
	*__dest = '-';
    c9f0:	c6 46 ff 2d          	mov    BYTE PTR [rsi-0x1],0x2d
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    c9f4:	48 89 d6             	mov    rsi,rdx
    c9f7:	e9 ed fd ff ff       	jmp    c7e9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe9>
    c9fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	*__dest = '+';
    ca00:	c6 46 ff 2b          	mov    BYTE PTR [rsi-0x1],0x2b
    ca04:	eb ee                	jmp    c9f4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f4>
    ca06:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ca0d:	00 00 00 
      if (__value == 0)
    ca10:	45 85 f6             	test   r14d,r14d
    ca13:	0f 85 e7 00 00 00    	jne    cb00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
      __glibcxx_assert(2 <= __base && __base <= 36);
    ca19:	c6 44 24 23 30       	mov    BYTE PTR [rsp+0x23],0x30
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    ca1e:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  char* __start = __buf + 3;
    ca22:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    ca27:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
    ca2c:	4c 89 fe             	mov    rsi,r15
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    ca2f:	48 8d 54 24 22       	lea    rdx,[rsp+0x22]
    ca34:	e9 98 fd ff ff       	jmp    c7d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1>
    ca39:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    ca40:	45 85 f6             	test   r14d,r14d
    ca43:	74 d4                	je     ca19 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x319>
    ca45:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    ca4c:	00 00 00 00 
	__len = (__to_chars_len_2(__val) + 2) / 3;
    ca50:	0f bd c6             	bsr    eax,esi
    ca53:	8d 58 03             	lea    ebx,[rax+0x3]
    ca56:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    ca5b:	48 0f af d8          	imul   rbx,rax
    ca5f:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    ca63:	8d 4b ff             	lea    ecx,[rbx-0x1]
      while (__val >= 0100)
    ca66:	83 fe 3f             	cmp    esi,0x3f
    ca69:	76 40                	jbe    caab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ab>
    ca6b:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    ca72:	00 00 00 00 
    ca76:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ca7d:	00 00 00 
	  auto __num = __val & 7;
    ca80:	89 f2                	mov    edx,esi
	  __first[__pos] = '0' + __num;
    ca82:	89 cf                	mov    edi,ecx
	  auto __num = __val & 7;
    ca84:	83 e2 07             	and    edx,0x7
	  __first[__pos] = '0' + __num;
    ca87:	83 c2 30             	add    edx,0x30
    ca8a:	88 54 3c 23          	mov    BYTE PTR [rsp+rdi*1+0x23],dl
	  __val >>= 3;
    ca8e:	89 f2                	mov    edx,esi
	  __first[__pos - 1] = '0' + __num;
    ca90:	8d 79 ff             	lea    edi,[rcx-0x1]
	  __val >>= 3;
    ca93:	c1 ee 06             	shr    esi,0x6
	  __val >>= 3;
    ca96:	c1 ea 03             	shr    edx,0x3
	  __pos -= 2;
    ca99:	83 e9 02             	sub    ecx,0x2
	  __num = __val & 7;
    ca9c:	83 e2 07             	and    edx,0x7
	  __first[__pos - 1] = '0' + __num;
    ca9f:	83 c2 30             	add    edx,0x30
    caa2:	88 54 3c 23          	mov    BYTE PTR [rsp+rdi*1+0x23],dl
      while (__val >= 0100)
    caa6:	83 fe 3f             	cmp    esi,0x3f
    caa9:	77 d5                	ja     ca80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
	__first[0] = '0' + __val;
    caab:	8d 46 30             	lea    eax,[rsi+0x30]
      if (__val >= 010)
    caae:	83 fe 07             	cmp    esi,0x7
    cab1:	0f 87 c9 00 00 00    	ja     cb80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x480>
    cab7:	88 44 24 23          	mov    BYTE PTR [rsp+0x23],al
      __res.ptr = __first + __len;
    cabb:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cac0:	89 db                	mov    ebx,ebx
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    cac2:	48 8d 05 0f 87 00 00 	lea    rax,[rip+0x870f]        # 151d8 <CSWTCH.1104+0xf8>
    cac9:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cace:	4c 01 fb             	add    rbx,r15
    cad1:	b8 01 00 00 00       	mov    eax,0x1
	  char* __start = __buf + 3;
    cad6:	4c 89 fe             	mov    rsi,r15
	  if (_M_spec._M_alt && __base_prefix.size())
    cad9:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    cadd:	0f 84 dd fc ff ff    	je     c7c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc0>
	      __start -= __base_prefix.size();
    cae3:	48 89 c6             	mov    rsi,rax
    cae6:	48 f7 de             	neg    rsi
    cae9:	e9 ad fc ff ff       	jmp    c79b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9b>
    caee:	66 90                	xchg   ax,ax
	*__dest = ' ';
    caf0:	c6 46 ff 20          	mov    BYTE PTR [rsi-0x1],0x20
    caf4:	e9 fb fe ff ff       	jmp    c9f4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f4>
    caf9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < (unsigned)__base) return __n;
    cb00:	83 fe 09             	cmp    esi,0x9
    cb03:	0f 86 80 01 00 00    	jbe    cc89 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x589>
    cb09:	89 f1                	mov    ecx,esi
      unsigned __n = 1;
    cb0b:	bf 01 00 00 00       	mov    edi,0x1
	  __value /= __b4;
    cb10:	49 b8 4b 59 86 38 d6 	movabs r8,0x346dc5d63886594b
    cb17:	c5 6d 34 
    cb1a:	eb 35                	jmp    cb51 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x451>
    cb1c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    cb20:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    cb26:	0f 86 1c 01 00 00    	jbe    cc48 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x548>
	  if (__value < __b4) return __n + 3;
    cb2c:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    cb32:	0f 86 18 01 00 00    	jbe    cc50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x550>
	  __value /= __b4;
    cb38:	89 ca                	mov    edx,ecx
	  __n += 4;
    cb3a:	83 c7 04             	add    edi,0x4
	  __value /= __b4;
    cb3d:	48 89 d0             	mov    rax,rdx
    cb40:	49 f7 e0             	mul    r8
    cb43:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    cb47:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    cb4d:	76 0a                	jbe    cb59 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x459>
    cb4f:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    cb51:	83 f9 63             	cmp    ecx,0x63
    cb54:	77 ca                	ja     cb20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x420>
    cb56:	83 c7 01             	add    edi,0x1
      __res.ptr = __first + __len;
    cb59:	89 fb                	mov    ebx,edi
      if (__builtin_expect((__last - __first) < __len, 0))
    cb5b:	83 ff 20             	cmp    edi,0x20
    cb5e:	0f 87 05 01 00 00    	ja     cc69 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x569>
      __detail::__to_chars_10_impl(__first, __len, __val);
    cb64:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cb69:	89 f2                	mov    edx,esi
    cb6b:	89 fe                	mov    esi,edi
    cb6d:	4c 89 ff             	mov    rdi,r15
      __res.ptr = __first + __len;
    cb70:	4c 01 fb             	add    rbx,r15
      __detail::__to_chars_10_impl(__first, __len, __val);
    cb73:	e8 f8 89 ff ff       	call   5570 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
      return __res;
    cb78:	e9 63 fe ff ff       	jmp    c9e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
    cb7d:	0f 1f 00             	nop    DWORD PTR [rax]
	  auto const __num = __val & 7;
    cb80:	89 f0                	mov    eax,esi
    cb82:	83 e0 07             	and    eax,0x7
	  __first[1] = '0' + __num;
    cb85:	83 c0 30             	add    eax,0x30
    cb88:	88 44 24 24          	mov    BYTE PTR [rsp+0x24],al
	  __val >>= 3;
    cb8c:	89 f0                	mov    eax,esi
    cb8e:	c1 e8 03             	shr    eax,0x3
	  __first[0] = '0' + __val;
    cb91:	83 c0 30             	add    eax,0x30
    cb94:	e9 1e ff ff ff       	jmp    cab7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3b7>
    cb99:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  __first[1] = __digits[__num];
    cba0:	89 f0                	mov    eax,esi
	  __val >>= 4;
    cba2:	c1 ee 04             	shr    esi,0x4
	  __first[1] = __digits[__num];
    cba5:	83 e0 0f             	and    eax,0xf
    cba8:	0f b6 44 04 10       	movzx  eax,BYTE PTR [rsp+rax*1+0x10]
    cbad:	88 44 24 24          	mov    BYTE PTR [rsp+0x24],al
	  __first[0] = __digits[__val];
    cbb1:	0f b6 44 34 10       	movzx  eax,BYTE PTR [rsp+rsi*1+0x10]
    cbb6:	e9 06 fe ff ff       	jmp    c9c1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c1>
    cbbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type == _Pres_X)
    cbc0:	48 8d 05 5b 86 00 00 	lea    rax,[rip+0x865b]        # 15222 <CSWTCH.1104+0x142>
    cbc7:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
    cbcc:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cbd1:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cbd6:	4d 89 fd             	mov    r13,r15
    cbd9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  *__p = __builtin_toupper(*__p);
    cbe0:	41 0f be 7d 00       	movsx  edi,BYTE PTR [r13+0x0]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    cbe5:	49 83 c5 01          	add    r13,0x1
		  *__p = __builtin_toupper(*__p);
    cbe9:	e8 62 67 ff ff       	call   3350 <toupper@plt>
    cbee:	41 88 45 ff          	mov    BYTE PTR [r13-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    cbf2:	49 39 dd             	cmp    r13,rbx
    cbf5:	75 e9                	jne    cbe0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cbf7:	b8 02 00 00 00       	mov    eax,0x2
    cbfc:	e9 d5 fe ff ff       	jmp    cad6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d6>
    cc01:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      if (__value == 0)
    cc08:	45 85 f6             	test   r14d,r14d
    cc0b:	75 6b                	jne    cc78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x578>
	  if (_M_spec._M_alt && __base_prefix.size())
    cc0d:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
	  *__first = '0';
    cc10:	c6 44 24 23 30       	mov    BYTE PTR [rsp+0x23],0x30
    cc15:	a8 10                	test   al,0x10
    cc17:	0f 84 05 fe ff ff    	je     ca22 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x322>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cc1d:	48 8d 05 01 86 00 00 	lea    rax,[rip+0x8601]        # 15225 <CSWTCH.1104+0x145>
	  if (_M_spec._M_alt && __base_prefix.size())
    cc24:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
    cc2b:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cc30:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cc35:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cc3a:	b8 02 00 00 00       	mov    eax,0x2
    cc3f:	e9 57 fb ff ff       	jmp    c79b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9b>
    cc44:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    cc48:	83 c7 02             	add    edi,0x2
    cc4b:	e9 09 ff ff ff       	jmp    cb59 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x459>
	  if (__value < __b4) return __n + 3;
    cc50:	83 c7 03             	add    edi,0x3
    cc53:	e9 01 ff ff ff       	jmp    cb59 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x459>
    cc58:	48 8d 05 c3 85 00 00 	lea    rax,[rip+0x85c3]        # 15222 <CSWTCH.1104+0x142>
    cc5f:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cc64:	e9 f1 fc ff ff       	jmp    c95a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25a>
	  return __res;
    cc69:	48 8d 5c 24 43       	lea    rbx,[rsp+0x43]
    cc6e:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cc73:	e9 68 fd ff ff       	jmp    c9e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
    cc78:	48 8d 05 a6 85 00 00 	lea    rax,[rip+0x85a6]        # 15225 <CSWTCH.1104+0x145>
    cc7f:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cc84:	e9 d1 fc ff ff       	jmp    c95a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25a>
	  if (__value < (unsigned)__base) return __n;
    cc89:	bb 01 00 00 00       	mov    ebx,0x1
    cc8e:	bf 01 00 00 00       	mov    edi,0x1
    cc93:	e9 cc fe ff ff       	jmp    cb64 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x464>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    cc98:	e8 b3 64 ff ff       	call   3150 <abort@plt>
    cc9d:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    cca4:	00 00 00 
    cca7:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ccae:	00 00 00 
    ccb1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ccb8:	00 00 00 
    ccbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ccc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    ccc0:	41 57                	push   r15
    ccc2:	41 56                	push   r14
    ccc4:	41 55                	push   r13
    ccc6:	41 54                	push   r12
    ccc8:	49 89 d4             	mov    r12,rdx
    cccb:	55                   	push   rbp
    cccc:	48 89 fd             	mov    rbp,rdi
    cccf:	53                   	push   rbx
    ccd0:	48 83 ec 48          	sub    rsp,0x48
	  if (_M_spec._M_type == _Pres_c)
    ccd4:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    ccd8:	89 c1                	mov    ecx,eax
    ccda:	83 e1 78             	and    ecx,0x78
    ccdd:	80 f9 38             	cmp    cl,0x38
    cce0:	0f 84 8a 00 00 00    	je     cd70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb0>
	  switch (_M_spec._M_type)
    cce6:	c0 e8 03             	shr    al,0x3
    cce9:	83 e0 0f             	and    eax,0xf
    ccec:	3c 04                	cmp    al,0x4
    ccee:	0f 84 24 01 00 00    	je     ce18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x158>
    ccf4:	0f 87 56 01 00 00    	ja     ce50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x190>
    ccfa:	3c 01                	cmp    al,0x1
    ccfc:	0f 86 b6 00 00 00    	jbe    cdb8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf8>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    cd02:	80 f9 10             	cmp    cl,0x10
    cd05:	4c 8d 2d 10 85 00 00 	lea    r13,[rip+0x8510]        # 1521c <CSWTCH.1104+0x13c>
    cd0c:	48 8d 05 0c 85 00 00 	lea    rax,[rip+0x850c]        # 1521f <CSWTCH.1104+0x13f>
    cd13:	4c 0f 45 e8          	cmovne r13,rax
      if (__value == 0)
    cd17:	85 f6                	test   esi,esi
    cd19:	0f 85 d1 02 00 00    	jne    cff0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x330>
    cd1f:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    cd24:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    cd29:	b8 30 00 00 00       	mov    eax,0x30
      __first[0] = '1';
    cd2e:	88 44 24 13          	mov    BYTE PTR [rsp+0x13],al
	  if (_M_spec._M_alt && __base_prefix.size())
    cd32:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
    cd36:	a8 10                	test   al,0x10
    cd38:	0f 84 e3 01 00 00    	je     cf21 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x261>
    cd3e:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cd45:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    cd4a:	4c 01 f6             	add    rsi,r14
	      __builtin_memcpy(__start, __base_prefix.data(),
    cd4d:	89 d7                	mov    edi,edx
    cd4f:	85 d2                	test   edx,edx
    cd51:	0f 84 7f 00 00 00    	je     cdd6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    cd57:	31 d2                	xor    edx,edx
    cd59:	89 d1                	mov    ecx,edx
    cd5b:	83 c2 01             	add    edx,0x1
    cd5e:	45 0f b6 44 0d 00    	movzx  r8d,BYTE PTR [r13+rcx*1+0x0]
    cd64:	44 88 04 0e          	mov    BYTE PTR [rsi+rcx*1],r8b
    cd68:	39 fa                	cmp    edx,edi
    cd6a:	72 ed                	jb     cd59 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x99>
    cd6c:	eb 68                	jmp    cdd6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    cd6e:	66 90                	xchg   ax,ax
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    cd70:	83 fe 7f             	cmp    esi,0x7f
    cd73:	0f 87 5d 04 00 00    	ja     d1d6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x516>
    cd79:	48 8d 4c 24 10       	lea    rcx,[rsp+0x10]
    cd7e:	b8 01 00 00 00       	mov    eax,0x1
    cd83:	40 88 74 24 10       	mov    BYTE PTR [rsp+0x10],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    cd88:	49 89 e8             	mov    r8,rbp
    cd8b:	48 89 ce             	mov    rsi,rcx
    cd8e:	48 89 c7             	mov    rdi,rax
    cd91:	4c 89 e1             	mov    rcx,r12
    cd94:	ba 01 00 00 00       	mov    edx,0x1
    cd99:	41 b9 01 00 00 00    	mov    r9d,0x1
    cd9f:	e8 ec ca ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    cda4:	48 83 c4 48          	add    rsp,0x48
    cda8:	5b                   	pop    rbx
    cda9:	5d                   	pop    rbp
    cdaa:	41 5c                	pop    r12
    cdac:	41 5d                	pop    r13
    cdae:	41 5e                	pop    r14
    cdb0:	41 5f                	pop    r15
    cdb2:	c3                   	ret
    cdb3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      if (__value == 0)
    cdb8:	85 f6                	test   esi,esi
    cdba:	0f 85 b0 02 00 00    	jne    d070 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3b0>
	  *__first = '0';
    cdc0:	c6 44 24 13 30       	mov    BYTE PTR [rsp+0x13],0x30
    cdc5:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    cdca:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    cdcf:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  char* __start = __buf + 3;
    cdd3:	4c 89 f6             	mov    rsi,r14
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    cdd6:	c0 e8 02             	shr    al,0x2
    cdd9:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    cddc:	83 f8 01             	cmp    eax,0x1
    cddf:	74 5f                	je     ce40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x180>
      else if (__sign == _Sign_space)
    cde1:	83 f8 03             	cmp    eax,0x3
    cde4:	0f 84 9e 00 00 00    	je     ce88 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c8>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    cdea:	48 29 f3             	sub    rbx,rsi
			       __start_digits - __start, __fc);
    cded:	4c 89 f1             	mov    rcx,r14
    cdf0:	48 89 f2             	mov    rdx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    cdf3:	4d 89 e0             	mov    r8,r12
			       __start_digits - __start, __fc);
    cdf6:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    cdf9:	48 89 ef             	mov    rdi,rbp
    cdfc:	48 89 de             	mov    rsi,rbx
    cdff:	e8 2c ec ff ff       	call   ba30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
	}
    ce04:	48 83 c4 48          	add    rsp,0x48
    ce08:	5b                   	pop    rbx
    ce09:	5d                   	pop    rbp
    ce0a:	41 5c                	pop    r12
    ce0c:	41 5d                	pop    r13
    ce0e:	41 5e                	pop    r14
    ce10:	41 5f                	pop    r15
    ce12:	c3                   	ret
    ce13:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (__i != 0)
    ce18:	85 f6                	test   esi,esi
    ce1a:	0f 85 10 01 00 00    	jne    cf30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x270>
	  char* __start = __buf + 3;
    ce20:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    ce25:	c6 44 24 13 30       	mov    BYTE PTR [rsp+0x13],0x30
    ce2a:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
    ce2d:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    ce32:	4c 89 f6             	mov    rsi,r14
    ce35:	eb 9f                	jmp    cdd6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    ce37:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    ce3e:	00 00 
    ce40:	b8 2b 00 00 00       	mov    eax,0x2b
	*__dest = '+';
    ce45:	88 46 ff             	mov    BYTE PTR [rsi-0x1],al
    ce48:	48 83 ee 01          	sub    rsi,0x1
    ce4c:	eb 9c                	jmp    cdea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x12a>
    ce4e:	66 90                	xchg   ax,ax
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    ce50:	80 f9 28             	cmp    cl,0x28
    ce53:	0f 84 97 02 00 00    	je     d0f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x430>
      if (__value == 0)
    ce59:	85 f6                	test   esi,esi
    ce5b:	75 33                	jne    ce90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
	  *__first = '0';
    ce5d:	c6 44 24 13 30       	mov    BYTE PTR [rsp+0x13],0x30
	      if (_M_spec._M_type == _Pres_X)
    ce62:	80 f9 30             	cmp    cl,0x30
    ce65:	0f 84 f5 02 00 00    	je     d160 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
    ce6b:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    ce70:	4c 8d 2d ab 83 00 00 	lea    r13,[rip+0x83ab]        # 15222 <CSWTCH.1104+0x142>
    ce77:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    ce7c:	e9 94 00 00 00       	jmp    cf15 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x255>
    ce81:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    ce88:	b8 20 00 00 00       	mov    eax,0x20
    ce8d:	eb b6                	jmp    ce45 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x185>
    ce8f:	90                   	nop
    ce90:	4c 8d 2d 8b 83 00 00 	lea    r13,[rip+0x838b]        # 15222 <CSWTCH.1104+0x142>
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    ce97:	0f bd c6             	bsr    eax,esi
      constexpr char __digits[] = {
    ce9a:	66 0f 6f 05 0e b9 00 	movdqa xmm0,XMMWORD PTR [rip+0xb90e]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    cea1:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    cea2:	8d 58 04             	lea    ebx,[rax+0x4]
    cea5:	c1 eb 02             	shr    ebx,0x2
      constexpr char __digits[] = {
    cea8:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
      unsigned __pos = __len - 1;
    ceac:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0x100)
    ceaf:	81 fe ff 00 00 00    	cmp    esi,0xff
    ceb5:	76 3a                	jbe    cef1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x231>
    ceb7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    cebe:	00 00 
	  __first[__pos] = __digits[__num];
    cec0:	89 f7                	mov    edi,esi
    cec2:	89 c2                	mov    edx,eax
    cec4:	83 e7 0f             	and    edi,0xf
    cec7:	0f b6 3c 3c          	movzx  edi,BYTE PTR [rsp+rdi*1]
    cecb:	40 88 7c 14 13       	mov    BYTE PTR [rsp+rdx*1+0x13],dil
	  __val >>= 4;
    ced0:	89 f2                	mov    edx,esi
	  __first[__pos - 1] = __digits[__num];
    ced2:	8d 78 ff             	lea    edi,[rax-0x1]
	  __val >>= 4;
    ced5:	c1 ee 08             	shr    esi,0x8
	  __val >>= 4;
    ced8:	c1 ea 04             	shr    edx,0x4
	  __pos -= 2;
    cedb:	83 e8 02             	sub    eax,0x2
	  __first[__pos - 1] = __digits[__num];
    cede:	83 e2 0f             	and    edx,0xf
    cee1:	0f b6 14 14          	movzx  edx,BYTE PTR [rsp+rdx*1]
    cee5:	88 54 3c 13          	mov    BYTE PTR [rsp+rdi*1+0x13],dl
      while (__val >= 0x100)
    cee9:	81 fe ff 00 00 00    	cmp    esi,0xff
    ceef:	77 cf                	ja     cec0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
      if (__val >= 0x10)
    cef1:	83 fe 0f             	cmp    esi,0xf
    cef4:	0f 87 16 02 00 00    	ja     d110 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x450>
	__first[0] = __digits[__val];
    cefa:	89 f6                	mov    esi,esi
    cefc:	0f b6 04 34          	movzx  eax,BYTE PTR [rsp+rsi*1]
      __res.ptr = __first + __len;
    cf00:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    cf05:	88 44 24 13          	mov    BYTE PTR [rsp+0x13],al
    cf09:	4c 01 f3             	add    rbx,r14
    cf0c:	80 f9 30             	cmp    cl,0x30
    cf0f:	0f 84 5c 02 00 00    	je     d171 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b1>
	  if (_M_spec._M_alt && __base_prefix.size())
    cf15:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
    cf19:	a8 10                	test   al,0x10
    cf1b:	0f 85 1d fe ff ff    	jne    cd3e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e>
	  char* __start = __buf + 3;
    cf21:	4c 89 f6             	mov    rsi,r14
    cf24:	e9 ad fe ff ff       	jmp    cdd6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    cf29:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	__len = (__to_chars_len_2(__val) + 2) / 3;
    cf30:	0f bd c6             	bsr    eax,esi
    cf33:	8d 58 03             	lea    ebx,[rax+0x3]
    cf36:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    cf3b:	48 0f af d8          	imul   rbx,rax
    cf3f:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    cf43:	8d 4b ff             	lea    ecx,[rbx-0x1]
      while (__val >= 0100)
    cf46:	83 fe 3f             	cmp    esi,0x3f
    cf49:	76 60                	jbe    cfab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2eb>
    cf4b:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cf52:	00 00 00 00 
    cf56:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cf5d:	00 00 00 00 
    cf61:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cf68:	00 00 00 00 
    cf6c:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cf73:	00 00 00 00 
    cf77:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    cf7e:	00 00 
	  auto __num = __val & 7;
    cf80:	89 f2                	mov    edx,esi
	  __first[__pos] = '0' + __num;
    cf82:	89 cf                	mov    edi,ecx
	  auto __num = __val & 7;
    cf84:	83 e2 07             	and    edx,0x7
	  __first[__pos] = '0' + __num;
    cf87:	83 c2 30             	add    edx,0x30
    cf8a:	88 54 3c 13          	mov    BYTE PTR [rsp+rdi*1+0x13],dl
	  __val >>= 3;
    cf8e:	89 f2                	mov    edx,esi
	  __first[__pos - 1] = '0' + __num;
    cf90:	8d 79 ff             	lea    edi,[rcx-0x1]
	  __val >>= 3;
    cf93:	c1 ee 06             	shr    esi,0x6
	  __val >>= 3;
    cf96:	c1 ea 03             	shr    edx,0x3
	  __pos -= 2;
    cf99:	83 e9 02             	sub    ecx,0x2
	  __num = __val & 7;
    cf9c:	83 e2 07             	and    edx,0x7
	  __first[__pos - 1] = '0' + __num;
    cf9f:	83 c2 30             	add    edx,0x30
    cfa2:	88 54 3c 13          	mov    BYTE PTR [rsp+rdi*1+0x13],dl
      while (__val >= 0100)
    cfa6:	83 fe 3f             	cmp    esi,0x3f
    cfa9:	77 d5                	ja     cf80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c0>
	__first[0] = '0' + __val;
    cfab:	8d 46 30             	lea    eax,[rsi+0x30]
      if (__val >= 010)
    cfae:	83 fe 07             	cmp    esi,0x7
    cfb1:	0f 87 79 01 00 00    	ja     d130 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x470>
    cfb7:	88 44 24 13          	mov    BYTE PTR [rsp+0x13],al
      __res.ptr = __first + __len;
    cfbb:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    cfc0:	89 db                	mov    ebx,ebx
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    cfc2:	ba 01 00 00 00       	mov    edx,0x1
    cfc7:	4c 01 f3             	add    rbx,r14
    cfca:	4c 8d 2d 07 82 00 00 	lea    r13,[rip+0x8207]        # 151d8 <CSWTCH.1104+0xf8>
	  if (_M_spec._M_alt && __base_prefix.size())
    cfd1:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  char* __start = __buf + 3;
    cfd5:	4c 89 f6             	mov    rsi,r14
	  if (_M_spec._M_alt && __base_prefix.size())
    cfd8:	a8 10                	test   al,0x10
    cfda:	0f 84 f6 fd ff ff    	je     cdd6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
	      __start -= __base_prefix.size();
    cfe0:	48 89 d6             	mov    rsi,rdx
    cfe3:	48 f7 de             	neg    rsi
    cfe6:	e9 5f fd ff ff       	jmp    cd4a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8a>
    cfeb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  return __builtin_clz(__x) - __diff;
    cff0:	44 0f bd c6          	bsr    r8d,esi
      return _Nd - std::__countl_zero(__x);
    cff4:	bb 20 00 00 00       	mov    ebx,0x20
      unsigned __pos = __len - 1;
    cff9:	ba 1f 00 00 00       	mov    edx,0x1f
	  return __builtin_clz(__x) - __diff;
    cffe:	41 83 f0 1f          	xor    r8d,0x1f
      return _Nd - std::__countl_zero(__x);
    d002:	44 29 c3             	sub    ebx,r8d
      while (__pos)
    d005:	44 29 c2             	sub    edx,r8d
    d008:	74 4c                	je     d056 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x396>
    d00a:	89 d1                	mov    ecx,edx
    d00c:	b8 1e 00 00 00       	mov    eax,0x1e
    d011:	48 8d 7c 0c 0f       	lea    rdi,[rsp+rcx*1+0xf]
    d016:	44 29 c0             	sub    eax,r8d
    d019:	48 8d 54 0c 10       	lea    rdx,[rsp+rcx*1+0x10]
    d01e:	48 29 c7             	sub    rdi,rax
    d021:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d028:	00 00 00 00 
    d02c:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d033:	00 00 00 00 
    d037:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d03e:	00 00 
	  __first[__pos--] = '0' + (__val & 1);
    d040:	89 f1                	mov    ecx,esi
      while (__pos)
    d042:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    d046:	d1 ee                	shr    esi,1
	  __first[__pos--] = '0' + (__val & 1);
    d048:	83 e1 01             	and    ecx,0x1
    d04b:	83 c1 30             	add    ecx,0x30
    d04e:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
      while (__pos)
    d051:	48 39 d7             	cmp    rdi,rdx
    d054:	75 ea                	jne    d040 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
      __res.ptr = __first + __len;
    d056:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d05b:	48 63 db             	movsxd rbx,ebx
    d05e:	b8 31 00 00 00       	mov    eax,0x31
    d063:	4c 01 f3             	add    rbx,r14
    d066:	e9 c3 fc ff ff       	jmp    cd2e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6e>
    d06b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    d070:	83 fe 09             	cmp    esi,0x9
    d073:	0f 86 4e 01 00 00    	jbe    d1c7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x507>
    d079:	89 f1                	mov    ecx,esi
      unsigned __n = 1;
    d07b:	bf 01 00 00 00       	mov    edi,0x1
	  __value /= __b4;
    d080:	49 b8 4b 59 86 38 d6 	movabs r8,0x346dc5d63886594b
    d087:	c5 6d 34 
    d08a:	eb 35                	jmp    d0c1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x401>
    d08c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    d090:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    d096:	0f 86 04 01 00 00    	jbe    d1a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	  if (__value < __b4) return __n + 3;
    d09c:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    d0a2:	0f 86 08 01 00 00    	jbe    d1b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f0>
	  __value /= __b4;
    d0a8:	89 ca                	mov    edx,ecx
	  __n += 4;
    d0aa:	83 c7 04             	add    edi,0x4
	  __value /= __b4;
    d0ad:	48 89 d0             	mov    rax,rdx
    d0b0:	49 f7 e0             	mul    r8
    d0b3:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    d0b7:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    d0bd:	76 0a                	jbe    d0c9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x409>
    d0bf:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    d0c1:	83 f9 63             	cmp    ecx,0x63
    d0c4:	77 ca                	ja     d090 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d0>
    d0c6:	83 c7 01             	add    edi,0x1
      __res.ptr = __first + __len;
    d0c9:	89 fb                	mov    ebx,edi
      if (__builtin_expect((__last - __first) < __len, 0))
    d0cb:	83 ff 20             	cmp    edi,0x20
    d0ce:	0f 87 e4 00 00 00    	ja     d1b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f8>
      __detail::__to_chars_10_impl(__first, __len, __val);
    d0d4:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d0d9:	89 f2                	mov    edx,esi
    d0db:	89 fe                	mov    esi,edi
    d0dd:	4c 89 f7             	mov    rdi,r14
      __res.ptr = __first + __len;
    d0e0:	4c 01 f3             	add    rbx,r14
      __detail::__to_chars_10_impl(__first, __len, __val);
    d0e3:	e8 88 84 ff ff       	call   5570 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
      return __res;
    d0e8:	e9 e2 fc ff ff       	jmp    cdcf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x10f>
    d0ed:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__value == 0)
    d0f0:	85 f6                	test   esi,esi
    d0f2:	75 5c                	jne    d150 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x490>
	  *__first = '0';
    d0f4:	c6 44 24 13 30       	mov    BYTE PTR [rsp+0x13],0x30
    d0f9:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    d0fe:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d103:	4c 8d 2d 1b 81 00 00 	lea    r13,[rip+0x811b]        # 15225 <CSWTCH.1104+0x145>
    d10a:	e9 06 fe ff ff       	jmp    cf15 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x255>
    d10f:	90                   	nop
	  __first[1] = __digits[__num];
    d110:	89 f0                	mov    eax,esi
	  __val >>= 4;
    d112:	c1 ee 04             	shr    esi,0x4
	  __first[1] = __digits[__num];
    d115:	83 e0 0f             	and    eax,0xf
    d118:	0f b6 04 04          	movzx  eax,BYTE PTR [rsp+rax*1]
    d11c:	88 44 24 14          	mov    BYTE PTR [rsp+0x14],al
	  __first[0] = __digits[__val];
    d120:	0f b6 04 34          	movzx  eax,BYTE PTR [rsp+rsi*1]
    d124:	e9 d7 fd ff ff       	jmp    cf00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
    d129:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  auto const __num = __val & 7;
    d130:	89 f0                	mov    eax,esi
    d132:	83 e0 07             	and    eax,0x7
	  __first[1] = '0' + __num;
    d135:	83 c0 30             	add    eax,0x30
    d138:	88 44 24 14          	mov    BYTE PTR [rsp+0x14],al
	  __val >>= 3;
    d13c:	89 f0                	mov    eax,esi
    d13e:	c1 e8 03             	shr    eax,0x3
	  __first[0] = '0' + __val;
    d141:	83 c0 30             	add    eax,0x30
    d144:	e9 6e fe ff ff       	jmp    cfb7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f7>
    d149:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d150:	4c 8d 2d ce 80 00 00 	lea    r13,[rip+0x80ce]        # 15225 <CSWTCH.1104+0x145>
    d157:	e9 3b fd ff ff       	jmp    ce97 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d7>
    d15c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_M_spec._M_type == _Pres_X)
    d160:	4c 8d 2d bb 80 00 00 	lea    r13,[rip+0x80bb]        # 15222 <CSWTCH.1104+0x142>
    d167:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    d16c:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d171:	4d 89 f7             	mov    r15,r14
    d174:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d17b:	00 00 00 00 
    d17f:	90                   	nop
		  *__p = __builtin_toupper(*__p);
    d180:	41 0f be 3f          	movsx  edi,BYTE PTR [r15]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d184:	49 83 c7 01          	add    r15,0x1
		  *__p = __builtin_toupper(*__p);
    d188:	e8 c3 61 ff ff       	call   3350 <toupper@plt>
    d18d:	41 88 47 ff          	mov    BYTE PTR [r15-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d191:	49 39 df             	cmp    r15,rbx
    d194:	75 ea                	jne    d180 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c0>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d196:	ba 02 00 00 00       	mov    edx,0x2
    d19b:	e9 31 fe ff ff       	jmp    cfd1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x311>
	  if (__value < __b3) return __n + 2;
    d1a0:	83 c7 02             	add    edi,0x2
    d1a3:	e9 21 ff ff ff       	jmp    d0c9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x409>
    d1a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    d1af:	00 
	  if (__value < __b4) return __n + 3;
    d1b0:	83 c7 03             	add    edi,0x3
    d1b3:	e9 11 ff ff ff       	jmp    d0c9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x409>
	  return __res;
    d1b8:	48 8d 5c 24 33       	lea    rbx,[rsp+0x33]
    d1bd:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d1c2:	e9 08 fc ff ff       	jmp    cdcf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x10f>
	  if (__value < (unsigned)__base) return __n;
    d1c7:	bb 01 00 00 00       	mov    ebx,0x1
    d1cc:	bf 01 00 00 00       	mov    edi,0x1
    d1d1:	e9 fe fe ff ff       	jmp    d0d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x414>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    d1d6:	e8 75 5f ff ff       	call   3150 <abort@plt>
    d1db:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d1e2:	00 00 00 
    d1e5:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d1ec:	00 00 00 
    d1ef:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d1f6:	00 00 00 
    d1f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000000d200 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    d200:	41 57                	push   r15
    d202:	41 56                	push   r14
    d204:	41 55                	push   r13
    d206:	41 54                	push   r12
    d208:	49 89 d4             	mov    r12,rdx
    d20b:	55                   	push   rbp
    d20c:	48 89 fd             	mov    rbp,rdi
    d20f:	53                   	push   rbx
    d210:	48 89 f3             	mov    rbx,rsi
    d213:	48 81 ec 28 01 00 00 	sub    rsp,0x128
	  if (_M_spec._M_type == _Pres_c)
    d21a:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    d21e:	41 89 c7             	mov    r15d,eax
    d221:	41 83 e7 78          	and    r15d,0x78
    d225:	41 80 ff 38          	cmp    r15b,0x38
    d229:	0f 84 41 01 00 00    	je     d370 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x170>
	  switch (_M_spec._M_type)
    d22f:	c0 e8 03             	shr    al,0x3
    d232:	83 e0 0f             	and    eax,0xf
	  if (__i < 0)
    d235:	48 85 f6             	test   rsi,rsi
    d238:	0f 88 8a 00 00 00    	js     d2c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc8>
	  switch (_M_spec._M_type)
    d23e:	3c 04                	cmp    al,0x4
    d240:	0f 84 ca 02 00 00    	je     d510 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
    d246:	0f 87 74 01 00 00    	ja     d3c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c0>
    d24c:	3c 01                	cmp    al,0x1
    d24e:	0f 86 8c 02 00 00    	jbe    d4e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    d254:	41 80 ff 10          	cmp    r15b,0x10
    d258:	48 8d 3d bd 7f 00 00 	lea    rdi,[rip+0x7fbd]        # 1521c <CSWTCH.1104+0x13c>
    d25f:	48 8d 05 b9 7f 00 00 	lea    rax,[rip+0x7fb9]        # 1521f <CSWTCH.1104+0x13f>
    d266:	48 0f 45 f8          	cmovne rdi,rax
      if (__value == 0)
    d26a:	48 85 f6             	test   rsi,rsi
    d26d:	0f 85 84 00 00 00    	jne    d2f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf7>
    d273:	4c 8d 6c 24 04       	lea    r13,[rsp+0x4]
    d278:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d27d:	b8 30 00 00 00       	mov    eax,0x30
      __first[0] = '1';
    d282:	88 44 24 03          	mov    BYTE PTR [rsp+0x3],al
	  if (_M_spec._M_alt && __base_prefix.size())
    d286:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    d28a:	0f 84 70 01 00 00    	je     d400 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
    d290:	48 c7 c0 fe ff ff ff 	mov    rax,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d297:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    d29c:	4c 01 f0             	add    rax,r14
	      __builtin_memcpy(__start, __base_prefix.data(),
    d29f:	89 d6                	mov    esi,edx
    d2a1:	85 d2                	test   edx,edx
    d2a3:	0f 84 5a 01 00 00    	je     d403 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x203>
    d2a9:	31 d2                	xor    edx,edx
    d2ab:	89 d1                	mov    ecx,edx
    d2ad:	83 c2 01             	add    edx,0x1
    d2b0:	44 0f b6 04 0f       	movzx  r8d,BYTE PTR [rdi+rcx*1]
    d2b5:	44 88 04 08          	mov    BYTE PTR [rax+rcx*1],r8b
    d2b9:	39 f2                	cmp    edx,esi
    d2bb:	72 ee                	jb     d2ab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xab>
    d2bd:	e9 41 01 00 00       	jmp    d403 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x203>
    d2c2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    d2c8:	48 f7 de             	neg    rsi
	  switch (_M_spec._M_type)
    d2cb:	3c 04                	cmp    al,0x4
    d2cd:	0f 84 4d 02 00 00    	je     d520 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x320>
    d2d3:	0f 87 77 01 00 00    	ja     d450 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x250>
    d2d9:	3c 01                	cmp    al,0x1
    d2db:	0f 86 df 02 00 00    	jbe    d5c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    d2e1:	41 80 ff 10          	cmp    r15b,0x10
    d2e5:	48 8d 3d 33 7f 00 00 	lea    rdi,[rip+0x7f33]        # 1521f <CSWTCH.1104+0x13f>
    d2ec:	48 8d 05 29 7f 00 00 	lea    rax,[rip+0x7f29]        # 1521c <CSWTCH.1104+0x13c>
    d2f3:	48 0f 44 f8          	cmove  rdi,rax
	  return __builtin_clzl(__x) - __diff;
    d2f7:	4c 0f bd ce          	bsr    r9,rsi
      return _Nd - std::__countl_zero(__x);
    d2fb:	41 bd 40 00 00 00    	mov    r13d,0x40
      unsigned __pos = __len - 1;
    d301:	b8 3f 00 00 00       	mov    eax,0x3f
	  return __builtin_clzl(__x) - __diff;
    d306:	49 83 f1 3f          	xor    r9,0x3f
      return _Nd - std::__countl_zero(__x);
    d30a:	45 29 cd             	sub    r13d,r9d
      while (__pos)
    d30d:	44 29 c8             	sub    eax,r9d
    d310:	74 45                	je     d357 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x157>
    d312:	89 c2                	mov    edx,eax
    d314:	4c 8d 44 14 ff       	lea    r8,[rsp+rdx*1-0x1]
    d319:	48 8d 04 14          	lea    rax,[rsp+rdx*1]
    d31d:	ba 3e 00 00 00       	mov    edx,0x3e
    d322:	44 29 ca             	sub    edx,r9d
    d325:	49 29 d0             	sub    r8,rdx
    d328:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d32f:	00 00 00 00 
    d333:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d33a:	00 00 00 00 
    d33e:	66 90                	xchg   ax,ax
	  __first[__pos--] = '0' + (__val & 1);
    d340:	89 f2                	mov    edx,esi
      while (__pos)
    d342:	48 83 e8 01          	sub    rax,0x1
	  __val >>= 1;
    d346:	48 d1 ee             	shr    rsi,1
	  __first[__pos--] = '0' + (__val & 1);
    d349:	83 e2 01             	and    edx,0x1
    d34c:	83 c2 30             	add    edx,0x30
    d34f:	88 50 04             	mov    BYTE PTR [rax+0x4],dl
      while (__pos)
    d352:	4c 39 c0             	cmp    rax,r8
    d355:	75 e9                	jne    d340 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x140>
      __res.ptr = __first + __len;
    d357:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d35c:	4d 63 ed             	movsxd r13,r13d
    d35f:	b8 31 00 00 00       	mov    eax,0x31
    d364:	4d 01 f5             	add    r13,r14
    d367:	e9 16 ff ff ff       	jmp    d282 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x82>
    d36c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
    d370:	48 8d 86 80 00 00 00 	lea    rax,[rsi+0x80]
    d377:	48 3d ff 00 00 00    	cmp    rax,0xff
    d37d:	0f 87 24 05 00 00    	ja     d8a7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6a7>
    d383:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    d388:	b8 01 00 00 00       	mov    eax,0x1
    d38d:	40 88 74 24 50       	mov    BYTE PTR [rsp+0x50],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    d392:	41 b9 01 00 00 00    	mov    r9d,0x1
    d398:	48 89 ce             	mov    rsi,rcx
    d39b:	48 89 c7             	mov    rdi,rax
    d39e:	49 89 e8             	mov    r8,rbp
    d3a1:	4c 89 e1             	mov    rcx,r12
    d3a4:	ba 01 00 00 00       	mov    edx,0x1
    d3a9:	e8 e2 c4 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    d3ae:	48 81 c4 28 01 00 00 	add    rsp,0x128
    d3b5:	5b                   	pop    rbx
    d3b6:	5d                   	pop    rbp
    d3b7:	41 5c                	pop    r12
    d3b9:	41 5d                	pop    r13
    d3bb:	41 5e                	pop    r14
    d3bd:	41 5f                	pop    r15
    d3bf:	c3                   	ret
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d3c0:	41 80 ff 28          	cmp    r15b,0x28
    d3c4:	0f 84 46 04 00 00    	je     d810 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x610>
      if (__value == 0)
    d3ca:	48 85 f6             	test   rsi,rsi
    d3cd:	0f 85 87 00 00 00    	jne    d45a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25a>
	  *__first = '0';
    d3d3:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
	      if (_M_spec._M_type == _Pres_X)
    d3d8:	4c 8d 6c 24 04       	lea    r13,[rsp+0x4]
    d3dd:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d3e2:	48 8d 3d 39 7e 00 00 	lea    rdi,[rip+0x7e39]        # 15222 <CSWTCH.1104+0x142>
    d3e9:	41 80 ff 30          	cmp    r15b,0x30
    d3ed:	0f 84 fd 03 00 00    	je     d7f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5f0>
	  if (_M_spec._M_alt && __base_prefix.size())
    d3f3:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    d3f7:	0f 85 93 fe ff ff    	jne    d290 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x90>
    d3fd:	0f 1f 00             	nop    DWORD PTR [rax]
	  char* __start = __buf + 3;
    d400:	4c 89 f0             	mov    rax,r14
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d403:	48 8d 48 ff          	lea    rcx,[rax-0x1]
      if (__i < 0)
    d407:	48 85 db             	test   rbx,rbx
    d40a:	0f 88 b0 00 00 00    	js     d4c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c0>
    d410:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d414:	c0 ea 02             	shr    dl,0x2
    d417:	83 e2 03             	and    edx,0x3
      else if (__sign == _Sign_plus)
    d41a:	83 fa 01             	cmp    edx,0x1
    d41d:	0f 84 ad 00 00 00    	je     d4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d0>
      else if (__sign == _Sign_space)
    d423:	83 fa 03             	cmp    edx,0x3
    d426:	0f 84 84 01 00 00    	je     d5b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3b0>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d42c:	49 29 c5             	sub    r13,rax
			       __start_digits - __start, __fc);
    d42f:	49 29 c6             	sub    r14,rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d432:	48 89 c2             	mov    rdx,rax
    d435:	4d 89 e0             	mov    r8,r12
    d438:	4c 89 ee             	mov    rsi,r13
    d43b:	4c 89 f1             	mov    rcx,r14
    d43e:	48 89 ef             	mov    rdi,rbp
    d441:	e8 ea e5 ff ff       	call   ba30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    d446:	e9 63 ff ff ff       	jmp    d3ae <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1ae>
    d44b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d450:	41 80 ff 28          	cmp    r15b,0x28
    d454:	0f 84 6e 03 00 00    	je     d7c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5c8>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    d45a:	48 8d 44 24 43       	lea    rax,[rsp+0x43]
    d45f:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d464:	48 89 f2             	mov    rdx,rsi
    d467:	4c 89 f7             	mov    rdi,r14
    d46a:	48 89 c6             	mov    rsi,rax
    d46d:	e8 8e 83 ff ff       	call   5800 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
    d472:	49 89 c5             	mov    r13,rax
	      if (_M_spec._M_type == _Pres_X)
    d475:	41 80 ff 30          	cmp    r15b,0x30
    d479:	0f 85 81 03 00 00    	jne    d800 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d47f:	4c 39 f0             	cmp    rax,r14
    d482:	74 22                	je     d4a6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2a6>
	      if (_M_spec._M_type == _Pres_X)
    d484:	4d 89 f7             	mov    r15,r14
    d487:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d48e:	00 00 
		  *__p = __builtin_toupper(*__p);
    d490:	41 0f be 3f          	movsx  edi,BYTE PTR [r15]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d494:	49 83 c7 01          	add    r15,0x1
		  *__p = __builtin_toupper(*__p);
    d498:	e8 b3 5e ff ff       	call   3350 <toupper@plt>
    d49d:	41 88 47 ff          	mov    BYTE PTR [r15-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d4a1:	4d 39 fd             	cmp    r13,r15
    d4a4:	75 ea                	jne    d490 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x290>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d4a6:	48 8d 3d 75 7d 00 00 	lea    rdi,[rip+0x7d75]        # 15222 <CSWTCH.1104+0x142>
    d4ad:	ba 02 00 00 00       	mov    edx,0x2
    d4b2:	e9 e1 00 00 00       	jmp    d598 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x398>
    d4b7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d4be:	00 00 
	*__dest = '-';
    d4c0:	c6 40 ff 2d          	mov    BYTE PTR [rax-0x1],0x2d
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d4c4:	48 89 c8             	mov    rax,rcx
    d4c7:	e9 60 ff ff ff       	jmp    d42c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x22c>
    d4cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	*__dest = '+';
    d4d0:	c6 40 ff 2b          	mov    BYTE PTR [rax-0x1],0x2b
    d4d4:	eb ee                	jmp    d4c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c4>
    d4d6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d4dd:	00 00 00 
      if (__value == 0)
    d4e0:	48 85 f6             	test   rsi,rsi
    d4e3:	0f 85 d7 00 00 00    	jne    d5c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c0>
      __glibcxx_assert(2 <= __base && __base <= 36);
    d4e9:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    d4ee:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
	  char* __start = __buf + 3;
    d4f2:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d4f7:	4c 8d 6c 24 04       	lea    r13,[rsp+0x4]
    d4fc:	4c 89 f0             	mov    rax,r14
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d4ff:	48 8d 4c 24 02       	lea    rcx,[rsp+0x2]
    d504:	e9 0b ff ff ff       	jmp    d414 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x214>
    d509:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    d510:	48 85 f6             	test   rsi,rsi
    d513:	74 d4                	je     d4e9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e9>
    d515:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d51c:	00 00 00 00 
	__len = (__to_chars_len_2(__val) + 2) / 3;
    d520:	48 0f bd c6          	bsr    rax,rsi
    d524:	44 8d 68 03          	lea    r13d,[rax+0x3]
    d528:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    d52d:	4c 0f af e8          	imul   r13,rax
    d531:	49 c1 ed 21          	shr    r13,0x21
      unsigned __pos = __len - 1;
    d535:	41 8d 55 ff          	lea    edx,[r13-0x1]
      while (__val >= 0100)
    d539:	48 83 fe 3f          	cmp    rsi,0x3f
    d53d:	76 31                	jbe    d570 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x370>
    d53f:	90                   	nop
	  auto __num = __val & 7;
    d540:	48 89 f0             	mov    rax,rsi
	  __first[__pos] = '0' + __num;
    d543:	89 d7                	mov    edi,edx
	  auto __num = __val & 7;
    d545:	83 e0 07             	and    eax,0x7
	  __first[__pos] = '0' + __num;
    d548:	83 c0 30             	add    eax,0x30
    d54b:	88 44 3c 03          	mov    BYTE PTR [rsp+rdi*1+0x3],al
	  __val >>= 3;
    d54f:	48 89 f0             	mov    rax,rsi
	  __first[__pos - 1] = '0' + __num;
    d552:	8d 7a ff             	lea    edi,[rdx-0x1]
	  __val >>= 3;
    d555:	48 c1 ee 06          	shr    rsi,0x6
	  __val >>= 3;
    d559:	48 c1 e8 03          	shr    rax,0x3
	  __pos -= 2;
    d55d:	83 ea 02             	sub    edx,0x2
	  __num = __val & 7;
    d560:	83 e0 07             	and    eax,0x7
	  __first[__pos - 1] = '0' + __num;
    d563:	83 c0 30             	add    eax,0x30
    d566:	88 44 3c 03          	mov    BYTE PTR [rsp+rdi*1+0x3],al
      while (__val >= 0100)
    d56a:	48 83 fe 3f          	cmp    rsi,0x3f
    d56e:	77 d0                	ja     d540 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
	__first[0] = '0' + __val;
    d570:	8d 46 30             	lea    eax,[rsi+0x30]
      if (__val >= 010)
    d573:	48 83 fe 07          	cmp    rsi,0x7
    d577:	0f 87 13 02 00 00    	ja     d790 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x590>
    d57d:	88 44 24 03          	mov    BYTE PTR [rsp+0x3],al
      __res.ptr = __first + __len;
    d581:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d586:	45 89 ed             	mov    r13d,r13d
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    d589:	48 8d 3d 48 7c 00 00 	lea    rdi,[rip+0x7c48]        # 151d8 <CSWTCH.1104+0xf8>
    d590:	4d 01 f5             	add    r13,r14
    d593:	ba 01 00 00 00       	mov    edx,0x1
	  char* __start = __buf + 3;
    d598:	4c 89 f0             	mov    rax,r14
	  if (_M_spec._M_alt && __base_prefix.size())
    d59b:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    d59f:	0f 84 5e fe ff ff    	je     d403 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x203>
	      __start -= __base_prefix.size();
    d5a5:	48 89 d0             	mov    rax,rdx
    d5a8:	48 f7 d8             	neg    rax
    d5ab:	e9 ec fc ff ff       	jmp    d29c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9c>
	*__dest = ' ';
    d5b0:	c6 40 ff 20          	mov    BYTE PTR [rax-0x1],0x20
    d5b4:	e9 0b ff ff ff       	jmp    d4c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c4>
    d5b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d5c0:	48 83 fe 09          	cmp    rsi,0x9
    d5c4:	0f 86 d2 02 00 00    	jbe    d89c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x69c>
    d5ca:	48 89 f1             	mov    rcx,rsi
      unsigned __n = 1;
    d5cd:	41 bd 01 00 00 00    	mov    r13d,0x1
	  __value /= __b4;
    d5d3:	48 bf 4b 59 86 38 d6 	movabs rdi,0x346dc5d63886594b
    d5da:	c5 6d 34 
    d5dd:	eb 35                	jmp    d614 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x414>
    d5df:	90                   	nop
	  if (__value < __b3) return __n + 2;
    d5e0:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    d5e7:	0f 86 63 02 00 00    	jbe    d850 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x650>
	  if (__value < __b4) return __n + 3;
    d5ed:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    d5f4:	0f 86 66 02 00 00    	jbe    d860 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x660>
	  __value /= __b4;
    d5fa:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    d5fd:	41 83 c5 04          	add    r13d,0x4
	  __value /= __b4;
    d601:	48 f7 e7             	mul    rdi
    d604:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    d608:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    d60f:	76 0d                	jbe    d61e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x41e>
    d611:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    d614:	48 83 f9 63          	cmp    rcx,0x63
    d618:	77 c6                	ja     d5e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e0>
    d61a:	41 83 c5 01          	add    r13d,0x1
      if (__builtin_expect((__last - __first) < __len, 0))
    d61e:	41 83 fd 40          	cmp    r13d,0x40
    d622:	0f 87 41 02 00 00    	ja     d869 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x669>
      constexpr char __digits[201] =
    d628:	66 0f 6f 05 b0 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b0]        # 186e0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    d62f:	00 
      unsigned __pos = __len - 1;
    d630:	41 8d 7d ff          	lea    edi,[r13-0x1]
      constexpr char __digits[201] =
    d634:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
    d639:	66 0f 6f 05 af b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0af]        # 186f0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    d640:	00 
    d641:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
    d646:	66 0f 6f 05 b2 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b2]        # 18700 <std::__unicode::__v15_1_0::__width_edges+0x340>
    d64d:	00 
    d64e:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    d653:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18710 <std::__unicode::__v15_1_0::__width_edges+0x350>
    d65a:	00 
    d65b:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
    d662:	00 
    d663:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18720 <std::__unicode::__v15_1_0::__width_edges+0x360>
    d66a:	00 
    d66b:	0f 29 84 24 90 00 00 	movaps XMMWORD PTR [rsp+0x90],xmm0
    d672:	00 
    d673:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18730 <std::__unicode::__v15_1_0::__width_edges+0x370>
    d67a:	00 
    d67b:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    d682:	00 
    d683:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18740 <std::__unicode::__v15_1_0::__width_edges+0x380>
    d68a:	00 
    d68b:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    d692:	00 
    d693:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18750 <std::__unicode::__v15_1_0::__width_edges+0x390>
    d69a:	00 
    d69b:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    d6a2:	00 
    d6a3:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18760 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    d6aa:	00 
    d6ab:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    d6b2:	00 
    d6b3:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18770 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    d6ba:	00 
    d6bb:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    d6c2:	00 
    d6c3:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18780 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    d6ca:	00 
    d6cb:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    d6d2:	00 
    d6d3:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 18790 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    d6da:	00 
    d6db:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    d6e2:	00 
    d6e3:	66 0f 6f 05 b5 b0 00 	movdqa xmm0,XMMWORD PTR [rip+0xb0b5]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    d6ea:	00 
    d6eb:	0f 11 84 24 09 01 00 	movups XMMWORD PTR [rsp+0x109],xmm0
    d6f2:	00 
      while (__val >= 100)
    d6f3:	48 83 fe 63          	cmp    rsi,0x63
    d6f7:	0f 86 b3 00 00 00    	jbe    d7b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5b0>
	  auto const __num = (__val % 100) * 2;
    d6fd:	48 b9 c3 f5 28 5c 8f 	movabs rcx,0x28f5c28f5c28f5c3
    d704:	c2 f5 28 
    d707:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d70e:	00 00 
    d710:	48 89 f2             	mov    rdx,rsi
    d713:	48 c1 ea 02          	shr    rdx,0x2
    d717:	48 89 d0             	mov    rax,rdx
    d71a:	48 f7 e1             	mul    rcx
    d71d:	48 89 f0             	mov    rax,rsi
    d720:	49 89 d0             	mov    r8,rdx
    d723:	48 83 e2 fc          	and    rdx,0xfffffffffffffffc
    d727:	49 c1 e8 02          	shr    r8,0x2
    d72b:	4c 01 c2             	add    rdx,r8
    d72e:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    d732:	48 c1 e2 02          	shl    rdx,0x2
    d736:	48 29 d0             	sub    rax,rdx
    d739:	48 89 f2             	mov    rdx,rsi
	  __val /= 100;
    d73c:	4c 89 c6             	mov    rsi,r8
	  __first[__pos] = __digits[__num + 1];
    d73f:	41 89 f8             	mov    r8d,edi
	  auto const __num = (__val % 100) * 2;
    d742:	48 01 c0             	add    rax,rax
	  __first[__pos] = __digits[__num + 1];
    d745:	44 0f b6 4c 04 51    	movzx  r9d,BYTE PTR [rsp+rax*1+0x51]
	  __first[__pos - 1] = __digits[__num];
    d74b:	0f b6 44 04 50       	movzx  eax,BYTE PTR [rsp+rax*1+0x50]
	  __first[__pos] = __digits[__num + 1];
    d750:	46 88 4c 04 03       	mov    BYTE PTR [rsp+r8*1+0x3],r9b
	  __first[__pos - 1] = __digits[__num];
    d755:	44 8d 47 ff          	lea    r8d,[rdi-0x1]
	  __pos -= 2;
    d759:	83 ef 02             	sub    edi,0x2
	  __first[__pos - 1] = __digits[__num];
    d75c:	42 88 44 04 03       	mov    BYTE PTR [rsp+r8*1+0x3],al
      while (__val >= 100)
    d761:	48 81 fa 0f 27 00 00 	cmp    rdx,0x270f
    d768:	77 a6                	ja     d710 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x510>
      if (__val >= 10)
    d76a:	48 81 fa e7 03 00 00 	cmp    rdx,0x3e7
    d771:	77 3d                	ja     d7b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5b0>
	__first[0] = '0' + __val;
    d773:	83 c6 30             	add    esi,0x30
      __res.ptr = __first + __len;
    d776:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d77b:	40 88 74 24 03       	mov    BYTE PTR [rsp+0x3],sil
    d780:	4d 01 f5             	add    r13,r14
      return __res;
    d783:	e9 78 fc ff ff       	jmp    d400 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
    d788:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    d78f:	00 
	  auto const __num = __val & 7;
    d790:	48 89 f0             	mov    rax,rsi
    d793:	83 e0 07             	and    eax,0x7
	  __first[1] = '0' + __num;
    d796:	83 c0 30             	add    eax,0x30
    d799:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
	  __val >>= 3;
    d79d:	48 89 f0             	mov    rax,rsi
    d7a0:	48 c1 e8 03          	shr    rax,0x3
	  __first[0] = '0' + __val;
    d7a4:	83 c0 30             	add    eax,0x30
    d7a7:	e9 d1 fd ff ff       	jmp    d57d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x37d>
    d7ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  auto const __num = __val * 2;
    d7b0:	48 01 f6             	add    rsi,rsi
	  __first[1] = __digits[__num + 1];
    d7b3:	0f b6 44 34 51       	movzx  eax,BYTE PTR [rsp+rsi*1+0x51]
	  __first[0] = __digits[__num];
    d7b8:	0f b6 74 34 50       	movzx  esi,BYTE PTR [rsp+rsi*1+0x50]
	  __first[1] = __digits[__num + 1];
    d7bd:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
    d7c1:	eb b3                	jmp    d776 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x576>
    d7c3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    d7c8:	48 8d 44 24 43       	lea    rax,[rsp+0x43]
    d7cd:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d7d2:	48 89 f2             	mov    rdx,rsi
    d7d5:	4c 89 f7             	mov    rdi,r14
    d7d8:	48 89 c6             	mov    rsi,rax
    d7db:	e8 20 80 ff ff       	call   5800 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d7e0:	48 8d 3d 3e 7a 00 00 	lea    rdi,[rip+0x7a3e]        # 15225 <CSWTCH.1104+0x145>
    d7e7:	49 89 c5             	mov    r13,rax
    d7ea:	e9 04 fc ff ff       	jmp    d3f3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f3>
    d7ef:	90                   	nop
    d7f0:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d7f5:	e9 8a fc ff ff       	jmp    d484 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x284>
    d7fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    d800:	48 8d 3d 1b 7a 00 00 	lea    rdi,[rip+0x7a1b]        # 15222 <CSWTCH.1104+0x142>
    d807:	e9 e7 fb ff ff       	jmp    d3f3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f3>
    d80c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (__value == 0)
    d810:	48 85 f6             	test   rsi,rsi
    d813:	75 63                	jne    d878 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x678>
	  if (_M_spec._M_alt && __base_prefix.size())
    d815:	0f b6 17             	movzx  edx,BYTE PTR [rdi]
	  *__first = '0';
    d818:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    d81d:	f6 c2 10             	test   dl,0x10
    d820:	0f 84 cc fc ff ff    	je     d4f2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f2>
    d826:	4c 8d 6c 24 04       	lea    r13,[rsp+0x4]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d82b:	ba 02 00 00 00       	mov    edx,0x2
    d830:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
	  if (_M_spec._M_alt && __base_prefix.size())
    d835:	48 c7 c0 fe ff ff ff 	mov    rax,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d83c:	48 8d 3d e2 79 00 00 	lea    rdi,[rip+0x79e2]        # 15225 <CSWTCH.1104+0x145>
    d843:	e9 54 fa ff ff       	jmp    d29c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9c>
    d848:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    d84f:	00 
	  if (__value < __b3) return __n + 2;
    d850:	41 83 c5 02          	add    r13d,0x2
    d854:	e9 c5 fd ff ff       	jmp    d61e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x41e>
    d859:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b4) return __n + 3;
    d860:	41 83 c5 03          	add    r13d,0x3
    d864:	e9 b5 fd ff ff       	jmp    d61e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x41e>
	  return __res;
    d869:	4c 8d 6c 24 43       	lea    r13,[rsp+0x43]
    d86e:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d873:	e9 88 fb ff ff       	jmp    d400 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    d878:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d87d:	48 8d 74 24 43       	lea    rsi,[rsp+0x43]
    d882:	48 89 da             	mov    rdx,rbx
    d885:	4c 89 f7             	mov    rdi,r14
    d888:	e8 73 7f ff ff       	call   5800 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
    d88d:	48 8d 3d 91 79 00 00 	lea    rdi,[rip+0x7991]        # 15225 <CSWTCH.1104+0x145>
    d894:	49 89 c5             	mov    r13,rax
    d897:	e9 57 fb ff ff       	jmp    d3f3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f3>
	  if (__value < (unsigned)__base) return __n;
    d89c:	41 bd 01 00 00 00    	mov    r13d,0x1
    d8a2:	e9 cc fe ff ff       	jmp    d773 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x573>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    d8a7:	e8 a4 58 ff ff       	call   3150 <abort@plt>
    d8ac:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d8b3:	00 00 00 
    d8b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d8bd:	00 00 00 

000000000000d8c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    d8c0:	41 56                	push   r14
    d8c2:	41 55                	push   r13
    d8c4:	41 54                	push   r12
    d8c6:	55                   	push   rbp
    d8c7:	48 89 d5             	mov    rbp,rdx
    d8ca:	53                   	push   rbx
    d8cb:	48 89 fb             	mov    rbx,rdi
    d8ce:	48 81 ec 20 01 00 00 	sub    rsp,0x120
	  if (_M_spec._M_type == _Pres_c)
    d8d5:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    d8d9:	41 89 c6             	mov    r14d,eax
    d8dc:	41 83 e6 78          	and    r14d,0x78
    d8e0:	41 80 fe 38          	cmp    r14b,0x38
    d8e4:	0f 84 86 00 00 00    	je     d970 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb0>
	  switch (_M_spec._M_type)
    d8ea:	c0 e8 03             	shr    al,0x3
    d8ed:	83 e0 0f             	and    eax,0xf
    d8f0:	3c 04                	cmp    al,0x4
    d8f2:	0f 84 20 01 00 00    	je     da18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x158>
    d8f8:	0f 87 52 01 00 00    	ja     da50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x190>
    d8fe:	3c 01                	cmp    al,0x1
    d900:	0f 86 b2 00 00 00    	jbe    d9b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf8>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    d906:	41 80 fe 10          	cmp    r14b,0x10
    d90a:	4c 8d 05 0b 79 00 00 	lea    r8,[rip+0x790b]        # 1521c <CSWTCH.1104+0x13c>
    d911:	48 8d 05 07 79 00 00 	lea    rax,[rip+0x7907]        # 1521f <CSWTCH.1104+0x13f>
    d918:	4c 0f 45 c0          	cmovne r8,rax
      if (__value == 0)
    d91c:	48 85 f6             	test   rsi,rsi
    d91f:	0f 85 5b 03 00 00    	jne    dc80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c0>
    d925:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    d92a:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    d92f:	b8 30 00 00 00       	mov    eax,0x30
      __first[0] = '1';
    d934:	88 44 24 03          	mov    BYTE PTR [rsp+0x3],al
	  if (_M_spec._M_alt && __base_prefix.size())
    d938:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
    d93b:	a8 10                	test   al,0x10
    d93d:	0f 84 4b 01 00 00    	je     da8e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1ce>
    d943:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d94a:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    d94f:	4c 01 ee             	add    rsi,r13
	      __builtin_memcpy(__start, __base_prefix.data(),
    d952:	89 d7                	mov    edi,edx
    d954:	85 d2                	test   edx,edx
    d956:	74 7e                	je     d9d6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    d958:	31 d2                	xor    edx,edx
    d95a:	89 d1                	mov    ecx,edx
    d95c:	83 c2 01             	add    edx,0x1
    d95f:	45 0f b6 0c 08       	movzx  r9d,BYTE PTR [r8+rcx*1]
    d964:	44 88 0c 0e          	mov    BYTE PTR [rsi+rcx*1],r9b
    d968:	39 fa                	cmp    edx,edi
    d96a:	72 ee                	jb     d95a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9a>
    d96c:	eb 68                	jmp    d9d6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    d96e:	66 90                	xchg   ax,ax
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    d970:	48 83 fe 7f          	cmp    rsi,0x7f
    d974:	0f 87 89 05 00 00    	ja     df03 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x643>
    d97a:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    d97f:	b8 01 00 00 00       	mov    eax,0x1
    d984:	40 88 74 24 50       	mov    BYTE PTR [rsp+0x50],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    d989:	49 89 d8             	mov    r8,rbx
    d98c:	48 89 ce             	mov    rsi,rcx
    d98f:	48 89 c7             	mov    rdi,rax
    d992:	48 89 e9             	mov    rcx,rbp
    d995:	ba 01 00 00 00       	mov    edx,0x1
    d99a:	41 b9 01 00 00 00    	mov    r9d,0x1
    d9a0:	e8 eb be ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    d9a5:	48 81 c4 20 01 00 00 	add    rsp,0x120
    d9ac:	5b                   	pop    rbx
    d9ad:	5d                   	pop    rbp
    d9ae:	41 5c                	pop    r12
    d9b0:	41 5d                	pop    r13
    d9b2:	41 5e                	pop    r14
    d9b4:	c3                   	ret
    d9b5:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__value == 0)
    d9b8:	48 85 f6             	test   rsi,rsi
    d9bb:	0f 85 ef 00 00 00    	jne    dab0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f0>
	  *__first = '0';
    d9c1:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    d9c6:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    d9cb:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    d9d0:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
	  char* __start = __buf + 3;
    d9d3:	4c 89 ee             	mov    rsi,r13
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d9d6:	c0 e8 02             	shr    al,0x2
    d9d9:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    d9dc:	83 f8 01             	cmp    eax,0x1
    d9df:	74 5f                	je     da40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x180>
      else if (__sign == _Sign_space)
    d9e1:	83 f8 03             	cmp    eax,0x3
    d9e4:	0f 84 b6 00 00 00    	je     daa0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d9ea:	49 29 f4             	sub    r12,rsi
			       __start_digits - __start, __fc);
    d9ed:	4c 89 e9             	mov    rcx,r13
    d9f0:	48 89 f2             	mov    rdx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d9f3:	49 89 e8             	mov    r8,rbp
			       __start_digits - __start, __fc);
    d9f6:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d9f9:	48 89 df             	mov    rdi,rbx
    d9fc:	4c 89 e6             	mov    rsi,r12
    d9ff:	e8 2c e0 ff ff       	call   ba30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
	}
    da04:	48 81 c4 20 01 00 00 	add    rsp,0x120
    da0b:	5b                   	pop    rbx
    da0c:	5d                   	pop    rbp
    da0d:	41 5c                	pop    r12
    da0f:	41 5d                	pop    r13
    da11:	41 5e                	pop    r14
    da13:	c3                   	ret
    da14:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    da18:	48 85 f6             	test   rsi,rsi
    da1b:	0f 85 cf 02 00 00    	jne    dcf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x430>
	  char* __start = __buf + 3;
    da21:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    da26:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    da2b:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
    da2e:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    da33:	4c 89 ee             	mov    rsi,r13
    da36:	eb 9e                	jmp    d9d6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    da38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    da3f:	00 
    da40:	b8 2b 00 00 00       	mov    eax,0x2b
	*__dest = '+';
    da45:	88 46 ff             	mov    BYTE PTR [rsi-0x1],al
    da48:	48 83 ee 01          	sub    rsi,0x1
    da4c:	eb 9c                	jmp    d9ea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x12a>
    da4e:	66 90                	xchg   ax,ax
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    da50:	41 80 fe 28          	cmp    r14b,0x28
    da54:	0f 84 5e 03 00 00    	je     ddb8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f8>
      if (__value == 0)
    da5a:	48 85 f6             	test   rsi,rsi
    da5d:	0f 85 7d 03 00 00    	jne    dde0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
	  *__first = '0';
    da63:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
	      if (_M_spec._M_type == _Pres_X)
    da68:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    da6d:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    da72:	4c 8d 05 a9 77 00 00 	lea    r8,[rip+0x77a9]        # 15222 <CSWTCH.1104+0x142>
    da79:	41 80 fe 30          	cmp    r14b,0x30
    da7d:	0f 84 2d 04 00 00    	je     deb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5f0>
	  if (_M_spec._M_alt && __base_prefix.size())
    da83:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
    da86:	a8 10                	test   al,0x10
    da88:	0f 85 b5 fe ff ff    	jne    d943 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x83>
	  char* __start = __buf + 3;
    da8e:	4c 89 ee             	mov    rsi,r13
    da91:	e9 40 ff ff ff       	jmp    d9d6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    da96:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    da9d:	00 00 00 
    daa0:	b8 20 00 00 00       	mov    eax,0x20
    daa5:	eb 9e                	jmp    da45 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x185>
    daa7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    daae:	00 00 
    dab0:	48 83 fe 09          	cmp    rsi,0x9
    dab4:	0f 86 3e 04 00 00    	jbe    def8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x638>
    daba:	48 89 f1             	mov    rcx,rsi
      unsigned __n = 1;
    dabd:	41 bc 01 00 00 00    	mov    r12d,0x1
	  __value /= __b4;
    dac3:	48 bf 4b 59 86 38 d6 	movabs rdi,0x346dc5d63886594b
    daca:	c5 6d 34 
    dacd:	eb 35                	jmp    db04 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x244>
    dacf:	90                   	nop
	  if (__value < __b3) return __n + 2;
    dad0:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    dad7:	0f 86 f3 03 00 00    	jbe    ded0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x610>
	  if (__value < __b4) return __n + 3;
    dadd:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    dae4:	0f 86 f6 03 00 00    	jbe    dee0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x620>
	  __value /= __b4;
    daea:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    daed:	41 83 c4 04          	add    r12d,0x4
	  __value /= __b4;
    daf1:	48 f7 e7             	mul    rdi
    daf4:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    daf8:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    daff:	76 0d                	jbe    db0e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x24e>
    db01:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    db04:	48 83 f9 63          	cmp    rcx,0x63
    db08:	77 c6                	ja     dad0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x210>
    db0a:	41 83 c4 01          	add    r12d,0x1
      if (__builtin_expect((__last - __first) < __len, 0))
    db0e:	41 83 fc 40          	cmp    r12d,0x40
    db12:	0f 87 d1 03 00 00    	ja     dee9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x629>
      constexpr char __digits[201] =
    db18:	66 0f 6f 05 c0 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc0]        # 186e0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    db1f:	00 
      unsigned __pos = __len - 1;
    db20:	41 8d 4c 24 ff       	lea    ecx,[r12-0x1]
      constexpr char __digits[201] =
    db25:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
    db2a:	66 0f 6f 05 be ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabbe]        # 186f0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    db31:	00 
    db32:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
    db37:	66 0f 6f 05 c1 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc1]        # 18700 <std::__unicode::__v15_1_0::__width_edges+0x340>
    db3e:	00 
    db3f:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    db44:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18710 <std::__unicode::__v15_1_0::__width_edges+0x350>
    db4b:	00 
    db4c:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
    db53:	00 
    db54:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18720 <std::__unicode::__v15_1_0::__width_edges+0x360>
    db5b:	00 
    db5c:	0f 29 84 24 90 00 00 	movaps XMMWORD PTR [rsp+0x90],xmm0
    db63:	00 
    db64:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18730 <std::__unicode::__v15_1_0::__width_edges+0x370>
    db6b:	00 
    db6c:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    db73:	00 
    db74:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18740 <std::__unicode::__v15_1_0::__width_edges+0x380>
    db7b:	00 
    db7c:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    db83:	00 
    db84:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18750 <std::__unicode::__v15_1_0::__width_edges+0x390>
    db8b:	00 
    db8c:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    db93:	00 
    db94:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18760 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    db9b:	00 
    db9c:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    dba3:	00 
    dba4:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18770 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    dbab:	00 
    dbac:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    dbb3:	00 
    dbb4:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18780 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    dbbb:	00 
    dbbc:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    dbc3:	00 
    dbc4:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 18790 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    dbcb:	00 
    dbcc:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    dbd3:	00 
    dbd4:	66 0f 6f 05 c4 ab 00 	movdqa xmm0,XMMWORD PTR [rip+0xabc4]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    dbdb:	00 
    dbdc:	0f 11 84 24 09 01 00 	movups XMMWORD PTR [rsp+0x109],xmm0
    dbe3:	00 
      while (__val >= 100)
    dbe4:	48 83 fe 63          	cmp    rsi,0x63
    dbe8:	0f 86 72 02 00 00    	jbe    de60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a0>
	  auto const __num = (__val % 100) * 2;
    dbee:	48 bf c3 f5 28 5c 8f 	movabs rdi,0x28f5c28f5c28f5c3
    dbf5:	c2 f5 28 
    dbf8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    dbff:	00 
    dc00:	48 89 f2             	mov    rdx,rsi
    dc03:	48 c1 ea 02          	shr    rdx,0x2
    dc07:	48 89 d0             	mov    rax,rdx
    dc0a:	48 f7 e7             	mul    rdi
    dc0d:	48 89 f0             	mov    rax,rsi
    dc10:	49 89 d0             	mov    r8,rdx
    dc13:	48 83 e2 fc          	and    rdx,0xfffffffffffffffc
    dc17:	49 c1 e8 02          	shr    r8,0x2
    dc1b:	4c 01 c2             	add    rdx,r8
    dc1e:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    dc22:	48 c1 e2 02          	shl    rdx,0x2
    dc26:	48 29 d0             	sub    rax,rdx
    dc29:	48 89 f2             	mov    rdx,rsi
	  __val /= 100;
    dc2c:	4c 89 c6             	mov    rsi,r8
	  __first[__pos] = __digits[__num + 1];
    dc2f:	41 89 c8             	mov    r8d,ecx
	  auto const __num = (__val % 100) * 2;
    dc32:	48 01 c0             	add    rax,rax
	  __first[__pos] = __digits[__num + 1];
    dc35:	44 0f b6 4c 04 51    	movzx  r9d,BYTE PTR [rsp+rax*1+0x51]
	  __first[__pos - 1] = __digits[__num];
    dc3b:	0f b6 44 04 50       	movzx  eax,BYTE PTR [rsp+rax*1+0x50]
	  __first[__pos] = __digits[__num + 1];
    dc40:	46 88 4c 04 03       	mov    BYTE PTR [rsp+r8*1+0x3],r9b
	  __first[__pos - 1] = __digits[__num];
    dc45:	44 8d 41 ff          	lea    r8d,[rcx-0x1]
	  __pos -= 2;
    dc49:	83 e9 02             	sub    ecx,0x2
	  __first[__pos - 1] = __digits[__num];
    dc4c:	42 88 44 04 03       	mov    BYTE PTR [rsp+r8*1+0x3],al
      while (__val >= 100)
    dc51:	48 81 fa 0f 27 00 00 	cmp    rdx,0x270f
    dc58:	77 a6                	ja     dc00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
      if (__val >= 10)
    dc5a:	48 81 fa e7 03 00 00 	cmp    rdx,0x3e7
    dc61:	0f 87 f9 01 00 00    	ja     de60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a0>
	__first[0] = '0' + __val;
    dc67:	83 c6 30             	add    esi,0x30
      __res.ptr = __first + __len;
    dc6a:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    dc6f:	40 88 74 24 03       	mov    BYTE PTR [rsp+0x3],sil
    dc74:	4d 01 ec             	add    r12,r13
      return __res;
    dc77:	e9 54 fd ff ff       	jmp    d9d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x110>
    dc7c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  return __builtin_clzl(__x) - __diff;
    dc80:	4c 0f bd ce          	bsr    r9,rsi
      return _Nd - std::__countl_zero(__x);
    dc84:	41 bc 40 00 00 00    	mov    r12d,0x40
      unsigned __pos = __len - 1;
    dc8a:	ba 3f 00 00 00       	mov    edx,0x3f
	  return __builtin_clzl(__x) - __diff;
    dc8f:	49 83 f1 3f          	xor    r9,0x3f
      return _Nd - std::__countl_zero(__x);
    dc93:	45 29 cc             	sub    r12d,r9d
      while (__pos)
    dc96:	44 29 ca             	sub    edx,r9d
    dc99:	74 3c                	je     dcd7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x417>
    dc9b:	89 d1                	mov    ecx,edx
    dc9d:	b8 3e 00 00 00       	mov    eax,0x3e
    dca2:	48 8d 7c 0c ff       	lea    rdi,[rsp+rcx*1-0x1]
    dca7:	44 29 c8             	sub    eax,r9d
    dcaa:	48 8d 14 0c          	lea    rdx,[rsp+rcx*1]
    dcae:	48 29 c7             	sub    rdi,rax
    dcb1:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    dcb8:	00 00 00 00 
    dcbc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  __first[__pos--] = '0' + (__val & 1);
    dcc0:	89 f1                	mov    ecx,esi
      while (__pos)
    dcc2:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    dcc6:	48 d1 ee             	shr    rsi,1
	  __first[__pos--] = '0' + (__val & 1);
    dcc9:	83 e1 01             	and    ecx,0x1
    dccc:	83 c1 30             	add    ecx,0x30
    dccf:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
      while (__pos)
    dcd2:	48 39 d7             	cmp    rdi,rdx
    dcd5:	75 e9                	jne    dcc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
      __res.ptr = __first + __len;
    dcd7:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    dcdc:	4d 63 e4             	movsxd r12,r12d
    dcdf:	b8 31 00 00 00       	mov    eax,0x31
    dce4:	4d 01 ec             	add    r12,r13
    dce7:	e9 48 fc ff ff       	jmp    d934 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x74>
    dcec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	__len = (__to_chars_len_2(__val) + 2) / 3;
    dcf0:	48 0f bd c6          	bsr    rax,rsi
    dcf4:	44 8d 60 03          	lea    r12d,[rax+0x3]
    dcf8:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    dcfd:	4c 0f af e0          	imul   r12,rax
    dd01:	49 c1 ec 21          	shr    r12,0x21
      unsigned __pos = __len - 1;
    dd05:	41 8d 4c 24 ff       	lea    ecx,[r12-0x1]
      while (__val >= 0100)
    dd0a:	48 83 fe 3f          	cmp    rsi,0x3f
    dd0e:	76 60                	jbe    dd70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b0>
    dd10:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    dd17:	00 00 00 00 
    dd1b:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    dd22:	00 00 00 00 
    dd26:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    dd2d:	00 00 00 00 
    dd31:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    dd38:	00 00 00 00 
    dd3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  auto __num = __val & 7;
    dd40:	48 89 f2             	mov    rdx,rsi
	  __first[__pos] = '0' + __num;
    dd43:	89 cf                	mov    edi,ecx
	  auto __num = __val & 7;
    dd45:	83 e2 07             	and    edx,0x7
	  __first[__pos] = '0' + __num;
    dd48:	83 c2 30             	add    edx,0x30
    dd4b:	88 54 3c 03          	mov    BYTE PTR [rsp+rdi*1+0x3],dl
	  __val >>= 3;
    dd4f:	48 89 f2             	mov    rdx,rsi
	  __first[__pos - 1] = '0' + __num;
    dd52:	8d 79 ff             	lea    edi,[rcx-0x1]
	  __val >>= 3;
    dd55:	48 c1 ee 06          	shr    rsi,0x6
	  __val >>= 3;
    dd59:	48 c1 ea 03          	shr    rdx,0x3
	  __pos -= 2;
    dd5d:	83 e9 02             	sub    ecx,0x2
	  __num = __val & 7;
    dd60:	83 e2 07             	and    edx,0x7
	  __first[__pos - 1] = '0' + __num;
    dd63:	83 c2 30             	add    edx,0x30
    dd66:	88 54 3c 03          	mov    BYTE PTR [rsp+rdi*1+0x3],dl
      while (__val >= 0100)
    dd6a:	48 83 fe 3f          	cmp    rsi,0x3f
    dd6e:	77 d0                	ja     dd40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x480>
	__first[0] = '0' + __val;
    dd70:	8d 46 30             	lea    eax,[rsi+0x30]
      if (__val >= 010)
    dd73:	48 83 fe 07          	cmp    rsi,0x7
    dd77:	0f 87 c3 00 00 00    	ja     de40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x580>
    dd7d:	88 44 24 03          	mov    BYTE PTR [rsp+0x3],al
      __res.ptr = __first + __len;
    dd81:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    dd86:	45 89 e4             	mov    r12d,r12d
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    dd89:	4c 8d 05 48 74 00 00 	lea    r8,[rip+0x7448]        # 151d8 <CSWTCH.1104+0xf8>
    dd90:	4d 01 ec             	add    r12,r13
    dd93:	ba 01 00 00 00       	mov    edx,0x1
	  if (_M_spec._M_alt && __base_prefix.size())
    dd98:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
	  char* __start = __buf + 3;
    dd9b:	4c 89 ee             	mov    rsi,r13
	  if (_M_spec._M_alt && __base_prefix.size())
    dd9e:	a8 10                	test   al,0x10
    dda0:	0f 84 30 fc ff ff    	je     d9d6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
	      __start -= __base_prefix.size();
    dda6:	48 89 d6             	mov    rsi,rdx
    dda9:	48 f7 de             	neg    rsi
    ddac:	e9 9e fb ff ff       	jmp    d94f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f>
    ddb1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      if (__value == 0)
    ddb8:	48 85 f6             	test   rsi,rsi
    ddbb:	0f 85 bf 00 00 00    	jne    de80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5c0>
	  *__first = '0';
    ddc1:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    ddc6:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    ddcb:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    ddd0:	4c 8d 05 4e 74 00 00 	lea    r8,[rip+0x744e]        # 15225 <CSWTCH.1104+0x145>
    ddd7:	e9 a7 fc ff ff       	jmp    da83 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c3>
    dddc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    dde0:	48 8d 44 24 43       	lea    rax,[rsp+0x43]
    dde5:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    ddea:	48 89 f2             	mov    rdx,rsi
    dded:	4c 89 ef             	mov    rdi,r13
    ddf0:	48 89 c6             	mov    rsi,rax
    ddf3:	e8 08 7a ff ff       	call   5800 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
    ddf8:	49 89 c4             	mov    r12,rax
	      if (_M_spec._M_type == _Pres_X)
    ddfb:	41 80 fe 30          	cmp    r14b,0x30
    ddff:	0f 85 bb 00 00 00    	jne    dec0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
		for (auto __p = __start; __p != __res.ptr; ++__p)
    de05:	4c 39 e8             	cmp    rax,r13
    de08:	74 1c                	je     de26 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x566>
	      if (_M_spec._M_type == _Pres_X)
    de0a:	4d 89 ee             	mov    r14,r13
    de0d:	0f 1f 00             	nop    DWORD PTR [rax]
		  *__p = __builtin_toupper(*__p);
    de10:	41 0f be 3e          	movsx  edi,BYTE PTR [r14]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    de14:	49 83 c6 01          	add    r14,0x1
		  *__p = __builtin_toupper(*__p);
    de18:	e8 33 55 ff ff       	call   3350 <toupper@plt>
    de1d:	41 88 46 ff          	mov    BYTE PTR [r14-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    de21:	4d 39 e6             	cmp    r14,r12
    de24:	75 ea                	jne    de10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x550>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    de26:	4c 8d 05 f5 73 00 00 	lea    r8,[rip+0x73f5]        # 15222 <CSWTCH.1104+0x142>
    de2d:	ba 02 00 00 00       	mov    edx,0x2
    de32:	e9 61 ff ff ff       	jmp    dd98 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d8>
    de37:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    de3e:	00 00 
	  auto const __num = __val & 7;
    de40:	48 89 f0             	mov    rax,rsi
    de43:	83 e0 07             	and    eax,0x7
	  __first[1] = '0' + __num;
    de46:	83 c0 30             	add    eax,0x30
    de49:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
	  __val >>= 3;
    de4d:	48 89 f0             	mov    rax,rsi
    de50:	48 c1 e8 03          	shr    rax,0x3
	  __first[0] = '0' + __val;
    de54:	83 c0 30             	add    eax,0x30
    de57:	e9 21 ff ff ff       	jmp    dd7d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4bd>
    de5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  auto const __num = __val * 2;
    de60:	48 01 f6             	add    rsi,rsi
	  __first[1] = __digits[__num + 1];
    de63:	0f b6 44 34 51       	movzx  eax,BYTE PTR [rsp+rsi*1+0x51]
	  __first[0] = __digits[__num];
    de68:	0f b6 74 34 50       	movzx  esi,BYTE PTR [rsp+rsi*1+0x50]
	  __first[1] = __digits[__num + 1];
    de6d:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
    de71:	e9 f4 fd ff ff       	jmp    dc6a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3aa>
    de76:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    de7d:	00 00 00 
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    de80:	48 8d 44 24 43       	lea    rax,[rsp+0x43]
    de85:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    de8a:	48 89 f2             	mov    rdx,rsi
    de8d:	4c 89 ef             	mov    rdi,r13
    de90:	48 89 c6             	mov    rsi,rax
    de93:	e8 68 79 ff ff       	call   5800 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
    de98:	4c 8d 05 86 73 00 00 	lea    r8,[rip+0x7386]        # 15225 <CSWTCH.1104+0x145>
    de9f:	49 89 c4             	mov    r12,rax
    dea2:	e9 dc fb ff ff       	jmp    da83 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c3>
    dea7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    deae:	00 00 
    deb0:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    deb5:	e9 50 ff ff ff       	jmp    de0a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x54a>
    deba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    dec0:	4c 8d 05 5b 73 00 00 	lea    r8,[rip+0x735b]        # 15222 <CSWTCH.1104+0x142>
    dec7:	e9 b7 fb ff ff       	jmp    da83 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c3>
    decc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    ded0:	41 83 c4 02          	add    r12d,0x2
    ded4:	e9 35 fc ff ff       	jmp    db0e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x24e>
    ded9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b4) return __n + 3;
    dee0:	41 83 c4 03          	add    r12d,0x3
    dee4:	e9 25 fc ff ff       	jmp    db0e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x24e>
	  return __res;
    dee9:	4c 8d 64 24 43       	lea    r12,[rsp+0x43]
    deee:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    def3:	e9 d8 fa ff ff       	jmp    d9d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x110>
	  if (__value < (unsigned)__base) return __n;
    def8:	41 bc 01 00 00 00    	mov    r12d,0x1
    defe:	e9 64 fd ff ff       	jmp    dc67 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a7>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    df03:	e8 48 52 ff ff       	call   3150 <abort@plt>
    df08:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    df0f:	00 00 00 
    df12:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    df19:	00 00 00 
    df1c:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    df23:	00 00 00 
    df26:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    df2d:	00 00 00 
    df30:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    df37:	00 00 00 
    df3a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000000df40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    df40:	41 57                	push   r15
    df42:	49 89 fa             	mov    r10,rdi
    df45:	49 89 d1             	mov    r9,rdx
    df48:	41 56                	push   r14
    df4a:	41 55                	push   r13
    df4c:	41 54                	push   r12
    df4e:	55                   	push   rbp
    df4f:	53                   	push   rbx
    df50:	48 81 ec 98 01 00 00 	sub    rsp,0x198
    df57:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
	  if (_M_spec._M_type == _Pres_c)
    df5c:	0f b6 4f 01          	movzx  ecx,BYTE PTR [rdi+0x1]
    df60:	89 cf                	mov    edi,ecx
    df62:	83 e7 78             	and    edi,0x78
    df65:	40 80 ff 38          	cmp    dil,0x38
    df69:	0f 84 a9 01 00 00    	je     e118 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d8>
	  switch (_M_spec._M_type)
    df6f:	c0 e9 03             	shr    cl,0x3
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    df72:	49 89 f4             	mov    r12,rsi
    df75:	49 89 d5             	mov    r13,rdx
	  switch (_M_spec._M_type)
    df78:	83 e1 0f             	and    ecx,0xf
	  if (__i < 0)
    df7b:	48 85 d2             	test   rdx,rdx
    df7e:	0f 88 dc 00 00 00    	js     e060 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x120>
	  switch (_M_spec._M_type)
    df84:	80 f9 04             	cmp    cl,0x4
    df87:	0f 84 83 03 00 00    	je     e310 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d0>
    df8d:	0f 87 e5 01 00 00    	ja     e178 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x238>
    df93:	80 f9 01             	cmp    cl,0x1
    df96:	0f 86 44 03 00 00    	jbe    e2e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    df9c:	40 80 ff 10          	cmp    dil,0x10
    dfa0:	48 8d 2d 75 72 00 00 	lea    rbp,[rip+0x7275]        # 1521c <CSWTCH.1104+0x13c>
    dfa7:	48 8d 0d 71 72 00 00 	lea    rcx,[rip+0x7271]        # 1521f <CSWTCH.1104+0x13f>
      if (__value == 0)
    dfae:	48 89 f0             	mov    rax,rsi
    dfb1:	48 0f 45 e9          	cmovne rbp,rcx
    dfb5:	48 09 d0             	or     rax,rdx
    dfb8:	0f 85 da 00 00 00    	jne    e098 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x158>
    dfbe:	b8 30 00 00 00       	mov    eax,0x30
    dfc3:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    dfc8:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
      __first[0] = '1';
    dfcd:	88 44 24 33          	mov    BYTE PTR [rsp+0x33],al
	  if (_M_spec._M_alt && __base_prefix.size())
    dfd1:	41 f6 02 10          	test   BYTE PTR [r10],0x10
    dfd5:	0f 84 d5 02 00 00    	je     e2b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x370>
    dfdb:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    dfe2:	b8 02 00 00 00       	mov    eax,0x2
	      __start -= __base_prefix.size();
    dfe7:	4c 01 ee             	add    rsi,r13
	      __builtin_memcpy(__start, __base_prefix.data(),
    dfea:	89 c1                	mov    ecx,eax
    dfec:	85 c0                	test   eax,eax
    dfee:	74 20                	je     e010 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0>
    dff0:	31 c0                	xor    eax,eax
    dff2:	89 c2                	mov    edx,eax
    dff4:	83 c0 01             	add    eax,0x1
    dff7:	0f b6 7c 15 00       	movzx  edi,BYTE PTR [rbp+rdx*1+0x0]
    dffc:	40 88 3c 16          	mov    BYTE PTR [rsi+rdx*1],dil
    e000:	39 c8                	cmp    eax,ecx
    e002:	72 ee                	jb     dff2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb2>
    e004:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e00b:	00 00 00 00 
    e00f:	90                   	nop
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e010:	48 8d 56 ff          	lea    rdx,[rsi-0x1]
      if (__i < 0)
    e014:	4d 85 c9             	test   r9,r9
    e017:	0f 88 a3 02 00 00    	js     e2c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
    e01d:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e021:	c0 e8 02             	shr    al,0x2
    e024:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    e027:	83 f8 01             	cmp    eax,0x1
    e02a:	0f 84 a0 02 00 00    	je     e2d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x390>
      else if (__sign == _Sign_space)
    e030:	83 f8 03             	cmp    eax,0x3
    e033:	0f 84 d7 03 00 00    	je     e410 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d0>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    e039:	48 29 f3             	sub    rbx,rsi
			       __start_digits - __start, __fc);
    e03c:	4c 89 e9             	mov    rcx,r13
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    e03f:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
    e044:	48 89 f2             	mov    rdx,rsi
			       __start_digits - __start, __fc);
    e047:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    e04a:	4c 89 d7             	mov    rdi,r10
    e04d:	48 89 de             	mov    rsi,rbx
    e050:	e8 db d9 ff ff       	call   ba30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    e055:	e9 07 01 00 00       	jmp    e161 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x221>
    e05a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    e060:	49 f7 dc             	neg    r12
    e063:	49 83 d5 00          	adc    r13,0x0
    e067:	49 f7 dd             	neg    r13
	  switch (_M_spec._M_type)
    e06a:	80 f9 04             	cmp    cl,0x4
    e06d:	0f 84 ad 02 00 00    	je     e320 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e0>
    e073:	0f 87 3f 01 00 00    	ja     e1b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x278>
    e079:	80 f9 01             	cmp    cl,0x1
    e07c:	0f 86 9e 03 00 00    	jbe    e420 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    e082:	40 80 ff 10          	cmp    dil,0x10
    e086:	48 8d 2d 92 71 00 00 	lea    rbp,[rip+0x7192]        # 1521f <CSWTCH.1104+0x13f>
    e08d:	48 8d 05 88 71 00 00 	lea    rax,[rip+0x7188]        # 1521c <CSWTCH.1104+0x13c>
    e094:	48 0f 44 e8          	cmove  rbp,rax
	  if (__high != 0)
    e098:	4d 85 ed             	test   r13,r13
    e09b:	0f 85 47 07 00 00    	jne    e7e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8a8>
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
    e0a1:	49 0f bd d4          	bsr    rdx,r12
      return _Nd - std::__countl_zero(__x);
    e0a5:	bb 80 00 00 00       	mov    ebx,0x80
      unsigned __pos = __len - 1;
    e0aa:	b8 7f 00 00 00       	mov    eax,0x7f
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
    e0af:	48 83 f2 3f          	xor    rdx,0x3f
    e0b3:	83 c2 40             	add    edx,0x40
      return _Nd - std::__countl_zero(__x);
    e0b6:	29 d3                	sub    ebx,edx
      while (__pos)
    e0b8:	29 d0                	sub    eax,edx
    e0ba:	0f 84 43 07 00 00    	je     e803 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8c3>
    e0c0:	89 c1                	mov    ecx,eax
    e0c2:	83 e8 01             	sub    eax,0x1
    e0c5:	48 8d 74 0c 2f       	lea    rsi,[rsp+rcx*1+0x2f]
    e0ca:	48 8d 54 0c 30       	lea    rdx,[rsp+rcx*1+0x30]
    e0cf:	48 29 c6             	sub    rsi,rax
    e0d2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e0d9:	00 00 00 00 
    e0dd:	0f 1f 00             	nop    DWORD PTR [rax]
	  __first[__pos--] = '0' + (__val & 1);
    e0e0:	44 89 e0             	mov    eax,r12d
      while (__pos)
    e0e3:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    e0e7:	4d 0f ac ec 01       	shrd   r12,r13,0x1
	  __first[__pos--] = '0' + (__val & 1);
    e0ec:	83 e0 01             	and    eax,0x1
	  __val >>= 1;
    e0ef:	49 d1 ed             	shr    r13,1
	  __first[__pos--] = '0' + (__val & 1);
    e0f2:	83 c0 30             	add    eax,0x30
    e0f5:	88 42 04             	mov    BYTE PTR [rdx+0x4],al
      while (__pos)
    e0f8:	48 39 f2             	cmp    rdx,rsi
    e0fb:	75 e3                	jne    e0e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1a0>
      __res.ptr = __first + __len;
    e0fd:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e102:	48 63 db             	movsxd rbx,ebx
    e105:	b8 31 00 00 00       	mov    eax,0x31
    e10a:	4c 01 eb             	add    rbx,r13
    e10d:	e9 bb fe ff ff       	jmp    dfcd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8d>
    e112:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    e118:	b9 7f 00 00 00       	mov    ecx,0x7f
    e11d:	48 39 f1             	cmp    rcx,rsi
    e120:	b9 00 00 00 00       	mov    ecx,0x0
    e125:	48 19 d1             	sbb    rcx,rdx
    e128:	0f 8c f1 07 00 00    	jl     e91f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9df>
    e12e:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    e135:	00 
    e136:	b8 01 00 00 00       	mov    eax,0x1
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    e13b:	41 b9 01 00 00 00    	mov    r9d,0x1
	    return static_cast<_CharT>(__i);
    e141:	40 88 b4 24 c0 00 00 	mov    BYTE PTR [rsp+0xc0],sil
    e148:	00 
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    e149:	48 89 ce             	mov    rsi,rcx
    e14c:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    e151:	48 89 c7             	mov    rdi,rax
    e154:	4d 89 d0             	mov    r8,r10
    e157:	ba 01 00 00 00       	mov    edx,0x1
    e15c:	e8 2f b7 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    e161:	48 81 c4 98 01 00 00 	add    rsp,0x198
    e168:	5b                   	pop    rbx
    e169:	5d                   	pop    rbp
    e16a:	41 5c                	pop    r12
    e16c:	41 5d                	pop    r13
    e16e:	41 5e                	pop    r14
    e170:	41 5f                	pop    r15
    e172:	c3                   	ret
    e173:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e178:	40 80 ff 28          	cmp    dil,0x28
    e17c:	0f 84 ae 06 00 00    	je     e830 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
      if (__value == 0)
    e182:	48 89 f0             	mov    rax,rsi
    e185:	48 09 d0             	or     rax,rdx
    e188:	0f 85 5d 07 00 00    	jne    e8eb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9ab>
	  *__first = '0';
    e18e:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
	      if (_M_spec._M_type == _Pres_X)
    e193:	40 80 ff 30          	cmp    dil,0x30
    e197:	0f 84 cb 05 00 00    	je     e768 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x828>
    e19d:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    e1a2:	48 8d 2d 79 70 00 00 	lea    rbp,[rip+0x7079]        # 15222 <CSWTCH.1104+0x142>
    e1a9:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e1ae:	e9 e6 00 00 00       	jmp    e299 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x359>
    e1b3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e1b8:	40 80 ff 28          	cmp    dil,0x28
    e1bc:	48 8d 2d 62 70 00 00 	lea    rbp,[rip+0x7062]        # 15225 <CSWTCH.1104+0x145>
    e1c3:	48 8d 05 58 70 00 00 	lea    rax,[rip+0x7058]        # 15222 <CSWTCH.1104+0x142>
    e1ca:	48 0f 45 e8          	cmovne rbp,rax
	  if (__high != 0)
    e1ce:	4d 85 ed             	test   r13,r13
    e1d1:	0f 85 e9 05 00 00    	jne    e7c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x880>
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    e1d7:	49 0f bd c4          	bsr    rax,r12
      constexpr char __digits[] = {
    e1db:	66 0f 6f 05 cd a5 00 	movdqa xmm0,XMMWORD PTR [rip+0xa5cd]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    e1e2:	00 
      while (__val >= 0x100)
    e1e3:	b9 ff 00 00 00       	mov    ecx,0xff
    e1e8:	4c 8d 9c 24 c0 00 00 	lea    r11,[rsp+0xc0]
    e1ef:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    e1f0:	83 c0 04             	add    eax,0x4
    e1f3:	c1 e8 02             	shr    eax,0x2
      constexpr char __digits[] = {
    e1f6:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    e1fd:	00 
      unsigned __pos = __len - 1;
    e1fe:	8d 50 ff             	lea    edx,[rax-0x1]
      while (__val >= 0x100)
    e201:	4c 39 e1             	cmp    rcx,r12
    e204:	73 5e                	jae    e264 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x324>
    e206:	4c 8d 9c 24 c0 00 00 	lea    r11,[rsp+0xc0]
    e20d:	00 
    e20e:	41 b8 ff 00 00 00    	mov    r8d,0xff
    e214:	31 f6                	xor    esi,esi
    e216:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e21d:	00 00 00 
	  auto __num = __val & 0xF;
    e220:	4c 89 e1             	mov    rcx,r12
	  __first[__pos] = __digits[__num];
    e223:	41 89 d6             	mov    r14d,edx
	  __first[__pos - 1] = __digits[__num];
    e226:	8d 5a ff             	lea    ebx,[rdx-0x1]
	  __pos -= 2;
    e229:	83 ea 02             	sub    edx,0x2
	  auto __num = __val & 0xF;
    e22c:	83 e1 0f             	and    ecx,0xf
	  __first[__pos] = __digits[__num];
    e22f:	4c 01 d9             	add    rcx,r11
    e232:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
    e235:	42 88 4c 34 33       	mov    BYTE PTR [rsp+r14*1+0x33],cl
	  __val >>= 4;
    e23a:	4c 89 e1             	mov    rcx,r12
	  __val >>= 4;
    e23d:	4d 0f ac ec 08       	shrd   r12,r13,0x8
	  __val >>= 4;
    e242:	4c 0f ac e9 04       	shrd   rcx,r13,0x4
	  __val >>= 4;
    e247:	49 c1 ed 08          	shr    r13,0x8
	  __num = __val & 0xF;
    e24b:	83 e1 0f             	and    ecx,0xf
      while (__val >= 0x100)
    e24e:	4d 39 e0             	cmp    r8,r12
	  __first[__pos - 1] = __digits[__num];
    e251:	4a 8d 0c 19          	lea    rcx,[rcx+r11*1]
    e255:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
    e258:	88 4c 1c 33          	mov    BYTE PTR [rsp+rbx*1+0x33],cl
      while (__val >= 0x100)
    e25c:	48 89 f3             	mov    rbx,rsi
    e25f:	4c 19 eb             	sbb    rbx,r13
    e262:	72 bc                	jb     e220 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
      if (__val >= 0x10)
    e264:	ba 0f 00 00 00       	mov    edx,0xf
    e269:	4c 39 e2             	cmp    rdx,r12
    e26c:	ba 00 00 00 00       	mov    edx,0x0
    e271:	4c 19 ea             	sbb    rdx,r13
    e274:	0f 82 c6 04 00 00    	jb     e740 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x800>
	__first[0] = __digits[__val];
    e27a:	4d 01 e3             	add    r11,r12
    e27d:	41 0f b6 13          	movzx  edx,BYTE PTR [r11]
      __res.ptr = __first + __len;
    e281:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e286:	88 54 24 33          	mov    BYTE PTR [rsp+0x33],dl
    e28a:	49 8d 5c 05 00       	lea    rbx,[r13+rax*1+0x0]
	      if (_M_spec._M_type == _Pres_X)
    e28f:	40 80 ff 30          	cmp    dil,0x30
    e293:	0f 84 e0 04 00 00    	je     e779 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x839>
	  if (_M_spec._M_alt && __base_prefix.size())
    e299:	41 f6 02 10          	test   BYTE PTR [r10],0x10
    e29d:	0f 85 38 fd ff ff    	jne    dfdb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9b>
    e2a3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e2aa:	00 00 00 00 
    e2ae:	66 90                	xchg   ax,ax
	  char* __start = __buf + 3;
    e2b0:	4c 89 ee             	mov    rsi,r13
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e2b3:	48 8d 56 ff          	lea    rdx,[rsi-0x1]
      if (__i < 0)
    e2b7:	4d 85 c9             	test   r9,r9
    e2ba:	0f 89 5d fd ff ff    	jns    e01d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdd>
	*__dest = '-';
    e2c0:	c6 46 ff 2d          	mov    BYTE PTR [rsi-0x1],0x2d
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e2c4:	48 89 d6             	mov    rsi,rdx
    e2c7:	e9 6d fd ff ff       	jmp    e039 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf9>
    e2cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	*__dest = '+';
    e2d0:	c6 46 ff 2b          	mov    BYTE PTR [rsi-0x1],0x2b
    e2d4:	eb ee                	jmp    e2c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x384>
    e2d6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e2dd:	00 00 00 
      if (__value == 0)
    e2e0:	48 89 f0             	mov    rax,rsi
    e2e3:	48 09 d0             	or     rax,rdx
    e2e6:	0f 85 34 01 00 00    	jne    e420 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
      __glibcxx_assert(2 <= __base && __base <= 36);
    e2ec:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    e2f1:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  char* __start = __buf + 3;
    e2f5:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e2fa:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    e2ff:	4c 89 ee             	mov    rsi,r13
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e302:	48 8d 54 24 32       	lea    rdx,[rsp+0x32]
    e307:	e9 15 fd ff ff       	jmp    e021 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe1>
    e30c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    e310:	48 89 f0             	mov    rax,rsi
    e313:	48 09 d0             	or     rax,rdx
    e316:	74 d4                	je     e2ec <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ac>
    e318:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    e31f:	00 
    e320:	4d 85 ed             	test   r13,r13
    e323:	0f 85 47 05 00 00    	jne    e870 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x930>
	__len = (__to_chars_len_2(__val) + 2) / 3;
    e329:	49 0f bd c4          	bsr    rax,r12
      while (__val >= 0100)
    e32d:	ba 3f 00 00 00       	mov    edx,0x3f
	__len = (__to_chars_len_2(__val) + 2) / 3;
    e332:	8d 58 03             	lea    ebx,[rax+0x3]
    e335:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    e33a:	48 0f af d8          	imul   rbx,rax
    e33e:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    e342:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0100)
    e345:	4c 39 e2             	cmp    rdx,r12
    e348:	73 77                	jae    e3c1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x481>
    e34a:	be 3f 00 00 00       	mov    esi,0x3f
    e34f:	31 d2                	xor    edx,edx
    e351:	89 df                	mov    edi,ebx
    e353:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e35a:	00 00 00 00 
    e35e:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e365:	00 00 00 00 
    e369:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e370:	00 00 00 00 
    e374:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e37b:	00 00 00 00 
    e37f:	90                   	nop
	  auto __num = __val & 7;
    e380:	4c 89 e1             	mov    rcx,r12
	  __first[__pos] = '0' + __num;
    e383:	41 89 c0             	mov    r8d,eax
      while (__val >= 0100)
    e386:	48 89 d3             	mov    rbx,rdx
	  auto __num = __val & 7;
    e389:	83 e1 07             	and    ecx,0x7
	  __first[__pos] = '0' + __num;
    e38c:	83 c1 30             	add    ecx,0x30
    e38f:	42 88 4c 04 33       	mov    BYTE PTR [rsp+r8*1+0x33],cl
	  __val >>= 3;
    e394:	4c 89 e1             	mov    rcx,r12
	  __val >>= 3;
    e397:	4d 0f ac ec 06       	shrd   r12,r13,0x6
	  __first[__pos - 1] = '0' + __num;
    e39c:	44 8d 40 ff          	lea    r8d,[rax-0x1]
	  __val >>= 3;
    e3a0:	4c 0f ac e9 03       	shrd   rcx,r13,0x3
	  __pos -= 2;
    e3a5:	83 e8 02             	sub    eax,0x2
	  __val >>= 3;
    e3a8:	49 c1 ed 06          	shr    r13,0x6
	  __num = __val & 7;
    e3ac:	83 e1 07             	and    ecx,0x7
	  __first[__pos - 1] = '0' + __num;
    e3af:	83 c1 30             	add    ecx,0x30
      while (__val >= 0100)
    e3b2:	4c 39 e6             	cmp    rsi,r12
    e3b5:	4c 19 eb             	sbb    rbx,r13
	  __first[__pos - 1] = '0' + __num;
    e3b8:	42 88 4c 04 33       	mov    BYTE PTR [rsp+r8*1+0x33],cl
      while (__val >= 0100)
    e3bd:	72 c1                	jb     e380 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x440>
    e3bf:	89 fb                	mov    ebx,edi
      if (__val >= 010)
    e3c1:	b8 07 00 00 00       	mov    eax,0x7
    e3c6:	4c 39 e0             	cmp    rax,r12
    e3c9:	b8 00 00 00 00       	mov    eax,0x0
    e3ce:	4c 19 e8             	sbb    rax,r13
    e3d1:	0f 82 49 03 00 00    	jb     e720 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e0>
	__first[0] = '0' + __val;
    e3d7:	41 83 c4 30          	add    r12d,0x30
    e3db:	44 88 64 24 33       	mov    BYTE PTR [rsp+0x33],r12b
      __res.ptr = __first + __len;
    e3e0:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e3e5:	89 db                	mov    ebx,ebx
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    e3e7:	48 8d 2d ea 6d 00 00 	lea    rbp,[rip+0x6dea]        # 151d8 <CSWTCH.1104+0xf8>
    e3ee:	4c 01 eb             	add    rbx,r13
    e3f1:	b8 01 00 00 00       	mov    eax,0x1
	  char* __start = __buf + 3;
    e3f6:	4c 89 ee             	mov    rsi,r13
	  if (_M_spec._M_alt && __base_prefix.size())
    e3f9:	41 f6 02 10          	test   BYTE PTR [r10],0x10
    e3fd:	0f 84 0d fc ff ff    	je     e010 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0>
	      __start -= __base_prefix.size();
    e403:	48 89 c6             	mov    rsi,rax
    e406:	48 f7 de             	neg    rsi
    e409:	e9 d9 fb ff ff       	jmp    dfe7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa7>
    e40e:	66 90                	xchg   ax,ax
	*__dest = ' ';
    e410:	c6 46 ff 20          	mov    BYTE PTR [rsi-0x1],0x20
    e414:	e9 ab fe ff ff       	jmp    e2c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x384>
    e419:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    e420:	b8 09 00 00 00       	mov    eax,0x9
    e425:	4c 39 e0             	cmp    rax,r12
    e428:	b8 00 00 00 00       	mov    eax,0x0
    e42d:	4c 19 e8             	sbb    rax,r13
    e430:	0f 83 df 04 00 00    	jae    e915 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9d5>
    e436:	4c 89 ed             	mov    rbp,r13
      unsigned __n = 1;
    e439:	be 01 00 00 00       	mov    esi,0x1
    e43e:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
	  if (__value < __b2) return __n + 1;
    e443:	45 31 ff             	xor    r15d,r15d
    e446:	49 89 ee             	mov    r14,rbp
    e449:	4c 89 64 24 10       	mov    QWORD PTR [rsp+0x10],r12
	  if (__value < (unsigned)__base) return __n;
    e44e:	bb 9f 86 01 00       	mov    ebx,0x1869f
    e453:	4d 89 e5             	mov    r13,r12
    e456:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
    e45b:	89 f5                	mov    ebp,esi
    e45d:	4c 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],r9
    e462:	eb 5c                	jmp    e4c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x580>
    e464:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    e468:	b8 e7 03 00 00       	mov    eax,0x3e7
    e46d:	4c 39 e8             	cmp    rax,r13
    e470:	4c 89 f8             	mov    rax,r15
    e473:	4c 19 f0             	sbb    rax,r14
    e476:	0f 83 14 04 00 00    	jae    e890 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x950>
	  if (__value < __b4) return __n + 3;
    e47c:	b8 0f 27 00 00       	mov    eax,0x270f
    e481:	4c 39 e8             	cmp    rax,r13
    e484:	4c 89 f8             	mov    rax,r15
    e487:	4c 19 f0             	sbb    rax,r14
    e48a:	0f 83 20 04 00 00    	jae    e8b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x970>
	  __value /= __b4;
    e490:	31 c9                	xor    ecx,ecx
    e492:	4c 89 ef             	mov    rdi,r13
    e495:	ba 10 27 00 00       	mov    edx,0x2710
    e49a:	4c 89 f6             	mov    rsi,r14
    e49d:	e8 1e 4c ff ff       	call   30c0 <__udivti3@plt>
	  __n += 4;
    e4a2:	83 c5 04             	add    ebp,0x4
	  if (__value < (unsigned)__base) return __n;
    e4a5:	4c 89 ff             	mov    rdi,r15
    e4a8:	4c 39 eb             	cmp    rbx,r13
    e4ab:	4c 19 f7             	sbb    rdi,r14
	  __value /= __b4;
    e4ae:	48 89 c1             	mov    rcx,rax
    e4b1:	48 89 d0             	mov    rax,rdx
	  if (__value < (unsigned)__base) return __n;
    e4b4:	0f 83 16 04 00 00    	jae    e8d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x990>
    e4ba:	49 89 cd             	mov    r13,rcx
    e4bd:	49 89 c6             	mov    r14,rax
	  if (__value < __b2) return __n + 1;
    e4c0:	b8 63 00 00 00       	mov    eax,0x63
    e4c5:	4c 39 e8             	cmp    rax,r13
    e4c8:	4c 89 f8             	mov    rax,r15
    e4cb:	4c 19 f0             	sbb    rax,r14
    e4ce:	72 98                	jb     e468 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x528>
    e4d0:	89 ee                	mov    esi,ebp
    e4d2:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    e4d7:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    e4dc:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    e4e1:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    e4e6:	83 c6 01             	add    esi,0x1
      if (__builtin_expect((__last - __first) < __len, 0))
    e4e9:	81 fe 80 00 00 00    	cmp    esi,0x80
    e4ef:	0f 87 02 04 00 00    	ja     e8f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9b7>
      constexpr char __digits[201] =
    e4f5:	66 0f 6f 05 e3 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1e3]        # 186e0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    e4fc:	00 
      while (__val >= 100)
    e4fd:	b8 63 00 00 00       	mov    eax,0x63
      unsigned __pos = __len - 1;
    e502:	8d 6e ff             	lea    ebp,[rsi-0x1]
      while (__val >= 100)
    e505:	4c 8d 9c 24 c0 00 00 	lea    r11,[rsp+0xc0]
    e50c:	00 
    e50d:	4c 39 e0             	cmp    rax,r12
    e510:	b8 00 00 00 00       	mov    eax,0x0
      constexpr char __digits[201] =
    e515:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    e51c:	00 
    e51d:	66 0f 6f 05 cb a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1cb]        # 186f0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    e524:	00 
      while (__val >= 100)
    e525:	4c 19 e8             	sbb    rax,r13
      constexpr char __digits[201] =
    e528:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    e52f:	00 
    e530:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18700 <std::__unicode::__v15_1_0::__width_edges+0x340>
    e537:	00 
    e538:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    e53f:	00 
    e540:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18710 <std::__unicode::__v15_1_0::__width_edges+0x350>
    e547:	00 
    e548:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    e54f:	00 
    e550:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18720 <std::__unicode::__v15_1_0::__width_edges+0x360>
    e557:	00 
    e558:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    e55f:	00 
    e560:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18730 <std::__unicode::__v15_1_0::__width_edges+0x370>
    e567:	00 
    e568:	0f 29 84 24 10 01 00 	movaps XMMWORD PTR [rsp+0x110],xmm0
    e56f:	00 
    e570:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18740 <std::__unicode::__v15_1_0::__width_edges+0x380>
    e577:	00 
    e578:	0f 29 84 24 20 01 00 	movaps XMMWORD PTR [rsp+0x120],xmm0
    e57f:	00 
    e580:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18750 <std::__unicode::__v15_1_0::__width_edges+0x390>
    e587:	00 
    e588:	0f 29 84 24 30 01 00 	movaps XMMWORD PTR [rsp+0x130],xmm0
    e58f:	00 
    e590:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18760 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    e597:	00 
    e598:	0f 29 84 24 40 01 00 	movaps XMMWORD PTR [rsp+0x140],xmm0
    e59f:	00 
    e5a0:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18770 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    e5a7:	00 
    e5a8:	0f 29 84 24 50 01 00 	movaps XMMWORD PTR [rsp+0x150],xmm0
    e5af:	00 
    e5b0:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18780 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    e5b7:	00 
    e5b8:	0f 29 84 24 60 01 00 	movaps XMMWORD PTR [rsp+0x160],xmm0
    e5bf:	00 
    e5c0:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 18790 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    e5c7:	00 
    e5c8:	0f 29 84 24 70 01 00 	movaps XMMWORD PTR [rsp+0x170],xmm0
    e5cf:	00 
    e5d0:	66 0f 6f 05 c8 a1 00 	movdqa xmm0,XMMWORD PTR [rip+0xa1c8]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    e5d7:	00 
    e5d8:	0f 11 84 24 79 01 00 	movups XMMWORD PTR [rsp+0x179],xmm0
    e5df:	00 
      while (__val >= 100)
    e5e0:	0f 83 2a 02 00 00    	jae    e810 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8d0>
    e5e6:	49 be ff ff ff ff ff 	movabs r14,0xfffffffffffffff
    e5ed:	ff ff 0f 
    e5f0:	89 74 24 10          	mov    DWORD PTR [rsp+0x10],esi
    e5f4:	49 bf 29 5c 8f c2 f5 	movabs r15,0x8f5c28f5c28f5c29
    e5fb:	28 5c 8f 
    e5fe:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
    e603:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e60a:	00 00 00 00 
    e60e:	66 90                	xchg   ax,ax
    e610:	4c 89 e0             	mov    rax,r12
    e613:	4c 89 e1             	mov    rcx,r12
    e616:	4c 89 e6             	mov    rsi,r12
    e619:	31 db                	xor    ebx,ebx
    e61b:	4c 0f ac e8 3c       	shrd   rax,r13,0x3c
    e620:	4c 21 f1             	and    rcx,r14
    e623:	4c 89 ef             	mov    rdi,r13
    e626:	41 b9 19 00 00 00    	mov    r9d,0x19
    e62c:	4c 21 f0             	and    rax,r14
    e62f:	48 01 c1             	add    rcx,rax
    e632:	4c 89 e8             	mov    rax,r13
    e635:	48 c1 e8 38          	shr    rax,0x38
    e639:	48 01 c1             	add    rcx,rax
    e63c:	48 b8 15 ae 47 e1 7a 	movabs rax,0x47ae147ae147ae15
    e643:	14 ae 47 
    e646:	48 f7 e1             	mul    rcx
    e649:	48 89 c8             	mov    rax,rcx
    e64c:	48 29 d0             	sub    rax,rdx
    e64f:	48 d1 e8             	shr    rax,1
    e652:	48 01 c2             	add    rdx,rax
    e655:	48 c1 ea 04          	shr    rdx,0x4
    e659:	48 8d 04 92          	lea    rax,[rdx+rdx*4]
    e65d:	48 8d 04 80          	lea    rax,[rax+rax*4]
    e661:	48 29 c1             	sub    rcx,rax
    e664:	48 b8 c2 f5 28 5c 8f 	movabs rax,0x28f5c28f5c28f5c2
    e66b:	c2 f5 28 
    e66e:	48 29 ce             	sub    rsi,rcx
    e671:	48 19 df             	sbb    rdi,rbx
    e674:	48 0f af c6          	imul   rax,rsi
    e678:	49 89 f8             	mov    r8,rdi
    e67b:	4d 0f af c7          	imul   r8,r15
    e67f:	49 01 c0             	add    r8,rax
    e682:	48 89 f0             	mov    rax,rsi
    e685:	49 f7 e7             	mul    r15
    e688:	48 89 c6             	mov    rsi,rax
    e68b:	83 e0 03             	and    eax,0x3
    e68e:	49 01 d0             	add    r8,rdx
    e691:	49 f7 e1             	mul    r9
    e694:	4c 89 c7             	mov    rdi,r8
    e697:	4c 89 ea             	mov    rdx,r13
    e69a:	48 01 c8             	add    rax,rcx
    e69d:	4c 89 e1             	mov    rcx,r12
	  auto const __num = (__val % 100) * 2;
    e6a0:	48 01 c0             	add    rax,rax
	  __val /= 100;
    e6a3:	48 c1 ef 02          	shr    rdi,0x2
    e6a7:	49 89 fd             	mov    r13,rdi
	  __first[__pos] = __digits[__num + 1];
    e6aa:	49 8d 3c 03          	lea    rdi,[r11+rax*1]
	  __val /= 100;
    e6ae:	4c 0f ac c6 02       	shrd   rsi,r8,0x2
	  __first[__pos - 1] = __digits[__num];
    e6b3:	4a 8d 04 18          	lea    rax,[rax+r11*1]
	  __first[__pos] = __digits[__num + 1];
    e6b7:	0f b6 7f 01          	movzx  edi,BYTE PTR [rdi+0x1]
	  __first[__pos - 1] = __digits[__num];
    e6bb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
	  __val /= 100;
    e6be:	49 89 f4             	mov    r12,rsi
	  __first[__pos] = __digits[__num + 1];
    e6c1:	89 ee                	mov    esi,ebp
    e6c3:	40 88 7c 34 33       	mov    BYTE PTR [rsp+rsi*1+0x33],dil
	  __first[__pos - 1] = __digits[__num];
    e6c8:	8d 75 ff             	lea    esi,[rbp-0x1]
	  __pos -= 2;
    e6cb:	83 ed 02             	sub    ebp,0x2
	  __first[__pos - 1] = __digits[__num];
    e6ce:	88 44 34 33          	mov    BYTE PTR [rsp+rsi*1+0x33],al
      while (__val >= 100)
    e6d2:	b8 0f 27 00 00       	mov    eax,0x270f
    e6d7:	48 39 c8             	cmp    rax,rcx
    e6da:	b8 00 00 00 00       	mov    eax,0x0
    e6df:	48 19 d0             	sbb    rax,rdx
    e6e2:	0f 82 28 ff ff ff    	jb     e610 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d0>
      if (__val >= 10)
    e6e8:	b8 e7 03 00 00       	mov    eax,0x3e7
    e6ed:	8b 74 24 10          	mov    esi,DWORD PTR [rsp+0x10]
    e6f1:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    e6f6:	48 39 c8             	cmp    rax,rcx
    e6f9:	b8 00 00 00 00       	mov    eax,0x0
    e6fe:	48 19 d0             	sbb    rax,rdx
      __res.ptr = __first + __len;
    e701:	89 f3                	mov    ebx,esi
    e703:	0f 82 07 01 00 00    	jb     e810 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8d0>
	__first[0] = '0' + __val;
    e709:	41 83 c4 30          	add    r12d,0x30
    e70d:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e712:	44 88 64 24 33       	mov    BYTE PTR [rsp+0x33],r12b
    e717:	4c 01 eb             	add    rbx,r13
      return __res;
    e71a:	e9 91 fb ff ff       	jmp    e2b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x370>
    e71f:	90                   	nop
	  auto const __num = __val & 7;
    e720:	4c 89 e0             	mov    rax,r12
	  __val >>= 3;
    e723:	4d 0f ac ec 03       	shrd   r12,r13,0x3
	  auto const __num = __val & 7;
    e728:	83 e0 07             	and    eax,0x7
	  __first[0] = '0' + __val;
    e72b:	41 83 c4 30          	add    r12d,0x30
	  __first[1] = '0' + __num;
    e72f:	83 c0 30             	add    eax,0x30
    e732:	88 44 24 34          	mov    BYTE PTR [rsp+0x34],al
    e736:	e9 a0 fc ff ff       	jmp    e3db <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x49b>
    e73b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  const auto __num = __val & 0xF;
    e740:	4c 89 e1             	mov    rcx,r12
    e743:	83 e1 0f             	and    ecx,0xf
	  __first[1] = __digits[__num];
    e746:	4c 01 d9             	add    rcx,r11
    e749:	0f b6 11             	movzx  edx,BYTE PTR [rcx]
    e74c:	88 54 24 34          	mov    BYTE PTR [rsp+0x34],dl
	  __first[0] = __digits[__val];
    e750:	4c 89 e2             	mov    rdx,r12
    e753:	4c 0f ac ea 04       	shrd   rdx,r13,0x4
    e758:	42 0f b6 14 1a       	movzx  edx,BYTE PTR [rdx+r11*1]
    e75d:	e9 1f fb ff ff       	jmp    e281 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x341>
    e762:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type == _Pres_X)
    e768:	48 8d 2d b3 6a 00 00 	lea    rbp,[rip+0x6ab3]        # 15222 <CSWTCH.1104+0x142>
    e76f:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    e774:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e779:	4d 89 ec             	mov    r12,r13
    e77c:	4d 89 d6             	mov    r14,r10
    e77f:	4d 89 cf             	mov    r15,r9
    e782:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e789:	00 00 00 00 
    e78d:	0f 1f 00             	nop    DWORD PTR [rax]
		  *__p = __builtin_toupper(*__p);
    e790:	41 0f be 3c 24       	movsx  edi,BYTE PTR [r12]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    e795:	49 83 c4 01          	add    r12,0x1
		  *__p = __builtin_toupper(*__p);
    e799:	e8 b2 4b ff ff       	call   3350 <toupper@plt>
    e79e:	41 88 44 24 ff       	mov    BYTE PTR [r12-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    e7a3:	49 39 dc             	cmp    r12,rbx
    e7a6:	75 e8                	jne    e790 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x850>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e7a8:	4d 89 f2             	mov    r10,r14
    e7ab:	4d 89 f9             	mov    r9,r15
    e7ae:	b8 02 00 00 00       	mov    eax,0x2
    e7b3:	e9 3e fc ff ff       	jmp    e3f6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b6>
    e7b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    e7bf:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    e7c0:	49 0f bd c5          	bsr    rax,r13
      constexpr char __digits[] = {
    e7c4:	66 0f 6f 05 e4 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9fe4]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    e7cb:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    e7cc:	83 c0 44             	add    eax,0x44
    e7cf:	c1 e8 02             	shr    eax,0x2
      constexpr char __digits[] = {
    e7d2:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    e7d9:	00 
      unsigned __pos = __len - 1;
    e7da:	8d 50 ff             	lea    edx,[rax-0x1]
      while (__val >= 0x100)
    e7dd:	e9 24 fa ff ff       	jmp    e206 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c6>
    e7e2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __builtin_clzll(__high) - __diff;
    e7e8:	49 0f bd d5          	bsr    rdx,r13
      return _Nd - std::__countl_zero(__x);
    e7ec:	bb 80 00 00 00       	mov    ebx,0x80
      unsigned __pos = __len - 1;
    e7f1:	b8 7f 00 00 00       	mov    eax,0x7f
	      return __builtin_clzll(__high) - __diff;
    e7f6:	48 83 f2 3f          	xor    rdx,0x3f
      return _Nd - std::__countl_zero(__x);
    e7fa:	29 d3                	sub    ebx,edx
    e7fc:	29 d0                	sub    eax,edx
      while (__pos)
    e7fe:	e9 bd f8 ff ff       	jmp    e0c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x180>
    e803:	bb 01 00 00 00       	mov    ebx,0x1
    e808:	e9 f0 f8 ff ff       	jmp    e0fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1bd>
    e80d:	0f 1f 00             	nop    DWORD PTR [rax]
	  auto const __num = __val * 2;
    e810:	4d 01 e4             	add    r12,r12
      __res.ptr = __first + __len;
    e813:	89 f3                	mov    ebx,esi
	  __first[1] = __digits[__num + 1];
    e815:	4b 8d 04 23          	lea    rax,[r11+r12*1]
	  __first[0] = __digits[__num];
    e819:	4d 01 dc             	add    r12,r11
	  __first[1] = __digits[__num + 1];
    e81c:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
	  __first[0] = __digits[__num];
    e820:	45 0f b6 24 24       	movzx  r12d,BYTE PTR [r12]
	  __first[1] = __digits[__num + 1];
    e825:	88 44 24 34          	mov    BYTE PTR [rsp+0x34],al
    e829:	e9 df fe ff ff       	jmp    e70d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7cd>
    e82e:	66 90                	xchg   ax,ax
      if (__value == 0)
    e830:	48 89 f0             	mov    rax,rsi
    e833:	48 09 d0             	or     rax,rdx
    e836:	0f 85 cd 00 00 00    	jne    e909 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9c9>
	  if (_M_spec._M_alt && __base_prefix.size())
    e83c:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  *__first = '0';
    e840:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    e845:	a8 10                	test   al,0x10
    e847:	0f 84 a8 fa ff ff    	je     e2f5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3b5>
    e84d:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e852:	b8 02 00 00 00       	mov    eax,0x2
    e857:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
	  if (_M_spec._M_alt && __base_prefix.size())
    e85c:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e863:	48 8d 2d bb 69 00 00 	lea    rbp,[rip+0x69bb]        # 15225 <CSWTCH.1104+0x145>
    e86a:	e9 78 f7 ff ff       	jmp    dfe7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa7>
    e86f:	90                   	nop
	__len = (__to_chars_len_2(__val) + 2) / 3;
    e870:	49 0f bd c5          	bsr    rax,r13
    e874:	8d 58 43             	lea    ebx,[rax+0x43]
    e877:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    e87c:	48 0f af d8          	imul   rbx,rax
    e880:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    e884:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0100)
    e887:	e9 be fa ff ff       	jmp    e34a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x40a>
    e88c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    e890:	89 ee                	mov    esi,ebp
    e892:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    e897:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    e89c:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    e8a1:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    e8a6:	83 c6 02             	add    esi,0x2
    e8a9:	e9 3b fc ff ff       	jmp    e4e9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a9>
    e8ae:	66 90                	xchg   ax,ax
	  if (__value < __b4) return __n + 3;
    e8b0:	89 ee                	mov    esi,ebp
    e8b2:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    e8b7:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    e8bc:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    e8c1:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    e8c6:	83 c6 03             	add    esi,0x3
    e8c9:	e9 1b fc ff ff       	jmp    e4e9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a9>
    e8ce:	66 90                	xchg   ax,ax
    e8d0:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    e8d5:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    e8da:	89 ee                	mov    esi,ebp
    e8dc:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    e8e1:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    e8e6:	e9 fe fb ff ff       	jmp    e4e9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a9>
    e8eb:	48 8d 2d 30 69 00 00 	lea    rbp,[rip+0x6930]        # 15222 <CSWTCH.1104+0x142>
    e8f2:	e9 d7 f8 ff ff       	jmp    e1ce <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x28e>
	  return __res;
    e8f7:	48 8d 9c 24 b3 00 00 	lea    rbx,[rsp+0xb3]
    e8fe:	00 
    e8ff:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e904:	e9 a7 f9 ff ff       	jmp    e2b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x370>
    e909:	48 8d 2d 15 69 00 00 	lea    rbp,[rip+0x6915]        # 15225 <CSWTCH.1104+0x145>
    e910:	e9 b9 f8 ff ff       	jmp    e1ce <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x28e>
	  if (__value < (unsigned)__base) return __n;
    e915:	bb 01 00 00 00       	mov    ebx,0x1
    e91a:	e9 ea fd ff ff       	jmp    e709 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7c9>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    e91f:	e8 2c 48 ff ff       	call   3150 <abort@plt>
    e924:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e92b:	00 00 00 
    e92e:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e935:	00 00 00 
    e938:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    e93f:	00 

000000000000e940 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    e940:	41 57                	push   r15
    e942:	49 89 f1             	mov    r9,rsi
    e945:	49 89 fa             	mov    r10,rdi
    e948:	49 89 cf             	mov    r15,rcx
    e94b:	41 56                	push   r14
    e94d:	41 55                	push   r13
    e94f:	41 54                	push   r12
    e951:	49 89 f4             	mov    r12,rsi
    e954:	55                   	push   rbp
    e955:	53                   	push   rbx
    e956:	48 81 ec 98 01 00 00 	sub    rsp,0x198
	  if (_M_spec._M_type == _Pres_c)
    e95d:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    e961:	89 c6                	mov    esi,eax
    e963:	83 e6 78             	and    esi,0x78
    e966:	40 80 fe 38          	cmp    sil,0x38
    e96a:	74 74                	je     e9e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa0>
	  switch (_M_spec._M_type)
    e96c:	c0 e8 03             	shr    al,0x3
    e96f:	49 89 d5             	mov    r13,rdx
    e972:	83 e0 0f             	and    eax,0xf
    e975:	3c 04                	cmp    al,0x4
    e977:	0f 84 9b 01 00 00    	je     eb18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d8>
    e97d:	0f 87 a5 02 00 00    	ja     ec28 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e8>
    e983:	3c 01                	cmp    al,0x1
    e985:	0f 87 b5 00 00 00    	ja     ea40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x100>
      if (__value == 0)
    e98b:	4c 89 c8             	mov    rax,r9
    e98e:	48 09 d0             	or     rax,rdx
    e991:	0f 85 f1 03 00 00    	jne    ed88 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x448>
	  *__first = '0';
    e997:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    e99c:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    e9a1:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    e9a6:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  char* __start = __buf + 3;
    e9aa:	48 89 ce             	mov    rsi,rcx
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e9ad:	c0 e8 02             	shr    al,0x2
    e9b0:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    e9b3:	83 f8 01             	cmp    eax,0x1
    e9b6:	0f 84 54 02 00 00    	je     ec10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d0>
      else if (__sign == _Sign_space)
    e9bc:	83 f8 03             	cmp    eax,0x3
    e9bf:	0f 84 9b 02 00 00    	je     ec60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x320>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    e9c5:	48 29 f3             	sub    rbx,rsi
    e9c8:	48 89 f2             	mov    rdx,rsi
			       __start_digits - __start, __fc);
    e9cb:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    e9ce:	4d 89 f8             	mov    r8,r15
    e9d1:	48 89 de             	mov    rsi,rbx
    e9d4:	4c 89 d7             	mov    rdi,r10
    e9d7:	e8 54 d0 ff ff       	call   ba30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    e9dc:	eb 49                	jmp    ea27 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe7>
    e9de:	66 90                	xchg   ax,ax
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    e9e0:	b8 7f 00 00 00       	mov    eax,0x7f
    e9e5:	4c 39 c8             	cmp    rax,r9
    e9e8:	b8 00 00 00 00       	mov    eax,0x0
    e9ed:	48 19 d0             	sbb    rax,rdx
    e9f0:	0f 82 b7 08 00 00    	jb     f2ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x96d>
    e9f6:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    e9fd:	00 
    e9fe:	b8 01 00 00 00       	mov    eax,0x1
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    ea03:	4d 89 d0             	mov    r8,r10
    ea06:	ba 01 00 00 00       	mov    edx,0x1
    ea0b:	44 88 8c 24 c0 00 00 	mov    BYTE PTR [rsp+0xc0],r9b
    ea12:	00 
    ea13:	48 89 ce             	mov    rsi,rcx
    ea16:	48 89 c7             	mov    rdi,rax
    ea19:	41 b9 01 00 00 00    	mov    r9d,0x1
    ea1f:	4c 89 f9             	mov    rcx,r15
    ea22:	e8 69 ae ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    ea27:	48 81 c4 98 01 00 00 	add    rsp,0x198
    ea2e:	5b                   	pop    rbx
    ea2f:	5d                   	pop    rbp
    ea30:	41 5c                	pop    r12
    ea32:	41 5d                	pop    r13
    ea34:	41 5e                	pop    r14
    ea36:	41 5f                	pop    r15
    ea38:	c3                   	ret
    ea39:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    ea40:	40 80 fe 10          	cmp    sil,0x10
    ea44:	48 8d 05 d4 67 00 00 	lea    rax,[rip+0x67d4]        # 1521f <CSWTCH.1104+0x13f>
    ea4b:	48 8d 2d ca 67 00 00 	lea    rbp,[rip+0x67ca]        # 1521c <CSWTCH.1104+0x13c>
    ea52:	48 0f 45 e8          	cmovne rbp,rax
      if (__value == 0)
    ea56:	4c 89 c8             	mov    rax,r9
    ea59:	48 09 d0             	or     rax,rdx
    ea5c:	0f 84 ee 02 00 00    	je     ed50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x410>
	  if (__high != 0)
    ea62:	48 85 d2             	test   rdx,rdx
    ea65:	0f 85 2d 07 00 00    	jne    f198 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x858>
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
    ea6b:	49 0f bd d1          	bsr    rdx,r9
      return _Nd - std::__countl_zero(__x);
    ea6f:	bb 80 00 00 00       	mov    ebx,0x80
      unsigned __pos = __len - 1;
    ea74:	b8 7f 00 00 00       	mov    eax,0x7f
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
    ea79:	48 83 f2 3f          	xor    rdx,0x3f
    ea7d:	83 c2 40             	add    edx,0x40
      return _Nd - std::__countl_zero(__x);
    ea80:	29 d3                	sub    ebx,edx
      while (__pos)
    ea82:	29 d0                	sub    eax,edx
    ea84:	0f 84 2b 07 00 00    	je     f1b5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x875>
    ea8a:	89 c1                	mov    ecx,eax
    ea8c:	83 e8 01             	sub    eax,0x1
    ea8f:	48 8d 74 0c 2f       	lea    rsi,[rsp+rcx*1+0x2f]
    ea94:	48 8d 54 0c 30       	lea    rdx,[rsp+rcx*1+0x30]
    ea99:	48 29 c6             	sub    rsi,rax
    ea9c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  __first[__pos--] = '0' + (__val & 1);
    eaa0:	44 89 e0             	mov    eax,r12d
      while (__pos)
    eaa3:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    eaa7:	4d 0f ac ec 01       	shrd   r12,r13,0x1
	  __first[__pos--] = '0' + (__val & 1);
    eaac:	83 e0 01             	and    eax,0x1
	  __val >>= 1;
    eaaf:	49 d1 ed             	shr    r13,1
	  __first[__pos--] = '0' + (__val & 1);
    eab2:	83 c0 30             	add    eax,0x30
    eab5:	88 42 04             	mov    BYTE PTR [rdx+0x4],al
      while (__pos)
    eab8:	48 39 d6             	cmp    rsi,rdx
    eabb:	75 e3                	jne    eaa0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x160>
      __res.ptr = __first + __len;
    eabd:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    eac2:	48 63 db             	movsxd rbx,ebx
    eac5:	b8 31 00 00 00       	mov    eax,0x31
    eaca:	48 01 cb             	add    rbx,rcx
      __first[0] = '1';
    eacd:	88 44 24 33          	mov    BYTE PTR [rsp+0x33],al
	  if (_M_spec._M_alt && __base_prefix.size())
    ead1:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
    ead5:	a8 10                	test   al,0x10
    ead7:	0f 84 68 02 00 00    	je     ed45 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x405>
    eadd:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    eae4:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    eae9:	48 01 ce             	add    rsi,rcx
	      __builtin_memcpy(__start, __base_prefix.data(),
    eaec:	89 d7                	mov    edi,edx
    eaee:	85 d2                	test   edx,edx
    eaf0:	0f 84 b7 fe ff ff    	je     e9ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
    eaf6:	31 d2                	xor    edx,edx
    eaf8:	41 89 d0             	mov    r8d,edx
    eafb:	83 c2 01             	add    edx,0x1
    eafe:	46 0f b6 4c 05 00    	movzx  r9d,BYTE PTR [rbp+r8*1+0x0]
    eb04:	46 88 0c 06          	mov    BYTE PTR [rsi+r8*1],r9b
    eb08:	39 fa                	cmp    edx,edi
    eb0a:	72 ec                	jb     eaf8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1b8>
    eb0c:	e9 9c fe ff ff       	jmp    e9ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
    eb11:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    eb18:	4c 89 c8             	mov    rax,r9
    eb1b:	48 09 d0             	or     rax,rdx
    eb1e:	0f 84 44 02 00 00    	je     ed68 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x428>
	  if (__high != 0)
    eb24:	48 85 d2             	test   rdx,rdx
    eb27:	0f 85 b3 06 00 00    	jne    f1e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8a0>
	__len = (__to_chars_len_2(__val) + 2) / 3;
    eb2d:	49 0f bd c1          	bsr    rax,r9
      while (__val >= 0100)
    eb31:	ba 3f 00 00 00       	mov    edx,0x3f
	__len = (__to_chars_len_2(__val) + 2) / 3;
    eb36:	8d 58 03             	lea    ebx,[rax+0x3]
    eb39:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    eb3e:	48 0f af d8          	imul   rbx,rax
    eb42:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    eb46:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0100)
    eb49:	4c 39 ca             	cmp    rdx,r9
    eb4c:	73 73                	jae    ebc1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x281>
    eb4e:	be 3f 00 00 00       	mov    esi,0x3f
    eb53:	31 d2                	xor    edx,edx
    eb55:	89 df                	mov    edi,ebx
    eb57:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    eb5e:	00 00 00 00 
    eb62:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    eb69:	00 00 00 00 
    eb6d:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    eb74:	00 00 00 00 
    eb78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    eb7f:	00 
	  auto __num = __val & 7;
    eb80:	4c 89 e1             	mov    rcx,r12
	  __first[__pos] = '0' + __num;
    eb83:	41 89 c0             	mov    r8d,eax
      while (__val >= 0100)
    eb86:	48 89 d3             	mov    rbx,rdx
	  auto __num = __val & 7;
    eb89:	83 e1 07             	and    ecx,0x7
	  __first[__pos] = '0' + __num;
    eb8c:	83 c1 30             	add    ecx,0x30
    eb8f:	42 88 4c 04 33       	mov    BYTE PTR [rsp+r8*1+0x33],cl
	  __val >>= 3;
    eb94:	4c 89 e1             	mov    rcx,r12
	  __val >>= 3;
    eb97:	4d 0f ac ec 06       	shrd   r12,r13,0x6
	  __first[__pos - 1] = '0' + __num;
    eb9c:	44 8d 40 ff          	lea    r8d,[rax-0x1]
	  __val >>= 3;
    eba0:	4c 0f ac e9 03       	shrd   rcx,r13,0x3
	  __pos -= 2;
    eba5:	83 e8 02             	sub    eax,0x2
	  __val >>= 3;
    eba8:	49 c1 ed 06          	shr    r13,0x6
	  __num = __val & 7;
    ebac:	83 e1 07             	and    ecx,0x7
	  __first[__pos - 1] = '0' + __num;
    ebaf:	83 c1 30             	add    ecx,0x30
      while (__val >= 0100)
    ebb2:	4c 39 e6             	cmp    rsi,r12
    ebb5:	4c 19 eb             	sbb    rbx,r13
	  __first[__pos - 1] = '0' + __num;
    ebb8:	42 88 4c 04 33       	mov    BYTE PTR [rsp+r8*1+0x33],cl
      while (__val >= 0100)
    ebbd:	72 c1                	jb     eb80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
    ebbf:	89 fb                	mov    ebx,edi
      if (__val >= 010)
    ebc1:	b8 07 00 00 00       	mov    eax,0x7
    ebc6:	4c 39 e0             	cmp    rax,r12
    ebc9:	b8 00 00 00 00       	mov    eax,0x0
    ebce:	4c 19 e8             	sbb    rax,r13
    ebd1:	0f 82 11 05 00 00    	jb     f0e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7a8>
	__first[0] = '0' + __val;
    ebd7:	41 83 c4 30          	add    r12d,0x30
    ebdb:	44 88 64 24 33       	mov    BYTE PTR [rsp+0x33],r12b
      __res.ptr = __first + __len;
    ebe0:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    ebe5:	89 db                	mov    ebx,ebx
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    ebe7:	48 8d 2d ea 65 00 00 	lea    rbp,[rip+0x65ea]        # 151d8 <CSWTCH.1104+0xf8>
    ebee:	48 01 cb             	add    rbx,rcx
    ebf1:	ba 01 00 00 00       	mov    edx,0x1
	  if (_M_spec._M_alt && __base_prefix.size())
    ebf6:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  char* __start = __buf + 3;
    ebfa:	48 89 ce             	mov    rsi,rcx
	  if (_M_spec._M_alt && __base_prefix.size())
    ebfd:	a8 10                	test   al,0x10
    ebff:	0f 84 a8 fd ff ff    	je     e9ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
	      __start -= __base_prefix.size();
    ec05:	48 89 d6             	mov    rsi,rdx
    ec08:	48 f7 de             	neg    rsi
    ec0b:	e9 d9 fe ff ff       	jmp    eae9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1a9>
    ec10:	b8 2b 00 00 00       	mov    eax,0x2b
	*__dest = '+';
    ec15:	88 46 ff             	mov    BYTE PTR [rsi-0x1],al
    ec18:	48 83 ee 01          	sub    rsi,0x1
    ec1c:	e9 a4 fd ff ff       	jmp    e9c5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x85>
    ec21:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    ec28:	40 80 fe 28          	cmp    sil,0x28
    ec2c:	0f 84 66 04 00 00    	je     f098 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x758>
      if (__value == 0)
    ec32:	4c 89 c8             	mov    rax,r9
    ec35:	48 09 d0             	or     rax,rdx
    ec38:	75 36                	jne    ec70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x330>
	  *__first = '0';
    ec3a:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
	      if (_M_spec._M_type == _Pres_X)
    ec3f:	40 80 fe 30          	cmp    sil,0x30
    ec43:	0f 84 cf 04 00 00    	je     f118 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7d8>
    ec49:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    ec4e:	48 8d 2d cd 65 00 00 	lea    rbp,[rip+0x65cd]        # 15222 <CSWTCH.1104+0x142>
    ec55:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    ec5a:	e9 da 00 00 00       	jmp    ed39 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f9>
    ec5f:	90                   	nop
    ec60:	b8 20 00 00 00       	mov    eax,0x20
    ec65:	eb ae                	jmp    ec15 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d5>
    ec67:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    ec6e:	00 00 
    ec70:	48 8d 2d ab 65 00 00 	lea    rbp,[rip+0x65ab]        # 15222 <CSWTCH.1104+0x142>
    ec77:	48 85 d2             	test   rdx,rdx
    ec7a:	0f 85 f0 04 00 00    	jne    f170 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x830>
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    ec80:	49 0f bd c4          	bsr    rax,r12
      constexpr char __digits[] = {
    ec84:	66 0f 6f 05 24 9b 00 	movdqa xmm0,XMMWORD PTR [rip+0x9b24]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    ec8b:	00 
      while (__val >= 0x100)
    ec8c:	b9 ff 00 00 00       	mov    ecx,0xff
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    ec91:	83 c0 04             	add    eax,0x4
    ec94:	c1 e8 02             	shr    eax,0x2
      constexpr char __digits[] = {
    ec97:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    ec9e:	00 
      unsigned __pos = __len - 1;
    ec9f:	8d 50 ff             	lea    edx,[rax-0x1]
      while (__val >= 0x100)
    eca2:	4c 39 c9             	cmp    rcx,r9
    eca5:	0f 83 d9 05 00 00    	jae    f284 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x944>
    ecab:	4c 8d 8c 24 c0 00 00 	lea    r9,[rsp+0xc0]
    ecb2:	00 
    ecb3:	41 b8 ff 00 00 00    	mov    r8d,0xff
    ecb9:	31 ff                	xor    edi,edi
    ecbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  auto __num = __val & 0xF;
    ecc0:	4c 89 e1             	mov    rcx,r12
	  __first[__pos] = __digits[__num];
    ecc3:	41 89 d3             	mov    r11d,edx
      while (__val >= 0x100)
    ecc6:	48 89 fb             	mov    rbx,rdi
	  auto __num = __val & 0xF;
    ecc9:	83 e1 0f             	and    ecx,0xf
	  __first[__pos] = __digits[__num];
    eccc:	4c 01 c9             	add    rcx,r9
    eccf:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
    ecd2:	42 88 4c 1c 33       	mov    BYTE PTR [rsp+r11*1+0x33],cl
	  __val >>= 4;
    ecd7:	4c 89 e1             	mov    rcx,r12
	  __val >>= 4;
    ecda:	4d 0f ac ec 08       	shrd   r12,r13,0x8
	  __first[__pos - 1] = __digits[__num];
    ecdf:	44 8d 5a ff          	lea    r11d,[rdx-0x1]
	  __val >>= 4;
    ece3:	4c 0f ac e9 04       	shrd   rcx,r13,0x4
	  __pos -= 2;
    ece8:	83 ea 02             	sub    edx,0x2
	  __val >>= 4;
    eceb:	49 c1 ed 08          	shr    r13,0x8
	  __num = __val & 0xF;
    ecef:	83 e1 0f             	and    ecx,0xf
	  __first[__pos - 1] = __digits[__num];
    ecf2:	4c 01 c9             	add    rcx,r9
      while (__val >= 0x100)
    ecf5:	4d 39 e0             	cmp    r8,r12
	  __first[__pos - 1] = __digits[__num];
    ecf8:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
      while (__val >= 0x100)
    ecfb:	4c 19 eb             	sbb    rbx,r13
	  __first[__pos - 1] = __digits[__num];
    ecfe:	42 88 4c 1c 33       	mov    BYTE PTR [rsp+r11*1+0x33],cl
      while (__val >= 0x100)
    ed03:	72 bb                	jb     ecc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
      if (__val >= 0x10)
    ed05:	ba 0f 00 00 00       	mov    edx,0xf
    ed0a:	4c 39 e2             	cmp    rdx,r12
    ed0d:	ba 00 00 00 00       	mov    edx,0x0
    ed12:	4c 19 ea             	sbb    rdx,r13
    ed15:	0f 82 a5 03 00 00    	jb     f0c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x780>
	__first[0] = __digits[__val];
    ed1b:	4d 01 e1             	add    r9,r12
    ed1e:	41 0f b6 11          	movzx  edx,BYTE PTR [r9]
      __res.ptr = __first + __len;
    ed22:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    ed27:	88 54 24 33          	mov    BYTE PTR [rsp+0x33],dl
    ed2b:	48 8d 1c 01          	lea    rbx,[rcx+rax*1]
    ed2f:	40 80 fe 30          	cmp    sil,0x30
    ed33:	0f 84 f0 03 00 00    	je     f129 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e9>
	  if (_M_spec._M_alt && __base_prefix.size())
    ed39:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
    ed3d:	a8 10                	test   al,0x10
    ed3f:	0f 85 98 fd ff ff    	jne    eadd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x19d>
	  char* __start = __buf + 3;
    ed45:	48 89 ce             	mov    rsi,rcx
    ed48:	e9 60 fc ff ff       	jmp    e9ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
    ed4d:	0f 1f 00             	nop    DWORD PTR [rax]
    ed50:	b8 30 00 00 00       	mov    eax,0x30
    ed55:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    ed5a:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    ed5f:	e9 69 fd ff ff       	jmp    eacd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x18d>
    ed64:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    ed68:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
	  *__first = '0';
    ed6d:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    ed72:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
    ed75:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    ed7a:	48 89 ce             	mov    rsi,rcx
    ed7d:	e9 2b fc ff ff       	jmp    e9ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
    ed82:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    ed88:	b8 09 00 00 00       	mov    eax,0x9
    ed8d:	4c 39 c8             	cmp    rax,r9
    ed90:	b8 00 00 00 00       	mov    eax,0x0
    ed95:	48 19 d0             	sbb    rax,rdx
    ed98:	0f 83 05 05 00 00    	jae    f2a3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x963>
    ed9e:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
	  if (__value < __b2) return __n + 1;
    eda3:	45 31 f6             	xor    r14d,r14d
    eda6:	49 89 d7             	mov    r15,rdx
    eda9:	49 89 d5             	mov    r13,rdx
      unsigned __n = 1;
    edac:	41 bb 01 00 00 00    	mov    r11d,0x1
    edb2:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
    edb7:	4c 89 cd             	mov    rbp,r9
    edba:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    edbf:	44 89 db             	mov    ebx,r11d
    edc2:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
    edc7:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
    edcc:	eb 5f                	jmp    ee2d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ed>
    edce:	66 90                	xchg   ax,ax
	  if (__value < __b3) return __n + 2;
    edd0:	b8 e7 03 00 00       	mov    eax,0x3e7
    edd5:	48 39 e8             	cmp    rax,rbp
    edd8:	4c 89 f0             	mov    rax,r14
    eddb:	4c 19 e8             	sbb    rax,r13
    edde:	0f 83 1c 04 00 00    	jae    f200 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8c0>
	  if (__value < __b4) return __n + 3;
    ede4:	b8 0f 27 00 00       	mov    eax,0x270f
    ede9:	48 39 e8             	cmp    rax,rbp
    edec:	4c 89 f0             	mov    rax,r14
    edef:	4c 19 e8             	sbb    rax,r13
    edf2:	0f 83 38 04 00 00    	jae    f230 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
	  __value /= __b4;
    edf8:	31 c9                	xor    ecx,ecx
    edfa:	48 89 ef             	mov    rdi,rbp
    edfd:	ba 10 27 00 00       	mov    edx,0x2710
    ee02:	4c 89 ee             	mov    rsi,r13
    ee05:	e8 b6 42 ff ff       	call   30c0 <__udivti3@plt>
	  if (__value < (unsigned)__base) return __n;
    ee0a:	bf 9f 86 01 00       	mov    edi,0x1869f
	  __n += 4;
    ee0f:	83 c3 04             	add    ebx,0x4
	  if (__value < (unsigned)__base) return __n;
    ee12:	48 39 ef             	cmp    rdi,rbp
    ee15:	4c 89 f7             	mov    rdi,r14
	  __value /= __b4;
    ee18:	48 89 c1             	mov    rcx,rax
    ee1b:	48 89 d0             	mov    rax,rdx
	  if (__value < (unsigned)__base) return __n;
    ee1e:	4c 19 ef             	sbb    rdi,r13
    ee21:	0f 83 39 04 00 00    	jae    f260 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x920>
    ee27:	48 89 cd             	mov    rbp,rcx
    ee2a:	49 89 c5             	mov    r13,rax
	  if (__value < __b2) return __n + 1;
    ee2d:	b8 63 00 00 00       	mov    eax,0x63
    ee32:	48 39 e8             	cmp    rax,rbp
    ee35:	4c 89 f0             	mov    rax,r14
    ee38:	4c 19 e8             	sbb    rax,r13
    ee3b:	72 93                	jb     edd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x490>
    ee3d:	41 89 db             	mov    r11d,ebx
    ee40:	4c 89 fa             	mov    rdx,r15
    ee43:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    ee48:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    ee4d:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    ee52:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    ee57:	41 83 c3 01          	add    r11d,0x1
    ee5b:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
      if (__builtin_expect((__last - __first) < __len, 0))
    ee60:	41 81 fb 80 00 00 00 	cmp    r11d,0x80
    ee67:	0f 87 24 04 00 00    	ja     f291 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x951>
      constexpr char __digits[201] =
    ee6d:	66 0f 6f 05 6b 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x986b]        # 186e0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    ee74:	00 
      while (__val >= 100)
    ee75:	b8 63 00 00 00       	mov    eax,0x63
      unsigned __pos = __len - 1;
    ee7a:	45 8d 43 ff          	lea    r8d,[r11-0x1]
      while (__val >= 100)
    ee7e:	4c 39 c8             	cmp    rax,r9
    ee81:	b8 00 00 00 00       	mov    eax,0x0
    ee86:	4c 8d 8c 24 c0 00 00 	lea    r9,[rsp+0xc0]
    ee8d:	00 
      constexpr char __digits[201] =
    ee8e:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    ee95:	00 
    ee96:	66 0f 6f 05 52 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x9852]        # 186f0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    ee9d:	00 
      while (__val >= 100)
    ee9e:	48 19 d0             	sbb    rax,rdx
      constexpr char __digits[201] =
    eea1:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    eea8:	00 
    eea9:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18700 <std::__unicode::__v15_1_0::__width_edges+0x340>
    eeb0:	00 
    eeb1:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    eeb8:	00 
    eeb9:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18710 <std::__unicode::__v15_1_0::__width_edges+0x350>
    eec0:	00 
    eec1:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    eec8:	00 
    eec9:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18720 <std::__unicode::__v15_1_0::__width_edges+0x360>
    eed0:	00 
    eed1:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    eed8:	00 
    eed9:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18730 <std::__unicode::__v15_1_0::__width_edges+0x370>
    eee0:	00 
    eee1:	0f 29 84 24 10 01 00 	movaps XMMWORD PTR [rsp+0x110],xmm0
    eee8:	00 
    eee9:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18740 <std::__unicode::__v15_1_0::__width_edges+0x380>
    eef0:	00 
    eef1:	0f 29 84 24 20 01 00 	movaps XMMWORD PTR [rsp+0x120],xmm0
    eef8:	00 
    eef9:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18750 <std::__unicode::__v15_1_0::__width_edges+0x390>
    ef00:	00 
    ef01:	0f 29 84 24 30 01 00 	movaps XMMWORD PTR [rsp+0x130],xmm0
    ef08:	00 
    ef09:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18760 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    ef10:	00 
    ef11:	0f 29 84 24 40 01 00 	movaps XMMWORD PTR [rsp+0x140],xmm0
    ef18:	00 
    ef19:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18770 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    ef20:	00 
    ef21:	0f 29 84 24 50 01 00 	movaps XMMWORD PTR [rsp+0x150],xmm0
    ef28:	00 
    ef29:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18780 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    ef30:	00 
    ef31:	0f 29 84 24 60 01 00 	movaps XMMWORD PTR [rsp+0x160],xmm0
    ef38:	00 
    ef39:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 18790 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    ef40:	00 
    ef41:	0f 29 84 24 70 01 00 	movaps XMMWORD PTR [rsp+0x170],xmm0
    ef48:	00 
    ef49:	66 0f 6f 05 4f 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x984f]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    ef50:	00 
    ef51:	0f 11 84 24 79 01 00 	movups XMMWORD PTR [rsp+0x179],xmm0
    ef58:	00 
      while (__val >= 100)
    ef59:	0f 83 61 02 00 00    	jae    f1c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x880>
    ef5f:	48 bd ff ff ff ff ff 	movabs rbp,0xfffffffffffffff
    ef66:	ff ff 0f 
    ef69:	44 89 5c 24 08       	mov    DWORD PTR [rsp+0x8],r11d
    ef6e:	49 be 29 5c 8f c2 f5 	movabs r14,0x8f5c28f5c28f5c29
    ef75:	28 5c 8f 
    ef78:	4c 89 54 24 10       	mov    QWORD PTR [rsp+0x10],r10
    ef7d:	0f 1f 00             	nop    DWORD PTR [rax]
    ef80:	4c 89 e0             	mov    rax,r12
    ef83:	4c 89 e1             	mov    rcx,r12
    ef86:	4c 89 e6             	mov    rsi,r12
    ef89:	31 db                	xor    ebx,ebx
    ef8b:	4c 0f ac e8 3c       	shrd   rax,r13,0x3c
    ef90:	48 21 e9             	and    rcx,rbp
    ef93:	4c 89 ef             	mov    rdi,r13
    ef96:	41 bb 19 00 00 00    	mov    r11d,0x19
    ef9c:	48 21 e8             	and    rax,rbp
    ef9f:	48 01 c1             	add    rcx,rax
    efa2:	4c 89 e8             	mov    rax,r13
    efa5:	48 c1 e8 38          	shr    rax,0x38
    efa9:	48 01 c1             	add    rcx,rax
    efac:	48 b8 15 ae 47 e1 7a 	movabs rax,0x47ae147ae147ae15
    efb3:	14 ae 47 
    efb6:	48 f7 e1             	mul    rcx
    efb9:	48 89 c8             	mov    rax,rcx
    efbc:	48 29 d0             	sub    rax,rdx
    efbf:	48 d1 e8             	shr    rax,1
    efc2:	48 01 c2             	add    rdx,rax
    efc5:	48 c1 ea 04          	shr    rdx,0x4
    efc9:	48 8d 04 92          	lea    rax,[rdx+rdx*4]
    efcd:	48 8d 04 80          	lea    rax,[rax+rax*4]
    efd1:	48 29 c1             	sub    rcx,rax
    efd4:	48 b8 c2 f5 28 5c 8f 	movabs rax,0x28f5c28f5c28f5c2
    efdb:	c2 f5 28 
    efde:	48 29 ce             	sub    rsi,rcx
    efe1:	48 19 df             	sbb    rdi,rbx
    efe4:	48 0f af c6          	imul   rax,rsi
    efe8:	49 89 fa             	mov    r10,rdi
    efeb:	4d 0f af d6          	imul   r10,r14
    efef:	49 01 c2             	add    r10,rax
    eff2:	48 89 f0             	mov    rax,rsi
    eff5:	49 f7 e6             	mul    r14
    eff8:	48 89 c6             	mov    rsi,rax
    effb:	83 e0 03             	and    eax,0x3
    effe:	49 01 d2             	add    r10,rdx
    f001:	49 f7 e3             	mul    r11
    f004:	4c 89 d7             	mov    rdi,r10
    f007:	4c 89 ea             	mov    rdx,r13
    f00a:	48 01 c8             	add    rax,rcx
    f00d:	4c 89 e1             	mov    rcx,r12
	  auto const __num = (__val % 100) * 2;
    f010:	48 01 c0             	add    rax,rax
	  __val /= 100;
    f013:	48 c1 ef 02          	shr    rdi,0x2
    f017:	49 89 fd             	mov    r13,rdi
	  __first[__pos] = __digits[__num + 1];
    f01a:	49 8d 3c 01          	lea    rdi,[r9+rax*1]
	  __val /= 100;
    f01e:	4c 0f ac d6 02       	shrd   rsi,r10,0x2
	  __first[__pos - 1] = __digits[__num];
    f023:	4a 8d 04 08          	lea    rax,[rax+r9*1]
	  __first[__pos] = __digits[__num + 1];
    f027:	0f b6 7f 01          	movzx  edi,BYTE PTR [rdi+0x1]
	  __first[__pos - 1] = __digits[__num];
    f02b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
	  __val /= 100;
    f02e:	49 89 f4             	mov    r12,rsi
	  __first[__pos] = __digits[__num + 1];
    f031:	44 89 c6             	mov    esi,r8d
    f034:	40 88 7c 34 33       	mov    BYTE PTR [rsp+rsi*1+0x33],dil
	  __first[__pos - 1] = __digits[__num];
    f039:	41 8d 70 ff          	lea    esi,[r8-0x1]
	  __pos -= 2;
    f03d:	41 83 e8 02          	sub    r8d,0x2
	  __first[__pos - 1] = __digits[__num];
    f041:	88 44 34 33          	mov    BYTE PTR [rsp+rsi*1+0x33],al
      while (__val >= 100)
    f045:	b8 0f 27 00 00       	mov    eax,0x270f
    f04a:	48 39 c8             	cmp    rax,rcx
    f04d:	b8 00 00 00 00       	mov    eax,0x0
    f052:	48 19 d0             	sbb    rax,rdx
    f055:	0f 82 25 ff ff ff    	jb     ef80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x640>
      if (__val >= 10)
    f05b:	b8 e7 03 00 00       	mov    eax,0x3e7
    f060:	44 8b 5c 24 08       	mov    r11d,DWORD PTR [rsp+0x8]
    f065:	4c 8b 54 24 10       	mov    r10,QWORD PTR [rsp+0x10]
    f06a:	48 39 c8             	cmp    rax,rcx
    f06d:	b8 00 00 00 00       	mov    eax,0x0
    f072:	48 19 d0             	sbb    rax,rdx
      __res.ptr = __first + __len;
    f075:	44 89 db             	mov    ebx,r11d
    f078:	0f 82 42 01 00 00    	jb     f1c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x880>
	__first[0] = '0' + __val;
    f07e:	41 83 c4 30          	add    r12d,0x30
    f082:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    f087:	44 88 64 24 33       	mov    BYTE PTR [rsp+0x33],r12b
    f08c:	48 01 cb             	add    rbx,rcx
      return __res;
    f08f:	e9 12 f9 ff ff       	jmp    e9a6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x66>
    f094:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (__value == 0)
    f098:	4c 89 c8             	mov    rax,r9
    f09b:	48 09 d0             	or     rax,rdx
    f09e:	75 68                	jne    f108 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7c8>
	  *__first = '0';
    f0a0:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    f0a5:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    f0aa:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    f0af:	48 8d 2d 6f 61 00 00 	lea    rbp,[rip+0x616f]        # 15225 <CSWTCH.1104+0x145>
    f0b6:	e9 7e fc ff ff       	jmp    ed39 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f9>
    f0bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  const auto __num = __val & 0xF;
    f0c0:	4c 89 e1             	mov    rcx,r12
    f0c3:	83 e1 0f             	and    ecx,0xf
	  __first[1] = __digits[__num];
    f0c6:	4c 01 c9             	add    rcx,r9
    f0c9:	0f b6 11             	movzx  edx,BYTE PTR [rcx]
    f0cc:	88 54 24 34          	mov    BYTE PTR [rsp+0x34],dl
	  __first[0] = __digits[__val];
    f0d0:	4c 89 e2             	mov    rdx,r12
    f0d3:	4c 0f ac ea 04       	shrd   rdx,r13,0x4
    f0d8:	42 0f b6 14 0a       	movzx  edx,BYTE PTR [rdx+r9*1]
    f0dd:	e9 40 fc ff ff       	jmp    ed22 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e2>
    f0e2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  auto const __num = __val & 7;
    f0e8:	4c 89 e0             	mov    rax,r12
	  __val >>= 3;
    f0eb:	4d 0f ac ec 03       	shrd   r12,r13,0x3
	  auto const __num = __val & 7;
    f0f0:	83 e0 07             	and    eax,0x7
	  __first[0] = '0' + __val;
    f0f3:	41 83 c4 30          	add    r12d,0x30
	  __first[1] = '0' + __num;
    f0f7:	83 c0 30             	add    eax,0x30
    f0fa:	88 44 24 34          	mov    BYTE PTR [rsp+0x34],al
    f0fe:	e9 d8 fa ff ff       	jmp    ebdb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x29b>
    f103:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    f108:	48 8d 2d 16 61 00 00 	lea    rbp,[rip+0x6116]        # 15225 <CSWTCH.1104+0x145>
    f10f:	e9 63 fb ff ff       	jmp    ec77 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x337>
    f114:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_M_spec._M_type == _Pres_X)
    f118:	48 8d 2d 03 61 00 00 	lea    rbp,[rip+0x6103]        # 15222 <CSWTCH.1104+0x142>
    f11f:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    f124:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    f129:	49 89 cd             	mov    r13,rcx
    f12c:	4d 89 d4             	mov    r12,r10
    f12f:	49 89 ce             	mov    r14,rcx
    f132:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    f139:	00 00 00 00 
    f13d:	0f 1f 00             	nop    DWORD PTR [rax]
		  *__p = __builtin_toupper(*__p);
    f140:	41 0f be 7d 00       	movsx  edi,BYTE PTR [r13+0x0]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    f145:	49 83 c5 01          	add    r13,0x1
		  *__p = __builtin_toupper(*__p);
    f149:	e8 02 42 ff ff       	call   3350 <toupper@plt>
    f14e:	41 88 45 ff          	mov    BYTE PTR [r13-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    f152:	49 39 dd             	cmp    r13,rbx
    f155:	75 e9                	jne    f140 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x800>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    f157:	4d 89 e2             	mov    r10,r12
    f15a:	4c 89 f1             	mov    rcx,r14
    f15d:	ba 02 00 00 00       	mov    edx,0x2
    f162:	e9 8f fa ff ff       	jmp    ebf6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2b6>
    f167:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    f16e:	00 00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    f170:	4c 0f bd da          	bsr    r11,rdx
      constexpr char __digits[] = {
    f174:	66 0f 6f 05 34 96 00 	movdqa xmm0,XMMWORD PTR [rip+0x9634]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    f17b:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    f17c:	41 8d 43 44          	lea    eax,[r11+0x44]
    f180:	c1 e8 02             	shr    eax,0x2
      constexpr char __digits[] = {
    f183:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    f18a:	00 
      unsigned __pos = __len - 1;
    f18b:	8d 50 ff             	lea    edx,[rax-0x1]
      while (__val >= 0x100)
    f18e:	e9 18 fb ff ff       	jmp    ecab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36b>
    f193:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      return __builtin_clzll(__high) - __diff;
    f198:	4c 0f bd da          	bsr    r11,rdx
      return _Nd - std::__countl_zero(__x);
    f19c:	bb 80 00 00 00       	mov    ebx,0x80
      unsigned __pos = __len - 1;
    f1a1:	b8 7f 00 00 00       	mov    eax,0x7f
	      return __builtin_clzll(__high) - __diff;
    f1a6:	49 83 f3 3f          	xor    r11,0x3f
      return _Nd - std::__countl_zero(__x);
    f1aa:	44 29 db             	sub    ebx,r11d
    f1ad:	44 29 d8             	sub    eax,r11d
      while (__pos)
    f1b0:	e9 d5 f8 ff ff       	jmp    ea8a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x14a>
    f1b5:	bb 01 00 00 00       	mov    ebx,0x1
    f1ba:	e9 fe f8 ff ff       	jmp    eabd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x17d>
    f1bf:	90                   	nop
	  auto const __num = __val * 2;
    f1c0:	4d 01 e4             	add    r12,r12
      __res.ptr = __first + __len;
    f1c3:	44 89 db             	mov    ebx,r11d
	  __first[1] = __digits[__num + 1];
    f1c6:	4b 8d 04 21          	lea    rax,[r9+r12*1]
	  __first[0] = __digits[__num];
    f1ca:	4d 01 cc             	add    r12,r9
	  __first[1] = __digits[__num + 1];
    f1cd:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
	  __first[0] = __digits[__num];
    f1d1:	45 0f b6 24 24       	movzx  r12d,BYTE PTR [r12]
	  __first[1] = __digits[__num + 1];
    f1d6:	88 44 24 34          	mov    BYTE PTR [rsp+0x34],al
    f1da:	e9 a3 fe ff ff       	jmp    f082 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x742>
    f1df:	90                   	nop
	__len = (__to_chars_len_2(__val) + 2) / 3;
    f1e0:	4c 0f bd da          	bsr    r11,rdx
    f1e4:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    f1e9:	41 8d 5b 43          	lea    ebx,[r11+0x43]
    f1ed:	48 0f af d8          	imul   rbx,rax
    f1f1:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    f1f5:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0100)
    f1f8:	e9 51 f9 ff ff       	jmp    eb4e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x20e>
    f1fd:	0f 1f 00             	nop    DWORD PTR [rax]
	  if (__value < __b3) return __n + 2;
    f200:	41 89 db             	mov    r11d,ebx
    f203:	4c 89 fa             	mov    rdx,r15
    f206:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    f20b:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    f210:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    f215:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    f21a:	41 83 c3 02          	add    r11d,0x2
    f21e:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    f223:	e9 38 fc ff ff       	jmp    ee60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
    f228:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    f22f:	00 
	  if (__value < __b4) return __n + 3;
    f230:	41 89 db             	mov    r11d,ebx
    f233:	4c 89 fa             	mov    rdx,r15
    f236:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    f23b:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    f240:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    f245:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    f24a:	41 83 c3 03          	add    r11d,0x3
    f24e:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    f253:	e9 08 fc ff ff       	jmp    ee60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
    f258:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    f25f:	00 
    f260:	4c 89 fa             	mov    rdx,r15
    f263:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    f268:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    f26d:	41 89 db             	mov    r11d,ebx
    f270:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    f275:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    f27a:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    f27f:	e9 dc fb ff ff       	jmp    ee60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
    f284:	4c 8d 8c 24 c0 00 00 	lea    r9,[rsp+0xc0]
    f28b:	00 
    f28c:	e9 74 fa ff ff       	jmp    ed05 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c5>
	  return __res;
    f291:	48 8d 9c 24 b3 00 00 	lea    rbx,[rsp+0xb3]
    f298:	00 
    f299:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    f29e:	e9 03 f7 ff ff       	jmp    e9a6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x66>
	  if (__value < (unsigned)__base) return __n;
    f2a3:	bb 01 00 00 00       	mov    ebx,0x1
    f2a8:	e9 d1 fd ff ff       	jmp    f07e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x73e>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    f2ad:	e8 9e 3e ff ff       	call   3150 <abort@plt>
    f2b2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    f2b9:	00 00 00 
    f2bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000000f2c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
    f2c0:	41 57                	push   r15
    f2c2:	41 56                	push   r14
    f2c4:	41 55                	push   r13
    f2c6:	41 54                	push   r12
    f2c8:	55                   	push   rbp
    f2c9:	48 89 fd             	mov    rbp,rdi
    f2cc:	53                   	push   rbx
    f2cd:	48 81 ec 68 01 00 00 	sub    rsp,0x168
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
    f2d4:	0f b6 5f 01          	movzx  ebx,BYTE PTR [rdi+0x1]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f2d8:	4c 8d 74 24 70       	lea    r14,[rsp+0x70]
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
    f2dd:	48 89 74 24 20       	mov    QWORD PTR [rsp+0x20],rsi
	  if (__use_prec)
    f2e2:	89 d8                	mov    eax,ebx
    f2e4:	4c 89 74 24 60       	mov    QWORD PTR [rsp+0x60],r14
      { _M_string_length = __length; }
    f2e9:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
    f2f0:	00 00 
	__c1 = __c2;
    f2f2:	c6 44 24 70 00       	mov    BYTE PTR [rsp+0x70],0x0
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
    f2f7:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
	  if (__use_prec)
    f2fb:	83 e0 06             	and    eax,0x6
    f2fe:	0f 85 e4 04 00 00    	jne    f7e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x528>
	  switch (_M_spec._M_type)
    f304:	89 d8                	mov    eax,ebx
    f306:	48 8d 15 a7 66 00 00 	lea    rdx,[rip+0x66a7]        # 159b4 <CSWTCH.1104+0x8d4>
    f30d:	c0 e8 03             	shr    al,0x3
    f310:	83 e0 0f             	and    eax,0xf
    f313:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    f317:	48 01 d0             	add    rax,rdx
    f31a:	ff e0                	jmp    rax
    f31c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      return __format::to_chars(__b, __e, __v);
    f320:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f325:	4c 8d bc 24 e1 00 00 	lea    r15,[rsp+0xe1]
    f32c:	00 
    f32d:	48 8d b4 24 60 01 00 	lea    rsi,[rsp+0x160]
    f334:	00 
    f335:	4c 89 ff             	mov    rdi,r15
    f338:	e8 f3 3f ff ff       	call   3330 <std::to_chars(char*, char*, _Float128)@plt>
    f33d:	48 89 c3             	mov    rbx,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    f340:	83 fa 4b             	cmp    edx,0x4b
    f343:	0f 84 15 0d 00 00    	je     1005e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd9e>
	  char* __end = __buf + sizeof(__buf);
    f349:	48 8d 84 24 60 01 00 	lea    rax,[rsp+0x160]
    f350:	00 
	  char __expc = 'e';
    f351:	c6 44 24 3f 65       	mov    BYTE PTR [rsp+0x3f],0x65
	  size_t __prec = 6;
    f356:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    f35d:	00 00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    f35f:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
	  char* __end = __buf + sizeof(__buf);
    f364:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
	  if (!__builtin_signbit(__v))
    f369:	0f 28 14 24          	movaps xmm2,XMMWORD PTR [rsp]
	      if (_M_spec._M_sign == _Sign_plus)
    f36d:	44 0f b6 6d 00       	movzx  r13d,BYTE PTR [rbp+0x0]
	  if (!__builtin_signbit(__v))
    f372:	0f 50 c2             	movmskps eax,xmm2
    f375:	a8 08                	test   al,0x8
    f377:	0f 85 73 03 00 00    	jne    f6f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x430>
	      if (_M_spec._M_sign == _Sign_plus)
    f37d:	44 89 e8             	mov    eax,r13d
    f380:	83 e0 0c             	and    eax,0xc
    f383:	3c 04                	cmp    al,0x4
    f385:	0f 84 fd 07 00 00    	je     fb88 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8c8>
		__have_sign = false;
    f38b:	c6 44 24 50 00       	mov    BYTE PTR [rsp+0x50],0x0
	      else if (_M_spec._M_sign == _Sign_space)
    f390:	3c 0c                	cmp    al,0xc
    f392:	0f 84 48 03 00 00    	je     f6e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x420>
	  string_view __narrow_str(__start, __res.ptr - __start);
    f398:	49 89 dc             	mov    r12,rbx
    f39b:	4d 29 fc             	sub    r12,r15
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
    f39e:	41 f6 c5 10          	test   r13b,0x10
    f3a2:	0f 84 48 02 00 00    	je     f5f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x330>
    f3a8:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f3ad:	66 0f 6f 0d 3b 94 00 	movdqa xmm1,XMMWORD PTR [rip+0x943b]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f3b4:	00 
    f3b5:	66 0f db 05 23 94 00 	pand   xmm0,XMMWORD PTR [rip+0x9423]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x420>
    f3bc:	00 
    f3bd:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
    f3c2:	e8 09 3f ff ff       	call   32d0 <__unordtf2@plt>
    f3c7:	48 85 c0             	test   rax,rax
    f3ca:	0f 85 20 02 00 00    	jne    f5f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x330>
    f3d0:	66 0f 6f 0d 18 94 00 	movdqa xmm1,XMMWORD PTR [rip+0x9418]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f3d7:	00 
    f3d8:	66 0f 6f 44 24 40    	movdqa xmm0,XMMWORD PTR [rsp+0x40]
    f3de:	e8 2d 3d ff ff       	call   3110 <__gttf2@plt>
    f3e3:	48 85 c0             	test   rax,rax
    f3e6:	0f 8f 04 02 00 00    	jg     f5f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x330>
      if (__pos < this->_M_len)
    f3ec:	4d 85 e4             	test   r12,r12
    f3ef:	0f 84 4b 04 00 00    	je     f840 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x580>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    f3f5:	4c 89 e2             	mov    rdx,r12
    f3f8:	be 2e 00 00 00       	mov    esi,0x2e
    f3fd:	4c 89 ff             	mov    rdi,r15
    f400:	e8 1b 3e ff ff       	call   3220 <memchr@plt>
	  if (__p)
    f405:	48 85 c0             	test   rax,rax
    f408:	0f 84 32 04 00 00    	je     f840 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x580>
	    __ret = __p - this->_M_str;
    f40e:	4c 29 f8             	sub    rax,r15
    f411:	49 89 c2             	mov    r10,rax
	      if (__d != __s.npos) // Found decimal point.
    f414:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
    f418:	0f 84 22 04 00 00    	je     f840 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x580>
		  __p = __s.find(__expc, __d + 1);
    f41e:	48 8d 48 01          	lea    rcx,[rax+0x1]
      if (__pos < this->_M_len)
    f422:	4c 39 e1             	cmp    rcx,r12
    f425:	0f 83 85 09 00 00    	jae    fdb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaf0>
    f42b:	0f be 74 24 3f       	movsx  esi,BYTE PTR [rsp+0x3f]
	  const size_type __n = this->_M_len - __pos;
    f430:	4c 89 e2             	mov    rdx,r12
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
    f433:	49 8d 3c 0f          	lea    rdi,[r15+rcx*1]
    f437:	48 89 4c 24 40       	mov    QWORD PTR [rsp+0x40],rcx
	  const size_type __n = this->_M_len - __pos;
    f43c:	48 29 ca             	sub    rdx,rcx
    f43f:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    f444:	e8 d7 3d ff ff       	call   3220 <memchr@plt>
	  if (__p)
    f449:	48 8b 4c 24 40       	mov    rcx,QWORD PTR [rsp+0x40]
    f44e:	4c 8b 54 24 58       	mov    r10,QWORD PTR [rsp+0x58]
    f453:	48 85 c0             	test   rax,rax
    f456:	49 89 c1             	mov    r9,rax
    f459:	0f 84 24 0d 00 00    	je     10183 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xec3>
	    __ret = __p - this->_M_str;
    f45f:	4d 29 f9             	sub    r9,r15
		    __p = __s.size();
    f462:	49 83 f9 ff          	cmp    r9,0xffffffffffffffff
    f466:	4d 0f 44 cc          	cmove  r9,r12
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    f46a:	45 31 c0             	xor    r8d,r8d
    f46d:	4d 39 d1             	cmp    r9,r10
    f470:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
    f474:	80 7c 24 28 00       	cmp    BYTE PTR [rsp+0x28],0x0
    f479:	0f 84 a1 09 00 00    	je     fe20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb60>
		      if (__s[__have_sign] != '0')
    f47f:	0f b6 54 24 50       	movzx  edx,BYTE PTR [rsp+0x50]
    f484:	41 80 3c 17 30       	cmp    BYTE PTR [r15+rdx*1],0x30
    f489:	0f 84 9e 03 00 00    	je     f82d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x56d>
			__sigfigs = __p - __have_sign - 1;
    f48f:	4c 89 c8             	mov    rax,r9
    f492:	48 29 d0             	sub    rax,rdx
    f495:	48 83 e8 01          	sub    rax,0x1
	      if (__trailing_zeros && __prec != 0)
    f499:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
    f49f:	0f 85 e3 03 00 00    	jne    f888 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5c8>
    f4a5:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    f4ac:	00 00 00 00 
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    f4b0:	4d 85 c0             	test   r8,r8
    f4b3:	0f 85 84 07 00 00    	jne    fc3d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x97d>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f4b9:	48 8d 9c 24 90 00 00 	lea    rbx,[rsp+0x90]
    f4c0:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
    f4c1:	41 83 e5 20          	and    r13d,0x20
      { _M_string_length = __length; }
    f4c5:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
    f4cc:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f4d1:	48 89 9c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbx
    f4d8:	00 
	__c1 = __c2;
    f4d9:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
    f4e0:	00 
    f4e1:	0f 84 73 01 00 00    	je     f65a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x39a>
      if (!_M_hasval)
    f4e7:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    f4ec:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    f4f0:	0f 84 fa 08 00 00    	je     fdf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb30>
      return _M_loc;
    f4f6:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
      std::locale locale() { return _M_loc.value(); }
    f4fb:	4c 8d ac 24 a0 00 00 	lea    r13,[rsp+0xa0]
    f502:	00 
      return _M_loc;
    f503:	48 8d 70 18          	lea    rsi,[rax+0x18]
      std::locale locale() { return _M_loc.value(); }
    f507:	4c 89 ef             	mov    rdi,r13
    f50a:	e8 81 3c ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
    f50f:	0f be 4c 24 3f       	movsx  ecx,BYTE PTR [rsp+0x3f]
    f514:	4c 89 e6             	mov    rsi,r12
    f517:	4c 89 fa             	mov    rdx,r15
    f51a:	4c 8d 8c 24 c0 00 00 	lea    r9,[rsp+0xc0]
    f521:	00 
    f522:	4d 89 e8             	mov    r8,r13
    f525:	4c 89 cf             	mov    rdi,r9
    f528:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
    f52d:	e8 2e 51 ff ff       	call   4660 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>
      { return _M_dataplus._M_p; }
    f532:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    f539:	00 
	if (_M_data() == _M_local_data())
    f53a:	4c 8b 4c 24 10       	mov    r9,QWORD PTR [rsp+0x10]
    f53f:	48 39 d8             	cmp    rax,rbx
      { return _M_dataplus._M_p; }
    f542:	48 89 c6             	mov    rsi,rax
	if (_M_data() == _M_local_data())
    f545:	0f 84 b4 0a 00 00    	je     ffff <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd3f>
	    if (_M_string_length > _S_local_capacity)
    f54b:	48 8b 94 24 c8 00 00 	mov    rdx,QWORD PTR [rsp+0xc8]
    f552:	00 
      { return _M_dataplus._M_p; }
    f553:	48 8b 8c 24 c0 00 00 	mov    rcx,QWORD PTR [rsp+0xc0]
    f55a:	00 
	if (_M_data() == _M_local_data())
    f55b:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
    f562:	00 
	    if (_M_string_length > _S_local_capacity)
    f563:	49 89 d0             	mov    r8,rdx
	if (_M_data() == _M_local_data())
    f566:	48 39 f9             	cmp    rcx,rdi
    f569:	0f 84 20 0b 00 00    	je     1008f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdcf>
    f56f:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
    f574:	48 89 8c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rcx
    f57b:	00 
		    __capacity = _M_allocated_capacity;
    f57c:	48 8b 94 24 90 00 00 	mov    rdx,QWORD PTR [rsp+0x90]
    f583:	00 
    f584:	0f 16 84 24 d0 00 00 	movhps xmm0,QWORD PTR [rsp+0xd0]
    f58b:	00 
      { _M_string_length = __length; }
    f58c:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
    f593:	00 
	    if (__data)
    f594:	48 85 c0             	test   rax,rax
    f597:	0f 84 90 0a 00 00    	je     1002d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd6d>
      { _M_dataplus._M_p = __p; }
    f59d:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
    f5a4:	00 
      { _M_allocated_capacity = __capacity; }
    f5a5:	48 89 94 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],rdx
    f5ac:	00 
      { _M_string_length = __length; }
    f5ad:	48 c7 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],0x0
    f5b4:	00 00 00 00 00 
      { _M_dispose(); }
    f5b9:	4c 89 cf             	mov    rdi,r9
    f5bc:	c6 06 00             	mov    BYTE PTR [rsi],0x0
    f5bf:	e8 2c 63 ff ff       	call   58f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
    f5c4:	4c 89 ef             	mov    rdi,r13
    f5c7:	e8 f4 3c ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_string_length; }
    f5cc:	48 8b 84 24 88 00 00 	mov    rax,QWORD PTR [rsp+0x88]
    f5d3:	00 
	      if (!__wstr.empty())
    f5d4:	48 85 c0             	test   rax,rax
    f5d7:	0f 84 7d 00 00 00    	je     f65a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x39a>
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    f5dd:	4c 89 fe             	mov    rsi,r15
		__str = __wstr;
    f5e0:	49 89 c4             	mov    r12,rax
    f5e3:	4c 8b bc 24 80 00 00 	mov    r15,QWORD PTR [rsp+0x80]
    f5ea:	00 
    f5eb:	eb 70                	jmp    f65d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x39d>
    f5ed:	0f 1f 00             	nop    DWORD PTR [rax]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f5f0:	48 8d 9c 24 90 00 00 	lea    rbx,[rsp+0x90]
    f5f7:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
    f5f8:	41 83 e5 20          	and    r13d,0x20
      { _M_string_length = __length; }
    f5fc:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
    f603:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f608:	48 89 9c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbx
    f60f:	00 
    f610:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
    f617:	00 
    f618:	74 40                	je     f65a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x39a>
    f61a:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f61f:	66 0f 6f 0d c9 91 00 	movdqa xmm1,XMMWORD PTR [rip+0x91c9]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f626:	00 
    f627:	66 0f db 05 b1 91 00 	pand   xmm0,XMMWORD PTR [rip+0x91b1]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x420>
    f62e:	00 
    f62f:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
    f634:	e8 97 3c ff ff       	call   32d0 <__unordtf2@plt>
    f639:	48 85 c0             	test   rax,rax
    f63c:	75 1c                	jne    f65a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x39a>
    f63e:	66 0f 6f 0d aa 91 00 	movdqa xmm1,XMMWORD PTR [rip+0x91aa]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f645:	00 
    f646:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
    f64c:	e8 bf 3a ff ff       	call   3110 <__gttf2@plt>
    f651:	48 85 c0             	test   rax,rax
    f654:	0f 8e 8d fe ff ff    	jle    f4e7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x227>
      { _M_dataplus._M_p = __p; }
    f65a:	4c 89 fe             	mov    rsi,r15
	  if (_M_width_kind == _WP_value)
    f65d:	0f b7 45 00          	movzx  eax,WORD PTR [rbp+0x0]
    f661:	66 25 80 01          	and    ax,0x180
    f665:	66 3d 80 00          	cmp    ax,0x80
    f669:	0f 84 91 00 00 00    	je     f700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x440>
	  else if (_M_width_kind == _WP_from_arg)
    f66f:	66 3d 00 01          	cmp    ax,0x100
    f673:	0f 84 27 05 00 00    	je     fba0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
    f679:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    f67e:	4c 8b 68 10          	mov    r13,QWORD PTR [rax+0x10]
	    return __format::__write(__fc.out(), __str);
    f682:	4c 89 fa             	mov    rdx,r15
    f685:	4c 89 e6             	mov    rsi,r12
    f688:	4c 89 ef             	mov    rdi,r13
    f68b:	e8 50 92 ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    f690:	48 89 c5             	mov    rbp,rax
      { return _M_dataplus._M_p; }
    f693:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
    f69a:	00 
	if (_M_data() == _M_local_data())
    f69b:	48 39 df             	cmp    rdi,rbx
    f69e:	74 11                	je     f6b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    f6a0:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    f6a7:	00 
    f6a8:	48 8d 70 01          	lea    rsi,[rax+0x1]
    f6ac:	e8 4f 3b ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { return _M_dataplus._M_p; }
    f6b1:	48 8b 7c 24 60       	mov    rdi,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
    f6b6:	4c 39 f7             	cmp    rdi,r14
    f6b9:	74 0e                	je     f6c9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x409>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    f6bb:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
    f6c0:	48 8d 70 01          	lea    rsi,[rax+0x1]
    f6c4:	e8 37 3b ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    f6c9:	48 81 c4 68 01 00 00 	add    rsp,0x168
    f6d0:	48 89 e8             	mov    rax,rbp
    f6d3:	5b                   	pop    rbx
    f6d4:	5d                   	pop    rbp
    f6d5:	41 5c                	pop    r12
    f6d7:	41 5d                	pop    r13
    f6d9:	41 5e                	pop    r14
    f6db:	41 5f                	pop    r15
    f6dd:	c3                   	ret
    f6de:	66 90                	xchg   ax,ax
		*--__start = ' ';
    f6e0:	41 c6 47 ff 20       	mov    BYTE PTR [r15-0x1],0x20
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
    f6e5:	44 0f b6 6d 00       	movzx  r13d,BYTE PTR [rbp+0x0]
		*--__start = ' ';
    f6ea:	49 83 ef 01          	sub    r15,0x1
    f6ee:	66 90                	xchg   ax,ax
	  bool __have_sign = true;
    f6f0:	c6 44 24 50 01       	mov    BYTE PTR [rsp+0x50],0x1
    f6f5:	e9 9e fc ff ff       	jmp    f398 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd8>
    f6fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __width = _M_width;
    f700:	0f b7 55 04          	movzx  edx,WORD PTR [rbp+0x4]
      iterator out() { return std::move(_M_out); }
    f704:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    f709:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    f70e:	4c 8b 68 10          	mov    r13,QWORD PTR [rax+0x10]
	  if (__width <= __str.size())
    f712:	49 39 d4             	cmp    r12,rdx
    f715:	0f 83 67 ff ff ff    	jae    f682 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c2>
	  _Align __align = _M_spec._M_align;
    f71b:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  size_t __nfill = __width - __str.size();
    f71f:	4c 29 e2             	sub    rdx,r12
	  char32_t __fill_char = _M_spec._M_fill;
    f722:	44 8b 4d 08          	mov    r9d,DWORD PTR [rbp+0x8]
	  size_t __nfill = __width - __str.size();
    f726:	48 89 d5             	mov    rbp,rdx
	  if (__align == _Align_default)
    f729:	89 c1                	mov    ecx,eax
    f72b:	83 e1 03             	and    ecx,0x3
    f72e:	0f 85 97 00 00 00    	jne    f7cb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50b>
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
    f734:	a8 40                	test   al,0x40
    f736:	0f 84 84 00 00 00    	je     f7c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x500>
    f73c:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f741:	66 0f 6f 0d a7 90 00 	movdqa xmm1,XMMWORD PTR [rip+0x90a7]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f748:	00 
    f749:	66 0f db 05 8f 90 00 	pand   xmm0,XMMWORD PTR [rip+0x908f]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x420>
    f750:	00 
    f751:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
    f755:	e8 76 3b ff ff       	call   32d0 <__unordtf2@plt>
    f75a:	48 85 c0             	test   rax,rax
    f75d:	75 61                	jne    f7c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x500>
    f75f:	66 0f 6f 0d 89 90 00 	movdqa xmm1,XMMWORD PTR [rip+0x9089]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f766:	00 
    f767:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f76c:	e8 9f 39 ff ff       	call   3110 <__gttf2@plt>
    f771:	48 85 c0             	test   rax,rax
    f774:	7f 4a                	jg     f7c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x500>
	return __from_chars_alnum_to_val_table<_DecOnly>::value.__data[__c];
    f776:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
		  if (!__format::__is_xdigit(__narrow_str[0]))
    f77b:	48 8d 15 fe 67 00 00 	lea    rdx,[rip+0x67fe]        # 15f80 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
	      __align = _Align_right;
    f782:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
    f787:	41 b9 30 00 00 00    	mov    r9d,0x30
    f78d:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
		  if (!__format::__is_xdigit(__narrow_str[0]))
    f790:	80 3c 02 0f          	cmp    BYTE PTR [rdx+rax*1],0xf
    f794:	76 35                	jbe    f7cb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50b>
	_M_sink->_M_write(__c);
    f796:	41 0f be 37          	movsx  esi,BYTE PTR [r15]
    f79a:	4c 89 ef             	mov    rdi,r13
    f79d:	89 4c 24 10          	mov    DWORD PTR [rsp+0x10],ecx
	this->_M_str += __n;
    f7a1:	49 83 c7 01          	add    r15,0x1
    f7a5:	44 89 0c 24          	mov    DWORD PTR [rsp],r9d
	this->_M_len -= __n;
    f7a9:	49 83 ec 01          	sub    r12,0x1
    f7ad:	e8 5e 92 ff ff       	call   8a10 <std::__format::_Sink<char>::_M_write(char)>
      }
    f7b2:	44 8b 0c 24          	mov    r9d,DWORD PTR [rsp]
    f7b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
    f7ba:	eb 0f                	jmp    f7cb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50b>
    f7bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      __align = _Align_right;
    f7c0:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
    f7c5:	41 b9 20 00 00 00    	mov    r9d,0x20
	  return __format::__write_padded(std::move(__out), __str,
    f7cb:	49 89 e8             	mov    r8,rbp
    f7ce:	4c 89 fa             	mov    rdx,r15
    f7d1:	4c 89 e6             	mov    rsi,r12
    f7d4:	4c 89 ef             	mov    rdi,r13
    f7d7:	e8 64 92 ff ff       	call   8a40 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
    f7dc:	48 89 c5             	mov    rbp,rax
					  __align, __nfill, __fill_char);
    f7df:	e9 af fe ff ff       	jmp    f693 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d3>
    f7e4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (_M_prec_kind == _WP_value)
    f7e8:	3c 02                	cmp    al,0x2
    f7ea:	0f 84 60 05 00 00    	je     fd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa90>
	  size_t __prec = -1;
    f7f0:	48 c7 44 24 10 ff ff 	mov    QWORD PTR [rsp+0x10],0xffffffffffffffff
    f7f7:	ff ff 
	  else if (_M_prec_kind == _WP_from_arg)
    f7f9:	3c 04                	cmp    al,0x4
    f7fb:	0f 84 4f 03 00 00    	je     fb50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x890>
	  switch (_M_spec._M_type)
    f801:	89 d8                	mov    eax,ebx
    f803:	48 8d 15 ce 61 00 00 	lea    rdx,[rip+0x61ce]        # 159d8 <CSWTCH.1104+0x8f8>
    f80a:	c0 e8 03             	shr    al,0x3
    f80d:	83 e0 0f             	and    eax,0xf
    f810:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    f814:	48 01 d0             	add    rax,rdx
    f817:	ff e0                	jmp    rax
    f819:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->_M_len; ++__pos)
    f820:	48 83 c1 01          	add    rcx,0x1
    f824:	4c 39 e1             	cmp    rcx,r12
    f827:	0f 83 ab 05 00 00    	jae    fdd8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb18>
	if (!traits_type::eq(this->_M_str[__pos], __c))
    f82d:	41 80 3c 0f 30       	cmp    BYTE PTR [r15+rcx*1],0x30
    f832:	74 ec                	je     f820 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x560>
    f834:	e9 a6 05 00 00       	jmp    fddf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb1f>
    f839:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  __p = __s.find(__expc); // Find the exponent, if present.
    f840:	0f be 54 24 3f       	movsx  edx,BYTE PTR [rsp+0x3f]
    f845:	31 c9                	xor    ecx,ecx
    f847:	4c 89 fe             	mov    rsi,r15
    f84a:	4c 89 e7             	mov    rdi,r12
    f84d:	e8 0e 43 ff ff       	call   3b60 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>
		    __p = __s.size();
    f852:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
		  __p = __s.find(__expc); // Find the exponent, if present.
    f856:	49 89 c2             	mov    r10,rax
		    __p = __s.size();
    f859:	4d 0f 44 d4          	cmove  r10,r12
	      if (__trailing_zeros && __prec != 0)
    f85d:	80 7c 24 28 00       	cmp    BYTE PTR [rsp+0x28],0x0
    f862:	0f 84 c3 03 00 00    	je     fc2b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x96b>
    f868:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
    f86e:	0f 84 f2 08 00 00    	je     10166 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xea6>
		  __sigfigs = __d - __have_sign;
    f874:	0f b6 54 24 50       	movzx  edx,BYTE PTR [rsp+0x50]
    f879:	4c 89 d0             	mov    rax,r10
    f87c:	4d 89 d1             	mov    r9,r10
    f87f:	41 b8 01 00 00 00    	mov    r8d,0x1
    f885:	48 29 d0             	sub    rax,rdx
		  __z = __prec - __sigfigs;
    f888:	48 29 44 24 10       	sub    QWORD PTR [rsp+0x10],rax
    f88d:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    f892:	49 01 c8             	add    r8,rcx
    f895:	e9 16 fc ff ff       	jmp    f4b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f0>
    f89a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
    f8a0:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
    f8a3:	ba 65 00 00 00       	mov    edx,0x65
    f8a8:	b8 70 00 00 00       	mov    eax,0x70
    f8ad:	80 fb 10             	cmp    bl,0x10
    f8b0:	0f 44 c2             	cmove  eax,edx
    f8b3:	45 31 ed             	xor    r13d,r13d
    f8b6:	88 44 24 3f          	mov    BYTE PTR [rsp+0x3f],al
	      return __format::to_chars(__b, __e, __v, __fmt);
    f8ba:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f8bf:	4c 8d bc 24 e1 00 00 	lea    r15,[rsp+0xe1]
    f8c6:	00 
    f8c7:	ba 04 00 00 00       	mov    edx,0x4
    f8cc:	48 8d b4 24 60 01 00 	lea    rsi,[rsp+0x160]
    f8d3:	00 
    f8d4:	4c 89 ff             	mov    rdi,r15
    f8d7:	e8 c4 38 ff ff       	call   31a0 <std::to_chars(char*, char*, _Float128, std::chars_format)@plt>
    f8dc:	48 89 c3             	mov    rbx,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    f8df:	83 fa 4b             	cmp    edx,0x4b
    f8e2:	0f 84 a0 04 00 00    	je     fd88 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xac8>
    f8e8:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
    f8ed:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    f8f4:	00 00 
	  char* __end = __buf + sizeof(__buf);
    f8f6:	48 8d 84 24 60 01 00 	lea    rax,[rsp+0x160]
    f8fd:	00 
    f8fe:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
	  if (__upper)
    f903:	45 84 ed             	test   r13b,r13b
    f906:	0f 84 5d fa ff ff    	je     f369 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa9>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
    f90c:	49 39 df             	cmp    r15,rbx
    f90f:	0f 84 54 fa ff ff    	je     f369 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa9>
    f915:	4d 89 fc             	mov    r12,r15
    f918:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    f91f:	00 
		*__p = std::toupper(*__p);
    f920:	41 0f be 3c 24       	movsx  edi,BYTE PTR [r12]
	      for (char* __p = __start; __p != __res.ptr; ++__p)
    f925:	49 83 c4 01          	add    r12,0x1
		*__p = std::toupper(*__p);
    f929:	e8 22 3a ff ff       	call   3350 <toupper@plt>
    f92e:	41 88 44 24 ff       	mov    BYTE PTR [r12-0x1],al
	      for (char* __p = __start; __p != __res.ptr; ++__p)
    f933:	49 39 dc             	cmp    r12,rbx
    f936:	75 e8                	jne    f920 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x660>
    f938:	e9 2c fa ff ff       	jmp    f369 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa9>
    f93d:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (_M_spec._M_type != _Pres_A)
    f940:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
    f943:	ba 50 00 00 00       	mov    edx,0x50
    f948:	b8 70 00 00 00       	mov    eax,0x70
    f94d:	41 bd 01 00 00 00    	mov    r13d,0x1
    f953:	80 fb 10             	cmp    bl,0x10
    f956:	0f 44 c2             	cmove  eax,edx
    f959:	88 44 24 3f          	mov    BYTE PTR [rsp+0x3f],al
    f95d:	e9 58 ff ff ff       	jmp    f8ba <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5fa>
    f962:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
    f968:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    f96f:	00 00 
    f971:	b9 06 00 00 00       	mov    ecx,0x6
    f976:	45 31 ed             	xor    r13d,r13d
	  char __expc = 'e';
    f979:	c6 44 24 3f 65       	mov    BYTE PTR [rsp+0x3f],0x65
	      __fmt = chars_format::fixed;
    f97e:	41 bc 02 00 00 00    	mov    r12d,0x2
	  bool __trailing_zeros = false;
    f984:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    f989:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f98e:	4c 8d bc 24 e1 00 00 	lea    r15,[rsp+0xe1]
    f995:	00 
    f996:	44 89 e2             	mov    edx,r12d
    f999:	48 8d b4 24 60 01 00 	lea    rsi,[rsp+0x160]
    f9a0:	00 
    f9a1:	4c 89 ff             	mov    rdi,r15
    f9a4:	e8 17 38 ff ff       	call   31c0 <std::to_chars(char*, char*, _Float128, std::chars_format, int)@plt>
    f9a9:	48 89 c3             	mov    rbx,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    f9ac:	83 fa 4b             	cmp    edx,0x4b
    f9af:	0f 85 41 ff ff ff    	jne    f8f6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x636>
    f9b5:	41 bf 01 00 00 00    	mov    r15d,0x1
	      if (__fmt == chars_format::fixed) // +ddd.prec
    f9bb:	41 83 fc 02          	cmp    r12d,0x2
    f9bf:	0f 85 da 03 00 00    	jne    fd9f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xadf>
		    __guess += numeric_limits<_Fp>::max_exponent10;
    f9c5:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    f9ca:	41 bf 01 00 00 00    	mov    r15d,0x1
    f9d0:	48 8d b0 4c 13 00 00 	lea    rsi,[rax+0x134c]
		__guess = sizeof(__buf) * 2;
    f9d7:	48 81 fe 80 00 00 00 	cmp    rsi,0x80
    f9de:	b8 00 01 00 00       	mov    eax,0x100
    f9e3:	48 0f 46 f0          	cmovbe rsi,rax
	      __dynbuf.reserve(__guess);
    f9e7:	48 8d 7c 24 60       	lea    rdi,[rsp+0x60]
    f9ec:	48 89 7c 24 30       	mov    QWORD PTR [rsp+0x30],rdi
    f9f1:	e8 2a 5f ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
    f9f6:	48 89 6c 24 50       	mov    QWORD PTR [rsp+0x50],rbp
    f9fb:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
    fa00:	4c 39 f2             	cmp    rdx,r14
    fa03:	0f 84 6b 07 00 00    	je     10174 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeb4>
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
    fa09:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
    fa0e:	48 8d 34 00          	lea    rsi,[rax+rax*1]
		    __res = __to_chars(__p + 1, __p + __n - 1);
    fa12:	48 8d 5e ff          	lea    rbx,[rsi-0x1]
      reserve(__n);
    fa16:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    fa1b:	e8 00 5f ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
    fa20:	48 8b 6c 24 60       	mov    rbp,QWORD PTR [rsp+0x60]
    fa25:	48 8d 74 1d 00       	lea    rsi,[rbp+rbx*1+0x0]
    fa2a:	48 8d 7d 01          	lea    rdi,[rbp+0x1]
	    if (__use_prec)
    fa2e:	45 84 ff             	test   r15b,r15b
    fa31:	0f 85 0b 06 00 00    	jne    10042 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd82>
	    else if (__fmt != chars_format{})
    fa37:	45 85 e4             	test   r12d,r12d
    fa3a:	0f 85 6f 04 00 00    	jne    feaf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbef>
	      return __format::to_chars(__b, __e, __v);
    fa40:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    fa45:	e8 e6 38 ff ff       	call   3330 <std::to_chars(char*, char*, _Float128)@plt>
    fa4a:	48 89 c3             	mov    rbx,rax
    fa4d:	48 89 d0             	mov    rax,rdx
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
    fa50:	85 c0                	test   eax,eax
    fa52:	0f 85 70 05 00 00    	jne    ffc8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd08>
    fa58:	49 89 e8             	mov    r8,rbp
    fa5b:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
    fa60:	48 89 d8             	mov    rax,rbx
    fa63:	48 8b 6c 24 50       	mov    rbp,QWORD PTR [rsp+0x50]
    fa68:	4c 29 c0             	sub    rax,r8
      { _M_string_length = __length; }
    fa6b:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
    fa70:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
    fa74:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
		  __start = __dynbuf.data() + 1; // reserve space for sign
    fa79:	4c 8d 78 01          	lea    r15,[rax+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
    fa7d:	48 03 44 24 68       	add    rax,QWORD PTR [rsp+0x68]
    fa82:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
    fa87:	e9 77 fe ff ff       	jmp    f903 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x643>
    fa8c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
    fa90:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fa97:	00 00 
    fa99:	b9 06 00 00 00       	mov    ecx,0x6
	      __upper = true;
    fa9e:	41 bd 01 00 00 00    	mov    r13d,0x1
    faa4:	e9 d0 fe ff ff       	jmp    f979 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6b9>
    faa9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
    fab0:	c6 44 24 3f 65       	mov    BYTE PTR [rsp+0x3f],0x65
    fab5:	b9 06 00 00 00       	mov    ecx,0x6
    faba:	45 31 ed             	xor    r13d,r13d
    fabd:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fac4:	00 00 
	      __trailing_zeros = true;
    fac6:	c6 44 24 28 01       	mov    BYTE PTR [rsp+0x28],0x1
	      __fmt = chars_format::general;
    facb:	41 bc 03 00 00 00    	mov    r12d,0x3
	      break;
    fad1:	e9 b3 fe ff ff       	jmp    f989 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6c9>
    fad6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    fadd:	00 00 00 
	  switch (_M_spec._M_type)
    fae0:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fae7:	00 00 
    fae9:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
    faee:	c6 44 24 3f 45       	mov    BYTE PTR [rsp+0x3f],0x45
	      __upper = true;
    faf3:	41 bd 01 00 00 00    	mov    r13d,0x1
    faf9:	eb cb                	jmp    fac6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x806>
    fafb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
    fb00:	c6 44 24 3f 65       	mov    BYTE PTR [rsp+0x3f],0x65
    fb05:	b9 06 00 00 00       	mov    ecx,0x6
    fb0a:	45 31 ed             	xor    r13d,r13d
    fb0d:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fb14:	00 00 
	  bool __trailing_zeros = false;
    fb16:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
	      __fmt = chars_format::scientific;
    fb1b:	41 bc 01 00 00 00    	mov    r12d,0x1
	      break;
    fb21:	e9 63 fe ff ff       	jmp    f989 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6c9>
    fb26:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    fb2d:	00 00 00 
	  switch (_M_spec._M_type)
    fb30:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fb37:	00 00 
    fb39:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
    fb3e:	c6 44 24 3f 45       	mov    BYTE PTR [rsp+0x3f],0x45
	      __upper = true;
    fb43:	41 bd 01 00 00 00    	mov    r13d,0x1
    fb49:	eb cb                	jmp    fb16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x856>
    fb4b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    fb50:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
    fb54:	48 8b 74 24 20       	mov    rsi,QWORD PTR [rsp+0x20]
    fb59:	e8 52 40 ff ff       	call   3bb0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
    fb5e:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    fb63:	e9 99 fc ff ff       	jmp    f801 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x541>
	  char __expc = 'e';
    fb68:	c6 44 24 3f 65       	mov    BYTE PTR [rsp+0x3f],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    fb6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
		__fmt = chars_format::general;
    fb71:	41 bc 03 00 00 00    	mov    r12d,0x3
	  bool __upper = false;
    fb77:	45 31 ed             	xor    r13d,r13d
	  bool __trailing_zeros = false;
    fb7a:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
    fb7f:	e9 05 fe ff ff       	jmp    f989 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6c9>
    fb84:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		*--__start = '+';
    fb88:	41 c6 47 ff 2b       	mov    BYTE PTR [r15-0x1],0x2b
    fb8d:	49 83 ef 01          	sub    r15,0x1
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
    fb91:	44 0f b6 6d 00       	movzx  r13d,BYTE PTR [rbp+0x0]
	  bool __have_sign = true;
    fb96:	c6 44 24 50 01       	mov    BYTE PTR [rsp+0x50],0x1
    fb9b:	e9 f8 f7 ff ff       	jmp    f398 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd8>
	if (__i < _M_packed_size)
    fba0:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    fba5:	0f b7 55 04          	movzx  edx,WORD PTR [rbp+0x4]
	if (__i < _M_packed_size)
    fba9:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
    fbac:	89 c1                	mov    ecx,eax
    fbae:	83 e0 0f             	and    eax,0xf
    fbb1:	83 e1 0f             	and    ecx,0xf
    fbb4:	48 39 c2             	cmp    rdx,rax
    fbb7:	0f 83 a3 01 00 00    	jae    fd60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa0>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    fbbd:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    fbc0:	48 8d 0c 92          	lea    rcx,[rdx+rdx*4]
	    __arg._M_val = _M_values[__i];
    fbc4:	48 c1 e2 04          	shl    rdx,0x4
    fbc8:	48 03 57 08          	add    rdx,QWORD PTR [rdi+0x8]
    fbcc:	66 0f 6f 02          	movdqa xmm0,XMMWORD PTR [rdx]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    fbd0:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    fbd5:	48 c1 e8 04          	shr    rax,0x4
    fbd9:	48 d3 e8             	shr    rax,cl
	    __arg._M_val = _M_values[__i];
    fbdc:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    fbe3:	00 
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    fbe4:	83 e0 1f             	and    eax,0x1f
    __int_from_arg(const basic_format_arg<_Context>& __arg)
    fbe7:	66 0f 6f 84 24 a0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xa0]
    fbee:	00 00 
    fbf0:	88 84 24 b0 00 00 00 	mov    BYTE PTR [rsp+0xb0],al
    fbf7:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    fbfe:	00 
    fbff:	66 0f 6f 84 24 b0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xb0]
    fc06:	00 00 
    fc08:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    fc0f:	00 
	  switch (__type)
    fc10:	3c 14                	cmp    al,0x14
    fc12:	0f 87 c6 06 00 00    	ja     102de <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x101e>
    fc18:	48 8d 15 dd 5d 00 00 	lea    rdx,[rip+0x5ddd]        # 159fc <CSWTCH.1104+0x91c>
    fc1f:	0f b6 c0             	movzx  eax,al
    fc22:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    fc26:	48 01 d0             	add    rax,rdx
    fc29:	ff e0                	jmp    rax
	      size_t __z = 0;   // Number of trailing zeros to add.
    fc2b:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
    fc32:	00 00 
	      if (__trailing_zeros && __prec != 0)
    fc34:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    fc37:	41 b8 01 00 00 00    	mov    r8d,0x1
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
    fc3d:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
    fc43:	75 11                	jne    fc56 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x996>
    fc45:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    fc4a:	48 29 d8             	sub    rax,rbx
    fc4d:	4c 39 c0             	cmp    rax,r8
    fc50:	0f 83 a4 04 00 00    	jae    100fa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe3a>
		      __dynbuf.reserve(__s.size() + __extras);
    fc56:	48 8d 7c 24 60       	lea    rdi,[rsp+0x60]
    fc5b:	4b 8d 34 04          	lea    rsi,[r12+r8*1]
    fc5f:	4c 89 4c 24 50       	mov    QWORD PTR [rsp+0x50],r9
    fc64:	4c 89 54 24 28       	mov    QWORD PTR [rsp+0x28],r10
    fc69:	4c 89 44 24 40       	mov    QWORD PTR [rsp+0x40],r8
    fc6e:	48 89 7c 24 30       	mov    QWORD PTR [rsp+0x30],rdi
    fc73:	e8 a8 5c ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
		      if (__dynbuf.empty())
    fc78:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
    fc7e:	4c 8b 54 24 28       	mov    r10,QWORD PTR [rsp+0x28]
    fc83:	4c 8b 4c 24 50       	mov    r9,QWORD PTR [rsp+0x50]
    fc88:	0f 85 a2 01 00 00    	jne    fe30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb70>
	return _M_replace(size_type(0), this->size(), __s, __n);
    fc8e:	4d 39 cc             	cmp    r12,r9
    fc91:	4d 89 c8             	mov    r8,r9
    fc94:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    fc99:	4c 89 f9             	mov    rcx,r15
    fc9c:	4d 0f 46 c4          	cmovbe r8,r12
    fca0:	31 d2                	xor    edx,edx
    fca2:	31 f6                	xor    esi,esi
    fca4:	4c 89 54 24 50       	mov    QWORD PTR [rsp+0x50],r10
    fca9:	4c 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],r9
    fcae:	e8 9d 47 ff ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  if (__d == __p)
    fcb3:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    fcb8:	4c 8b 54 24 50       	mov    r10,QWORD PTR [rsp+0x50]
    fcbd:	4d 39 ca             	cmp    r10,r9
    fcc0:	0f 84 31 05 00 00    	je     101f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf37>
			  if (__z)
    fcc6:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
    fccc:	0f 85 fa 04 00 00    	jne    101cc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf0c>
    if (__pos > __size)
    fcd2:	4d 39 cc             	cmp    r12,r9
    fcd5:	0f 82 0f 06 00 00    	jb     102ea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x102a>
      { return _M_string_length; }
    fcdb:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
      [[nodiscard]]
      constexpr basic_string_view
      substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)
      {
	__pos = std::__sv_check(size(), __pos, "basic_string_view::substr");
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
    fce0:	4d 29 cc             	sub    r12,r9
	return basic_string_view{_M_str + __pos, __rlen};
    fce3:	4b 8d 0c 0f          	lea    rcx,[r15+r9*1]
	if (this->max_size() - (this->size() - __n1) < __n2)
    fce7:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    fcee:	ff ff 7f 
    fcf1:	48 29 f0             	sub    rax,rsi
    fcf4:	4c 39 e0             	cmp    rax,r12
    fcf7:	0f 82 e1 05 00 00    	jb     102de <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x101e>
      { return _M_dataplus._M_p; }
    fcfd:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      const size_type __len = __n + this->size();
    fd02:	4a 8d 1c 26          	lea    rbx,[rsi+r12*1]
	if (_M_data() == _M_local_data())
    fd06:	4c 39 f0             	cmp    rax,r14
    fd09:	0f 84 01 05 00 00    	je     10210 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf50>
	return _M_is_local() ? size_type(_S_local_capacity)
    fd0f:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
      if (__len <= this->capacity())
    fd14:	48 39 da             	cmp    rdx,rbx
    fd17:	0f 82 96 04 00 00    	jb     101b3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xef3>
	  if (__n)
    fd1d:	4d 85 e4             	test   r12,r12
    fd20:	74 1e                	je     fd40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa80>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    fd22:	48 8d 3c 30          	lea    rdi,[rax+rsi*1]
	if (__n == 1)
    fd26:	49 83 fc 01          	cmp    r12,0x1
    fd2a:	0f 84 ea 04 00 00    	je     1021a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf5a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    fd30:	4c 89 e2             	mov    rdx,r12
    fd33:	48 89 ce             	mov    rsi,rcx
    fd36:	e8 75 34 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
    fd3b:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      { _M_string_length = __length; }
    fd40:	48 89 5c 24 68       	mov    QWORD PTR [rsp+0x68],rbx
	__c1 = __c2;
    fd45:	c6 04 18 00          	mov    BYTE PTR [rax+rbx*1],0x0
    fd49:	e9 22 01 00 00       	jmp    fe70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbb0>
    fd4e:	66 90                	xchg   ax,ax
	    __prec = _M_prec;
    fd50:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
    fd54:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    fd59:	e9 a3 fa ff ff       	jmp    f801 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x541>
    fd5e:	66 90                	xchg   ax,ax
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    fd60:	84 c9                	test   cl,cl
    fd62:	75 1a                	jne    fd7e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xabe>
    fd64:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
    fd69:	48 8b 01             	mov    rax,QWORD PTR [rcx]
    fd6c:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    fd71:	48 c1 e8 04          	shr    rax,0x4
    fd75:	48 39 c2             	cmp    rdx,rax
    fd78:	0f 82 0d 04 00 00    	jb     1018b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xecb>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    fd7e:	e8 cd 33 ff ff       	call   3150 <abort@plt>
    fd83:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    fd88:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
    fd8d:	41 bc 04 00 00 00    	mov    r12d,0x4
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
    fd93:	45 31 ff             	xor    r15d,r15d
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    fd96:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fd9d:	00 00 
	      size_t __guess = 8 + __prec;
    fd9f:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    fda4:	48 8d 70 08          	lea    rsi,[rax+0x8]
    fda8:	e9 2a fc ff ff       	jmp    f9d7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x717>
    fdad:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    fdb0:	45 31 c0             	xor    r8d,r8d
    fdb3:	49 39 c4             	cmp    r12,rax
    fdb6:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
    fdba:	80 7c 24 28 00       	cmp    BYTE PTR [rsp+0x28],0x0
    fdbf:	0f 84 9d 01 00 00    	je     ff62 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xca2>
		      if (__s[__have_sign] != '0')
    fdc5:	0f b6 54 24 50       	movzx  edx,BYTE PTR [rsp+0x50]
		    __p = __s.size();
    fdca:	4d 89 e1             	mov    r9,r12
		      if (__s[__have_sign] != '0')
    fdcd:	41 80 3c 17 30       	cmp    BYTE PTR [r15+rdx*1],0x30
    fdd2:	0f 85 b7 f6 ff ff    	jne    f48f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1cf>
	  return __pos;
      return npos;
    fdd8:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
    fddf:	4c 89 c8             	mov    rax,r9
    fde2:	48 29 c8             	sub    rax,rcx
    fde5:	e9 af f6 ff ff       	jmp    f499 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d9>
    fdea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  std::construct_at(&_M_loc);
    fdf0:	48 8d 70 18          	lea    rsi,[rax+0x18]
    fdf4:	49 89 c5             	mov    r13,rax
    fdf7:	48 89 f7             	mov    rdi,rsi
    fdfa:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    fdff:	e8 6c 35 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    fe04:	41 c6 45 20 01       	mov    BYTE PTR [r13+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
    fe09:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    fe0e:	4c 8d ac 24 a0 00 00 	lea    r13,[rsp+0xa0]
    fe15:	00 
    fe16:	e9 ec f6 ff ff       	jmp    f507 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x247>
    fe1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      size_t __z = 0;   // Number of trailing zeros to add.
    fe20:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
    fe27:	00 00 
    fe29:	e9 82 f6 ff ff       	jmp    f4b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f0>
    fe2e:	66 90                	xchg   ax,ax
    fe30:	4c 8b 44 24 40       	mov    r8,QWORD PTR [rsp+0x40]
			  __dynbuf.insert(__p, __extras, '0');
    fe35:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    fe3a:	4c 89 ce             	mov    rsi,r9
    fe3d:	b9 30 00 00 00       	mov    ecx,0x30
    fe42:	4c 89 54 24 28       	mov    QWORD PTR [rsp+0x28],r10
    fe47:	4c 89 c2             	mov    rdx,r8
    fe4a:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
    fe4f:	e8 0c 47 ff ff       	call   4560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>
			  if (__d == __p)
    fe54:	4c 8b 4c 24 10       	mov    r9,QWORD PTR [rsp+0x10]
    fe59:	4c 8b 54 24 28       	mov    r10,QWORD PTR [rsp+0x28]
    fe5e:	4d 39 ca             	cmp    r10,r9
    fe61:	75 0d                	jne    fe70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbb0>
			    __dynbuf[__p] = '.';
    fe63:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
    fe68:	42 c6 04 10 2e       	mov    BYTE PTR [rax+r10*1],0x2e
    fe6d:	0f 1f 00             	nop    DWORD PTR [rax]
      { return _M_string_length; }
    fe70:	4c 8b 64 24 68       	mov    r12,QWORD PTR [rsp+0x68]
      { return _M_dataplus._M_p; }
    fe75:	4c 8b 7c 24 60       	mov    r15,QWORD PTR [rsp+0x60]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
    fe7a:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    fe7e:	48 8d 9c 24 90 00 00 	lea    rbx,[rsp+0x90]
    fe85:	00 
    fe86:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
    fe8d:	00 
    fe8e:	48 89 9c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbx
    fe95:	00 
      { _M_string_length = __length; }
    fe96:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
    fe9d:	00 00 00 00 00 
    fea2:	a8 20                	test   al,0x20
    fea4:	0f 85 3d f6 ff ff    	jne    f4e7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x227>
    feaa:	e9 ab f7 ff ff       	jmp    f65a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x39a>
	      return __format::to_chars(__b, __e, __v, __fmt);
    feaf:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    feb4:	44 89 e2             	mov    edx,r12d
    feb7:	e8 e4 32 ff ff       	call   31a0 <std::to_chars(char*, char*, _Float128, std::chars_format)@plt>
    febc:	48 89 c3             	mov    rbx,rax
    febf:	48 89 d0             	mov    rax,rdx
    fec2:	e9 89 fb ff ff       	jmp    fa50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x790>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    fec7:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
    fecb:	45 31 ed             	xor    r13d,r13d
    fece:	e9 a6 fa ff ff       	jmp    f979 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6b9>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    fed3:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
    fed7:	e9 c2 fb ff ff       	jmp    fa9e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7de>
	  char __expc = 'e';
    fedc:	c6 44 24 3f 65       	mov    BYTE PTR [rsp+0x3f],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    fee1:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
    fee5:	45 31 ed             	xor    r13d,r13d
    fee8:	e9 d9 fb ff ff       	jmp    fac6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x806>
	      if (_M_spec._M_type != _Pres_A)
    feed:	83 e3 78             	and    ebx,0x78
    fef0:	ba 70 00 00 00       	mov    edx,0x70
    fef5:	b8 65 00 00 00       	mov    eax,0x65
    fefa:	80 fb 10             	cmp    bl,0x10
    fefd:	0f 45 c2             	cmovne eax,edx
    ff00:	45 31 ed             	xor    r13d,r13d
    ff03:	88 44 24 3f          	mov    BYTE PTR [rsp+0x3f],al
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    ff07:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
    ff0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	      __fmt = chars_format::hex;
    ff10:	41 bc 04 00 00 00    	mov    r12d,0x4
    ff16:	e9 6e fa ff ff       	jmp    f989 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6c9>
    ff1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
    ff20:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
    ff23:	ba 50 00 00 00       	mov    edx,0x50
    ff28:	b8 70 00 00 00       	mov    eax,0x70
    ff2d:	41 bd 01 00 00 00    	mov    r13d,0x1
    ff33:	80 fb 10             	cmp    bl,0x10
    ff36:	0f 44 c2             	cmove  eax,edx
    ff39:	88 44 24 3f          	mov    BYTE PTR [rsp+0x3f],al
    ff3d:	eb c8                	jmp    ff07 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc47>
	  char __expc = 'e';
    ff3f:	c6 44 24 3f 65       	mov    BYTE PTR [rsp+0x3f],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    ff44:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
    ff48:	45 31 ed             	xor    r13d,r13d
    ff4b:	e9 c6 fb ff ff       	jmp    fb16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x856>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    ff50:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
    ff54:	e9 e5 fb ff ff       	jmp    fb3e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87e>
    ff59:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
    ff5d:	e9 8c fb ff ff       	jmp    faee <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x82e>
	      size_t __z = 0;   // Number of trailing zeros to add.
    ff62:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
    ff69:	00 00 
		    __p = __s.size();
    ff6b:	4d 89 e1             	mov    r9,r12
    ff6e:	e9 3d f5 ff ff       	jmp    f4b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f0>
	      if (__arg >= 0)
    ff73:	48 63 94 24 c0 00 00 	movsxd rdx,DWORD PTR [rsp+0xc0]
    ff7a:	00 
    ff7b:	85 d2                	test   edx,edx
    ff7d:	0f 89 81 f7 ff ff    	jns    f704 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    ff83:	e9 f6 fd ff ff       	jmp    fd7e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xabe>
    ff88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    ff8f:	00 
	      return __arg;
    ff90:	48 8b 94 24 c0 00 00 	mov    rdx,QWORD PTR [rsp+0xc0]
    ff97:	00 
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
    ff98:	e9 67 f7 ff ff       	jmp    f704 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
	      if (__arg >= 0)
    ff9d:	48 8b 94 24 c0 00 00 	mov    rdx,QWORD PTR [rsp+0xc0]
    ffa4:	00 
    ffa5:	48 85 d2             	test   rdx,rdx
    ffa8:	0f 89 56 f7 ff ff    	jns    f704 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    ffae:	e9 cb fd ff ff       	jmp    fd7e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xabe>
    ffb3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      return __arg;
    ffb8:	8b 94 24 c0 00 00 00 	mov    edx,DWORD PTR [rsp+0xc0]
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
    ffbf:	e9 40 f7 ff ff       	jmp    f704 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    ffc4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    ffc8:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
    ffcf:	00 00 
      { return _M_dataplus._M_p; }
    ffd1:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
    ffd6:	c6 02 00             	mov    BYTE PTR [rdx],0x0
    ffd9:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
    ffde:	83 f8 4b             	cmp    eax,0x4b
    ffe1:	0f 84 19 fa ff ff    	je     fa00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x740>
		  __start = __dynbuf.data() + 1; // reserve space for sign
    ffe7:	4c 8d 7a 01          	lea    r15,[rdx+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
    ffeb:	48 03 54 24 68       	add    rdx,QWORD PTR [rsp+0x68]
		  __start = __dynbuf.data() + 1; // reserve space for sign
    fff0:	48 8b 6c 24 50       	mov    rbp,QWORD PTR [rsp+0x50]
		  __end = __dynbuf.data() + __dynbuf.size();
    fff5:	48 89 54 24 30       	mov    QWORD PTR [rsp+0x30],rdx
    fffa:	e9 04 f9 ff ff       	jmp    f903 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x643>
    ffff:	48 8b 94 24 c0 00 00 	mov    rdx,QWORD PTR [rsp+0xc0]
   10006:	00 
	if (_M_data() == _M_local_data())
   10007:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
   1000e:	00 
   1000f:	48 39 fa             	cmp    rdx,rdi
   10012:	74 70                	je     10084 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdc4>
      { return _M_string_length; }
   10014:	f3 0f 6f 84 24 c8 00 	movdqu xmm0,XMMWORD PTR [rsp+0xc8]
   1001b:	00 00 
      { _M_dataplus._M_p = __p; }
   1001d:	48 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rdx
   10024:	00 
      { _M_string_length = __length; }
   10025:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   1002c:	00 
      { _M_dataplus._M_p = __p; }
   1002d:	48 89 bc 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rdi
   10034:	00 
   10035:	48 8d b4 24 d0 00 00 	lea    rsi,[rsp+0xd0]
   1003c:	00 
   1003d:	e9 6b f5 ff ff       	jmp    f5ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ed>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10042:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   10046:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
   1004b:	44 89 e2             	mov    edx,r12d
   1004e:	e8 6d 31 ff ff       	call   31c0 <std::to_chars(char*, char*, _Float128, std::chars_format, int)@plt>
   10053:	48 89 c3             	mov    rbx,rax
   10056:	48 89 d0             	mov    rax,rdx
   10059:	e9 f2 f9 ff ff       	jmp    fa50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x790>
	  char __expc = 'e';
   1005e:	c6 44 24 3f 65       	mov    BYTE PTR [rsp+0x3f],0x65
	  bool __upper = false;
   10063:	45 31 ed             	xor    r13d,r13d
	  chars_format __fmt{};
   10066:	45 31 e4             	xor    r12d,r12d
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   10069:	45 31 ff             	xor    r15d,r15d
	  size_t __prec = 6;
   1006c:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   10073:	00 00 
		__guess = sizeof(__buf) * 2;
   10075:	be 00 01 00 00       	mov    esi,0x100
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   1007a:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
   1007f:	e9 63 f9 ff ff       	jmp    f9e7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x727>
	    if (_M_string_length > _S_local_capacity)
   10084:	48 8b 94 24 c8 00 00 	mov    rdx,QWORD PTR [rsp+0xc8]
   1008b:	00 
   1008c:	49 89 d0             	mov    r8,rdx
		if (__str.size())
   1008f:	48 85 d2             	test   rdx,rdx
   10092:	74 4c                	je     100e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe20>
	if (__n == 1)
   10094:	48 83 fa 01          	cmp    rdx,0x1
   10098:	0f 84 dc 01 00 00    	je     1027a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xfba>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1009e:	89 d1                	mov    ecx,edx
   100a0:	83 fa 08             	cmp    edx,0x8
   100a3:	0f 83 80 01 00 00    	jae    10229 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf69>
   100a9:	f6 c2 04             	test   dl,0x4
   100ac:	0f 85 e7 01 00 00    	jne    10299 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xfd9>
   100b2:	85 d2                	test   edx,edx
   100b4:	74 24                	je     100da <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe1a>
   100b6:	0f b6 b4 24 d0 00 00 	movzx  esi,BYTE PTR [rsp+0xd0]
   100bd:	00 
   100be:	83 e2 02             	and    edx,0x2
   100c1:	40 88 30             	mov    BYTE PTR [rax],sil
   100c4:	0f 85 f5 01 00 00    	jne    102bf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xfff>
   100ca:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   100d1:	00 
   100d2:	48 8b 94 24 c8 00 00 	mov    rdx,QWORD PTR [rsp+0xc8]
   100d9:	00 
      { return _M_string_length; }
   100da:	49 89 d0             	mov    r8,rdx
      { return _M_dataplus._M_p; }
   100dd:	48 89 c6             	mov    rsi,rax
      { _M_string_length = __length; }
   100e0:	4c 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],r8
   100e7:	00 
	__c1 = __c2;
   100e8:	42 c6 04 06 00       	mov    BYTE PTR [rsi+r8*1],0x0
      { return _M_dataplus._M_p; }
   100ed:	48 8b b4 24 c0 00 00 	mov    rsi,QWORD PTR [rsp+0xc0]
   100f4:	00 
      }
   100f5:	e9 b3 f4 ff ff       	jmp    f5ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ed>
		      __builtin_memmove(__start + __p + __extras,
   100fa:	4b 8d 3c 08          	lea    rdi,[r8+r9*1]
					__start + __p,
   100fe:	4b 8d 1c 0f          	lea    rbx,[r15+r9*1]
		      __builtin_memmove(__start + __p + __extras,
   10102:	4c 89 e2             	mov    rdx,r12
   10105:	4c 89 54 24 50       	mov    QWORD PTR [rsp+0x50],r10
   1010a:	4c 29 ca             	sub    rdx,r9
   1010d:	4c 01 ff             	add    rdi,r15
   10110:	48 89 de             	mov    rsi,rbx
   10113:	4c 89 4c 24 30       	mov    QWORD PTR [rsp+0x30],r9
   10118:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
   1011d:	e8 fe 31 ff ff       	call   3320 <memmove@plt>
		      if (__d == __p)
   10122:	4c 8b 4c 24 30       	mov    r9,QWORD PTR [rsp+0x30]
   10127:	4c 8b 54 24 50       	mov    r10,QWORD PTR [rsp+0x50]
   1012c:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
   10131:	4d 39 ca             	cmp    r10,r9
   10134:	75 08                	jne    1013e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe7e>
			__start[__p++] = '.';
   10136:	c6 03 2e             	mov    BYTE PTR [rbx],0x2e
		      __builtin_memset(__start + __p, '0', __z);
   10139:	4b 8d 5c 17 01       	lea    rbx,[r15+r10*1+0x1]
   1013e:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
   10143:	be 30 00 00 00       	mov    esi,0x30
   10148:	48 89 df             	mov    rdi,rbx
   1014b:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
   10150:	e8 eb 2f ff ff       	call   3140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
   10155:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   1015a:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
		      __narrow_str = {__s.data(), __s.size() + __extras};
   1015e:	4d 01 c4             	add    r12,r8
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   10161:	e9 18 fd ff ff       	jmp    fe7e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbbe>
	      if (__trailing_zeros && __prec != 0)
   10166:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10169:	41 b8 01 00 00 00    	mov    r8d,0x1
   1016f:	e9 c9 fa ff ff       	jmp    fc3d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x97d>
   10174:	bb 1d 00 00 00       	mov    ebx,0x1d
   10179:	be 1e 00 00 00       	mov    esi,0x1e
   1017e:	e9 93 f8 ff ff       	jmp    fa16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x756>
		    __p = __s.size();
   10183:	4d 89 e1             	mov    r9,r12
   10186:	e9 df f2 ff ff       	jmp    f46a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1aa>
	  __arg = _M_args[__i];
   1018b:	48 c1 e2 05          	shl    rdx,0x5
   1018f:	48 03 51 08          	add    rdx,QWORD PTR [rcx+0x8]
   10193:	f3 0f 6f 02          	movdqu xmm0,XMMWORD PTR [rdx]
   10197:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
   1019e:	00 
   1019f:	0f b6 42 10          	movzx  eax,BYTE PTR [rdx+0x10]
   101a3:	88 84 24 b0 00 00 00 	mov    BYTE PTR [rsp+0xb0],al
   101aa:	0f b6 42 10          	movzx  eax,BYTE PTR [rdx+0x10]
   101ae:	e9 34 fa ff ff       	jmp    fbe7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x927>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
   101b3:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
   101b8:	4d 89 e0             	mov    r8,r12
   101bb:	31 d2                	xor    edx,edx
   101bd:	e8 9e 73 ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
   101c2:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   101c7:	e9 74 fb ff ff       	jmp    fd40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa80>
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   101cc:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   101d1:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
   101d6:	41 b8 30 00 00 00    	mov    r8d,0x30
   101dc:	31 d2                	xor    edx,edx
   101de:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
   101e3:	4c 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],r9
   101e8:	e8 73 41 ff ff       	call   4360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>
   101ed:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
   101f2:	e9 db fa ff ff       	jmp    fcd2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa12>
	this->push_back(__c);
   101f7:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
   101fc:	be 2e 00 00 00       	mov    esi,0x2e
   10201:	e8 aa 7c ff ff       	call   7eb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
   10206:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
	return *this;
   1020b:	e9 b6 fa ff ff       	jmp    fcc6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa06>
	return _M_is_local() ? size_type(_S_local_capacity)
   10210:	ba 0f 00 00 00       	mov    edx,0xf
   10215:	e9 fa fa ff ff       	jmp    fd14 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa54>
   1021a:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   1021d:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
   1021f:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      }
   10224:	e9 17 fb ff ff       	jmp    fd40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa80>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   10229:	48 8b 8c 24 d0 00 00 	mov    rcx,QWORD PTR [rsp+0xd0]
   10230:	00 
   10231:	48 89 08             	mov    QWORD PTR [rax],rcx
   10234:	89 d1                	mov    ecx,edx
   10236:	48 8b 74 0f f8       	mov    rsi,QWORD PTR [rdi+rcx*1-0x8]
   1023b:	48 89 74 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rsi
   10240:	48 8d 70 08          	lea    rsi,[rax+0x8]
   10244:	48 83 e6 f8          	and    rsi,0xfffffffffffffff8
   10248:	48 29 f0             	sub    rax,rsi
   1024b:	48 89 c1             	mov    rcx,rax
   1024e:	48 29 c7             	sub    rdi,rax
   10251:	01 d1                	add    ecx,edx
   10253:	83 e1 f8             	and    ecx,0xfffffff8
   10256:	83 f9 08             	cmp    ecx,0x8
   10259:	0f 82 6b fe ff ff    	jb     100ca <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe0a>
   1025f:	83 e1 f8             	and    ecx,0xfffffff8
   10262:	31 c0                	xor    eax,eax
   10264:	89 c2                	mov    edx,eax
   10266:	83 c0 08             	add    eax,0x8
   10269:	4c 8b 04 17          	mov    r8,QWORD PTR [rdi+rdx*1]
   1026d:	4c 89 04 16          	mov    QWORD PTR [rsi+rdx*1],r8
   10271:	39 c8                	cmp    eax,ecx
   10273:	72 ef                	jb     10264 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xfa4>
   10275:	e9 50 fe ff ff       	jmp    100ca <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe0a>
	__c1 = __c2;
   1027a:	0f b6 94 24 d0 00 00 	movzx  edx,BYTE PTR [rsp+0xd0]
   10281:	00 
   10282:	88 10                	mov    BYTE PTR [rax],dl
      { return _M_string_length; }
   10284:	4c 8b 84 24 c8 00 00 	mov    r8,QWORD PTR [rsp+0xc8]
   1028b:	00 
      { return _M_dataplus._M_p; }
   1028c:	48 8b b4 24 80 00 00 	mov    rsi,QWORD PTR [rsp+0x80]
   10293:	00 
      }
   10294:	e9 47 fe ff ff       	jmp    100e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe20>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   10299:	8b 94 24 d0 00 00 00 	mov    edx,DWORD PTR [rsp+0xd0]
   102a0:	89 10                	mov    DWORD PTR [rax],edx
   102a2:	8b 54 0f fc          	mov    edx,DWORD PTR [rdi+rcx*1-0x4]
   102a6:	89 54 08 fc          	mov    DWORD PTR [rax+rcx*1-0x4],edx
   102aa:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   102b1:	00 
   102b2:	48 8b 94 24 c8 00 00 	mov    rdx,QWORD PTR [rsp+0xc8]
   102b9:	00 
   102ba:	e9 1b fe ff ff       	jmp    100da <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe1a>
   102bf:	0f b7 54 0f fe       	movzx  edx,WORD PTR [rdi+rcx*1-0x2]
   102c4:	66 89 54 08 fe       	mov    WORD PTR [rax+rcx*1-0x2],dx
   102c9:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   102d0:	00 
   102d1:	48 8b 94 24 c8 00 00 	mov    rdx,QWORD PTR [rsp+0xc8]
   102d8:	00 
   102d9:	e9 fc fd ff ff       	jmp    100da <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe1a>
	  __throw_length_error(__N(__s));
   102de:	48 8d 3d d6 4e 00 00 	lea    rdi,[rip+0x4ed6]        # 151bb <CSWTCH.1104+0xdb>
   102e5:	e8 46 2e ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
   102ea:	4c 89 e1             	mov    rcx,r12
   102ed:	4c 89 ca             	mov    rdx,r9
   102f0:	48 8d 35 31 4f 00 00 	lea    rsi,[rip+0x4f31]        # 15228 <CSWTCH.1104+0x148>
   102f7:	31 c0                	xor    eax,eax
   102f9:	48 8d 3d 00 51 00 00 	lea    rdi,[rip+0x5100]        # 15400 <CSWTCH.1104+0x320>
   10300:	e8 db 2f ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
   10305:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   1030c:	00 00 00 
   1030f:	90                   	nop

0000000000010310 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   10310:	41 57                	push   r15
   10312:	41 56                	push   r14
   10314:	49 89 fe             	mov    r14,rdi
   10317:	41 55                	push   r13
   10319:	41 54                	push   r12
   1031b:	55                   	push   rbp
   1031c:	53                   	push   rbx
   1031d:	48 81 ec 38 01 00 00 	sub    rsp,0x138
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   10324:	0f b6 6f 01          	movzx  ebp,BYTE PTR [rdi+0x1]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   10328:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   1032d:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
   10332:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   10337:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
	  if (__use_prec)
   1033c:	89 e8                	mov    eax,ebp
      { _M_string_length = __length; }
   1033e:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
   10345:	00 00 
	__c1 = __c2;
   10347:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
   1034c:	83 e0 06             	and    eax,0x6
   1034f:	0f 85 73 04 00 00    	jne    107c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b8>
	  switch (_M_spec._M_type)
   10355:	89 e8                	mov    eax,ebp
   10357:	48 8d 15 f2 56 00 00 	lea    rdx,[rip+0x56f2]        # 15a50 <CSWTCH.1104+0x970>
   1035e:	c0 e8 03             	shr    al,0x3
   10361:	83 e0 0f             	and    eax,0xf
   10364:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   10368:	48 01 d0             	add    rax,rdx
   1036b:	ff e0                	jmp    rax
   1036d:	0f 1f 00             	nop    DWORD PTR [rax]
	      return __format::to_chars(__b, __e, __v);
   10370:	48 8d ac 24 b1 00 00 	lea    rbp,[rsp+0xb1]
   10377:	00 
   10378:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   1037f:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10386:	48 89 ef             	mov    rdi,rbp
   10389:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   10390:	00 
   10391:	e8 ca 2d ff ff       	call   3160 <std::to_chars(char*, char*, long double)@plt>
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10396:	41 5c                	pop    r12
   10398:	41 5d                	pop    r13
   1039a:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
   1039f:	48 89 c3             	mov    rbx,rax
   103a2:	83 fa 4b             	cmp    edx,0x4b
   103a5:	0f 84 0f 0c 00 00    	je     10fba <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcaa>
	  char* __end = __buf + sizeof(__buf);
   103ab:	48 8d 84 24 30 01 00 	lea    rax,[rsp+0x130]
   103b2:	00 
	  char __expc = 'e';
   103b3:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	  char* __end = __buf + sizeof(__buf);
   103b8:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
	  size_t __prec = 6;
   103bd:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   103c4:	00 
	  if (!__builtin_signbit(__v))
   103c5:	db ac 24 70 01 00 00 	fld    TBYTE PTR [rsp+0x170]
	      if (_M_spec._M_sign == _Sign_plus)
   103cc:	45 0f b6 2e          	movzx  r13d,BYTE PTR [r14]
	  if (!__builtin_signbit(__v))
   103d0:	d9 e5                	fxam
   103d2:	df e0                	fnstsw ax
   103d4:	dd d8                	fstp   st(0)
   103d6:	f6 c4 02             	test   ah,0x2
   103d9:	0f 85 21 03 00 00    	jne    10700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
	      if (_M_spec._M_sign == _Sign_plus)
   103df:	44 89 e8             	mov    eax,r13d
   103e2:	83 e0 0c             	and    eax,0xc
   103e5:	3c 04                	cmp    al,0x4
   103e7:	0f 84 c3 06 00 00    	je     10ab0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7a0>
		__have_sign = false;
   103ed:	45 31 c0             	xor    r8d,r8d
	      else if (_M_spec._M_sign == _Sign_space)
   103f0:	3c 0c                	cmp    al,0xc
   103f2:	0f 84 f0 02 00 00    	je     106e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d8>
	  string_view __narrow_str(__start, __res.ptr - __start);
   103f8:	49 89 df             	mov    r15,rbx
   103fb:	49 29 ef             	sub    r15,rbp
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   103fe:	41 f6 c5 10          	test   r13b,0x10
   10402:	0f 84 18 02 00 00    	je     10620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
   10408:	db ac 24 70 01 00 00 	fld    TBYTE PTR [rsp+0x170]
   1040f:	d9 e1                	fabs
   10411:	db 2d e9 83 00 00    	fld    TBYTE PTR [rip+0x83e9]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x440>
   10417:	df e9                	fucomip st,st(1)
   10419:	dd d8                	fstp   st(0)
   1041b:	0f 82 ff 01 00 00    	jb     10620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
      if (__pos < this->_M_len)
   10421:	4d 85 ff             	test   r15,r15
   10424:	0f 84 f6 03 00 00    	je     10820 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x510>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
   1042a:	4c 89 fa             	mov    rdx,r15
   1042d:	be 2e 00 00 00       	mov    esi,0x2e
   10432:	48 89 ef             	mov    rdi,rbp
   10435:	44 88 44 24 28       	mov    BYTE PTR [rsp+0x28],r8b
   1043a:	e8 e1 2d ff ff       	call   3220 <memchr@plt>
	  if (__p)
   1043f:	44 0f b6 44 24 28    	movzx  r8d,BYTE PTR [rsp+0x28]
   10445:	48 85 c0             	test   rax,rax
   10448:	0f 84 d2 03 00 00    	je     10820 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x510>
	    __ret = __p - this->_M_str;
   1044e:	48 29 e8             	sub    rax,rbp
   10451:	49 89 c3             	mov    r11,rax
	      if (__d != __s.npos) // Found decimal point.
   10454:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
   10458:	0f 84 c2 03 00 00    	je     10820 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x510>
		  __p = __s.find(__expc, __d + 1);
   1045e:	48 8d 48 01          	lea    rcx,[rax+0x1]
      if (__pos < this->_M_len)
   10462:	4c 39 f9             	cmp    rcx,r15
   10465:	0f 83 95 08 00 00    	jae    10d00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9f0>
   1046b:	0f be 74 24 36       	movsx  esi,BYTE PTR [rsp+0x36]
	  const size_type __n = this->_M_len - __pos;
   10470:	4c 89 fa             	mov    rdx,r15
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   10473:	48 8d 7c 0d 00       	lea    rdi,[rbp+rcx*1+0x0]
   10478:	44 88 44 24 37       	mov    BYTE PTR [rsp+0x37],r8b
	  const size_type __n = this->_M_len - __pos;
   1047d:	48 29 ca             	sub    rdx,rcx
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   10480:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
   10485:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
   1048a:	e8 91 2d ff ff       	call   3220 <memchr@plt>
	  if (__p)
   1048f:	48 8b 4c 24 28       	mov    rcx,QWORD PTR [rsp+0x28]
   10494:	44 0f b6 44 24 37    	movzx  r8d,BYTE PTR [rsp+0x37]
   1049a:	48 85 c0             	test   rax,rax
   1049d:	4c 8b 5c 24 38       	mov    r11,QWORD PTR [rsp+0x38]
   104a2:	49 89 c4             	mov    r12,rax
   104a5:	0f 84 0f 0c 00 00    	je     110ba <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdaa>
	    __ret = __p - this->_M_str;
   104ab:	49 29 ec             	sub    r12,rbp
		    __p = __s.size();
   104ae:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
   104b2:	4d 0f 44 e7          	cmove  r12,r15
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   104b6:	45 31 c9             	xor    r9d,r9d
   104b9:	4d 39 dc             	cmp    r12,r11
   104bc:	41 0f 94 c1          	sete   r9b
		  if (__trailing_zeros)
   104c0:	80 7c 24 18 00       	cmp    BYTE PTR [rsp+0x18],0x0
   104c5:	0f 84 9d 08 00 00    	je     10d68 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa58>
		      if (__s[__have_sign] != '0')
   104cb:	41 0f b6 c0          	movzx  eax,r8b
   104cf:	80 7c 05 00 30       	cmp    BYTE PTR [rbp+rax*1+0x0],0x30
   104d4:	0f 84 33 03 00 00    	je     1080d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4fd>
			__sigfigs = __p - __have_sign - 1;
   104da:	4c 89 e2             	mov    rdx,r12
   104dd:	48 29 c2             	sub    rdx,rax
   104e0:	48 83 ea 01          	sub    rdx,0x1
	      if (__trailing_zeros && __prec != 0)
   104e4:	48 83 3c 24 00       	cmp    QWORD PTR [rsp],0x0
   104e9:	0f 85 7d 03 00 00    	jne    1086c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x55c>
   104ef:	90                   	nop
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   104f0:	4d 85 c9             	test   r9,r9
   104f3:	0f 85 07 06 00 00    	jne    10b00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7f0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   104f9:	4c 8d a4 24 80 00 00 	lea    r12,[rsp+0x80]
   10500:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   10501:	41 83 e5 20          	and    r13d,0x20
      { _M_string_length = __length; }
   10505:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
   1050c:	00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1050e:	4c 89 64 24 70       	mov    QWORD PTR [rsp+0x70],r12
	__c1 = __c2;
   10513:	c6 84 24 80 00 00 00 	mov    BYTE PTR [rsp+0x80],0x0
   1051a:	00 
   1051b:	0f 84 3c 01 00 00    	je     1065d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34d>
      if (!_M_hasval)
   10521:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
   10526:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
   1052a:	0f 84 10 08 00 00    	je     10d40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa30>
      return _M_loc;
   10530:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
      std::locale locale() { return _M_loc.value(); }
   10535:	4c 8d 6c 24 48       	lea    r13,[rsp+0x48]
      return _M_loc;
   1053a:	48 8d 70 18          	lea    rsi,[rax+0x18]
      std::locale locale() { return _M_loc.value(); }
   1053e:	4c 89 ef             	mov    rdi,r13
   10541:	e8 4a 2c ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
   10546:	0f be 4c 24 36       	movsx  ecx,BYTE PTR [rsp+0x36]
   1054b:	4c 89 fe             	mov    rsi,r15
   1054e:	48 89 ea             	mov    rdx,rbp
   10551:	48 8d 84 24 90 00 00 	lea    rax,[rsp+0x90]
   10558:	00 
   10559:	4d 89 e8             	mov    r8,r13
   1055c:	48 89 c7             	mov    rdi,rax
   1055f:	e8 fc 40 ff ff       	call   4660 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>
      { return _M_dataplus._M_p; }
   10564:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   10569:	48 89 c1             	mov    rcx,rax
	if (_M_data() == _M_local_data())
   1056c:	4c 39 e0             	cmp    rax,r12
   1056f:	0f 84 dd 09 00 00    	je     10f52 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc42>
	    if (_M_string_length > _S_local_capacity)
   10575:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   1057c:	00 
      { return _M_dataplus._M_p; }
   1057d:	48 8b b4 24 90 00 00 	mov    rsi,QWORD PTR [rsp+0x90]
   10584:	00 
	if (_M_data() == _M_local_data())
   10585:	4c 8d 84 24 a0 00 00 	lea    r8,[rsp+0xa0]
   1058c:	00 
	    if (_M_string_length > _S_local_capacity)
   1058d:	48 89 d7             	mov    rdi,rdx
	if (_M_data() == _M_local_data())
   10590:	4c 39 c6             	cmp    rsi,r8
   10593:	0f 84 4b 0a 00 00    	je     10fe4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcd4>
   10599:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
   1059e:	48 89 74 24 70       	mov    QWORD PTR [rsp+0x70],rsi
		    __capacity = _M_allocated_capacity;
   105a3:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
   105aa:	00 
   105ab:	0f 16 84 24 a0 00 00 	movhps xmm0,QWORD PTR [rsp+0xa0]
   105b2:	00 
      { _M_string_length = __length; }
   105b3:	0f 11 44 24 78       	movups XMMWORD PTR [rsp+0x78],xmm0
	    if (__data)
   105b8:	48 85 c0             	test   rax,rax
   105bb:	0f 84 b9 09 00 00    	je     10f7a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc6a>
      { _M_dataplus._M_p = __p; }
   105c1:	48 89 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rax
   105c8:	00 
      { _M_allocated_capacity = __capacity; }
   105c9:	48 89 94 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rdx
   105d0:	00 
      { _M_string_length = __length; }
   105d1:	48 c7 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],0x0
   105d8:	00 00 00 00 00 
   105dd:	c6 01 00             	mov    BYTE PTR [rcx],0x0
      { return _M_dataplus._M_p; }
   105e0:	48 8b bc 24 90 00 00 	mov    rdi,QWORD PTR [rsp+0x90]
   105e7:	00 
	if (_M_data() == _M_local_data())
   105e8:	4c 39 c7             	cmp    rdi,r8
   105eb:	74 11                	je     105fe <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ee>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   105ed:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
   105f4:	00 
   105f5:	48 8d 70 01          	lea    rsi,[rax+0x1]
   105f9:	e8 02 2c ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
   105fe:	4c 89 ef             	mov    rdi,r13
   10601:	e8 ba 2c ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_string_length; }
   10606:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
	      if (!__wstr.empty())
   1060b:	48 85 c0             	test   rax,rax
   1060e:	74 4d                	je     1065d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34d>
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   10610:	49 89 eb             	mov    r11,rbp
		__str = __wstr;
   10613:	49 89 c7             	mov    r15,rax
   10616:	48 8b 6c 24 70       	mov    rbp,QWORD PTR [rsp+0x70]
   1061b:	eb 43                	jmp    10660 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x350>
   1061d:	0f 1f 00             	nop    DWORD PTR [rax]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   10620:	4c 8d a4 24 80 00 00 	lea    r12,[rsp+0x80]
   10627:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   10628:	41 83 e5 20          	and    r13d,0x20
      { _M_string_length = __length; }
   1062c:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
   10633:	00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   10635:	4c 89 64 24 70       	mov    QWORD PTR [rsp+0x70],r12
   1063a:	c6 84 24 80 00 00 00 	mov    BYTE PTR [rsp+0x80],0x0
   10641:	00 
   10642:	74 19                	je     1065d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34d>
   10644:	db ac 24 70 01 00 00 	fld    TBYTE PTR [rsp+0x170]
   1064b:	d9 e1                	fabs
   1064d:	db 2d ad 81 00 00    	fld    TBYTE PTR [rip+0x81ad]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x440>
   10653:	df e9                	fucomip st,st(1)
   10655:	dd d8                	fstp   st(0)
   10657:	0f 83 c4 fe ff ff    	jae    10521 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x211>
      { _M_dataplus._M_p = __p; }
   1065d:	49 89 eb             	mov    r11,rbp
	  if (_M_width_kind == _WP_value)
   10660:	41 0f b7 06          	movzx  eax,WORD PTR [r14]
   10664:	66 25 80 01          	and    ax,0x180
   10668:	66 3d 80 00          	cmp    ax,0x80
   1066c:	0f 84 9e 00 00 00    	je     10710 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
	  else if (_M_width_kind == _WP_from_arg)
   10672:	66 3d 00 01          	cmp    ax,0x100
   10676:	0f 84 54 04 00 00    	je     10ad0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7c0>
   1067c:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
   10681:	4c 8b 68 10          	mov    r13,QWORD PTR [rax+0x10]
	    return __format::__write(__fc.out(), __str);
   10685:	48 89 ea             	mov    rdx,rbp
   10688:	4c 89 fe             	mov    rsi,r15
   1068b:	4c 89 ef             	mov    rdi,r13
   1068e:	e8 4d 82 ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
   10693:	48 89 c5             	mov    rbp,rax
      { return _M_dataplus._M_p; }
   10696:	48 8b 7c 24 70       	mov    rdi,QWORD PTR [rsp+0x70]
	if (_M_data() == _M_local_data())
   1069b:	4c 39 e7             	cmp    rdi,r12
   1069e:	74 11                	je     106b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   106a0:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   106a7:	00 
   106a8:	48 8d 70 01          	lea    rsi,[rax+0x1]
   106ac:	e8 4f 2b ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { return _M_dataplus._M_p; }
   106b1:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
	if (_M_data() == _M_local_data())
   106b6:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   106bb:	48 39 c7             	cmp    rdi,rax
   106be:	74 0e                	je     106ce <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3be>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   106c0:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   106c5:	48 8d 70 01          	lea    rsi,[rax+0x1]
   106c9:	e8 32 2b ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
   106ce:	48 81 c4 38 01 00 00 	add    rsp,0x138
   106d5:	48 89 e8             	mov    rax,rbp
   106d8:	5b                   	pop    rbx
   106d9:	5d                   	pop    rbp
   106da:	41 5c                	pop    r12
   106dc:	41 5d                	pop    r13
   106de:	41 5e                	pop    r14
   106e0:	41 5f                	pop    r15
   106e2:	c3                   	ret
   106e3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		*--__start = ' ';
   106e8:	c6 45 ff 20          	mov    BYTE PTR [rbp-0x1],0x20
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   106ec:	45 0f b6 2e          	movzx  r13d,BYTE PTR [r14]
		*--__start = ' ';
   106f0:	48 83 ed 01          	sub    rbp,0x1
   106f4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   106fb:	00 00 00 00 
   106ff:	90                   	nop
	  bool __have_sign = true;
   10700:	41 b8 01 00 00 00    	mov    r8d,0x1
   10706:	e9 ed fc ff ff       	jmp    103f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe8>
   1070b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    __width = _M_width;
   10710:	45 0f b7 46 04       	movzx  r8d,WORD PTR [r14+0x4]
      iterator out() { return std::move(_M_out); }
   10715:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
   1071a:	4c 8b 68 10          	mov    r13,QWORD PTR [rax+0x10]
	  if (__width <= __str.size())
   1071e:	4d 39 c7             	cmp    r15,r8
   10721:	0f 83 5e ff ff ff    	jae    10685 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x375>
	  _Align __align = _M_spec._M_align;
   10727:	41 0f b6 16          	movzx  edx,BYTE PTR [r14]
	  char32_t __fill_char = _M_spec._M_fill;
   1072b:	45 8b 4e 08          	mov    r9d,DWORD PTR [r14+0x8]
	  size_t __nfill = __width - __str.size();
   1072f:	4d 29 f8             	sub    r8,r15
	  if (__align == _Align_default)
   10732:	89 d1                	mov    ecx,edx
   10734:	83 e1 03             	and    ecx,0x3
   10737:	75 72                	jne    107ab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x49b>
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
   10739:	83 e2 40             	and    edx,0x40
   1073c:	74 62                	je     107a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x490>
   1073e:	db ac 24 70 01 00 00 	fld    TBYTE PTR [rsp+0x170]
   10745:	d9 e1                	fabs
   10747:	db 2d b3 80 00 00    	fld    TBYTE PTR [rip+0x80b3]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x440>
   1074d:	df e9                	fucomip st,st(1)
   1074f:	dd d8                	fstp   st(0)
   10751:	72 4d                	jb     107a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x490>
   10753:	41 0f b6 03          	movzx  eax,BYTE PTR [r11]
		  if (!__format::__is_xdigit(__narrow_str[0]))
   10757:	48 8d 15 22 58 00 00 	lea    rdx,[rip+0x5822]        # 15f80 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
	      __align = _Align_right;
   1075e:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
   10763:	41 b9 30 00 00 00    	mov    r9d,0x30
		  if (!__format::__is_xdigit(__narrow_str[0]))
   10769:	80 3c 02 0f          	cmp    BYTE PTR [rdx+rax*1],0xf
   1076d:	76 3c                	jbe    107ab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x49b>
	_M_sink->_M_write(__c);
   1076f:	0f be 75 00          	movsx  esi,BYTE PTR [rbp+0x0]
   10773:	4c 89 ef             	mov    rdi,r13
   10776:	4c 89 44 24 18       	mov    QWORD PTR [rsp+0x18],r8
	this->_M_str += __n;
   1077b:	48 83 c5 01          	add    rbp,0x1
   1077f:	89 4c 24 08          	mov    DWORD PTR [rsp+0x8],ecx
	this->_M_len -= __n;
   10783:	49 83 ef 01          	sub    r15,0x1
   10787:	44 89 0c 24          	mov    DWORD PTR [rsp],r9d
   1078b:	e8 80 82 ff ff       	call   8a10 <std::__format::_Sink<char>::_M_write(char)>
      }
   10790:	44 8b 0c 24          	mov    r9d,DWORD PTR [rsp]
   10794:	8b 4c 24 08          	mov    ecx,DWORD PTR [rsp+0x8]
   10798:	4c 8b 44 24 18       	mov    r8,QWORD PTR [rsp+0x18]
   1079d:	eb 0c                	jmp    107ab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x49b>
   1079f:	90                   	nop
	      __align = _Align_right;
   107a0:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
   107a5:	41 b9 20 00 00 00    	mov    r9d,0x20
	  return __format::__write_padded(std::move(__out), __str,
   107ab:	48 89 ea             	mov    rdx,rbp
   107ae:	4c 89 fe             	mov    rsi,r15
   107b1:	4c 89 ef             	mov    rdi,r13
   107b4:	e8 87 82 ff ff       	call   8a40 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
   107b9:	48 89 c5             	mov    rbp,rax
					  __align, __nfill, __fill_char);
   107bc:	e9 d5 fe ff ff       	jmp    10696 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x386>
   107c1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (_M_prec_kind == _WP_value)
   107c8:	3c 02                	cmp    al,0x2
   107ca:	0f 84 30 04 00 00    	je     10c00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
	  size_t __prec = -1;
   107d0:	48 c7 04 24 ff ff ff 	mov    QWORD PTR [rsp],0xffffffffffffffff
   107d7:	ff 
	  else if (_M_prec_kind == _WP_from_arg)
   107d8:	3c 04                	cmp    al,0x4
   107da:	0f 84 98 02 00 00    	je     10a78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x768>
	  switch (_M_spec._M_type)
   107e0:	89 e8                	mov    eax,ebp
   107e2:	48 8d 15 8b 52 00 00 	lea    rdx,[rip+0x528b]        # 15a74 <CSWTCH.1104+0x994>
   107e9:	c0 e8 03             	shr    al,0x3
   107ec:	83 e0 0f             	and    eax,0xf
   107ef:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   107f3:	48 01 d0             	add    rax,rdx
   107f6:	ff e0                	jmp    rax
   107f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   107ff:	00 
      for (; __pos < this->_M_len; ++__pos)
   10800:	48 83 c1 01          	add    rcx,0x1
   10804:	4c 39 f9             	cmp    rcx,r15
   10807:	0f 83 1a 05 00 00    	jae    10d27 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa17>
	if (!traits_type::eq(this->_M_str[__pos], __c))
   1080d:	80 7c 0d 00 30       	cmp    BYTE PTR [rbp+rcx*1+0x0],0x30
   10812:	74 ec                	je     10800 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f0>
   10814:	e9 15 05 00 00       	jmp    10d2e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa1e>
   10819:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  __p = __s.find(__expc); // Find the exponent, if present.
   10820:	0f be 54 24 36       	movsx  edx,BYTE PTR [rsp+0x36]
   10825:	31 c9                	xor    ecx,ecx
   10827:	48 89 ee             	mov    rsi,rbp
   1082a:	4c 89 ff             	mov    rdi,r15
   1082d:	44 88 44 24 28       	mov    BYTE PTR [rsp+0x28],r8b
   10832:	e8 29 33 ff ff       	call   3b60 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>
		    __p = __s.size();
   10837:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
		  __p = __s.find(__expc); // Find the exponent, if present.
   1083b:	49 89 c3             	mov    r11,rax
		    __p = __s.size();
   1083e:	4d 0f 44 df          	cmove  r11,r15
	      if (__trailing_zeros && __prec != 0)
   10842:	80 7c 24 18 00       	cmp    BYTE PTR [rsp+0x18],0x0
   10847:	0f 84 a2 02 00 00    	je     10aef <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7df>
   1084d:	48 83 3c 24 00       	cmp    QWORD PTR [rsp],0x0
   10852:	0f 84 54 08 00 00    	je     110ac <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd9c>
		  __sigfigs = __d - __have_sign;
   10858:	0f b6 44 24 28       	movzx  eax,BYTE PTR [rsp+0x28]
   1085d:	4c 89 da             	mov    rdx,r11
   10860:	4d 89 dc             	mov    r12,r11
   10863:	41 b9 01 00 00 00    	mov    r9d,0x1
   10869:	48 29 c2             	sub    rdx,rax
		  __z = __prec - __sigfigs;
   1086c:	48 29 14 24          	sub    QWORD PTR [rsp],rdx
   10870:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10874:	49 01 c1             	add    r9,rax
   10877:	e9 74 fc ff ff       	jmp    104f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   1087c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_M_spec._M_type != _Pres_A)
   10880:	83 e5 78             	and    ebp,0x78
		__expc = 'p';
   10883:	ba 65 00 00 00       	mov    edx,0x65
   10888:	b8 70 00 00 00       	mov    eax,0x70
   1088d:	40 80 fd 10          	cmp    bpl,0x10
   10891:	0f 44 c2             	cmove  eax,edx
   10894:	45 31 e4             	xor    r12d,r12d
   10897:	88 44 24 36          	mov    BYTE PTR [rsp+0x36],al
	      return __format::to_chars(__b, __e, __v, __fmt);
   1089b:	48 8d ac 24 b1 00 00 	lea    rbp,[rsp+0xb1]
   108a2:	00 
   108a3:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   108aa:	ba 04 00 00 00       	mov    edx,0x4
   108af:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   108b6:	48 89 ef             	mov    rdi,rbp
   108b9:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   108c0:	00 
   108c1:	e8 9a 27 ff ff       	call   3060 <std::to_chars(char*, char*, long double, std::chars_format)@plt>
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   108c6:	41 5f                	pop    r15
   108c8:	48 89 c3             	mov    rbx,rax
   108cb:	58                   	pop    rax
   108cc:	83 fa 4b             	cmp    edx,0x4b
   108cf:	0f 84 0b 04 00 00    	je     10ce0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9d0>
	  char* __end = __buf + sizeof(__buf);
   108d5:	48 8d 84 24 30 01 00 	lea    rax,[rsp+0x130]
   108dc:	00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   108dd:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
   108e2:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   108e9:	00 
	  char* __end = __buf + sizeof(__buf);
   108ea:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
	  if (__upper)
   108ef:	45 84 e4             	test   r12b,r12b
   108f2:	0f 84 cd fa ff ff    	je     103c5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb5>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   108f8:	48 39 dd             	cmp    rbp,rbx
   108fb:	0f 84 c4 fa ff ff    	je     103c5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb5>
   10901:	49 89 ec             	mov    r12,rbp
   10904:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   1090b:	00 00 00 00 
   1090f:	90                   	nop
		*__p = std::toupper(*__p);
   10910:	41 0f be 3c 24       	movsx  edi,BYTE PTR [r12]
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   10915:	49 83 c4 01          	add    r12,0x1
		*__p = std::toupper(*__p);
   10919:	e8 32 2a ff ff       	call   3350 <toupper@plt>
   1091e:	41 88 44 24 ff       	mov    BYTE PTR [r12-0x1],al
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   10923:	49 39 dc             	cmp    r12,rbx
   10926:	75 e8                	jne    10910 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
   10928:	e9 98 fa ff ff       	jmp    103c5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb5>
   1092d:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (_M_spec._M_type != _Pres_A)
   10930:	83 e5 78             	and    ebp,0x78
		__expc = 'p';
   10933:	ba 50 00 00 00       	mov    edx,0x50
   10938:	b8 70 00 00 00       	mov    eax,0x70
   1093d:	41 bc 01 00 00 00    	mov    r12d,0x1
   10943:	40 80 fd 10          	cmp    bpl,0x10
   10947:	0f 44 c2             	cmove  eax,edx
   1094a:	88 44 24 36          	mov    BYTE PTR [rsp+0x36],al
   1094e:	e9 48 ff ff ff       	jmp    1089b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x58b>
   10953:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   10958:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   1095f:	00 
   10960:	b9 06 00 00 00       	mov    ecx,0x6
   10965:	45 31 e4             	xor    r12d,r12d
	  char __expc = 'e';
   10968:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      __fmt = chars_format::fixed;
   1096d:	bd 02 00 00 00       	mov    ebp,0x2
	  bool __trailing_zeros = false;
   10972:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10977:	4c 8d ac 24 b1 00 00 	lea    r13,[rsp+0xb1]
   1097e:	00 
   1097f:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10986:	89 ea                	mov    edx,ebp
   10988:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   1098f:	4c 89 ef             	mov    rdi,r13
   10992:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   10999:	00 
   1099a:	e8 71 28 ff ff       	call   3210 <std::to_chars(char*, char*, long double, std::chars_format, int)@plt>
   1099f:	49 89 c0             	mov    r8,rax
   109a2:	48 89 d0             	mov    rax,rdx
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   109a5:	5a                   	pop    rdx
   109a6:	59                   	pop    rcx
   109a7:	4c 89 c3             	mov    rbx,r8
   109aa:	83 f8 4b             	cmp    eax,0x4b
   109ad:	0f 84 5d 02 00 00    	je     10c10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
	  char* __end = __buf + sizeof(__buf);
   109b3:	48 8d 84 24 30 01 00 	lea    rax,[rsp+0x130]
   109ba:	00 
	  char* __start = __buf + 1; // reserve space for sign
   109bb:	4c 89 ed             	mov    rbp,r13
	  char* __end = __buf + sizeof(__buf);
   109be:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
   109c3:	e9 27 ff ff ff       	jmp    108ef <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5df>
   109c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   109cf:	00 
	  switch (_M_spec._M_type)
   109d0:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   109d7:	00 
   109d8:	b9 06 00 00 00       	mov    ecx,0x6
	      __upper = true;
   109dd:	41 bc 01 00 00 00    	mov    r12d,0x1
   109e3:	eb 83                	jmp    10968 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x658>
   109e5:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   109e8:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   109ef:	00 
   109f0:	b9 06 00 00 00       	mov    ecx,0x6
   109f5:	45 31 e4             	xor    r12d,r12d
   109f8:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      __trailing_zeros = true;
   109fd:	c6 44 24 18 01       	mov    BYTE PTR [rsp+0x18],0x1
	      __fmt = chars_format::general;
   10a02:	bd 03 00 00 00       	mov    ebp,0x3
	      break;
   10a07:	e9 6b ff ff ff       	jmp    10977 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x667>
   10a0c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
   10a10:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10a17:	00 
   10a18:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   10a1d:	c6 44 24 36 45       	mov    BYTE PTR [rsp+0x36],0x45
	      __upper = true;
   10a22:	41 bc 01 00 00 00    	mov    r12d,0x1
   10a28:	eb d3                	jmp    109fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6ed>
   10a2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   10a30:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10a37:	00 
   10a38:	b9 06 00 00 00       	mov    ecx,0x6
   10a3d:	45 31 e4             	xor    r12d,r12d
   10a40:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	  bool __trailing_zeros = false;
   10a45:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
	      __fmt = chars_format::scientific;
   10a4a:	bd 01 00 00 00       	mov    ebp,0x1
	      break;
   10a4f:	e9 23 ff ff ff       	jmp    10977 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x667>
   10a54:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
   10a58:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10a5f:	00 
   10a60:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   10a65:	c6 44 24 36 45       	mov    BYTE PTR [rsp+0x36],0x45
	      __upper = true;
   10a6a:	41 bc 01 00 00 00    	mov    r12d,0x1
   10a70:	eb d3                	jmp    10a45 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x735>
   10a72:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
   10a78:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
   10a7c:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
   10a81:	e8 2a 31 ff ff       	call   3bb0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   10a86:	48 89 04 24          	mov    QWORD PTR [rsp],rax
   10a8a:	e9 51 fd ff ff       	jmp    107e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d0>
	  char __expc = 'e';
   10a8f:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10a94:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
		__fmt = chars_format::general;
   10a97:	bd 03 00 00 00       	mov    ebp,0x3
	  bool __upper = false;
   10a9c:	45 31 e4             	xor    r12d,r12d
	  bool __trailing_zeros = false;
   10a9f:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
   10aa4:	e9 ce fe ff ff       	jmp    10977 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x667>
   10aa9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		*--__start = '+';
   10ab0:	c6 45 ff 2b          	mov    BYTE PTR [rbp-0x1],0x2b
	  bool __have_sign = true;
   10ab4:	41 b8 01 00 00 00    	mov    r8d,0x1
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   10aba:	45 0f b6 2e          	movzx  r13d,BYTE PTR [r14]
		*--__start = '+';
   10abe:	48 83 ed 01          	sub    rbp,0x1
   10ac2:	e9 31 f9 ff ff       	jmp    103f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe8>
   10ac7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   10ace:	00 00 
   10ad0:	41 0f b7 7e 04       	movzx  edi,WORD PTR [r14+0x4]
   10ad5:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
   10ada:	4c 89 1c 24          	mov    QWORD PTR [rsp],r11
   10ade:	e8 ad 31 ff ff       	call   3c90 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   10ae3:	4c 8b 1c 24          	mov    r11,QWORD PTR [rsp]
   10ae7:	49 89 c0             	mov    r8,rax
   10aea:	e9 26 fc ff ff       	jmp    10715 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x405>
	      size_t __z = 0;   // Number of trailing zeros to add.
   10aef:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
   10af6:	00 
	      if (__trailing_zeros && __prec != 0)
   10af7:	4d 89 dc             	mov    r12,r11
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10afa:	41 b9 01 00 00 00    	mov    r9d,0x1
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
   10b00:	48 83 7c 24 58 00    	cmp    QWORD PTR [rsp+0x58],0x0
   10b06:	75 11                	jne    10b19 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x809>
   10b08:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
   10b0d:	48 29 d8             	sub    rax,rbx
   10b10:	4c 39 c8             	cmp    rax,r9
   10b13:	0f 83 2f 05 00 00    	jae    11048 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd38>
		      __dynbuf.reserve(__s.size() + __extras);
   10b19:	4c 8d 6c 24 50       	lea    r13,[rsp+0x50]
   10b1e:	4b 8d 34 0f          	lea    rsi,[r15+r9*1]
   10b22:	4c 89 5c 24 18       	mov    QWORD PTR [rsp+0x18],r11
   10b27:	4c 89 ef             	mov    rdi,r13
   10b2a:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   10b2f:	e8 ec 4d ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
		      if (__dynbuf.empty())
   10b34:	48 83 7c 24 58 00    	cmp    QWORD PTR [rsp+0x58],0x0
   10b3a:	4c 8b 5c 24 18       	mov    r11,QWORD PTR [rsp+0x18]
   10b3f:	0f 85 33 02 00 00    	jne    10d78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa68>
	return _M_replace(size_type(0), this->size(), __s, __n);
   10b45:	4d 39 e7             	cmp    r15,r12
   10b48:	4d 89 e0             	mov    r8,r12
   10b4b:	48 89 e9             	mov    rcx,rbp
   10b4e:	4c 89 ef             	mov    rdi,r13
   10b51:	4d 0f 46 c7          	cmovbe r8,r15
   10b55:	31 d2                	xor    edx,edx
   10b57:	31 f6                	xor    esi,esi
   10b59:	4c 89 5c 24 18       	mov    QWORD PTR [rsp+0x18],r11
   10b5e:	e8 ed 38 ff ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  if (__d == __p)
   10b63:	4c 8b 5c 24 18       	mov    r11,QWORD PTR [rsp+0x18]
   10b68:	4d 39 dc             	cmp    r12,r11
   10b6b:	0f 84 95 05 00 00    	je     11106 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdf6>
			  if (__z)
   10b71:	48 83 3c 24 00       	cmp    QWORD PTR [rsp],0x0
   10b76:	0f 85 6c 05 00 00    	jne    110e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdd8>
    if (__pos > __size)
   10b7c:	4d 39 e7             	cmp    r15,r12
   10b7f:	0f 82 69 06 00 00    	jb     111ee <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xede>
      { return _M_string_length; }
   10b85:	48 8b 74 24 58       	mov    rsi,QWORD PTR [rsp+0x58]
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
   10b8a:	4d 29 e7             	sub    r15,r12
	return basic_string_view{_M_str + __pos, __rlen};
   10b8d:	4a 8d 4c 25 00       	lea    rcx,[rbp+r12*1+0x0]
	if (this->max_size() - (this->size() - __n1) < __n2)
   10b92:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
   10b99:	ff ff 7f 
   10b9c:	48 29 f0             	sub    rax,rsi
   10b9f:	4c 39 f8             	cmp    rax,r15
   10ba2:	0f 82 3a 06 00 00    	jb     111e2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xed2>
      { return _M_dataplus._M_p; }
   10ba8:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
	if (_M_data() == _M_local_data())
   10bad:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
      const size_type __len = __n + this->size();
   10bb2:	4a 8d 2c 3e          	lea    rbp,[rsi+r15*1]
   10bb6:	48 39 d8             	cmp    rax,rbx
   10bb9:	0f 84 59 05 00 00    	je     11118 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe08>
	return _M_is_local() ? size_type(_S_local_capacity)
   10bbf:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
      if (__len <= this->capacity())
   10bc4:	48 39 ea             	cmp    rdx,rbp
   10bc7:	0f 82 04 05 00 00    	jb     110d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdc1>
	  if (__n)
   10bcd:	4d 85 ff             	test   r15,r15
   10bd0:	74 1e                	je     10bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
   10bd2:	48 8d 3c 30          	lea    rdi,[rax+rsi*1]
	if (__n == 1)
   10bd6:	49 83 ff 01          	cmp    r15,0x1
   10bda:	0f 84 42 05 00 00    	je     11122 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe12>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   10be0:	4c 89 fa             	mov    rdx,r15
   10be3:	48 89 ce             	mov    rsi,rcx
   10be6:	e8 c5 25 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
   10beb:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
      { _M_string_length = __length; }
   10bf0:	48 89 6c 24 58       	mov    QWORD PTR [rsp+0x58],rbp
	__c1 = __c2;
   10bf5:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
   10bf9:	e9 b2 01 00 00       	jmp    10db0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa0>
   10bfe:	66 90                	xchg   ax,ax
	    __prec = _M_prec;
   10c00:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   10c04:	48 89 04 24          	mov    QWORD PTR [rsp],rax
   10c08:	e9 d3 fb ff ff       	jmp    107e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d0>
   10c0d:	0f 1f 00             	nop    DWORD PTR [rax]
	      size_t __guess = 8 + __prec;
   10c10:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
   10c14:	41 bf 01 00 00 00    	mov    r15d,0x1
   10c1a:	48 8d 70 08          	lea    rsi,[rax+0x8]
	      if (__fmt == chars_format::fixed) // +ddd.prec
   10c1e:	83 fd 02             	cmp    ebp,0x2
   10c21:	0f 84 89 02 00 00    	je     10eb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xba0>
	      if (__guess <= sizeof(__buf)) [[unlikely]]
   10c27:	48 81 fe 80 00 00 00 	cmp    rsi,0x80
   10c2e:	0f 86 c1 00 00 00    	jbe    10cf5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9e5>
	      __dynbuf.reserve(__guess);
   10c34:	4c 8d 6c 24 50       	lea    r13,[rsp+0x50]
   10c39:	4c 89 ef             	mov    rdi,r13
   10c3c:	e8 df 4c ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   10c41:	4c 89 6c 24 20       	mov    QWORD PTR [rsp+0x20],r13
   10c46:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
	if (_M_data() == _M_local_data())
   10c4b:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   10c50:	48 39 c2             	cmp    rdx,rax
   10c53:	0f 84 69 04 00 00    	je     110c2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdb2>
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
   10c59:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   10c5e:	48 8d 34 00          	lea    rsi,[rax+rax*1]
		    __res = __to_chars(__p + 1, __p + __n - 1);
   10c62:	48 8d 5e ff          	lea    rbx,[rsi-0x1]
      reserve(__n);
   10c66:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
   10c6b:	e8 b0 4c ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   10c70:	4c 8b 6c 24 50       	mov    r13,QWORD PTR [rsp+0x50]
   10c75:	49 8d 74 1d 00       	lea    rsi,[r13+rbx*1+0x0]
   10c7a:	49 8d 7d 01          	lea    rdi,[r13+0x1]
	    if (__use_prec)
   10c7e:	45 84 ff             	test   r15b,r15b
   10c81:	0f 85 0b 03 00 00    	jne    10f92 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc82>
	    else if (__fmt != chars_format{})
   10c87:	85 ed                	test   ebp,ebp
   10c89:	0f 85 5a 01 00 00    	jne    10de9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xad9>
	      return __format::to_chars(__b, __e, __v);
   10c8f:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10c96:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10c9d:	e8 be 24 ff ff       	call   3160 <std::to_chars(char*, char*, long double)@plt>
   10ca2:	48 89 c3             	mov    rbx,rax
   10ca5:	48 89 d0             	mov    rax,rdx
   10ca8:	5a                   	pop    rdx
   10ca9:	59                   	pop    rcx
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
   10caa:	85 c0                	test   eax,eax
   10cac:	0f 85 6e 02 00 00    	jne    10f20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc10>
   10cb2:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
   10cb7:	48 89 d8             	mov    rax,rbx
   10cba:	4c 29 e8             	sub    rax,r13
      { _M_string_length = __length; }
   10cbd:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
   10cc2:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
   10cc6:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
		  __start = __dynbuf.data() + 1; // reserve space for sign
   10ccb:	48 8d 68 01          	lea    rbp,[rax+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   10ccf:	48 03 44 24 58       	add    rax,QWORD PTR [rsp+0x58]
   10cd4:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   10cd9:	e9 11 fc ff ff       	jmp    108ef <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5df>
   10cde:	66 90                	xchg   ax,ax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10ce0:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   10ce5:	45 31 ff             	xor    r15d,r15d
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10ce8:	bd 04 00 00 00       	mov    ebp,0x4
   10ced:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10cf4:	00 
		__guess = sizeof(__buf) * 2;
   10cf5:	be 00 01 00 00       	mov    esi,0x100
   10cfa:	e9 35 ff ff ff       	jmp    10c34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x924>
   10cff:	90                   	nop
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10d00:	45 31 c9             	xor    r9d,r9d
   10d03:	49 39 c7             	cmp    r15,rax
   10d06:	41 0f 94 c1          	sete   r9b
		  if (__trailing_zeros)
   10d0a:	80 7c 24 18 00       	cmp    BYTE PTR [rsp+0x18],0x0
   10d0f:	0f 84 8b 01 00 00    	je     10ea0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb90>
		      if (__s[__have_sign] != '0')
   10d15:	41 0f b6 c0          	movzx  eax,r8b
		    __p = __s.size();
   10d19:	4d 89 fc             	mov    r12,r15
		      if (__s[__have_sign] != '0')
   10d1c:	80 7c 05 00 30       	cmp    BYTE PTR [rbp+rax*1+0x0],0x30
   10d21:	0f 85 b3 f7 ff ff    	jne    104da <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1ca>
      return npos;
   10d27:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
   10d2e:	4c 89 e2             	mov    rdx,r12
   10d31:	48 29 ca             	sub    rdx,rcx
   10d34:	e9 ab f7 ff ff       	jmp    104e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d4>
   10d39:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  std::construct_at(&_M_loc);
   10d40:	48 8d 70 18          	lea    rsi,[rax+0x18]
   10d44:	48 89 c3             	mov    rbx,rax
      std::locale locale() { return _M_loc.value(); }
   10d47:	4c 8d 6c 24 48       	lea    r13,[rsp+0x48]
   10d4c:	48 89 f7             	mov    rdi,rsi
   10d4f:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
   10d53:	e8 18 26 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
   10d58:	c6 43 20 01          	mov    BYTE PTR [rbx+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
   10d5c:	48 8b 34 24          	mov    rsi,QWORD PTR [rsp]
   10d60:	e9 d9 f7 ff ff       	jmp    1053e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x22e>
   10d65:	0f 1f 00             	nop    DWORD PTR [rax]
	      size_t __z = 0;   // Number of trailing zeros to add.
   10d68:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
   10d6f:	00 
   10d70:	e9 7b f7 ff ff       	jmp    104f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   10d75:	0f 1f 00             	nop    DWORD PTR [rax]
   10d78:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
			  __dynbuf.insert(__p, __extras, '0');
   10d7d:	b9 30 00 00 00       	mov    ecx,0x30
   10d82:	4c 89 e6             	mov    rsi,r12
   10d85:	4c 89 ef             	mov    rdi,r13
   10d88:	4c 89 1c 24          	mov    QWORD PTR [rsp],r11
   10d8c:	4c 89 ca             	mov    rdx,r9
   10d8f:	e8 cc 37 ff ff       	call   4560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>
			  if (__d == __p)
   10d94:	4c 8b 1c 24          	mov    r11,QWORD PTR [rsp]
   10d98:	4d 39 dc             	cmp    r12,r11
   10d9b:	75 13                	jne    10db0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa0>
			    __dynbuf[__p] = '.';
   10d9d:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
   10da2:	42 c6 04 20 2e       	mov    BYTE PTR [rax+r12*1],0x2e
   10da7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   10dae:	00 00 
      { return _M_string_length; }
   10db0:	4c 8b 7c 24 58       	mov    r15,QWORD PTR [rsp+0x58]
      { return _M_dataplus._M_p; }
   10db5:	48 8b 6c 24 50       	mov    rbp,QWORD PTR [rsp+0x50]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   10dba:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   10dbe:	4c 8d a4 24 80 00 00 	lea    r12,[rsp+0x80]
   10dc5:	00 
   10dc6:	c6 84 24 80 00 00 00 	mov    BYTE PTR [rsp+0x80],0x0
   10dcd:	00 
   10dce:	4c 89 64 24 70       	mov    QWORD PTR [rsp+0x70],r12
      { _M_string_length = __length; }
   10dd3:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
   10dda:	00 00 
   10ddc:	a8 20                	test   al,0x20
   10dde:	0f 85 3d f7 ff ff    	jne    10521 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x211>
   10de4:	e9 74 f8 ff ff       	jmp    1065d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34d>
	      return __format::to_chars(__b, __e, __v, __fmt);
   10de9:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10df0:	89 ea                	mov    edx,ebp
   10df2:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10df9:	e8 62 22 ff ff       	call   3060 <std::to_chars(char*, char*, long double, std::chars_format)@plt>
   10dfe:	5e                   	pop    rsi
   10dff:	5f                   	pop    rdi
   10e00:	48 89 c3             	mov    rbx,rax
   10e03:	48 89 d0             	mov    rax,rdx
   10e06:	e9 9f fe ff ff       	jmp    10caa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x99a>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10e0b:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
	  bool __upper = false;
   10e0e:	45 31 e4             	xor    r12d,r12d
   10e11:	e9 52 fb ff ff       	jmp    10968 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x658>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10e16:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
   10e19:	e9 bf fb ff ff       	jmp    109dd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6cd>
   10e1e:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
   10e21:	e9 3f fc ff ff       	jmp    10a65 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x755>
   10e26:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
   10e29:	e9 ef fb ff ff       	jmp    10a1d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x70d>
	  char __expc = 'e';
   10e2e:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10e33:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
	  bool __upper = false;
   10e36:	45 31 e4             	xor    r12d,r12d
   10e39:	e9 bf fb ff ff       	jmp    109fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6ed>
	      if (_M_spec._M_type != _Pres_A)
   10e3e:	83 e5 78             	and    ebp,0x78
   10e41:	ba 70 00 00 00       	mov    edx,0x70
   10e46:	b8 65 00 00 00       	mov    eax,0x65
   10e4b:	40 80 fd 10          	cmp    bpl,0x10
   10e4f:	0f 45 c2             	cmovne eax,edx
   10e52:	45 31 e4             	xor    r12d,r12d
   10e55:	88 44 24 36          	mov    BYTE PTR [rsp+0x36],al
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10e59:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
   10e5e:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
	      __fmt = chars_format::hex;
   10e61:	bd 04 00 00 00       	mov    ebp,0x4
   10e66:	e9 0c fb ff ff       	jmp    10977 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x667>
   10e6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
   10e70:	83 e5 78             	and    ebp,0x78
		__expc = 'p';
   10e73:	ba 50 00 00 00       	mov    edx,0x50
   10e78:	b8 70 00 00 00       	mov    eax,0x70
   10e7d:	41 bc 01 00 00 00    	mov    r12d,0x1
   10e83:	40 80 fd 10          	cmp    bpl,0x10
   10e87:	0f 44 c2             	cmove  eax,edx
   10e8a:	88 44 24 36          	mov    BYTE PTR [rsp+0x36],al
   10e8e:	eb c9                	jmp    10e59 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb49>
	  char __expc = 'e';
   10e90:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10e95:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
	  bool __upper = false;
   10e98:	45 31 e4             	xor    r12d,r12d
   10e9b:	e9 a5 fb ff ff       	jmp    10a45 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x735>
	      size_t __z = 0;   // Number of trailing zeros to add.
   10ea0:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
   10ea7:	00 
		    __p = __s.size();
   10ea8:	4d 89 fc             	mov    r12,r15
   10eab:	e9 40 f6 ff ff       	jmp    104f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   10eb0:	48 89 74 24 20       	mov    QWORD PTR [rsp+0x20],rsi
			__builtin_frexpl(__v, &__exp);
   10eb5:	48 8d bc 24 90 00 00 	lea    rdi,[rsp+0x90]
   10ebc:	00 
		      int __exp{};
   10ebd:	c7 84 24 90 00 00 00 	mov    DWORD PTR [rsp+0x90],0x0
   10ec4:	00 00 00 00 
			__builtin_frexpl(__v, &__exp);
   10ec8:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10ecf:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10ed6:	e8 15 24 ff ff       	call   32f0 <frexpl@plt>
   10edb:	dd d8                	fstp   st(0)
		      if (__exp > 0)
   10edd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [rsp+0xa0]
   10ee4:	41 5a                	pop    r10
   10ee6:	41 5b                	pop    r11
   10ee8:	48 8b 74 24 20       	mov    rsi,QWORD PTR [rsp+0x20]
   10eed:	85 c0                	test   eax,eax
   10eef:	7e 23                	jle    10f14 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc04>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
   10ef1:	69 d0 a4 0f 00 00    	imul   edx,eax,0xfa4
   10ef7:	48 89 d0             	mov    rax,rdx
   10efa:	48 69 d2 f9 65 56 3b 	imul   rdx,rdx,0x3b5665f9
   10f01:	48 c1 ea 20          	shr    rdx,0x20
   10f05:	29 d0                	sub    eax,edx
   10f07:	d1 e8                	shr    eax,1
   10f09:	01 d0                	add    eax,edx
   10f0b:	c1 e8 0d             	shr    eax,0xd
   10f0e:	83 c0 01             	add    eax,0x1
   10f11:	48 01 c6             	add    rsi,rax
   10f14:	41 bf 01 00 00 00    	mov    r15d,0x1
   10f1a:	e9 08 fd ff ff       	jmp    10c27 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x917>
   10f1f:	90                   	nop
   10f20:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
   10f27:	00 00 
      { return _M_dataplus._M_p; }
   10f29:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
   10f2e:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   10f31:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   10f36:	83 f8 4b             	cmp    eax,0x4b
   10f39:	0f 84 0c fd ff ff    	je     10c4b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x93b>
		  __start = __dynbuf.data() + 1; // reserve space for sign
   10f3f:	48 8d 6a 01          	lea    rbp,[rdx+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   10f43:	48 03 54 24 58       	add    rdx,QWORD PTR [rsp+0x58]
   10f48:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
   10f4d:	e9 9d f9 ff ff       	jmp    108ef <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5df>
   10f52:	48 8b 94 24 90 00 00 	mov    rdx,QWORD PTR [rsp+0x90]
   10f59:	00 
	if (_M_data() == _M_local_data())
   10f5a:	4c 8d 84 24 a0 00 00 	lea    r8,[rsp+0xa0]
   10f61:	00 
   10f62:	4c 39 c2             	cmp    rdx,r8
   10f65:	74 72                	je     10fd9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcc9>
      { return _M_string_length; }
   10f67:	f3 0f 6f 84 24 98 00 	movdqu xmm0,XMMWORD PTR [rsp+0x98]
   10f6e:	00 00 
      { _M_dataplus._M_p = __p; }
   10f70:	48 89 54 24 70       	mov    QWORD PTR [rsp+0x70],rdx
      { _M_string_length = __length; }
   10f75:	0f 11 44 24 78       	movups XMMWORD PTR [rsp+0x78],xmm0
      { _M_dataplus._M_p = __p; }
   10f7a:	4c 89 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r8
   10f81:	00 
   10f82:	4c 8d 84 24 a0 00 00 	lea    r8,[rsp+0xa0]
   10f89:	00 
   10f8a:	4c 89 c1             	mov    rcx,r8
   10f8d:	e9 3f f6 ff ff       	jmp    105d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c1>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10f92:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10f99:	89 ea                	mov    edx,ebp
   10f9b:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10fa2:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   10fa6:	e8 65 22 ff ff       	call   3210 <std::to_chars(char*, char*, long double, std::chars_format, int)@plt>
   10fab:	41 58                	pop    r8
   10fad:	41 59                	pop    r9
   10faf:	48 89 c3             	mov    rbx,rax
   10fb2:	48 89 d0             	mov    rax,rdx
   10fb5:	e9 f0 fc ff ff       	jmp    10caa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x99a>
	  char __expc = 'e';
   10fba:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	  bool __upper = false;
   10fbf:	45 31 e4             	xor    r12d,r12d
	  chars_format __fmt{};
   10fc2:	31 ed                	xor    ebp,ebp
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   10fc4:	45 31 ff             	xor    r15d,r15d
	  size_t __prec = 6;
   10fc7:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10fce:	00 
		__guess = sizeof(__buf) * 2;
   10fcf:	be 00 01 00 00       	mov    esi,0x100
   10fd4:	e9 5b fc ff ff       	jmp    10c34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x924>
	    if (_M_string_length > _S_local_capacity)
   10fd9:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   10fe0:	00 
   10fe1:	48 89 d7             	mov    rdi,rdx
		if (__str.size())
   10fe4:	48 85 d2             	test   rdx,rdx
   10fe7:	74 49                	je     11032 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd22>
	if (__n == 1)
   10fe9:	48 83 fa 01          	cmp    rdx,0x1
   10fed:	0f 84 92 01 00 00    	je     11185 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe75>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   10ff3:	89 d1                	mov    ecx,edx
   10ff5:	83 fa 08             	cmp    edx,0x8
   10ff8:	0f 83 33 01 00 00    	jae    11131 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe21>
   10ffe:	f6 c2 04             	test   dl,0x4
   11001:	0f 85 9a 01 00 00    	jne    111a1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe91>
   11007:	85 d2                	test   edx,edx
   11009:	74 21                	je     1102c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1c>
   1100b:	0f b6 b4 24 a0 00 00 	movzx  esi,BYTE PTR [rsp+0xa0]
   11012:	00 
   11013:	83 e2 02             	and    edx,0x2
   11016:	40 88 30             	mov    BYTE PTR [rax],sil
   11019:	0f 85 a6 01 00 00    	jne    111c5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeb5>
   1101f:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   11024:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   1102b:	00 
      { return _M_string_length; }
   1102c:	48 89 d7             	mov    rdi,rdx
      { return _M_dataplus._M_p; }
   1102f:	48 89 c1             	mov    rcx,rax
      { _M_string_length = __length; }
   11032:	48 89 7c 24 78       	mov    QWORD PTR [rsp+0x78],rdi
	__c1 = __c2;
   11037:	c6 04 39 00          	mov    BYTE PTR [rcx+rdi*1],0x0
      { return _M_dataplus._M_p; }
   1103b:	48 8b 8c 24 90 00 00 	mov    rcx,QWORD PTR [rsp+0x90]
   11042:	00 
      }
   11043:	e9 89 f5 ff ff       	jmp    105d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c1>
		      __builtin_memmove(__start + __p + __extras,
   11048:	4b 8d 3c 21          	lea    rdi,[r9+r12*1]
					__start + __p,
   1104c:	4e 8d 6c 25 00       	lea    r13,[rbp+r12*1+0x0]
		      __builtin_memmove(__start + __p + __extras,
   11051:	4c 89 fa             	mov    rdx,r15
   11054:	4c 89 5c 24 20       	mov    QWORD PTR [rsp+0x20],r11
   11059:	4c 29 e2             	sub    rdx,r12
   1105c:	48 01 ef             	add    rdi,rbp
   1105f:	4c 89 ee             	mov    rsi,r13
   11062:	4c 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],r9
   11067:	e8 b4 22 ff ff       	call   3320 <memmove@plt>
		      if (__d == __p)
   1106c:	4c 8b 5c 24 20       	mov    r11,QWORD PTR [rsp+0x20]
   11071:	4c 8b 4c 24 18       	mov    r9,QWORD PTR [rsp+0x18]
   11076:	4d 39 dc             	cmp    r12,r11
   11079:	75 0a                	jne    11085 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd75>
			__start[__p++] = '.';
   1107b:	41 c6 45 00 2e       	mov    BYTE PTR [r13+0x0],0x2e
		      __builtin_memset(__start + __p, '0', __z);
   11080:	4e 8d 6c 25 01       	lea    r13,[rbp+r12*1+0x1]
   11085:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
   11089:	be 30 00 00 00       	mov    esi,0x30
   1108e:	4c 89 ef             	mov    rdi,r13
   11091:	4c 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],r9
   11096:	e8 a5 20 ff ff       	call   3140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
   1109b:	4c 8b 4c 24 18       	mov    r9,QWORD PTR [rsp+0x18]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   110a0:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
		      __narrow_str = {__s.data(), __s.size() + __extras};
   110a4:	4d 01 cf             	add    r15,r9
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   110a7:	e9 12 fd ff ff       	jmp    10dbe <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaae>
	      if (__trailing_zeros && __prec != 0)
   110ac:	4d 89 dc             	mov    r12,r11
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   110af:	41 b9 01 00 00 00    	mov    r9d,0x1
   110b5:	e9 46 fa ff ff       	jmp    10b00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7f0>
		    __p = __s.size();
   110ba:	4d 89 fc             	mov    r12,r15
   110bd:	e9 f4 f3 ff ff       	jmp    104b6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1a6>
   110c2:	bb 1d 00 00 00       	mov    ebx,0x1d
   110c7:	be 1e 00 00 00       	mov    esi,0x1e
   110cc:	e9 95 fb ff ff       	jmp    10c66 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x956>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
   110d1:	4d 89 f8             	mov    r8,r15
   110d4:	31 d2                	xor    edx,edx
   110d6:	4c 89 ef             	mov    rdi,r13
   110d9:	e8 82 64 ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
   110de:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
   110e3:	e9 08 fb ff ff       	jmp    10bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   110e8:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
   110ec:	48 8b 74 24 58       	mov    rsi,QWORD PTR [rsp+0x58]
   110f1:	31 d2                	xor    edx,edx
   110f3:	4c 89 ef             	mov    rdi,r13
   110f6:	41 b8 30 00 00 00    	mov    r8d,0x30
   110fc:	e8 5f 32 ff ff       	call   4360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>
   11101:	e9 76 fa ff ff       	jmp    10b7c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x86c>
	this->push_back(__c);
   11106:	be 2e 00 00 00       	mov    esi,0x2e
   1110b:	4c 89 ef             	mov    rdi,r13
   1110e:	e8 9d 6d ff ff       	call   7eb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
	return *this;
   11113:	e9 59 fa ff ff       	jmp    10b71 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x861>
	return _M_is_local() ? size_type(_S_local_capacity)
   11118:	ba 0f 00 00 00       	mov    edx,0xf
   1111d:	e9 a2 fa ff ff       	jmp    10bc4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8b4>
   11122:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   11125:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
   11127:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
      }
   1112c:	e9 bf fa ff ff       	jmp    10bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   11131:	48 8b 8c 24 a0 00 00 	mov    rcx,QWORD PTR [rsp+0xa0]
   11138:	00 
   11139:	4c 89 c7             	mov    rdi,r8
   1113c:	48 89 08             	mov    QWORD PTR [rax],rcx
   1113f:	89 d1                	mov    ecx,edx
   11141:	49 8b 74 08 f8       	mov    rsi,QWORD PTR [r8+rcx*1-0x8]
   11146:	48 89 74 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rsi
   1114b:	48 8d 70 08          	lea    rsi,[rax+0x8]
   1114f:	48 83 e6 f8          	and    rsi,0xfffffffffffffff8
   11153:	48 29 f0             	sub    rax,rsi
   11156:	48 89 c1             	mov    rcx,rax
   11159:	48 29 c7             	sub    rdi,rax
   1115c:	01 d1                	add    ecx,edx
   1115e:	83 e1 f8             	and    ecx,0xfffffff8
   11161:	83 f9 08             	cmp    ecx,0x8
   11164:	0f 82 b5 fe ff ff    	jb     1101f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0f>
   1116a:	83 e1 f8             	and    ecx,0xfffffff8
   1116d:	31 c0                	xor    eax,eax
   1116f:	89 c2                	mov    edx,eax
   11171:	83 c0 08             	add    eax,0x8
   11174:	4c 8b 0c 17          	mov    r9,QWORD PTR [rdi+rdx*1]
   11178:	4c 89 0c 16          	mov    QWORD PTR [rsi+rdx*1],r9
   1117c:	39 c8                	cmp    eax,ecx
   1117e:	72 ef                	jb     1116f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe5f>
   11180:	e9 9a fe ff ff       	jmp    1101f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0f>
	__c1 = __c2;
   11185:	0f b6 94 24 a0 00 00 	movzx  edx,BYTE PTR [rsp+0xa0]
   1118c:	00 
   1118d:	88 10                	mov    BYTE PTR [rax],dl
      { return _M_string_length; }
   1118f:	48 8b bc 24 98 00 00 	mov    rdi,QWORD PTR [rsp+0x98]
   11196:	00 
      { return _M_dataplus._M_p; }
   11197:	48 8b 4c 24 70       	mov    rcx,QWORD PTR [rsp+0x70]
      }
   1119c:	e9 91 fe ff ff       	jmp    11032 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd22>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   111a1:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [rsp+0xa0]
   111a8:	89 10                	mov    DWORD PTR [rax],edx
   111aa:	41 8b 54 08 fc       	mov    edx,DWORD PTR [r8+rcx*1-0x4]
   111af:	89 54 08 fc          	mov    DWORD PTR [rax+rcx*1-0x4],edx
   111b3:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   111b8:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   111bf:	00 
   111c0:	e9 67 fe ff ff       	jmp    1102c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1c>
   111c5:	41 0f b7 54 08 fe    	movzx  edx,WORD PTR [r8+rcx*1-0x2]
   111cb:	66 89 54 08 fe       	mov    WORD PTR [rax+rcx*1-0x2],dx
   111d0:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   111d5:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   111dc:	00 
   111dd:	e9 4a fe ff ff       	jmp    1102c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1c>
	  __throw_length_error(__N(__s));
   111e2:	48 8d 3d d2 3f 00 00 	lea    rdi,[rip+0x3fd2]        # 151bb <CSWTCH.1104+0xdb>
   111e9:	e8 42 1f ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
   111ee:	4c 89 f9             	mov    rcx,r15
   111f1:	4c 89 e2             	mov    rdx,r12
   111f4:	48 8d 35 2d 40 00 00 	lea    rsi,[rip+0x402d]        # 15228 <CSWTCH.1104+0x148>
   111fb:	31 c0                	xor    eax,eax
   111fd:	48 8d 3d fc 41 00 00 	lea    rdi,[rip+0x41fc]        # 15400 <CSWTCH.1104+0x320>
   11204:	e8 d7 20 ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
   11209:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000011210 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   11210:	41 57                	push   r15
   11212:	41 56                	push   r14
   11214:	41 55                	push   r13
   11216:	41 54                	push   r12
   11218:	49 89 fc             	mov    r12,rdi
   1121b:	55                   	push   rbp
   1121c:	53                   	push   rbx
   1121d:	48 81 ec 48 01 00 00 	sub    rsp,0x148
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   11224:	0f b6 5f 01          	movzx  ebx,BYTE PTR [rdi+0x1]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   11228:	4c 8d 6c 24 70       	lea    r13,[rsp+0x70]
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   1122d:	48 89 74 24 18       	mov    QWORD PTR [rsp+0x18],rsi
	  if (__use_prec)
   11232:	89 d8                	mov    eax,ebx
   11234:	4c 89 6c 24 60       	mov    QWORD PTR [rsp+0x60],r13
      { _M_string_length = __length; }
   11239:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
   11240:	00 00 
	__c1 = __c2;
   11242:	c6 44 24 70 00       	mov    BYTE PTR [rsp+0x70],0x0
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   11247:	f2 0f 11 44 24 08    	movsd  QWORD PTR [rsp+0x8],xmm0
	  if (__use_prec)
   1124d:	83 e0 06             	and    eax,0x6
   11250:	0f 85 9a 04 00 00    	jne    116f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	  switch (_M_spec._M_type)
   11256:	89 d8                	mov    eax,ebx
   11258:	48 8d 15 39 48 00 00 	lea    rdx,[rip+0x4839]        # 15a98 <CSWTCH.1104+0x9b8>
   1125f:	c0 e8 03             	shr    al,0x3
   11262:	83 e0 0f             	and    eax,0xf
   11265:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   11269:	48 01 d0             	add    rax,rdx
   1126c:	ff e0                	jmp    rax
   1126e:	66 90                	xchg   ax,ax
	      return __format::to_chars(__b, __e, __v);
   11270:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11276:	48 8d 9c 24 c1 00 00 	lea    rbx,[rsp+0xc1]
   1127d:	00 
   1127e:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   11285:	00 
   11286:	48 89 df             	mov    rdi,rbx
   11289:	e8 f2 1d ff ff       	call   3080 <std::to_chars(char*, char*, double)@plt>
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   1128e:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   11293:	48 89 c5             	mov    rbp,rax
   11296:	83 fa 4b             	cmp    edx,0x4b
   11299:	0f 84 2d 0c 00 00    	je     11ecc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcbc>
	  char* __end = __buf + sizeof(__buf);
   1129f:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   112a6:	00 
	  char __expc = 'e';
   112a7:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	  char* __end = __buf + sizeof(__buf);
   112ac:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	  size_t __prec = 6;
   112b1:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   112b8:	00 00 
	  if (!__builtin_signbit(__v))
   112ba:	f2 0f 10 54 24 08    	movsd  xmm2,QWORD PTR [rsp+0x8]
	      if (_M_spec._M_sign == _Sign_plus)
   112c0:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
	  if (!__builtin_signbit(__v))
   112c5:	66 0f 50 c2          	movmskpd eax,xmm2
   112c9:	a8 01                	test   al,0x1
   112cb:	0f 85 3f 03 00 00    	jne    11610 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
	      if (_M_spec._M_sign == _Sign_plus)
   112d1:	44 89 f0             	mov    eax,r14d
   112d4:	83 e0 0c             	and    eax,0xc
   112d7:	3c 04                	cmp    al,0x4
   112d9:	0f 84 e9 06 00 00    	je     119c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7b8>
		__have_sign = false;
   112df:	45 31 db             	xor    r11d,r11d
	      else if (_M_spec._M_sign == _Sign_space)
   112e2:	3c 0c                	cmp    al,0xc
   112e4:	0f 84 16 03 00 00    	je     11600 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
	  string_view __narrow_str(__start, __res.ptr - __start);
   112ea:	49 89 ef             	mov    r15,rbp
   112ed:	49 29 df             	sub    r15,rbx
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   112f0:	41 f6 c6 10          	test   r14b,0x10
   112f4:	0f 84 36 02 00 00    	je     11530 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x320>
   112fa:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11300:	f2 0f 10 0d 48 75 00 	movsd  xmm1,QWORD PTR [rip+0x7548]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x490>
   11307:	00 
   11308:	66 0f 54 05 00 75 00 	andpd  xmm0,XMMWORD PTR [rip+0x7500]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x450>
   1130f:	00 
   11310:	66 0f 2e c8          	ucomisd xmm1,xmm0
   11314:	0f 82 16 02 00 00    	jb     11530 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x320>
      if (__pos < this->_M_len)
   1131a:	4d 85 ff             	test   r15,r15
   1131d:	0f 84 2d 04 00 00    	je     11750 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x540>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
   11323:	4c 89 fa             	mov    rdx,r15
   11326:	be 2e 00 00 00       	mov    esi,0x2e
   1132b:	48 89 df             	mov    rdi,rbx
   1132e:	44 88 5c 24 38       	mov    BYTE PTR [rsp+0x38],r11b
   11333:	e8 e8 1e ff ff       	call   3220 <memchr@plt>
	  if (__p)
   11338:	44 0f b6 5c 24 38    	movzx  r11d,BYTE PTR [rsp+0x38]
   1133e:	48 85 c0             	test   rax,rax
   11341:	0f 84 09 04 00 00    	je     11750 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x540>
	    __ret = __p - this->_M_str;
   11347:	48 29 d8             	sub    rax,rbx
   1134a:	49 89 c2             	mov    r10,rax
	      if (__d != __s.npos) // Found decimal point.
   1134d:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
   11351:	0f 84 f9 03 00 00    	je     11750 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x540>
		  __p = __s.find(__expc, __d + 1);
   11357:	48 8d 48 01          	lea    rcx,[rax+0x1]
      if (__pos < this->_M_len)
   1135b:	4c 39 f9             	cmp    rcx,r15
   1135e:	0f 83 b4 08 00 00    	jae    11c18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa08>
   11364:	0f be 74 24 37       	movsx  esi,BYTE PTR [rsp+0x37]
	  const size_type __n = this->_M_len - __pos;
   11369:	4c 89 fa             	mov    rdx,r15
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   1136c:	48 8d 3c 0b          	lea    rdi,[rbx+rcx*1]
   11370:	44 88 5c 24 40       	mov    BYTE PTR [rsp+0x40],r11b
	  const size_type __n = this->_M_len - __pos;
   11375:	48 29 ca             	sub    rdx,rcx
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   11378:	48 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],rcx
   1137d:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
   11382:	e8 99 1e ff ff       	call   3220 <memchr@plt>
	  if (__p)
   11387:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
   1138c:	44 0f b6 5c 24 40    	movzx  r11d,BYTE PTR [rsp+0x40]
   11392:	48 85 c0             	test   rax,rax
   11395:	4c 8b 54 24 48       	mov    r10,QWORD PTR [rsp+0x48]
   1139a:	49 89 c1             	mov    r9,rax
   1139d:	0f 84 3d 0c 00 00    	je     11fe0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdd0>
	    __ret = __p - this->_M_str;
   113a3:	49 29 d9             	sub    r9,rbx
		    __p = __s.size();
   113a6:	49 83 f9 ff          	cmp    r9,0xffffffffffffffff
   113aa:	4d 0f 44 cf          	cmove  r9,r15
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   113ae:	45 31 c0             	xor    r8d,r8d
   113b1:	4d 39 d1             	cmp    r9,r10
   113b4:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
   113b8:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   113bd:	0f 84 bd 08 00 00    	je     11c80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa70>
		      if (__s[__have_sign] != '0')
   113c3:	41 0f b6 d3          	movzx  edx,r11b
   113c7:	80 3c 13 30          	cmp    BYTE PTR [rbx+rdx*1],0x30
   113cb:	0f 84 6c 03 00 00    	je     1173d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x52d>
			__sigfigs = __p - __have_sign - 1;
   113d1:	4c 89 c8             	mov    rax,r9
   113d4:	48 29 d0             	sub    rax,rdx
   113d7:	48 83 e8 01          	sub    rax,0x1
	      if (__trailing_zeros && __prec != 0)
   113db:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   113e1:	0f 85 b6 03 00 00    	jne    1179d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x58d>
   113e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   113ee:	00 00 
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   113f0:	4d 85 c0             	test   r8,r8
   113f3:	0f 85 11 06 00 00    	jne    11a0a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7fa>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   113f9:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   11400:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   11401:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
   11405:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   1140c:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   11411:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   11418:	00 
	__c1 = __c2;
   11419:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   11420:	00 
   11421:	0f 84 53 01 00 00    	je     1157a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36a>
      if (!_M_hasval)
   11427:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1142c:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
   11430:	0f 84 1a 08 00 00    	je     11c50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa40>
      return _M_loc;
   11436:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
      std::locale locale() { return _M_loc.value(); }
   1143b:	4c 8d 74 24 58       	lea    r14,[rsp+0x58]
      return _M_loc;
   11440:	48 8d 70 18          	lea    rsi,[rax+0x18]
      std::locale locale() { return _M_loc.value(); }
   11444:	4c 89 f7             	mov    rdi,r14
   11447:	e8 44 1d ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
   1144c:	0f be 4c 24 37       	movsx  ecx,BYTE PTR [rsp+0x37]
   11451:	48 89 da             	mov    rdx,rbx
   11454:	4c 89 fe             	mov    rsi,r15
   11457:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
   1145e:	00 
   1145f:	4d 89 f0             	mov    r8,r14
   11462:	e8 f9 31 ff ff       	call   4660 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>
      { return _M_dataplus._M_p; }
   11467:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   1146e:	00 
   1146f:	48 89 c7             	mov    rdi,rax
	if (_M_data() == _M_local_data())
   11472:	48 39 e8             	cmp    rax,rbp
   11475:	0f 84 ef 09 00 00    	je     11e6a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc5a>
	    if (_M_string_length > _S_local_capacity)
   1147b:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   11482:	00 
      { return _M_dataplus._M_p; }
   11483:	48 8b 8c 24 a0 00 00 	mov    rcx,QWORD PTR [rsp+0xa0]
   1148a:	00 
	if (_M_data() == _M_local_data())
   1148b:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   11492:	00 
	    if (_M_string_length > _S_local_capacity)
   11493:	49 89 d0             	mov    r8,rdx
	if (_M_data() == _M_local_data())
   11496:	48 39 f1             	cmp    rcx,rsi
   11499:	0f 84 5a 0a 00 00    	je     11ef9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xce9>
   1149f:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
   114a4:	48 89 8c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rcx
   114ab:	00 
		    __capacity = _M_allocated_capacity;
   114ac:	48 8b 94 24 90 00 00 	mov    rdx,QWORD PTR [rsp+0x90]
   114b3:	00 
   114b4:	0f 16 84 24 b0 00 00 	movhps xmm0,QWORD PTR [rsp+0xb0]
   114bb:	00 
      { _M_string_length = __length; }
   114bc:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   114c3:	00 
	    if (__data)
   114c4:	48 85 c0             	test   rax,rax
   114c7:	0f 84 cb 09 00 00    	je     11e98 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc88>
      { _M_dataplus._M_p = __p; }
   114cd:	48 89 84 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rax
   114d4:	00 
      { _M_allocated_capacity = __capacity; }
   114d5:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
   114dc:	00 
      { _M_string_length = __length; }
   114dd:	48 c7 84 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],0x0
   114e4:	00 00 00 00 00 
   114e9:	c6 07 00             	mov    BYTE PTR [rdi],0x0
      { return _M_dataplus._M_p; }
   114ec:	48 8b bc 24 a0 00 00 	mov    rdi,QWORD PTR [rsp+0xa0]
   114f3:	00 
	if (_M_data() == _M_local_data())
   114f4:	48 39 f7             	cmp    rdi,rsi
   114f7:	74 11                	je     1150a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2fa>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   114f9:	48 8b 84 24 b0 00 00 	mov    rax,QWORD PTR [rsp+0xb0]
   11500:	00 
   11501:	48 8d 70 01          	lea    rsi,[rax+0x1]
   11505:	e8 f6 1c ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
   1150a:	4c 89 f7             	mov    rdi,r14
   1150d:	e8 ae 1d ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_string_length; }
   11512:	48 8b 84 24 88 00 00 	mov    rax,QWORD PTR [rsp+0x88]
   11519:	00 
	      if (!__wstr.empty())
   1151a:	48 85 c0             	test   rax,rax
   1151d:	74 5b                	je     1157a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36a>
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   1151f:	49 89 de             	mov    r14,rbx
		__str = __wstr;
   11522:	49 89 c7             	mov    r15,rax
   11525:	48 8b 9c 24 80 00 00 	mov    rbx,QWORD PTR [rsp+0x80]
   1152c:	00 
   1152d:	eb 4e                	jmp    1157d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36d>
   1152f:	90                   	nop
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   11530:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   11537:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   11538:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
   1153c:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   11543:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   11548:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   1154f:	00 
   11550:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   11557:	00 
   11558:	74 20                	je     1157a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36a>
   1155a:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11560:	f2 0f 10 0d e8 72 00 	movsd  xmm1,QWORD PTR [rip+0x72e8]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x490>
   11567:	00 
   11568:	66 0f 54 05 a0 72 00 	andpd  xmm0,XMMWORD PTR [rip+0x72a0]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x450>
   1156f:	00 
   11570:	66 0f 2e c8          	ucomisd xmm1,xmm0
   11574:	0f 83 ad fe ff ff    	jae    11427 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x217>
      { _M_dataplus._M_p = __p; }
   1157a:	49 89 de             	mov    r14,rbx
	  if (_M_width_kind == _WP_value)
   1157d:	41 0f b7 04 24       	movzx  eax,WORD PTR [r12]
   11582:	66 25 80 01          	and    ax,0x180
   11586:	66 3d 80 00          	cmp    ax,0x80
   1158a:	0f 84 90 00 00 00    	je     11620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x410>
	  else if (_M_width_kind == _WP_from_arg)
   11590:	66 3d 00 01          	cmp    ax,0x100
   11594:	0f 84 46 04 00 00    	je     119e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7d0>
   1159a:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1159f:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
	    return __format::__write(__fc.out(), __str);
   115a3:	48 89 da             	mov    rdx,rbx
   115a6:	4c 89 fe             	mov    rsi,r15
   115a9:	e8 32 73 ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
   115ae:	48 89 c3             	mov    rbx,rax
      { return _M_dataplus._M_p; }
   115b1:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
   115b8:	00 
	if (_M_data() == _M_local_data())
   115b9:	48 39 ef             	cmp    rdi,rbp
   115bc:	74 11                	je     115cf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3bf>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   115be:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
   115c5:	00 
   115c6:	48 8d 70 01          	lea    rsi,[rax+0x1]
   115ca:	e8 31 1c ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { return _M_dataplus._M_p; }
   115cf:	48 8b 7c 24 60       	mov    rdi,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
   115d4:	4c 39 ef             	cmp    rdi,r13
   115d7:	74 0e                	je     115e7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   115d9:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   115de:	48 8d 70 01          	lea    rsi,[rax+0x1]
   115e2:	e8 19 1c ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
   115e7:	48 81 c4 48 01 00 00 	add    rsp,0x148
   115ee:	48 89 d8             	mov    rax,rbx
   115f1:	5b                   	pop    rbx
   115f2:	5d                   	pop    rbp
   115f3:	41 5c                	pop    r12
   115f5:	41 5d                	pop    r13
   115f7:	41 5e                	pop    r14
   115f9:	41 5f                	pop    r15
   115fb:	c3                   	ret
   115fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		*--__start = ' ';
   11600:	c6 43 ff 20          	mov    BYTE PTR [rbx-0x1],0x20
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   11604:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
		*--__start = ' ';
   11609:	48 83 eb 01          	sub    rbx,0x1
   1160d:	0f 1f 00             	nop    DWORD PTR [rax]
	  bool __have_sign = true;
   11610:	41 bb 01 00 00 00    	mov    r11d,0x1
   11616:	e9 cf fc ff ff       	jmp    112ea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xda>
   1161b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    __width = _M_width;
   11620:	45 0f b7 44 24 04    	movzx  r8d,WORD PTR [r12+0x4]
      iterator out() { return std::move(_M_out); }
   11626:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1162b:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
	  if (__width <= __str.size())
   1162f:	4d 39 c7             	cmp    r15,r8
   11632:	0f 83 6b ff ff ff    	jae    115a3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x393>
	  _Align __align = _M_spec._M_align;
   11638:	41 0f b6 14 24       	movzx  edx,BYTE PTR [r12]
	  char32_t __fill_char = _M_spec._M_fill;
   1163d:	45 8b 4c 24 08       	mov    r9d,DWORD PTR [r12+0x8]
	  size_t __nfill = __width - __str.size();
   11642:	4d 29 f8             	sub    r8,r15
	  if (__align == _Align_default)
   11645:	89 d1                	mov    ecx,edx
   11647:	83 e1 03             	and    ecx,0x3
   1164a:	0f 85 83 00 00 00    	jne    116d3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
   11650:	83 e2 40             	and    edx,0x40
   11653:	74 73                	je     116c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b8>
   11655:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   1165b:	f2 0f 10 0d ed 71 00 	movsd  xmm1,QWORD PTR [rip+0x71ed]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x490>
   11662:	00 
   11663:	66 0f 54 05 a5 71 00 	andpd  xmm0,XMMWORD PTR [rip+0x71a5]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x450>
   1166a:	00 
   1166b:	66 0f 2e c8          	ucomisd xmm1,xmm0
   1166f:	72 57                	jb     116c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b8>
   11671:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
		  if (!__format::__is_xdigit(__narrow_str[0]))
   11675:	48 8d 15 04 49 00 00 	lea    rdx,[rip+0x4904]        # 15f80 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
	      __align = _Align_right;
   1167c:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
   11681:	41 b9 30 00 00 00    	mov    r9d,0x30
		  if (!__format::__is_xdigit(__narrow_str[0]))
   11687:	80 3c 02 0f          	cmp    BYTE PTR [rdx+rax*1],0xf
   1168b:	76 46                	jbe    116d3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
	_M_sink->_M_write(__c);
   1168d:	0f be 33             	movsx  esi,BYTE PTR [rbx]
   11690:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
	this->_M_str += __n;
   11695:	48 83 c3 01          	add    rbx,0x1
	this->_M_len -= __n;
   11699:	49 83 ef 01          	sub    r15,0x1
   1169d:	89 4c 24 18          	mov    DWORD PTR [rsp+0x18],ecx
   116a1:	44 89 4c 24 10       	mov    DWORD PTR [rsp+0x10],r9d
   116a6:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
   116ab:	e8 60 73 ff ff       	call   8a10 <std::__format::_Sink<char>::_M_write(char)>
      }
   116b0:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
   116b5:	44 8b 4c 24 10       	mov    r9d,DWORD PTR [rsp+0x10]
   116ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [rsp+0x18]
   116be:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   116c3:	eb 0e                	jmp    116d3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
   116c5:	0f 1f 00             	nop    DWORD PTR [rax]
	      __align = _Align_right;
   116c8:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
   116cd:	41 b9 20 00 00 00    	mov    r9d,0x20
	  return __format::__write_padded(std::move(__out), __str,
   116d3:	48 89 da             	mov    rdx,rbx
   116d6:	4c 89 fe             	mov    rsi,r15
   116d9:	e8 62 73 ff ff       	call   8a40 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
   116de:	48 89 c3             	mov    rbx,rax
					  __align, __nfill, __fill_char);
   116e1:	e9 cb fe ff ff       	jmp    115b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a1>
   116e6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   116ed:	00 00 00 
	  if (_M_prec_kind == _WP_value)
   116f0:	3c 02                	cmp    al,0x2
   116f2:	0f 84 28 04 00 00    	je     11b20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x910>
	  size_t __prec = -1;
   116f8:	48 c7 44 24 10 ff ff 	mov    QWORD PTR [rsp+0x10],0xffffffffffffffff
   116ff:	ff ff 
	  else if (_M_prec_kind == _WP_from_arg)
   11701:	3c 04                	cmp    al,0x4
   11703:	0f 84 87 02 00 00    	je     11990 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x780>
	  switch (_M_spec._M_type)
   11709:	89 d8                	mov    eax,ebx
   1170b:	48 8d 15 aa 43 00 00 	lea    rdx,[rip+0x43aa]        # 15abc <CSWTCH.1104+0x9dc>
   11712:	c0 e8 03             	shr    al,0x3
   11715:	83 e0 0f             	and    eax,0xf
   11718:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   1171c:	48 01 d0             	add    rax,rdx
   1171f:	ff e0                	jmp    rax
   11721:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   11728:	00 00 00 00 
   1172c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      for (; __pos < this->_M_len; ++__pos)
   11730:	48 83 c1 01          	add    rcx,0x1
   11734:	4c 39 f9             	cmp    rcx,r15
   11737:	0f 83 01 05 00 00    	jae    11c3e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa2e>
	if (!traits_type::eq(this->_M_str[__pos], __c))
   1173d:	80 3c 0b 30          	cmp    BYTE PTR [rbx+rcx*1],0x30
   11741:	74 ed                	je     11730 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
   11743:	e9 fd 04 00 00       	jmp    11c45 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa35>
   11748:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1174f:	00 
		  __p = __s.find(__expc); // Find the exponent, if present.
   11750:	0f be 54 24 37       	movsx  edx,BYTE PTR [rsp+0x37]
   11755:	31 c9                	xor    ecx,ecx
   11757:	48 89 de             	mov    rsi,rbx
   1175a:	4c 89 ff             	mov    rdi,r15
   1175d:	44 88 5c 24 38       	mov    BYTE PTR [rsp+0x38],r11b
   11762:	e8 f9 23 ff ff       	call   3b60 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>
		    __p = __s.size();
   11767:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
		  __p = __s.find(__expc); // Find the exponent, if present.
   1176b:	49 89 c2             	mov    r10,rax
		    __p = __s.size();
   1176e:	4d 0f 44 d7          	cmove  r10,r15
	      if (__trailing_zeros && __prec != 0)
   11772:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   11777:	0f 84 7b 02 00 00    	je     119f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e8>
   1177d:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   11783:	0f 84 49 08 00 00    	je     11fd2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdc2>
		  __sigfigs = __d - __have_sign;
   11789:	0f b6 54 24 38       	movzx  edx,BYTE PTR [rsp+0x38]
   1178e:	4c 89 d0             	mov    rax,r10
   11791:	4d 89 d1             	mov    r9,r10
   11794:	41 b8 01 00 00 00    	mov    r8d,0x1
   1179a:	48 29 d0             	sub    rax,rdx
		  __z = __prec - __sigfigs;
   1179d:	48 29 44 24 10       	sub    QWORD PTR [rsp+0x10],rax
   117a2:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   117a7:	49 01 c8             	add    r8,rcx
   117aa:	e9 41 fc ff ff       	jmp    113f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   117af:	90                   	nop
	      if (_M_spec._M_type != _Pres_A)
   117b0:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   117b3:	ba 65 00 00 00       	mov    edx,0x65
   117b8:	b8 70 00 00 00       	mov    eax,0x70
   117bd:	80 fb 10             	cmp    bl,0x10
   117c0:	0f 44 c2             	cmove  eax,edx
   117c3:	45 31 f6             	xor    r14d,r14d
   117c6:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
	      return __format::to_chars(__b, __e, __v, __fmt);
   117ca:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   117d0:	48 8d 9c 24 c1 00 00 	lea    rbx,[rsp+0xc1]
   117d7:	00 
   117d8:	ba 04 00 00 00       	mov    edx,0x4
   117dd:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   117e4:	00 
   117e5:	48 89 df             	mov    rdi,rbx
   117e8:	e8 83 19 ff ff       	call   3170 <std::to_chars(char*, char*, double, std::chars_format)@plt>
   117ed:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   117f0:	83 fa 4b             	cmp    edx,0x4b
   117f3:	0f 84 f7 03 00 00    	je     11bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9e0>
	  char* __end = __buf + sizeof(__buf);
   117f9:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   11800:	00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   11801:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   11806:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1180d:	00 00 
	  char* __end = __buf + sizeof(__buf);
   1180f:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	  if (__upper)
   11814:	45 84 f6             	test   r14b,r14b
   11817:	0f 84 9d fa ff ff    	je     112ba <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   1181d:	48 39 eb             	cmp    rbx,rbp
   11820:	0f 84 94 fa ff ff    	je     112ba <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
   11826:	49 89 de             	mov    r14,rbx
   11829:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		*__p = std::toupper(*__p);
   11830:	41 0f be 3e          	movsx  edi,BYTE PTR [r14]
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   11834:	49 83 c6 01          	add    r14,0x1
		*__p = std::toupper(*__p);
   11838:	e8 13 1b ff ff       	call   3350 <toupper@plt>
   1183d:	41 88 46 ff          	mov    BYTE PTR [r14-0x1],al
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   11841:	49 39 ee             	cmp    r14,rbp
   11844:	75 ea                	jne    11830 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x620>
   11846:	e9 6f fa ff ff       	jmp    112ba <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
   1184b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
   11850:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   11853:	ba 50 00 00 00       	mov    edx,0x50
   11858:	b8 70 00 00 00       	mov    eax,0x70
   1185d:	41 be 01 00 00 00    	mov    r14d,0x1
   11863:	80 fb 10             	cmp    bl,0x10
   11866:	0f 44 c2             	cmove  eax,edx
   11869:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
   1186d:	e9 58 ff ff ff       	jmp    117ca <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5ba>
   11872:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   11878:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1187f:	00 00 
   11881:	b9 06 00 00 00       	mov    ecx,0x6
   11886:	45 31 f6             	xor    r14d,r14d
	  char __expc = 'e';
   11889:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      __fmt = chars_format::fixed;
   1188e:	bb 02 00 00 00       	mov    ebx,0x2
	  bool __trailing_zeros = false;
   11893:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11898:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   1189e:	4c 8d bc 24 c1 00 00 	lea    r15,[rsp+0xc1]
   118a5:	00 
   118a6:	89 da                	mov    edx,ebx
   118a8:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   118af:	00 
   118b0:	4c 89 ff             	mov    rdi,r15
   118b3:	e8 c8 18 ff ff       	call   3180 <std::to_chars(char*, char*, double, std::chars_format, int)@plt>
   118b8:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   118bb:	83 fa 4b             	cmp    edx,0x4b
   118be:	0f 84 6c 02 00 00    	je     11b30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x920>
	  char* __end = __buf + sizeof(__buf);
   118c4:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   118cb:	00 
	  char* __start = __buf + 1; // reserve space for sign
   118cc:	4c 89 fb             	mov    rbx,r15
	  char* __end = __buf + sizeof(__buf);
   118cf:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   118d4:	e9 3b ff ff ff       	jmp    11814 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x604>
   118d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
   118e0:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   118e7:	00 00 
   118e9:	b9 06 00 00 00       	mov    ecx,0x6
	      __upper = true;
   118ee:	41 be 01 00 00 00    	mov    r14d,0x1
   118f4:	eb 93                	jmp    11889 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x679>
   118f6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   118fd:	00 00 00 
	  switch (_M_spec._M_type)
   11900:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   11905:	b9 06 00 00 00       	mov    ecx,0x6
   1190a:	45 31 f6             	xor    r14d,r14d
   1190d:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11914:	00 00 
	      __trailing_zeros = true;
   11916:	c6 44 24 20 01       	mov    BYTE PTR [rsp+0x20],0x1
	      __fmt = chars_format::general;
   1191b:	bb 03 00 00 00       	mov    ebx,0x3
	      break;
   11920:	e9 73 ff ff ff       	jmp    11898 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x688>
   11925:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   11928:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1192f:	00 00 
   11931:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   11936:	c6 44 24 37 45       	mov    BYTE PTR [rsp+0x37],0x45
	      __upper = true;
   1193b:	41 be 01 00 00 00    	mov    r14d,0x1
   11941:	eb d3                	jmp    11916 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x706>
   11943:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   11948:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   1194d:	b9 06 00 00 00       	mov    ecx,0x6
   11952:	45 31 f6             	xor    r14d,r14d
   11955:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1195c:	00 00 
	  bool __trailing_zeros = false;
   1195e:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	      __fmt = chars_format::scientific;
   11963:	bb 01 00 00 00       	mov    ebx,0x1
	      break;
   11968:	e9 2b ff ff ff       	jmp    11898 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x688>
   1196d:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   11970:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11977:	00 00 
   11979:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   1197e:	c6 44 24 37 45       	mov    BYTE PTR [rsp+0x37],0x45
	      __upper = true;
   11983:	41 be 01 00 00 00    	mov    r14d,0x1
   11989:	eb d3                	jmp    1195e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x74e>
   1198b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   11990:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
   11994:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
   11999:	e8 12 22 ff ff       	call   3bb0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   1199e:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   119a3:	e9 61 fd ff ff       	jmp    11709 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f9>
	  char __expc = 'e';
   119a8:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   119ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
		__fmt = chars_format::general;
   119b1:	bb 03 00 00 00       	mov    ebx,0x3
	  bool __upper = false;
   119b6:	45 31 f6             	xor    r14d,r14d
	  bool __trailing_zeros = false;
   119b9:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   119be:	e9 d5 fe ff ff       	jmp    11898 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x688>
   119c3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		*--__start = '+';
   119c8:	c6 43 ff 2b          	mov    BYTE PTR [rbx-0x1],0x2b
	  bool __have_sign = true;
   119cc:	41 bb 01 00 00 00    	mov    r11d,0x1
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   119d2:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
		*--__start = '+';
   119d7:	48 83 eb 01          	sub    rbx,0x1
   119db:	e9 0a f9 ff ff       	jmp    112ea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xda>
   119e0:	41 0f b7 7c 24 04    	movzx  edi,WORD PTR [r12+0x4]
   119e6:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
   119eb:	e8 a0 22 ff ff       	call   3c90 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   119f0:	49 89 c0             	mov    r8,rax
   119f3:	e9 2e fc ff ff       	jmp    11626 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x416>
	      size_t __z = 0;   // Number of trailing zeros to add.
   119f8:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   119ff:	00 00 
	      if (__trailing_zeros && __prec != 0)
   11a01:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   11a04:	41 b8 01 00 00 00    	mov    r8d,0x1
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
   11a0a:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
   11a10:	75 11                	jne    11a23 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x813>
   11a12:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
   11a17:	48 29 e8             	sub    rax,rbp
   11a1a:	4c 39 c0             	cmp    rax,r8
   11a1d:	0f 83 41 05 00 00    	jae    11f64 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd54>
		      __dynbuf.reserve(__s.size() + __extras);
   11a23:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
   11a28:	4b 8d 34 07          	lea    rsi,[r15+r8*1]
   11a2c:	4c 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],r9
   11a31:	48 89 c7             	mov    rdi,rax
   11a34:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
   11a39:	4c 89 44 24 40       	mov    QWORD PTR [rsp+0x40],r8
   11a3e:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   11a43:	e8 d8 3e ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
		      if (__dynbuf.empty())
   11a48:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
   11a4e:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
   11a53:	4c 8b 4c 24 38       	mov    r9,QWORD PTR [rsp+0x38]
   11a58:	0f 85 32 02 00 00    	jne    11c90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa80>
	return _M_replace(size_type(0), this->size(), __s, __n);
   11a5e:	4d 39 cf             	cmp    r15,r9
   11a61:	4d 89 c8             	mov    r8,r9
   11a64:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   11a69:	48 89 d9             	mov    rcx,rbx
   11a6c:	4d 0f 46 c7          	cmovbe r8,r15
   11a70:	31 d2                	xor    edx,edx
   11a72:	31 f6                	xor    esi,esi
   11a74:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   11a79:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   11a7e:	e8 cd 29 ff ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  if (__d == __p)
   11a83:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
   11a88:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   11a8d:	4d 39 d1             	cmp    r9,r10
   11a90:	0f 84 a5 05 00 00    	je     1203b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe2b>
			  if (__z)
   11a96:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   11a9c:	0f 85 6e 05 00 00    	jne    12010 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe00>
    if (__pos > __size)
   11aa2:	4d 39 cf             	cmp    r15,r9
   11aa5:	0f 82 86 06 00 00    	jb     12131 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf21>
      { return _M_string_length; }
   11aab:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
   11ab0:	4d 29 cf             	sub    r15,r9
	return basic_string_view{_M_str + __pos, __rlen};
   11ab3:	4a 8d 0c 0b          	lea    rcx,[rbx+r9*1]
	if (this->max_size() - (this->size() - __n1) < __n2)
   11ab7:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
   11abe:	ff ff 7f 
   11ac1:	48 29 f0             	sub    rax,rsi
   11ac4:	4c 39 f8             	cmp    rax,r15
   11ac7:	0f 82 58 06 00 00    	jb     12125 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf15>
      { return _M_dataplus._M_p; }
   11acd:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      const size_type __len = __n + this->size();
   11ad2:	4a 8d 1c 3e          	lea    rbx,[rsi+r15*1]
	if (_M_data() == _M_local_data())
   11ad6:	4c 39 e8             	cmp    rax,r13
   11ad9:	0f 84 75 05 00 00    	je     12054 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe44>
	return _M_is_local() ? size_type(_S_local_capacity)
   11adf:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
      if (__len <= this->capacity())
   11ae4:	48 39 da             	cmp    rdx,rbx
   11ae7:	0f 82 0a 05 00 00    	jb     11ff7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xde7>
	  if (__n)
   11aed:	4d 85 ff             	test   r15,r15
   11af0:	74 1e                	je     11b10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
   11af2:	48 8d 3c 30          	lea    rdi,[rax+rsi*1]
	if (__n == 1)
   11af6:	49 83 ff 01          	cmp    r15,0x1
   11afa:	0f 84 5e 05 00 00    	je     1205e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe4e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   11b00:	4c 89 fa             	mov    rdx,r15
   11b03:	48 89 ce             	mov    rsi,rcx
   11b06:	e8 a5 16 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
   11b0b:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      { _M_string_length = __length; }
   11b10:	48 89 5c 24 68       	mov    QWORD PTR [rsp+0x68],rbx
	__c1 = __c2;
   11b15:	c6 04 18 00          	mov    BYTE PTR [rax+rbx*1],0x0
   11b19:	e9 b2 01 00 00       	jmp    11cd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xac0>
   11b1e:	66 90                	xchg   ax,ax
	    __prec = _M_prec;
   11b20:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   11b24:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   11b29:	e9 db fb ff ff       	jmp    11709 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f9>
   11b2e:	66 90                	xchg   ax,ax
	      size_t __guess = 8 + __prec;
   11b30:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   11b35:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
   11b3a:	48 8d 70 08          	lea    rsi,[rax+0x8]
	      if (__fmt == chars_format::fixed) // +ddd.prec
   11b3e:	83 fb 02             	cmp    ebx,0x2
   11b41:	0f 84 8a 02 00 00    	je     11dd1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbc1>
	      if (__guess <= sizeof(__buf)) [[unlikely]]
   11b47:	48 81 fe 80 00 00 00 	cmp    rsi,0x80
   11b4e:	0f 86 b4 00 00 00    	jbe    11c08 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9f8>
	      __dynbuf.reserve(__guess);
   11b54:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
   11b59:	48 89 c7             	mov    rdi,rax
   11b5c:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   11b61:	e8 ba 3d ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   11b66:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
   11b6b:	4c 39 ea             	cmp    rdx,r13
   11b6e:	0f 84 74 04 00 00    	je     11fe8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdd8>
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
   11b74:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   11b79:	48 8d 34 00          	lea    rsi,[rax+rax*1]
		    __res = __to_chars(__p + 1, __p + __n - 1);
   11b7d:	48 8d 6e ff          	lea    rbp,[rsi-0x1]
      reserve(__n);
   11b81:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   11b86:	e8 95 3d ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   11b8b:	4c 8b 7c 24 60       	mov    r15,QWORD PTR [rsp+0x60]
	    if (__use_prec)
   11b90:	80 7c 24 38 00       	cmp    BYTE PTR [rsp+0x38],0x0
		    __res = __to_chars(__p + 1, __p + __n - 1);
   11b95:	49 8d 34 2f          	lea    rsi,[r15+rbp*1]
   11b99:	49 8d 7f 01          	lea    rdi,[r15+0x1]
	    if (__use_prec)
   11b9d:	0f 85 0d 03 00 00    	jne    11eb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xca0>
	    else if (__fmt != chars_format{})
   11ba3:	85 db                	test   ebx,ebx
   11ba5:	0f 85 65 01 00 00    	jne    11d10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb00>
	      return __format::to_chars(__b, __e, __v);
   11bab:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11bb1:	e8 ca 14 ff ff       	call   3080 <std::to_chars(char*, char*, double)@plt>
   11bb6:	48 89 c5             	mov    rbp,rax
   11bb9:	48 89 d0             	mov    rax,rdx
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
   11bbc:	85 c0                	test   eax,eax
   11bbe:	0f 85 74 02 00 00    	jne    11e38 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc28>
   11bc4:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
   11bc9:	48 89 e8             	mov    rax,rbp
   11bcc:	4c 29 f8             	sub    rax,r15
      { _M_string_length = __length; }
   11bcf:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
   11bd4:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
   11bd8:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
		  __start = __dynbuf.data() + 1; // reserve space for sign
   11bdd:	48 8d 58 01          	lea    rbx,[rax+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   11be1:	48 03 44 24 68       	add    rax,QWORD PTR [rsp+0x68]
   11be6:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   11beb:	e9 24 fc ff ff       	jmp    11814 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x604>
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   11bf0:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   11bf5:	bb 04 00 00 00       	mov    ebx,0x4
   11bfa:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   11bff:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11c06:	00 00 
		__guess = sizeof(__buf) * 2;
   11c08:	be 00 01 00 00       	mov    esi,0x100
   11c0d:	e9 42 ff ff ff       	jmp    11b54 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x944>
   11c12:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   11c18:	45 31 c0             	xor    r8d,r8d
   11c1b:	49 39 c7             	cmp    r15,rax
   11c1e:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
   11c22:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   11c27:	0f 84 93 01 00 00    	je     11dc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbb0>
		      if (__s[__have_sign] != '0')
   11c2d:	41 0f b6 d3          	movzx  edx,r11b
		    __p = __s.size();
   11c31:	4d 89 f9             	mov    r9,r15
		      if (__s[__have_sign] != '0')
   11c34:	80 3c 13 30          	cmp    BYTE PTR [rbx+rdx*1],0x30
   11c38:	0f 85 93 f7 ff ff    	jne    113d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c1>
      return npos;
   11c3e:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
   11c45:	4c 89 c8             	mov    rax,r9
   11c48:	48 29 c8             	sub    rax,rcx
   11c4b:	e9 8b f7 ff ff       	jmp    113db <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1cb>
	  std::construct_at(&_M_loc);
   11c50:	48 8d 70 18          	lea    rsi,[rax+0x18]
   11c54:	49 89 c6             	mov    r14,rax
   11c57:	48 89 f7             	mov    rdi,rsi
   11c5a:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
   11c5f:	e8 0c 17 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
   11c64:	41 c6 46 20 01       	mov    BYTE PTR [r14+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
   11c69:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
   11c6e:	4c 8d 74 24 58       	lea    r14,[rsp+0x58]
   11c73:	e9 cc f7 ff ff       	jmp    11444 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x234>
   11c78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   11c7f:	00 
	      size_t __z = 0;   // Number of trailing zeros to add.
   11c80:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   11c87:	00 00 
   11c89:	e9 62 f7 ff ff       	jmp    113f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   11c8e:	66 90                	xchg   ax,ax
   11c90:	4c 8b 44 24 40       	mov    r8,QWORD PTR [rsp+0x40]
			  __dynbuf.insert(__p, __extras, '0');
   11c95:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   11c9a:	4c 89 ce             	mov    rsi,r9
   11c9d:	b9 30 00 00 00       	mov    ecx,0x30
   11ca2:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
   11ca7:	4c 89 c2             	mov    rdx,r8
   11caa:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
   11caf:	e8 ac 28 ff ff       	call   4560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>
			  if (__d == __p)
   11cb4:	4c 8b 4c 24 10       	mov    r9,QWORD PTR [rsp+0x10]
   11cb9:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
   11cbe:	4d 39 d1             	cmp    r9,r10
   11cc1:	75 0d                	jne    11cd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xac0>
			    __dynbuf[__p] = '.';
   11cc3:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   11cc8:	42 c6 04 08 2e       	mov    BYTE PTR [rax+r9*1],0x2e
   11ccd:	0f 1f 00             	nop    DWORD PTR [rax]
      { return _M_string_length; }
   11cd0:	4c 8b 7c 24 68       	mov    r15,QWORD PTR [rsp+0x68]
      { return _M_dataplus._M_p; }
   11cd5:	48 8b 5c 24 60       	mov    rbx,QWORD PTR [rsp+0x60]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   11cda:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   11cdf:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   11ce6:	00 
   11ce7:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   11cee:	00 
   11cef:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   11cf6:	00 
      { _M_string_length = __length; }
   11cf7:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   11cfe:	00 00 00 00 00 
   11d03:	a8 20                	test   al,0x20
   11d05:	0f 85 1c f7 ff ff    	jne    11427 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x217>
   11d0b:	e9 6a f8 ff ff       	jmp    1157a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36a>
	      return __format::to_chars(__b, __e, __v, __fmt);
   11d10:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11d16:	89 da                	mov    edx,ebx
   11d18:	e8 53 14 ff ff       	call   3170 <std::to_chars(char*, char*, double, std::chars_format)@plt>
   11d1d:	48 89 c5             	mov    rbp,rax
   11d20:	48 89 d0             	mov    rax,rdx
   11d23:	e9 94 fe ff ff       	jmp    11bbc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9ac>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11d28:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   11d2c:	45 31 f6             	xor    r14d,r14d
   11d2f:	e9 55 fb ff ff       	jmp    11889 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x679>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11d34:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   11d38:	e9 b1 fb ff ff       	jmp    118ee <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6de>
   11d3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   11d41:	e9 38 fc ff ff       	jmp    1197e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x76e>
   11d46:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   11d4a:	e9 e7 fb ff ff       	jmp    11936 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x726>
	  char __expc = 'e';
   11d4f:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11d54:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   11d58:	45 31 f6             	xor    r14d,r14d
   11d5b:	e9 b6 fb ff ff       	jmp    11916 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x706>
	      if (_M_spec._M_type != _Pres_A)
   11d60:	83 e3 78             	and    ebx,0x78
   11d63:	ba 70 00 00 00       	mov    edx,0x70
   11d68:	b8 65 00 00 00       	mov    eax,0x65
   11d6d:	80 fb 10             	cmp    bl,0x10
   11d70:	0f 45 c2             	cmovne eax,edx
   11d73:	45 31 f6             	xor    r14d,r14d
   11d76:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11d7a:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   11d7f:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	      __fmt = chars_format::hex;
   11d83:	bb 04 00 00 00       	mov    ebx,0x4
   11d88:	e9 0b fb ff ff       	jmp    11898 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x688>
   11d8d:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (_M_spec._M_type != _Pres_A)
   11d90:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   11d93:	ba 50 00 00 00       	mov    edx,0x50
   11d98:	b8 70 00 00 00       	mov    eax,0x70
   11d9d:	41 be 01 00 00 00    	mov    r14d,0x1
   11da3:	80 fb 10             	cmp    bl,0x10
   11da6:	0f 44 c2             	cmove  eax,edx
   11da9:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
   11dad:	eb cb                	jmp    11d7a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb6a>
	  char __expc = 'e';
   11daf:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11db4:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   11db8:	45 31 f6             	xor    r14d,r14d
   11dbb:	e9 9e fb ff ff       	jmp    1195e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x74e>
	      size_t __z = 0;   // Number of trailing zeros to add.
   11dc0:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   11dc7:	00 00 
		    __p = __s.size();
   11dc9:	4d 89 f9             	mov    r9,r15
   11dcc:	e9 1f f6 ff ff       	jmp    113f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
			__builtin_frexp(__v, &__exp);
   11dd1:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11dd7:	48 89 74 24 28       	mov    QWORD PTR [rsp+0x28],rsi
   11ddc:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
   11de3:	00 
		      int __exp{};
   11de4:	c7 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],0x0
   11deb:	00 00 00 00 
			__builtin_frexp(__v, &__exp);
   11def:	e8 6c 15 ff ff       	call   3360 <frexp@plt>
		      if (__exp > 0)
   11df4:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [rsp+0xa0]
   11dfb:	48 8b 74 24 28       	mov    rsi,QWORD PTR [rsp+0x28]
   11e00:	85 c0                	test   eax,eax
   11e02:	7e 23                	jle    11e27 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc17>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
   11e04:	69 d0 a4 0f 00 00    	imul   edx,eax,0xfa4
   11e0a:	48 89 d0             	mov    rax,rdx
   11e0d:	48 69 d2 f9 65 56 3b 	imul   rdx,rdx,0x3b5665f9
   11e14:	48 c1 ea 20          	shr    rdx,0x20
   11e18:	29 d0                	sub    eax,edx
   11e1a:	d1 e8                	shr    eax,1
   11e1c:	01 d0                	add    eax,edx
   11e1e:	c1 e8 0d             	shr    eax,0xd
   11e21:	83 c0 01             	add    eax,0x1
   11e24:	48 01 c6             	add    rsi,rax
   11e27:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
   11e2c:	e9 16 fd ff ff       	jmp    11b47 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x937>
   11e31:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
   11e38:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
   11e3f:	00 00 
      { return _M_dataplus._M_p; }
   11e41:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
   11e46:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   11e49:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   11e4e:	83 f8 4b             	cmp    eax,0x4b
   11e51:	0f 84 14 fd ff ff    	je     11b6b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x95b>
		  __start = __dynbuf.data() + 1; // reserve space for sign
   11e57:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   11e5b:	48 03 54 24 68       	add    rdx,QWORD PTR [rsp+0x68]
   11e60:	48 89 54 24 28       	mov    QWORD PTR [rsp+0x28],rdx
   11e65:	e9 aa f9 ff ff       	jmp    11814 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x604>
   11e6a:	48 8b 94 24 a0 00 00 	mov    rdx,QWORD PTR [rsp+0xa0]
   11e71:	00 
	if (_M_data() == _M_local_data())
   11e72:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   11e79:	00 
   11e7a:	48 39 f2             	cmp    rdx,rsi
   11e7d:	74 6f                	je     11eee <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcde>
      { return _M_string_length; }
   11e7f:	f3 0f 6f 84 24 a8 00 	movdqu xmm0,XMMWORD PTR [rsp+0xa8]
   11e86:	00 00 
      { _M_dataplus._M_p = __p; }
   11e88:	48 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rdx
   11e8f:	00 
      { _M_string_length = __length; }
   11e90:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   11e97:	00 
      { _M_dataplus._M_p = __p; }
   11e98:	48 89 b4 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rsi
   11e9f:	00 
   11ea0:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   11ea7:	00 
   11ea8:	48 89 f7             	mov    rdi,rsi
   11eab:	e9 2d f6 ff ff       	jmp    114dd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2cd>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11eb0:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   11eb4:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11eba:	89 da                	mov    edx,ebx
   11ebc:	e8 bf 12 ff ff       	call   3180 <std::to_chars(char*, char*, double, std::chars_format, int)@plt>
   11ec1:	48 89 c5             	mov    rbp,rax
   11ec4:	48 89 d0             	mov    rax,rdx
   11ec7:	e9 f0 fc ff ff       	jmp    11bbc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9ac>
	  char __expc = 'e';
   11ecc:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	  bool __upper = false;
   11ed1:	45 31 f6             	xor    r14d,r14d
	  chars_format __fmt{};
   11ed4:	31 db                	xor    ebx,ebx
		__guess = sizeof(__buf) * 2;
   11ed6:	be 00 01 00 00       	mov    esi,0x100
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   11edb:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  size_t __prec = 6;
   11ee0:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11ee7:	00 00 
   11ee9:	e9 66 fc ff ff       	jmp    11b54 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x944>
	    if (_M_string_length > _S_local_capacity)
   11eee:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   11ef5:	00 
   11ef6:	49 89 d0             	mov    r8,rdx
		if (__str.size())
   11ef9:	48 85 d2             	test   rdx,rdx
   11efc:	74 4c                	je     11f4a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd3a>
	if (__n == 1)
   11efe:	48 83 fa 01          	cmp    rdx,0x1
   11f02:	0f 84 b9 01 00 00    	je     120c1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeb1>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   11f08:	89 d1                	mov    ecx,edx
   11f0a:	83 fa 08             	cmp    edx,0x8
   11f0d:	0f 83 5a 01 00 00    	jae    1206d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe5d>
   11f13:	f6 c2 04             	test   dl,0x4
   11f16:	0f 85 c4 01 00 00    	jne    120e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xed0>
   11f1c:	85 d2                	test   edx,edx
   11f1e:	74 24                	je     11f44 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd34>
   11f20:	0f b6 bc 24 b0 00 00 	movzx  edi,BYTE PTR [rsp+0xb0]
   11f27:	00 
   11f28:	83 e2 02             	and    edx,0x2
   11f2b:	40 88 38             	mov    BYTE PTR [rax],dil
   11f2e:	0f 85 d2 01 00 00    	jne    12106 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xef6>
   11f34:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   11f3b:	00 
   11f3c:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   11f43:	00 
      { return _M_string_length; }
   11f44:	49 89 d0             	mov    r8,rdx
      { return _M_dataplus._M_p; }
   11f47:	48 89 c7             	mov    rdi,rax
      { _M_string_length = __length; }
   11f4a:	4c 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],r8
   11f51:	00 
	__c1 = __c2;
   11f52:	42 c6 04 07 00       	mov    BYTE PTR [rdi+r8*1],0x0
      { return _M_dataplus._M_p; }
   11f57:	48 8b bc 24 a0 00 00 	mov    rdi,QWORD PTR [rsp+0xa0]
   11f5e:	00 
      }
   11f5f:	e9 79 f5 ff ff       	jmp    114dd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2cd>
		      __builtin_memmove(__start + __p + __extras,
   11f64:	4b 8d 3c 08          	lea    rdi,[r8+r9*1]
					__start + __p,
   11f68:	4a 8d 2c 0b          	lea    rbp,[rbx+r9*1]
		      __builtin_memmove(__start + __p + __extras,
   11f6c:	4c 89 fa             	mov    rdx,r15
   11f6f:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   11f74:	4c 29 ca             	sub    rdx,r9
   11f77:	48 01 df             	add    rdi,rbx
   11f7a:	48 89 ee             	mov    rsi,rbp
   11f7d:	4c 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],r9
   11f82:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
   11f87:	e8 94 13 ff ff       	call   3320 <memmove@plt>
		      if (__d == __p)
   11f8c:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
   11f91:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   11f96:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   11f9b:	4d 39 d1             	cmp    r9,r10
   11f9e:	75 09                	jne    11fa9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd99>
			__start[__p++] = '.';
   11fa0:	c6 45 00 2e          	mov    BYTE PTR [rbp+0x0],0x2e
		      __builtin_memset(__start + __p, '0', __z);
   11fa4:	4a 8d 6c 0b 01       	lea    rbp,[rbx+r9*1+0x1]
   11fa9:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
   11fae:	be 30 00 00 00       	mov    esi,0x30
   11fb3:	48 89 ef             	mov    rdi,rbp
   11fb6:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
   11fbb:	e8 80 11 ff ff       	call   3140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
   11fc0:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   11fc5:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
		      __narrow_str = {__s.data(), __s.size() + __extras};
   11fca:	4d 01 c7             	add    r15,r8
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   11fcd:	e9 0d fd ff ff       	jmp    11cdf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xacf>
	      if (__trailing_zeros && __prec != 0)
   11fd2:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   11fd5:	41 b8 01 00 00 00    	mov    r8d,0x1
   11fdb:	e9 2a fa ff ff       	jmp    11a0a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7fa>
		    __p = __s.size();
   11fe0:	4d 89 f9             	mov    r9,r15
   11fe3:	e9 c6 f3 ff ff       	jmp    113ae <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x19e>
   11fe8:	bd 1d 00 00 00       	mov    ebp,0x1d
   11fed:	be 1e 00 00 00       	mov    esi,0x1e
   11ff2:	e9 8a fb ff ff       	jmp    11b81 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x971>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
   11ff7:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   11ffc:	4d 89 f8             	mov    r8,r15
   11fff:	31 d2                	xor    edx,edx
   12001:	e8 5a 55 ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
   12006:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   1200b:	e9 00 fb ff ff       	jmp    11b10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   12010:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   12015:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
   1201a:	41 b8 30 00 00 00    	mov    r8d,0x30
   12020:	31 d2                	xor    edx,edx
   12022:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12027:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   1202c:	e8 2f 23 ff ff       	call   4360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>
   12031:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
   12036:	e9 67 fa ff ff       	jmp    11aa2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x892>
	this->push_back(__c);
   1203b:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12040:	be 2e 00 00 00       	mov    esi,0x2e
   12045:	e8 66 5e ff ff       	call   7eb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
   1204a:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
	return *this;
   1204f:	e9 42 fa ff ff       	jmp    11a96 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x886>
	return _M_is_local() ? size_type(_S_local_capacity)
   12054:	ba 0f 00 00 00       	mov    edx,0xf
   12059:	e9 86 fa ff ff       	jmp    11ae4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8d4>
   1205e:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   12061:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
   12063:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      }
   12068:	e9 a3 fa ff ff       	jmp    11b10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1206d:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
   12074:	00 
   12075:	49 89 f0             	mov    r8,rsi
   12078:	48 89 08             	mov    QWORD PTR [rax],rcx
   1207b:	89 d1                	mov    ecx,edx
   1207d:	48 8b 7c 0e f8       	mov    rdi,QWORD PTR [rsi+rcx*1-0x8]
   12082:	48 89 7c 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rdi
   12087:	48 8d 78 08          	lea    rdi,[rax+0x8]
   1208b:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
   1208f:	48 29 f8             	sub    rax,rdi
   12092:	48 89 c1             	mov    rcx,rax
   12095:	49 29 c0             	sub    r8,rax
   12098:	01 d1                	add    ecx,edx
   1209a:	83 e1 f8             	and    ecx,0xfffffff8
   1209d:	83 f9 08             	cmp    ecx,0x8
   120a0:	0f 82 8e fe ff ff    	jb     11f34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd24>
   120a6:	83 e1 f8             	and    ecx,0xfffffff8
   120a9:	31 c0                	xor    eax,eax
   120ab:	89 c2                	mov    edx,eax
   120ad:	83 c0 08             	add    eax,0x8
   120b0:	4d 8b 0c 10          	mov    r9,QWORD PTR [r8+rdx*1]
   120b4:	4c 89 0c 17          	mov    QWORD PTR [rdi+rdx*1],r9
   120b8:	39 c8                	cmp    eax,ecx
   120ba:	72 ef                	jb     120ab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe9b>
   120bc:	e9 73 fe ff ff       	jmp    11f34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd24>
	__c1 = __c2;
   120c1:	0f b6 94 24 b0 00 00 	movzx  edx,BYTE PTR [rsp+0xb0]
   120c8:	00 
   120c9:	88 10                	mov    BYTE PTR [rax],dl
      { return _M_string_length; }
   120cb:	4c 8b 84 24 a8 00 00 	mov    r8,QWORD PTR [rsp+0xa8]
   120d2:	00 
      { return _M_dataplus._M_p; }
   120d3:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
   120da:	00 
      }
   120db:	e9 6a fe ff ff       	jmp    11f4a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd3a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   120e0:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [rsp+0xb0]
   120e7:	89 10                	mov    DWORD PTR [rax],edx
   120e9:	8b 54 0e fc          	mov    edx,DWORD PTR [rsi+rcx*1-0x4]
   120ed:	89 54 08 fc          	mov    DWORD PTR [rax+rcx*1-0x4],edx
   120f1:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   120f8:	00 
   120f9:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   12100:	00 
   12101:	e9 3e fe ff ff       	jmp    11f44 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd34>
   12106:	0f b7 54 0e fe       	movzx  edx,WORD PTR [rsi+rcx*1-0x2]
   1210b:	66 89 54 08 fe       	mov    WORD PTR [rax+rcx*1-0x2],dx
   12110:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   12117:	00 
   12118:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   1211f:	00 
   12120:	e9 1f fe ff ff       	jmp    11f44 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd34>
	  __throw_length_error(__N(__s));
   12125:	48 8d 3d 8f 30 00 00 	lea    rdi,[rip+0x308f]        # 151bb <CSWTCH.1104+0xdb>
   1212c:	e8 ff 0f ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
   12131:	4c 89 f9             	mov    rcx,r15
   12134:	4c 89 ca             	mov    rdx,r9
   12137:	48 8d 35 ea 30 00 00 	lea    rsi,[rip+0x30ea]        # 15228 <CSWTCH.1104+0x148>
   1213e:	31 c0                	xor    eax,eax
   12140:	48 8d 3d b9 32 00 00 	lea    rdi,[rip+0x32b9]        # 15400 <CSWTCH.1104+0x320>
   12147:	e8 94 11 ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
   1214c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000012150 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   12150:	41 57                	push   r15
   12152:	41 56                	push   r14
   12154:	41 55                	push   r13
   12156:	41 54                	push   r12
   12158:	49 89 fc             	mov    r12,rdi
   1215b:	55                   	push   rbp
   1215c:	53                   	push   rbx
   1215d:	48 81 ec 48 01 00 00 	sub    rsp,0x148
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   12164:	0f b6 5f 01          	movzx  ebx,BYTE PTR [rdi+0x1]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12168:	4c 8d 6c 24 70       	lea    r13,[rsp+0x70]
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   1216d:	48 89 74 24 18       	mov    QWORD PTR [rsp+0x18],rsi
	  if (__use_prec)
   12172:	89 d8                	mov    eax,ebx
   12174:	4c 89 6c 24 60       	mov    QWORD PTR [rsp+0x60],r13
      { _M_string_length = __length; }
   12179:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
   12180:	00 00 
	__c1 = __c2;
   12182:	c6 44 24 70 00       	mov    BYTE PTR [rsp+0x70],0x0
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   12187:	f3 0f 11 44 24 08    	movss  DWORD PTR [rsp+0x8],xmm0
	  if (__use_prec)
   1218d:	83 e0 06             	and    eax,0x6
   12190:	0f 85 7a 04 00 00    	jne    12610 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c0>
	  switch (_M_spec._M_type)
   12196:	89 d8                	mov    eax,ebx
   12198:	48 8d 15 41 39 00 00 	lea    rdx,[rip+0x3941]        # 15ae0 <CSWTCH.1104+0xa00>
   1219f:	c0 e8 03             	shr    al,0x3
   121a2:	83 e0 0f             	and    eax,0xf
   121a5:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   121a9:	48 01 d0             	add    rax,rdx
   121ac:	ff e0                	jmp    rax
   121ae:	66 90                	xchg   ax,ax
	      return __format::to_chars(__b, __e, __v);
   121b0:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   121b6:	48 8d 9c 24 c1 00 00 	lea    rbx,[rsp+0xc1]
   121bd:	00 
   121be:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   121c5:	00 
   121c6:	48 89 df             	mov    rdi,rbx
   121c9:	e8 72 0e ff ff       	call   3040 <std::to_chars(char*, char*, float)@plt>
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   121ce:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   121d3:	48 89 c5             	mov    rbp,rax
   121d6:	83 fa 4b             	cmp    edx,0x4b
   121d9:	0f 84 0d 0c 00 00    	je     12dec <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc9c>
	  char* __end = __buf + sizeof(__buf);
   121df:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   121e6:	00 
	  char __expc = 'e';
   121e7:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	  char* __end = __buf + sizeof(__buf);
   121ec:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	  size_t __prec = 6;
   121f1:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   121f8:	00 00 
	  if (!__builtin_signbit(__v))
   121fa:	8b 44 24 08          	mov    eax,DWORD PTR [rsp+0x8]
	      if (_M_spec._M_sign == _Sign_plus)
   121fe:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
	  if (!__builtin_signbit(__v))
   12203:	85 c0                	test   eax,eax
   12205:	0f 88 35 03 00 00    	js     12540 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
	      if (_M_spec._M_sign == _Sign_plus)
   1220b:	44 89 f0             	mov    eax,r14d
   1220e:	83 e0 0c             	and    eax,0xc
   12211:	3c 04                	cmp    al,0x4
   12213:	0f 84 cf 06 00 00    	je     128e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x798>
		__have_sign = false;
   12219:	45 31 db             	xor    r11d,r11d
	      else if (_M_spec._M_sign == _Sign_space)
   1221c:	3c 0c                	cmp    al,0xc
   1221e:	0f 84 0c 03 00 00    	je     12530 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e0>
	  string_view __narrow_str(__start, __res.ptr - __start);
   12224:	49 89 ef             	mov    r15,rbp
   12227:	49 29 df             	sub    r15,rbx
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   1222a:	41 f6 c6 10          	test   r14b,0x10
   1222e:	0f 84 2c 02 00 00    	je     12460 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
   12234:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   1223a:	f3 0f 10 0d c6 2d 00 	movss  xmm1,DWORD PTR [rip+0x2dc6]        # 15008 <_IO_stdin_used+0x8>
   12241:	00 
   12242:	0f 54 05 d7 65 00 00 	andps  xmm0,XMMWORD PTR [rip+0x65d7]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x460>
   12249:	0f 2e c8             	ucomiss xmm1,xmm0
   1224c:	0f 82 0e 02 00 00    	jb     12460 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
      if (__pos < this->_M_len)
   12252:	4d 85 ff             	test   r15,r15
   12255:	0f 84 15 04 00 00    	je     12670 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
   1225b:	4c 89 fa             	mov    rdx,r15
   1225e:	be 2e 00 00 00       	mov    esi,0x2e
   12263:	48 89 df             	mov    rdi,rbx
   12266:	44 88 5c 24 38       	mov    BYTE PTR [rsp+0x38],r11b
   1226b:	e8 b0 0f ff ff       	call   3220 <memchr@plt>
	  if (__p)
   12270:	44 0f b6 5c 24 38    	movzx  r11d,BYTE PTR [rsp+0x38]
   12276:	48 85 c0             	test   rax,rax
   12279:	0f 84 f1 03 00 00    	je     12670 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
	    __ret = __p - this->_M_str;
   1227f:	48 29 d8             	sub    rax,rbx
   12282:	49 89 c2             	mov    r10,rax
	      if (__d != __s.npos) // Found decimal point.
   12285:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
   12289:	0f 84 e1 03 00 00    	je     12670 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
		  __p = __s.find(__expc, __d + 1);
   1228f:	48 8d 48 01          	lea    rcx,[rax+0x1]
      if (__pos < this->_M_len)
   12293:	4c 39 f9             	cmp    rcx,r15
   12296:	0f 83 9c 08 00 00    	jae    12b38 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9e8>
   1229c:	0f be 74 24 37       	movsx  esi,BYTE PTR [rsp+0x37]
	  const size_type __n = this->_M_len - __pos;
   122a1:	4c 89 fa             	mov    rdx,r15
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   122a4:	48 8d 3c 0b          	lea    rdi,[rbx+rcx*1]
   122a8:	44 88 5c 24 40       	mov    BYTE PTR [rsp+0x40],r11b
	  const size_type __n = this->_M_len - __pos;
   122ad:	48 29 ca             	sub    rdx,rcx
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   122b0:	48 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],rcx
   122b5:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
   122ba:	e8 61 0f ff ff       	call   3220 <memchr@plt>
	  if (__p)
   122bf:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
   122c4:	44 0f b6 5c 24 40    	movzx  r11d,BYTE PTR [rsp+0x40]
   122ca:	48 85 c0             	test   rax,rax
   122cd:	4c 8b 54 24 48       	mov    r10,QWORD PTR [rsp+0x48]
   122d2:	49 89 c1             	mov    r9,rax
   122d5:	0f 84 25 0c 00 00    	je     12f00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdb0>
	    __ret = __p - this->_M_str;
   122db:	49 29 d9             	sub    r9,rbx
		    __p = __s.size();
   122de:	49 83 f9 ff          	cmp    r9,0xffffffffffffffff
   122e2:	4d 0f 44 cf          	cmove  r9,r15
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   122e6:	45 31 c0             	xor    r8d,r8d
   122e9:	4d 39 d1             	cmp    r9,r10
   122ec:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
   122f0:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   122f5:	0f 84 a5 08 00 00    	je     12ba0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa50>
		      if (__s[__have_sign] != '0')
   122fb:	41 0f b6 d3          	movzx  edx,r11b
   122ff:	80 3c 13 30          	cmp    BYTE PTR [rbx+rdx*1],0x30
   12303:	0f 84 54 03 00 00    	je     1265d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50d>
			__sigfigs = __p - __have_sign - 1;
   12309:	4c 89 c8             	mov    rax,r9
   1230c:	48 29 d0             	sub    rax,rdx
   1230f:	48 83 e8 01          	sub    rax,0x1
	      if (__trailing_zeros && __prec != 0)
   12313:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   12319:	0f 85 9e 03 00 00    	jne    126bd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x56d>
   1231f:	90                   	nop
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   12320:	4d 85 c0             	test   r8,r8
   12323:	0f 85 01 06 00 00    	jne    1292a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7da>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12329:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   12330:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   12331:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
   12335:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   1233c:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12341:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   12348:	00 
	__c1 = __c2;
   12349:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   12350:	00 
   12351:	0f 84 51 01 00 00    	je     124a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x358>
      if (!_M_hasval)
   12357:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1235c:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
   12360:	0f 84 0a 08 00 00    	je     12b70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa20>
      return _M_loc;
   12366:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
      std::locale locale() { return _M_loc.value(); }
   1236b:	4c 8d 74 24 58       	lea    r14,[rsp+0x58]
      return _M_loc;
   12370:	48 8d 70 18          	lea    rsi,[rax+0x18]
      std::locale locale() { return _M_loc.value(); }
   12374:	4c 89 f7             	mov    rdi,r14
   12377:	e8 14 0e ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
   1237c:	0f be 4c 24 37       	movsx  ecx,BYTE PTR [rsp+0x37]
   12381:	48 89 da             	mov    rdx,rbx
   12384:	4c 89 fe             	mov    rsi,r15
   12387:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
   1238e:	00 
   1238f:	4d 89 f0             	mov    r8,r14
   12392:	e8 c9 22 ff ff       	call   4660 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>
      { return _M_dataplus._M_p; }
   12397:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   1239e:	00 
   1239f:	48 89 c7             	mov    rdi,rax
	if (_M_data() == _M_local_data())
   123a2:	48 39 e8             	cmp    rax,rbp
   123a5:	0f 84 df 09 00 00    	je     12d8a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc3a>
	    if (_M_string_length > _S_local_capacity)
   123ab:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   123b2:	00 
      { return _M_dataplus._M_p; }
   123b3:	48 8b 8c 24 a0 00 00 	mov    rcx,QWORD PTR [rsp+0xa0]
   123ba:	00 
	if (_M_data() == _M_local_data())
   123bb:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   123c2:	00 
	    if (_M_string_length > _S_local_capacity)
   123c3:	49 89 d0             	mov    r8,rdx
	if (_M_data() == _M_local_data())
   123c6:	48 39 f1             	cmp    rcx,rsi
   123c9:	0f 84 4a 0a 00 00    	je     12e19 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcc9>
   123cf:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
   123d4:	48 89 8c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rcx
   123db:	00 
		    __capacity = _M_allocated_capacity;
   123dc:	48 8b 94 24 90 00 00 	mov    rdx,QWORD PTR [rsp+0x90]
   123e3:	00 
   123e4:	0f 16 84 24 b0 00 00 	movhps xmm0,QWORD PTR [rsp+0xb0]
   123eb:	00 
      { _M_string_length = __length; }
   123ec:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   123f3:	00 
	    if (__data)
   123f4:	48 85 c0             	test   rax,rax
   123f7:	0f 84 bb 09 00 00    	je     12db8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc68>
      { _M_dataplus._M_p = __p; }
   123fd:	48 89 84 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rax
   12404:	00 
      { _M_allocated_capacity = __capacity; }
   12405:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
   1240c:	00 
      { _M_string_length = __length; }
   1240d:	48 c7 84 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],0x0
   12414:	00 00 00 00 00 
   12419:	c6 07 00             	mov    BYTE PTR [rdi],0x0
      { return _M_dataplus._M_p; }
   1241c:	48 8b bc 24 a0 00 00 	mov    rdi,QWORD PTR [rsp+0xa0]
   12423:	00 
	if (_M_data() == _M_local_data())
   12424:	48 39 f7             	cmp    rdi,rsi
   12427:	74 11                	je     1243a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ea>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   12429:	48 8b 84 24 b0 00 00 	mov    rax,QWORD PTR [rsp+0xb0]
   12430:	00 
   12431:	48 8d 70 01          	lea    rsi,[rax+0x1]
   12435:	e8 c6 0d ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
   1243a:	4c 89 f7             	mov    rdi,r14
   1243d:	e8 7e 0e ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_string_length; }
   12442:	48 8b 84 24 88 00 00 	mov    rax,QWORD PTR [rsp+0x88]
   12449:	00 
	      if (!__wstr.empty())
   1244a:	48 85 c0             	test   rax,rax
   1244d:	74 59                	je     124a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x358>
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   1244f:	49 89 de             	mov    r14,rbx
		__str = __wstr;
   12452:	49 89 c7             	mov    r15,rax
   12455:	48 8b 9c 24 80 00 00 	mov    rbx,QWORD PTR [rsp+0x80]
   1245c:	00 
   1245d:	eb 4c                	jmp    124ab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x35b>
   1245f:	90                   	nop
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12460:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   12467:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   12468:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
   1246c:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   12473:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12478:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   1247f:	00 
   12480:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   12487:	00 
   12488:	74 1e                	je     124a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x358>
   1248a:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12490:	f3 0f 10 0d 70 2b 00 	movss  xmm1,DWORD PTR [rip+0x2b70]        # 15008 <_IO_stdin_used+0x8>
   12497:	00 
   12498:	0f 54 05 81 63 00 00 	andps  xmm0,XMMWORD PTR [rip+0x6381]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x460>
   1249f:	0f 2e c8             	ucomiss xmm1,xmm0
   124a2:	0f 83 af fe ff ff    	jae    12357 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x207>
      { _M_dataplus._M_p = __p; }
   124a8:	49 89 de             	mov    r14,rbx
	  if (_M_width_kind == _WP_value)
   124ab:	41 0f b7 04 24       	movzx  eax,WORD PTR [r12]
   124b0:	66 25 80 01          	and    ax,0x180
   124b4:	66 3d 80 00          	cmp    ax,0x80
   124b8:	0f 84 92 00 00 00    	je     12550 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
	  else if (_M_width_kind == _WP_from_arg)
   124be:	66 3d 00 01          	cmp    ax,0x100
   124c2:	0f 84 38 04 00 00    	je     12900 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7b0>
   124c8:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   124cd:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
	    return __format::__write(__fc.out(), __str);
   124d1:	48 89 da             	mov    rdx,rbx
   124d4:	4c 89 fe             	mov    rsi,r15
   124d7:	e8 04 64 ff ff       	call   88e0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
   124dc:	48 89 c3             	mov    rbx,rax
      { return _M_dataplus._M_p; }
   124df:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
   124e6:	00 
	if (_M_data() == _M_local_data())
   124e7:	48 39 ef             	cmp    rdi,rbp
   124ea:	74 11                	je     124fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ad>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   124ec:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
   124f3:	00 
   124f4:	48 8d 70 01          	lea    rsi,[rax+0x1]
   124f8:	e8 03 0d ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { return _M_dataplus._M_p; }
   124fd:	48 8b 7c 24 60       	mov    rdi,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
   12502:	4c 39 ef             	cmp    rdi,r13
   12505:	74 0e                	je     12515 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   12507:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   1250c:	48 8d 70 01          	lea    rsi,[rax+0x1]
   12510:	e8 eb 0c ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
   12515:	48 81 c4 48 01 00 00 	add    rsp,0x148
   1251c:	48 89 d8             	mov    rax,rbx
   1251f:	5b                   	pop    rbx
   12520:	5d                   	pop    rbp
   12521:	41 5c                	pop    r12
   12523:	41 5d                	pop    r13
   12525:	41 5e                	pop    r14
   12527:	41 5f                	pop    r15
   12529:	c3                   	ret
   1252a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
		*--__start = ' ';
   12530:	c6 43 ff 20          	mov    BYTE PTR [rbx-0x1],0x20
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   12534:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
		*--__start = ' ';
   12539:	48 83 eb 01          	sub    rbx,0x1
   1253d:	0f 1f 00             	nop    DWORD PTR [rax]
	  bool __have_sign = true;
   12540:	41 bb 01 00 00 00    	mov    r11d,0x1
   12546:	e9 d9 fc ff ff       	jmp    12224 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd4>
   1254b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    __width = _M_width;
   12550:	45 0f b7 44 24 04    	movzx  r8d,WORD PTR [r12+0x4]
      iterator out() { return std::move(_M_out); }
   12556:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1255b:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
	  if (__width <= __str.size())
   1255f:	4d 39 c7             	cmp    r15,r8
   12562:	0f 83 69 ff ff ff    	jae    124d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x381>
	  _Align __align = _M_spec._M_align;
   12568:	41 0f b6 14 24       	movzx  edx,BYTE PTR [r12]
	  char32_t __fill_char = _M_spec._M_fill;
   1256d:	45 8b 4c 24 08       	mov    r9d,DWORD PTR [r12+0x8]
	  size_t __nfill = __width - __str.size();
   12572:	4d 29 f8             	sub    r8,r15
	  if (__align == _Align_default)
   12575:	89 d1                	mov    ecx,edx
   12577:	83 e1 03             	and    ecx,0x3
   1257a:	75 7f                	jne    125fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
   1257c:	83 e2 40             	and    edx,0x40
   1257f:	74 6f                	je     125f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
   12581:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12587:	f3 0f 10 0d 79 2a 00 	movss  xmm1,DWORD PTR [rip+0x2a79]        # 15008 <_IO_stdin_used+0x8>
   1258e:	00 
   1258f:	0f 54 05 8a 62 00 00 	andps  xmm0,XMMWORD PTR [rip+0x628a]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x460>
   12596:	0f 2e c8             	ucomiss xmm1,xmm0
   12599:	72 55                	jb     125f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
   1259b:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
		  if (!__format::__is_xdigit(__narrow_str[0]))
   1259f:	48 8d 15 da 39 00 00 	lea    rdx,[rip+0x39da]        # 15f80 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
	      __align = _Align_right;
   125a6:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
   125ab:	41 b9 30 00 00 00    	mov    r9d,0x30
		  if (!__format::__is_xdigit(__narrow_str[0]))
   125b1:	80 3c 02 0f          	cmp    BYTE PTR [rdx+rax*1],0xf
   125b5:	76 44                	jbe    125fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
	_M_sink->_M_write(__c);
   125b7:	0f be 33             	movsx  esi,BYTE PTR [rbx]
   125ba:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
	this->_M_str += __n;
   125bf:	48 83 c3 01          	add    rbx,0x1
	this->_M_len -= __n;
   125c3:	49 83 ef 01          	sub    r15,0x1
   125c7:	89 4c 24 18          	mov    DWORD PTR [rsp+0x18],ecx
   125cb:	44 89 4c 24 10       	mov    DWORD PTR [rsp+0x10],r9d
   125d0:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
   125d5:	e8 36 64 ff ff       	call   8a10 <std::__format::_Sink<char>::_M_write(char)>
      }
   125da:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
   125df:	44 8b 4c 24 10       	mov    r9d,DWORD PTR [rsp+0x10]
   125e4:	8b 4c 24 18          	mov    ecx,DWORD PTR [rsp+0x18]
   125e8:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   125ed:	eb 0c                	jmp    125fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
   125ef:	90                   	nop
	      __align = _Align_right;
   125f0:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
   125f5:	41 b9 20 00 00 00    	mov    r9d,0x20
	  return __format::__write_padded(std::move(__out), __str,
   125fb:	48 89 da             	mov    rdx,rbx
   125fe:	4c 89 fe             	mov    rsi,r15
   12601:	e8 3a 64 ff ff       	call   8a40 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
   12606:	48 89 c3             	mov    rbx,rax
					  __align, __nfill, __fill_char);
   12609:	e9 d1 fe ff ff       	jmp    124df <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x38f>
   1260e:	66 90                	xchg   ax,ax
	  if (_M_prec_kind == _WP_value)
   12610:	3c 02                	cmp    al,0x2
   12612:	0f 84 28 04 00 00    	je     12a40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
	  size_t __prec = -1;
   12618:	48 c7 44 24 10 ff ff 	mov    QWORD PTR [rsp+0x10],0xffffffffffffffff
   1261f:	ff ff 
	  else if (_M_prec_kind == _WP_from_arg)
   12621:	3c 04                	cmp    al,0x4
   12623:	0f 84 87 02 00 00    	je     128b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x760>
	  switch (_M_spec._M_type)
   12629:	89 d8                	mov    eax,ebx
   1262b:	48 8d 15 d2 34 00 00 	lea    rdx,[rip+0x34d2]        # 15b04 <CSWTCH.1104+0xa24>
   12632:	c0 e8 03             	shr    al,0x3
   12635:	83 e0 0f             	and    eax,0xf
   12638:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   1263c:	48 01 d0             	add    rax,rdx
   1263f:	ff e0                	jmp    rax
   12641:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   12648:	00 00 00 00 
   1264c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      for (; __pos < this->_M_len; ++__pos)
   12650:	48 83 c1 01          	add    rcx,0x1
   12654:	4c 39 f9             	cmp    rcx,r15
   12657:	0f 83 01 05 00 00    	jae    12b5e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa0e>
	if (!traits_type::eq(this->_M_str[__pos], __c))
   1265d:	80 3c 0b 30          	cmp    BYTE PTR [rbx+rcx*1],0x30
   12661:	74 ed                	je     12650 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x500>
   12663:	e9 fd 04 00 00       	jmp    12b65 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa15>
   12668:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1266f:	00 
		  __p = __s.find(__expc); // Find the exponent, if present.
   12670:	0f be 54 24 37       	movsx  edx,BYTE PTR [rsp+0x37]
   12675:	31 c9                	xor    ecx,ecx
   12677:	48 89 de             	mov    rsi,rbx
   1267a:	4c 89 ff             	mov    rdi,r15
   1267d:	44 88 5c 24 38       	mov    BYTE PTR [rsp+0x38],r11b
   12682:	e8 d9 14 ff ff       	call   3b60 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>
		    __p = __s.size();
   12687:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
		  __p = __s.find(__expc); // Find the exponent, if present.
   1268b:	49 89 c2             	mov    r10,rax
		    __p = __s.size();
   1268e:	4d 0f 44 d7          	cmove  r10,r15
	      if (__trailing_zeros && __prec != 0)
   12692:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   12697:	0f 84 7b 02 00 00    	je     12918 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7c8>
   1269d:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   126a3:	0f 84 49 08 00 00    	je     12ef2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xda2>
		  __sigfigs = __d - __have_sign;
   126a9:	0f b6 54 24 38       	movzx  edx,BYTE PTR [rsp+0x38]
   126ae:	4c 89 d0             	mov    rax,r10
   126b1:	4d 89 d1             	mov    r9,r10
   126b4:	41 b8 01 00 00 00    	mov    r8d,0x1
   126ba:	48 29 d0             	sub    rax,rdx
		  __z = __prec - __sigfigs;
   126bd:	48 29 44 24 10       	sub    QWORD PTR [rsp+0x10],rax
   126c2:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   126c7:	49 01 c8             	add    r8,rcx
   126ca:	e9 51 fc ff ff       	jmp    12320 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
   126cf:	90                   	nop
	      if (_M_spec._M_type != _Pres_A)
   126d0:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   126d3:	ba 65 00 00 00       	mov    edx,0x65
   126d8:	b8 70 00 00 00       	mov    eax,0x70
   126dd:	80 fb 10             	cmp    bl,0x10
   126e0:	0f 44 c2             	cmove  eax,edx
   126e3:	45 31 f6             	xor    r14d,r14d
   126e6:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
	      return __format::to_chars(__b, __e, __v, __fmt);
   126ea:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   126f0:	48 8d 9c 24 c1 00 00 	lea    rbx,[rsp+0xc1]
   126f7:	00 
   126f8:	ba 04 00 00 00       	mov    edx,0x4
   126fd:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   12704:	00 
   12705:	48 89 df             	mov    rdi,rbx
   12708:	e8 e3 0a ff ff       	call   31f0 <std::to_chars(char*, char*, float, std::chars_format)@plt>
   1270d:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   12710:	83 fa 4b             	cmp    edx,0x4b
   12713:	0f 84 f7 03 00 00    	je     12b10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9c0>
	  char* __end = __buf + sizeof(__buf);
   12719:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   12720:	00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   12721:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   12726:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1272d:	00 00 
	  char* __end = __buf + sizeof(__buf);
   1272f:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	  if (__upper)
   12734:	45 84 f6             	test   r14b,r14b
   12737:	0f 84 bd fa ff ff    	je     121fa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   1273d:	48 39 eb             	cmp    rbx,rbp
   12740:	0f 84 b4 fa ff ff    	je     121fa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
   12746:	49 89 de             	mov    r14,rbx
   12749:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		*__p = std::toupper(*__p);
   12750:	41 0f be 3e          	movsx  edi,BYTE PTR [r14]
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   12754:	49 83 c6 01          	add    r14,0x1
		*__p = std::toupper(*__p);
   12758:	e8 f3 0b ff ff       	call   3350 <toupper@plt>
   1275d:	41 88 46 ff          	mov    BYTE PTR [r14-0x1],al
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   12761:	49 39 ee             	cmp    r14,rbp
   12764:	75 ea                	jne    12750 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
   12766:	e9 8f fa ff ff       	jmp    121fa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
   1276b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
   12770:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   12773:	ba 50 00 00 00       	mov    edx,0x50
   12778:	b8 70 00 00 00       	mov    eax,0x70
   1277d:	41 be 01 00 00 00    	mov    r14d,0x1
   12783:	80 fb 10             	cmp    bl,0x10
   12786:	0f 44 c2             	cmove  eax,edx
   12789:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
   1278d:	e9 58 ff ff ff       	jmp    126ea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x59a>
   12792:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   12798:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1279f:	00 00 
   127a1:	b9 06 00 00 00       	mov    ecx,0x6
   127a6:	45 31 f6             	xor    r14d,r14d
	  char __expc = 'e';
   127a9:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      __fmt = chars_format::fixed;
   127ae:	bb 02 00 00 00       	mov    ebx,0x2
	  bool __trailing_zeros = false;
   127b3:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   127b8:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   127be:	4c 8d bc 24 c1 00 00 	lea    r15,[rsp+0xc1]
   127c5:	00 
   127c6:	89 da                	mov    edx,ebx
   127c8:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   127cf:	00 
   127d0:	4c 89 ff             	mov    rdi,r15
   127d3:	e8 78 0a ff ff       	call   3250 <std::to_chars(char*, char*, float, std::chars_format, int)@plt>
   127d8:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   127db:	83 fa 4b             	cmp    edx,0x4b
   127de:	0f 84 6c 02 00 00    	je     12a50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
	  char* __end = __buf + sizeof(__buf);
   127e4:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   127eb:	00 
	  char* __start = __buf + 1; // reserve space for sign
   127ec:	4c 89 fb             	mov    rbx,r15
	  char* __end = __buf + sizeof(__buf);
   127ef:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   127f4:	e9 3b ff ff ff       	jmp    12734 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5e4>
   127f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
   12800:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12807:	00 00 
   12809:	b9 06 00 00 00       	mov    ecx,0x6
	      __upper = true;
   1280e:	41 be 01 00 00 00    	mov    r14d,0x1
   12814:	eb 93                	jmp    127a9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x659>
   12816:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   1281d:	00 00 00 
	  switch (_M_spec._M_type)
   12820:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   12825:	b9 06 00 00 00       	mov    ecx,0x6
   1282a:	45 31 f6             	xor    r14d,r14d
   1282d:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12834:	00 00 
	      __trailing_zeros = true;
   12836:	c6 44 24 20 01       	mov    BYTE PTR [rsp+0x20],0x1
	      __fmt = chars_format::general;
   1283b:	bb 03 00 00 00       	mov    ebx,0x3
	      break;
   12840:	e9 73 ff ff ff       	jmp    127b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   12845:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   12848:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1284f:	00 00 
   12851:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   12856:	c6 44 24 37 45       	mov    BYTE PTR [rsp+0x37],0x45
	      __upper = true;
   1285b:	41 be 01 00 00 00    	mov    r14d,0x1
   12861:	eb d3                	jmp    12836 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6e6>
   12863:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   12868:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   1286d:	b9 06 00 00 00       	mov    ecx,0x6
   12872:	45 31 f6             	xor    r14d,r14d
   12875:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1287c:	00 00 
	  bool __trailing_zeros = false;
   1287e:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	      __fmt = chars_format::scientific;
   12883:	bb 01 00 00 00       	mov    ebx,0x1
	      break;
   12888:	e9 2b ff ff ff       	jmp    127b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   1288d:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   12890:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12897:	00 00 
   12899:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   1289e:	c6 44 24 37 45       	mov    BYTE PTR [rsp+0x37],0x45
	      __upper = true;
   128a3:	41 be 01 00 00 00    	mov    r14d,0x1
   128a9:	eb d3                	jmp    1287e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x72e>
   128ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   128b0:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
   128b4:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
   128b9:	e8 f2 12 ff ff       	call   3bb0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   128be:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   128c3:	e9 61 fd ff ff       	jmp    12629 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d9>
	  char __expc = 'e';
   128c8:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   128cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
		__fmt = chars_format::general;
   128d1:	bb 03 00 00 00       	mov    ebx,0x3
	  bool __upper = false;
   128d6:	45 31 f6             	xor    r14d,r14d
	  bool __trailing_zeros = false;
   128d9:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   128de:	e9 d5 fe ff ff       	jmp    127b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   128e3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		*--__start = '+';
   128e8:	c6 43 ff 2b          	mov    BYTE PTR [rbx-0x1],0x2b
	  bool __have_sign = true;
   128ec:	41 bb 01 00 00 00    	mov    r11d,0x1
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   128f2:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
		*--__start = '+';
   128f7:	48 83 eb 01          	sub    rbx,0x1
   128fb:	e9 24 f9 ff ff       	jmp    12224 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd4>
   12900:	41 0f b7 7c 24 04    	movzx  edi,WORD PTR [r12+0x4]
   12906:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
   1290b:	e8 80 13 ff ff       	call   3c90 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   12910:	49 89 c0             	mov    r8,rax
   12913:	e9 3e fc ff ff       	jmp    12556 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x406>
	      size_t __z = 0;   // Number of trailing zeros to add.
   12918:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   1291f:	00 00 
	      if (__trailing_zeros && __prec != 0)
   12921:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   12924:	41 b8 01 00 00 00    	mov    r8d,0x1
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
   1292a:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
   12930:	75 11                	jne    12943 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7f3>
   12932:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
   12937:	48 29 e8             	sub    rax,rbp
   1293a:	4c 39 c0             	cmp    rax,r8
   1293d:	0f 83 41 05 00 00    	jae    12e84 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd34>
		      __dynbuf.reserve(__s.size() + __extras);
   12943:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
   12948:	4b 8d 34 07          	lea    rsi,[r15+r8*1]
   1294c:	4c 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],r9
   12951:	48 89 c7             	mov    rdi,rax
   12954:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
   12959:	4c 89 44 24 40       	mov    QWORD PTR [rsp+0x40],r8
   1295e:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   12963:	e8 b8 2f ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
		      if (__dynbuf.empty())
   12968:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
   1296e:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
   12973:	4c 8b 4c 24 38       	mov    r9,QWORD PTR [rsp+0x38]
   12978:	0f 85 32 02 00 00    	jne    12bb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa60>
	return _M_replace(size_type(0), this->size(), __s, __n);
   1297e:	4d 39 cf             	cmp    r15,r9
   12981:	4d 89 c8             	mov    r8,r9
   12984:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12989:	48 89 d9             	mov    rcx,rbx
   1298c:	4d 0f 46 c7          	cmovbe r8,r15
   12990:	31 d2                	xor    edx,edx
   12992:	31 f6                	xor    esi,esi
   12994:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   12999:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   1299e:	e8 ad 1a ff ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  if (__d == __p)
   129a3:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
   129a8:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   129ad:	4d 39 d1             	cmp    r9,r10
   129b0:	0f 84 a5 05 00 00    	je     12f5b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe0b>
			  if (__z)
   129b6:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   129bc:	0f 85 6e 05 00 00    	jne    12f30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xde0>
    if (__pos > __size)
   129c2:	4d 39 cf             	cmp    r15,r9
   129c5:	0f 82 86 06 00 00    	jb     13051 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf01>
      { return _M_string_length; }
   129cb:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
   129d0:	4d 29 cf             	sub    r15,r9
	return basic_string_view{_M_str + __pos, __rlen};
   129d3:	4a 8d 0c 0b          	lea    rcx,[rbx+r9*1]
	if (this->max_size() - (this->size() - __n1) < __n2)
   129d7:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
   129de:	ff ff 7f 
   129e1:	48 29 f0             	sub    rax,rsi
   129e4:	4c 39 f8             	cmp    rax,r15
   129e7:	0f 82 58 06 00 00    	jb     13045 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xef5>
      { return _M_dataplus._M_p; }
   129ed:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      const size_type __len = __n + this->size();
   129f2:	4a 8d 1c 3e          	lea    rbx,[rsi+r15*1]
	if (_M_data() == _M_local_data())
   129f6:	4c 39 e8             	cmp    rax,r13
   129f9:	0f 84 75 05 00 00    	je     12f74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe24>
	return _M_is_local() ? size_type(_S_local_capacity)
   129ff:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
      if (__len <= this->capacity())
   12a04:	48 39 da             	cmp    rdx,rbx
   12a07:	0f 82 0a 05 00 00    	jb     12f17 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdc7>
	  if (__n)
   12a0d:	4d 85 ff             	test   r15,r15
   12a10:	74 1e                	je     12a30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
   12a12:	48 8d 3c 30          	lea    rdi,[rax+rsi*1]
	if (__n == 1)
   12a16:	49 83 ff 01          	cmp    r15,0x1
   12a1a:	0f 84 5e 05 00 00    	je     12f7e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe2e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   12a20:	4c 89 fa             	mov    rdx,r15
   12a23:	48 89 ce             	mov    rsi,rcx
   12a26:	e8 85 07 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
   12a2b:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      { _M_string_length = __length; }
   12a30:	48 89 5c 24 68       	mov    QWORD PTR [rsp+0x68],rbx
	__c1 = __c2;
   12a35:	c6 04 18 00          	mov    BYTE PTR [rax+rbx*1],0x0
   12a39:	e9 b2 01 00 00       	jmp    12bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa0>
   12a3e:	66 90                	xchg   ax,ax
	    __prec = _M_prec;
   12a40:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   12a44:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   12a49:	e9 db fb ff ff       	jmp    12629 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d9>
   12a4e:	66 90                	xchg   ax,ax
	      size_t __guess = 8 + __prec;
   12a50:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   12a55:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
   12a5a:	48 8d 70 08          	lea    rsi,[rax+0x8]
	      if (__fmt == chars_format::fixed) // +ddd.prec
   12a5e:	83 fb 02             	cmp    ebx,0x2
   12a61:	0f 84 8a 02 00 00    	je     12cf1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xba1>
	      if (__guess <= sizeof(__buf)) [[unlikely]]
   12a67:	48 81 fe 80 00 00 00 	cmp    rsi,0x80
   12a6e:	0f 86 b4 00 00 00    	jbe    12b28 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9d8>
	      __dynbuf.reserve(__guess);
   12a74:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
   12a79:	48 89 c7             	mov    rdi,rax
   12a7c:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   12a81:	e8 9a 2e ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   12a86:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
   12a8b:	4c 39 ea             	cmp    rdx,r13
   12a8e:	0f 84 74 04 00 00    	je     12f08 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdb8>
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
   12a94:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   12a99:	48 8d 34 00          	lea    rsi,[rax+rax*1]
		    __res = __to_chars(__p + 1, __p + __n - 1);
   12a9d:	48 8d 6e ff          	lea    rbp,[rsi-0x1]
      reserve(__n);
   12aa1:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12aa6:	e8 75 2e ff ff       	call   5920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   12aab:	4c 8b 7c 24 60       	mov    r15,QWORD PTR [rsp+0x60]
	    if (__use_prec)
   12ab0:	80 7c 24 38 00       	cmp    BYTE PTR [rsp+0x38],0x0
		    __res = __to_chars(__p + 1, __p + __n - 1);
   12ab5:	49 8d 34 2f          	lea    rsi,[r15+rbp*1]
   12ab9:	49 8d 7f 01          	lea    rdi,[r15+0x1]
	    if (__use_prec)
   12abd:	0f 85 0d 03 00 00    	jne    12dd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc80>
	    else if (__fmt != chars_format{})
   12ac3:	85 db                	test   ebx,ebx
   12ac5:	0f 85 65 01 00 00    	jne    12c30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xae0>
	      return __format::to_chars(__b, __e, __v);
   12acb:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12ad1:	e8 6a 05 ff ff       	call   3040 <std::to_chars(char*, char*, float)@plt>
   12ad6:	48 89 c5             	mov    rbp,rax
   12ad9:	48 89 d0             	mov    rax,rdx
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
   12adc:	85 c0                	test   eax,eax
   12ade:	0f 85 74 02 00 00    	jne    12d58 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc08>
   12ae4:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
   12ae9:	48 89 e8             	mov    rax,rbp
   12aec:	4c 29 f8             	sub    rax,r15
      { _M_string_length = __length; }
   12aef:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
   12af4:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
   12af8:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
		  __start = __dynbuf.data() + 1; // reserve space for sign
   12afd:	48 8d 58 01          	lea    rbx,[rax+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   12b01:	48 03 44 24 68       	add    rax,QWORD PTR [rsp+0x68]
   12b06:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   12b0b:	e9 24 fc ff ff       	jmp    12734 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5e4>
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   12b10:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   12b15:	bb 04 00 00 00       	mov    ebx,0x4
   12b1a:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   12b1f:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12b26:	00 00 
		__guess = sizeof(__buf) * 2;
   12b28:	be 00 01 00 00       	mov    esi,0x100
   12b2d:	e9 42 ff ff ff       	jmp    12a74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x924>
   12b32:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   12b38:	45 31 c0             	xor    r8d,r8d
   12b3b:	49 39 c7             	cmp    r15,rax
   12b3e:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
   12b42:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   12b47:	0f 84 93 01 00 00    	je     12ce0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb90>
		      if (__s[__have_sign] != '0')
   12b4d:	41 0f b6 d3          	movzx  edx,r11b
		    __p = __s.size();
   12b51:	4d 89 f9             	mov    r9,r15
		      if (__s[__have_sign] != '0')
   12b54:	80 3c 13 30          	cmp    BYTE PTR [rbx+rdx*1],0x30
   12b58:	0f 85 ab f7 ff ff    	jne    12309 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1b9>
      return npos;
   12b5e:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
   12b65:	4c 89 c8             	mov    rax,r9
   12b68:	48 29 c8             	sub    rax,rcx
   12b6b:	e9 a3 f7 ff ff       	jmp    12313 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c3>
	  std::construct_at(&_M_loc);
   12b70:	48 8d 70 18          	lea    rsi,[rax+0x18]
   12b74:	49 89 c6             	mov    r14,rax
   12b77:	48 89 f7             	mov    rdi,rsi
   12b7a:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
   12b7f:	e8 ec 07 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
   12b84:	41 c6 46 20 01       	mov    BYTE PTR [r14+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
   12b89:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
   12b8e:	4c 8d 74 24 58       	lea    r14,[rsp+0x58]
   12b93:	e9 dc f7 ff ff       	jmp    12374 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x224>
   12b98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   12b9f:	00 
	      size_t __z = 0;   // Number of trailing zeros to add.
   12ba0:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   12ba7:	00 00 
   12ba9:	e9 72 f7 ff ff       	jmp    12320 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
   12bae:	66 90                	xchg   ax,ax
   12bb0:	4c 8b 44 24 40       	mov    r8,QWORD PTR [rsp+0x40]
			  __dynbuf.insert(__p, __extras, '0');
   12bb5:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12bba:	4c 89 ce             	mov    rsi,r9
   12bbd:	b9 30 00 00 00       	mov    ecx,0x30
   12bc2:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
   12bc7:	4c 89 c2             	mov    rdx,r8
   12bca:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
   12bcf:	e8 8c 19 ff ff       	call   4560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>
			  if (__d == __p)
   12bd4:	4c 8b 4c 24 10       	mov    r9,QWORD PTR [rsp+0x10]
   12bd9:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
   12bde:	4d 39 d1             	cmp    r9,r10
   12be1:	75 0d                	jne    12bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa0>
			    __dynbuf[__p] = '.';
   12be3:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   12be8:	42 c6 04 08 2e       	mov    BYTE PTR [rax+r9*1],0x2e
   12bed:	0f 1f 00             	nop    DWORD PTR [rax]
      { return _M_string_length; }
   12bf0:	4c 8b 7c 24 68       	mov    r15,QWORD PTR [rsp+0x68]
      { return _M_dataplus._M_p; }
   12bf5:	48 8b 5c 24 60       	mov    rbx,QWORD PTR [rsp+0x60]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   12bfa:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12bff:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   12c06:	00 
   12c07:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   12c0e:	00 
   12c0f:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   12c16:	00 
      { _M_string_length = __length; }
   12c17:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   12c1e:	00 00 00 00 00 
   12c23:	a8 20                	test   al,0x20
   12c25:	0f 85 2c f7 ff ff    	jne    12357 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x207>
   12c2b:	e9 78 f8 ff ff       	jmp    124a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x358>
	      return __format::to_chars(__b, __e, __v, __fmt);
   12c30:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12c36:	89 da                	mov    edx,ebx
   12c38:	e8 b3 05 ff ff       	call   31f0 <std::to_chars(char*, char*, float, std::chars_format)@plt>
   12c3d:	48 89 c5             	mov    rbp,rax
   12c40:	48 89 d0             	mov    rax,rdx
   12c43:	e9 94 fe ff ff       	jmp    12adc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x98c>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12c48:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   12c4c:	45 31 f6             	xor    r14d,r14d
   12c4f:	e9 55 fb ff ff       	jmp    127a9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x659>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12c54:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   12c58:	e9 b1 fb ff ff       	jmp    1280e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6be>
   12c5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   12c61:	e9 38 fc ff ff       	jmp    1289e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x74e>
   12c66:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   12c6a:	e9 e7 fb ff ff       	jmp    12856 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x706>
	  char __expc = 'e';
   12c6f:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12c74:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   12c78:	45 31 f6             	xor    r14d,r14d
   12c7b:	e9 b6 fb ff ff       	jmp    12836 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6e6>
	      if (_M_spec._M_type != _Pres_A)
   12c80:	83 e3 78             	and    ebx,0x78
   12c83:	ba 70 00 00 00       	mov    edx,0x70
   12c88:	b8 65 00 00 00       	mov    eax,0x65
   12c8d:	80 fb 10             	cmp    bl,0x10
   12c90:	0f 45 c2             	cmovne eax,edx
   12c93:	45 31 f6             	xor    r14d,r14d
   12c96:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12c9a:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   12c9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	      __fmt = chars_format::hex;
   12ca3:	bb 04 00 00 00       	mov    ebx,0x4
   12ca8:	e9 0b fb ff ff       	jmp    127b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   12cad:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (_M_spec._M_type != _Pres_A)
   12cb0:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   12cb3:	ba 50 00 00 00       	mov    edx,0x50
   12cb8:	b8 70 00 00 00       	mov    eax,0x70
   12cbd:	41 be 01 00 00 00    	mov    r14d,0x1
   12cc3:	80 fb 10             	cmp    bl,0x10
   12cc6:	0f 44 c2             	cmove  eax,edx
   12cc9:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
   12ccd:	eb cb                	jmp    12c9a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb4a>
	  char __expc = 'e';
   12ccf:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12cd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   12cd8:	45 31 f6             	xor    r14d,r14d
   12cdb:	e9 9e fb ff ff       	jmp    1287e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x72e>
	      size_t __z = 0;   // Number of trailing zeros to add.
   12ce0:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   12ce7:	00 00 
		    __p = __s.size();
   12ce9:	4d 89 f9             	mov    r9,r15
   12cec:	e9 2f f6 ff ff       	jmp    12320 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
			__builtin_frexpf(__v, &__exp);
   12cf1:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12cf7:	48 89 74 24 28       	mov    QWORD PTR [rsp+0x28],rsi
   12cfc:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
   12d03:	00 
		      int __exp{};
   12d04:	c7 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],0x0
   12d0b:	00 00 00 00 
			__builtin_frexpf(__v, &__exp);
   12d0f:	e8 3c 03 ff ff       	call   3050 <frexpf@plt>
		      if (__exp > 0)
   12d14:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [rsp+0xa0]
   12d1b:	48 8b 74 24 28       	mov    rsi,QWORD PTR [rsp+0x28]
   12d20:	85 c0                	test   eax,eax
   12d22:	7e 23                	jle    12d47 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbf7>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
   12d24:	69 d0 a4 0f 00 00    	imul   edx,eax,0xfa4
   12d2a:	48 89 d0             	mov    rax,rdx
   12d2d:	48 69 d2 f9 65 56 3b 	imul   rdx,rdx,0x3b5665f9
   12d34:	48 c1 ea 20          	shr    rdx,0x20
   12d38:	29 d0                	sub    eax,edx
   12d3a:	d1 e8                	shr    eax,1
   12d3c:	01 d0                	add    eax,edx
   12d3e:	c1 e8 0d             	shr    eax,0xd
   12d41:	83 c0 01             	add    eax,0x1
   12d44:	48 01 c6             	add    rsi,rax
   12d47:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
   12d4c:	e9 16 fd ff ff       	jmp    12a67 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x917>
   12d51:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
   12d58:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
   12d5f:	00 00 
      { return _M_dataplus._M_p; }
   12d61:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
   12d66:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   12d69:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   12d6e:	83 f8 4b             	cmp    eax,0x4b
   12d71:	0f 84 14 fd ff ff    	je     12a8b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x93b>
		  __start = __dynbuf.data() + 1; // reserve space for sign
   12d77:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   12d7b:	48 03 54 24 68       	add    rdx,QWORD PTR [rsp+0x68]
   12d80:	48 89 54 24 28       	mov    QWORD PTR [rsp+0x28],rdx
   12d85:	e9 aa f9 ff ff       	jmp    12734 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5e4>
   12d8a:	48 8b 94 24 a0 00 00 	mov    rdx,QWORD PTR [rsp+0xa0]
   12d91:	00 
	if (_M_data() == _M_local_data())
   12d92:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   12d99:	00 
   12d9a:	48 39 f2             	cmp    rdx,rsi
   12d9d:	74 6f                	je     12e0e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcbe>
      { return _M_string_length; }
   12d9f:	f3 0f 6f 84 24 a8 00 	movdqu xmm0,XMMWORD PTR [rsp+0xa8]
   12da6:	00 00 
      { _M_dataplus._M_p = __p; }
   12da8:	48 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rdx
   12daf:	00 
      { _M_string_length = __length; }
   12db0:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   12db7:	00 
      { _M_dataplus._M_p = __p; }
   12db8:	48 89 b4 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rsi
   12dbf:	00 
   12dc0:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   12dc7:	00 
   12dc8:	48 89 f7             	mov    rdi,rsi
   12dcb:	e9 3d f6 ff ff       	jmp    1240d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2bd>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12dd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   12dd4:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12dda:	89 da                	mov    edx,ebx
   12ddc:	e8 6f 04 ff ff       	call   3250 <std::to_chars(char*, char*, float, std::chars_format, int)@plt>
   12de1:	48 89 c5             	mov    rbp,rax
   12de4:	48 89 d0             	mov    rax,rdx
   12de7:	e9 f0 fc ff ff       	jmp    12adc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x98c>
	  char __expc = 'e';
   12dec:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	  bool __upper = false;
   12df1:	45 31 f6             	xor    r14d,r14d
	  chars_format __fmt{};
   12df4:	31 db                	xor    ebx,ebx
		__guess = sizeof(__buf) * 2;
   12df6:	be 00 01 00 00       	mov    esi,0x100
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   12dfb:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  size_t __prec = 6;
   12e00:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12e07:	00 00 
   12e09:	e9 66 fc ff ff       	jmp    12a74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x924>
	    if (_M_string_length > _S_local_capacity)
   12e0e:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   12e15:	00 
   12e16:	49 89 d0             	mov    r8,rdx
		if (__str.size())
   12e19:	48 85 d2             	test   rdx,rdx
   12e1c:	74 4c                	je     12e6a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1a>
	if (__n == 1)
   12e1e:	48 83 fa 01          	cmp    rdx,0x1
   12e22:	0f 84 b9 01 00 00    	je     12fe1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe91>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   12e28:	89 d1                	mov    ecx,edx
   12e2a:	83 fa 08             	cmp    edx,0x8
   12e2d:	0f 83 5a 01 00 00    	jae    12f8d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe3d>
   12e33:	f6 c2 04             	test   dl,0x4
   12e36:	0f 85 c4 01 00 00    	jne    13000 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeb0>
   12e3c:	85 d2                	test   edx,edx
   12e3e:	74 24                	je     12e64 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd14>
   12e40:	0f b6 bc 24 b0 00 00 	movzx  edi,BYTE PTR [rsp+0xb0]
   12e47:	00 
   12e48:	83 e2 02             	and    edx,0x2
   12e4b:	40 88 38             	mov    BYTE PTR [rax],dil
   12e4e:	0f 85 d2 01 00 00    	jne    13026 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xed6>
   12e54:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   12e5b:	00 
   12e5c:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   12e63:	00 
      { return _M_string_length; }
   12e64:	49 89 d0             	mov    r8,rdx
      { return _M_dataplus._M_p; }
   12e67:	48 89 c7             	mov    rdi,rax
      { _M_string_length = __length; }
   12e6a:	4c 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],r8
   12e71:	00 
	__c1 = __c2;
   12e72:	42 c6 04 07 00       	mov    BYTE PTR [rdi+r8*1],0x0
      { return _M_dataplus._M_p; }
   12e77:	48 8b bc 24 a0 00 00 	mov    rdi,QWORD PTR [rsp+0xa0]
   12e7e:	00 
      }
   12e7f:	e9 89 f5 ff ff       	jmp    1240d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2bd>
		      __builtin_memmove(__start + __p + __extras,
   12e84:	4b 8d 3c 08          	lea    rdi,[r8+r9*1]
					__start + __p,
   12e88:	4a 8d 2c 0b          	lea    rbp,[rbx+r9*1]
		      __builtin_memmove(__start + __p + __extras,
   12e8c:	4c 89 fa             	mov    rdx,r15
   12e8f:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   12e94:	4c 29 ca             	sub    rdx,r9
   12e97:	48 01 df             	add    rdi,rbx
   12e9a:	48 89 ee             	mov    rsi,rbp
   12e9d:	4c 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],r9
   12ea2:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
   12ea7:	e8 74 04 ff ff       	call   3320 <memmove@plt>
		      if (__d == __p)
   12eac:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
   12eb1:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   12eb6:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   12ebb:	4d 39 d1             	cmp    r9,r10
   12ebe:	75 09                	jne    12ec9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd79>
			__start[__p++] = '.';
   12ec0:	c6 45 00 2e          	mov    BYTE PTR [rbp+0x0],0x2e
		      __builtin_memset(__start + __p, '0', __z);
   12ec4:	4a 8d 6c 0b 01       	lea    rbp,[rbx+r9*1+0x1]
   12ec9:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
   12ece:	be 30 00 00 00       	mov    esi,0x30
   12ed3:	48 89 ef             	mov    rdi,rbp
   12ed6:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
   12edb:	e8 60 02 ff ff       	call   3140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
   12ee0:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   12ee5:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
		      __narrow_str = {__s.data(), __s.size() + __extras};
   12eea:	4d 01 c7             	add    r15,r8
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   12eed:	e9 0d fd ff ff       	jmp    12bff <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaaf>
	      if (__trailing_zeros && __prec != 0)
   12ef2:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   12ef5:	41 b8 01 00 00 00    	mov    r8d,0x1
   12efb:	e9 2a fa ff ff       	jmp    1292a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7da>
		    __p = __s.size();
   12f00:	4d 89 f9             	mov    r9,r15
   12f03:	e9 de f3 ff ff       	jmp    122e6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x196>
   12f08:	bd 1d 00 00 00       	mov    ebp,0x1d
   12f0d:	be 1e 00 00 00       	mov    esi,0x1e
   12f12:	e9 8a fb ff ff       	jmp    12aa1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x951>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
   12f17:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12f1c:	4d 89 f8             	mov    r8,r15
   12f1f:	31 d2                	xor    edx,edx
   12f21:	e8 3a 46 ff ff       	call   7560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
   12f26:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   12f2b:	e9 00 fb ff ff       	jmp    12a30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   12f30:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   12f35:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
   12f3a:	41 b8 30 00 00 00    	mov    r8d,0x30
   12f40:	31 d2                	xor    edx,edx
   12f42:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12f47:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   12f4c:	e8 0f 14 ff ff       	call   4360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>
   12f51:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
   12f56:	e9 67 fa ff ff       	jmp    129c2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x872>
	this->push_back(__c);
   12f5b:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12f60:	be 2e 00 00 00       	mov    esi,0x2e
   12f65:	e8 46 4f ff ff       	call   7eb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
   12f6a:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
	return *this;
   12f6f:	e9 42 fa ff ff       	jmp    129b6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x866>
	return _M_is_local() ? size_type(_S_local_capacity)
   12f74:	ba 0f 00 00 00       	mov    edx,0xf
   12f79:	e9 86 fa ff ff       	jmp    12a04 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8b4>
   12f7e:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   12f81:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
   12f83:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      }
   12f88:	e9 a3 fa ff ff       	jmp    12a30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   12f8d:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
   12f94:	00 
   12f95:	49 89 f0             	mov    r8,rsi
   12f98:	48 89 08             	mov    QWORD PTR [rax],rcx
   12f9b:	89 d1                	mov    ecx,edx
   12f9d:	48 8b 7c 0e f8       	mov    rdi,QWORD PTR [rsi+rcx*1-0x8]
   12fa2:	48 89 7c 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rdi
   12fa7:	48 8d 78 08          	lea    rdi,[rax+0x8]
   12fab:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
   12faf:	48 29 f8             	sub    rax,rdi
   12fb2:	48 89 c1             	mov    rcx,rax
   12fb5:	49 29 c0             	sub    r8,rax
   12fb8:	01 d1                	add    ecx,edx
   12fba:	83 e1 f8             	and    ecx,0xfffffff8
   12fbd:	83 f9 08             	cmp    ecx,0x8
   12fc0:	0f 82 8e fe ff ff    	jb     12e54 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd04>
   12fc6:	83 e1 f8             	and    ecx,0xfffffff8
   12fc9:	31 c0                	xor    eax,eax
   12fcb:	89 c2                	mov    edx,eax
   12fcd:	83 c0 08             	add    eax,0x8
   12fd0:	4d 8b 0c 10          	mov    r9,QWORD PTR [r8+rdx*1]
   12fd4:	4c 89 0c 17          	mov    QWORD PTR [rdi+rdx*1],r9
   12fd8:	39 c8                	cmp    eax,ecx
   12fda:	72 ef                	jb     12fcb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe7b>
   12fdc:	e9 73 fe ff ff       	jmp    12e54 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd04>
	__c1 = __c2;
   12fe1:	0f b6 94 24 b0 00 00 	movzx  edx,BYTE PTR [rsp+0xb0]
   12fe8:	00 
   12fe9:	88 10                	mov    BYTE PTR [rax],dl
      { return _M_string_length; }
   12feb:	4c 8b 84 24 a8 00 00 	mov    r8,QWORD PTR [rsp+0xa8]
   12ff2:	00 
      { return _M_dataplus._M_p; }
   12ff3:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
   12ffa:	00 
      }
   12ffb:	e9 6a fe ff ff       	jmp    12e6a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   13000:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [rsp+0xb0]
   13007:	89 10                	mov    DWORD PTR [rax],edx
   13009:	8b 54 0e fc          	mov    edx,DWORD PTR [rsi+rcx*1-0x4]
   1300d:	89 54 08 fc          	mov    DWORD PTR [rax+rcx*1-0x4],edx
   13011:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   13018:	00 
   13019:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   13020:	00 
   13021:	e9 3e fe ff ff       	jmp    12e64 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd14>
   13026:	0f b7 54 0e fe       	movzx  edx,WORD PTR [rsi+rcx*1-0x2]
   1302b:	66 89 54 08 fe       	mov    WORD PTR [rax+rcx*1-0x2],dx
   13030:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   13037:	00 
   13038:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   1303f:	00 
   13040:	e9 1f fe ff ff       	jmp    12e64 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd14>
	  __throw_length_error(__N(__s));
   13045:	48 8d 3d 6f 21 00 00 	lea    rdi,[rip+0x216f]        # 151bb <CSWTCH.1104+0xdb>
   1304c:	e8 df 00 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
   13051:	4c 89 f9             	mov    rcx,r15
   13054:	4c 89 ca             	mov    rdx,r9
   13057:	48 8d 35 ca 21 00 00 	lea    rsi,[rip+0x21ca]        # 15228 <CSWTCH.1104+0x148>
   1305e:	31 c0                	xor    eax,eax
   13060:	48 8d 3d 99 23 00 00 	lea    rdi,[rip+0x2399]        # 15400 <CSWTCH.1104+0x320>
   13067:	e8 74 02 ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
   1306c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000013070 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const>:
	_M_is_break(_Gcb_property __p1, _Gcb_property __p2,
		    _U32_iterator __curr) const
	{
	  using enum _Gcb_property;

	  if (__p1 == _Gcb_Control || __p1 == _Gcb_LF)
   13070:	8d 46 ff             	lea    eax,[rsi-0x1]
   13073:	83 f8 01             	cmp    eax,0x1
   13076:	0f 86 24 01 00 00    	jbe    131a0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x130>
	_M_is_break(_Gcb_property __p1, _Gcb_property __p2,
   1307c:	41 57                	push   r15
   1307e:	41 56                	push   r14
   13080:	41 55                	push   r13
   13082:	41 54                	push   r12
   13084:	55                   	push   rbp
   13085:	89 d5                	mov    ebp,edx
   13087:	48 83 ec 40          	sub    rsp,0x40
	    return true; // Break after Control or LF.

	  if (__p1 == _Gcb_CR)
	    return __p2 != _Gcb_LF; // Do not break between a CR and LF.
   1308b:	83 fa 02             	cmp    edx,0x2
   1308e:	0f 95 c0             	setne  al
	  if (__p1 == _Gcb_CR)
   13091:	83 fe 03             	cmp    esi,0x3
   13094:	74 30                	je     130c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>

	  // Rule GB5
	  if (__p2 == _Gcb_Control || __p2 == _Gcb_CR || __p2 == _Gcb_LF)
   13096:	8d 42 ff             	lea    eax,[rdx-0x1]
   13099:	83 f8 02             	cmp    eax,0x2
   1309c:	76 62                	jbe    13100 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x90>
   1309e:	8d 46 f9             	lea    eax,[rsi-0x7]
   130a1:	49 89 fc             	mov    r12,rdi
   130a4:	83 f8 05             	cmp    eax,0x5
   130a7:	77 67                	ja     13110 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xa0>
   130a9:	48 8d 15 78 2a 00 00 	lea    rdx,[rip+0x2a78]        # 15b28 <CSWTCH.1104+0xa48>
   130b0:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   130b4:	48 01 d0             	add    rax,rdx
   130b7:	ff e0                	jmp    rax
   130b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		return true;
	      }

	  // Rule GB8
	  if (__p1 == _Gcb_LVT || __p1 == _Gcb_T)
	    return __p2 != _Gcb_T; // Do not break Hangul syllable sequences.
   130c0:	83 fd 09             	cmp    ebp,0x9
   130c3:	0f 95 c0             	setne  al
	  if (__p1 == _Gcb_property::_Gcb_Regional_Indicator && __p1 == __p2)
	    return (_M_RI_count & 1) == 0;

	  // Rule GB999
	  return true; // Otherwise, break everywhere.
	}
   130c6:	48 83 c4 40          	add    rsp,0x40
   130ca:	5d                   	pop    rbp
   130cb:	41 5c                	pop    r12
   130cd:	41 5d                	pop    r13
   130cf:	41 5e                	pop    r14
   130d1:	41 5f                	pop    r15
   130d3:	c3                   	ret
   130d4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	    switch (__p2)
   130d8:	83 ed 08             	sub    ebp,0x8
   130db:	83 fd 01             	cmp    ebp,0x1
   130de:	0f 97 c0             	seta   al
   130e1:	eb e3                	jmp    130c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   130e3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    switch (__p2)
   130e8:	83 fd 08             	cmp    ebp,0x8
   130eb:	7f 4b                	jg     13138 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xc8>
   130ed:	83 fd 06             	cmp    ebp,0x6
   130f0:	7f 3b                	jg     1312d <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xbd>
   130f2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   130f9:	00 00 00 00 
   130fd:	0f 1f 00             	nop    DWORD PTR [rax]
	    return true; // Break after Control or LF.
   13100:	b8 01 00 00 00       	mov    eax,0x1
   13105:	eb bf                	jmp    130c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13107:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   1310e:	00 00 
	  if (__p2 == _Gcb_Extend || __p2 == _Gcb_ZWJ)
   13110:	89 e8                	mov    eax,ebp
   13112:	83 e0 fd             	and    eax,0xfffffffd
   13115:	83 f8 04             	cmp    eax,0x4
   13118:	0f 94 c0             	sete   al
	  if (__p1 == _Gcb_Prepend)
   1311b:	83 fe 05             	cmp    esi,0x5
   1311e:	0f 94 c2             	sete   dl
   13121:	09 d0                	or     eax,edx
	  if (__p2 == _Gcb_Extend || __p2 == _Gcb_ZWJ)
   13123:	83 fd 0a             	cmp    ebp,0xa
   13126:	0f 94 c2             	sete   dl
	  if (__p1 == _Gcb_Prepend)
   13129:	08 d0                	or     al,dl
   1312b:	74 1b                	je     13148 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xd8>
		return false; // Do not break Hangul syllable sequences.
   1312d:	31 c0                	xor    eax,eax
   1312f:	eb 95                	jmp    130c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13131:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	    switch (__p2)
   13138:	83 ed 0b             	sub    ebp,0xb
   1313b:	83 fd 01             	cmp    ebp,0x1
   1313e:	77 c0                	ja     13100 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x90>
		return false; // Do not break Hangul syllable sequences.
   13140:	31 c0                	xor    eax,eax
   13142:	eb 82                	jmp    130c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13144:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (_M_incb_linker_seen
   13148:	45 0f b6 6c 24 0a    	movzx  r13d,BYTE PTR [r12+0xa]
		&& __incb_property(*__curr) == _InCB::_Consonant)
   1314e:	45 84 ed             	test   r13b,r13b
   13151:	74 13                	je     13166 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
    if ((__c << 2) < __incb_edges[0]) [[likely]]
   13153:	41 8b 0c 24          	mov    ecx,DWORD PTR [r12]
   13157:	8d 14 8d 00 00 00 00 	lea    edx,[rcx*4+0x0]
   1315e:	81 fa 01 0c 00 00    	cmp    edx,0xc01
   13164:	77 40                	ja     131a6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x136>
	  if (__p1 == _Gcb_ZWJ && _M_xpicto_seq_state == _XPicto::_Matched)
   13166:	83 fe 0a             	cmp    esi,0xa
   13169:	74 1d                	je     13188 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x118>
	  if (__p1 == _Gcb_property::_Gcb_Regional_Indicator && __p1 == __p2)
   1316b:	83 fe 0d             	cmp    esi,0xd
   1316e:	75 90                	jne    13100 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x90>
   13170:	39 ee                	cmp    esi,ebp
   13172:	75 8c                	jne    13100 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x90>
	    return (_M_RI_count & 1) == 0;
   13174:	41 0f b6 44 24 09    	movzx  eax,BYTE PTR [r12+0x9]
   1317a:	f7 d0                	not    eax
   1317c:	83 e0 01             	and    eax,0x1
   1317f:	e9 42 ff ff ff       	jmp    130c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13184:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__p1 == _Gcb_ZWJ && _M_xpicto_seq_state == _XPicto::_Matched)
   13188:	41 80 7c 24 08 02    	cmp    BYTE PTR [r12+0x8],0x2
   1318e:	0f 95 c0             	setne  al
   13191:	e9 30 ff ff ff       	jmp    130c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13196:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   1319d:	00 00 00 
	    return true; // Break after Control or LF.
   131a0:	b8 01 00 00 00       	mov    eax,0x1
	}
   131a5:	c3                   	ret
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
   131a6:	83 ca 03             	or     edx,0x3
		  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);
   131a9:	b9 85 01 00 00       	mov    ecx,0x185

      while (__len > 0)
   131ae:	4c 8d 05 4b 31 00 00 	lea    r8,[rip+0x314b]        # 16300 <std::__unicode::__v15_1_0::__incb_edges>
   131b5:	48 85 c9             	test   rcx,rcx
   131b8:	7e 22                	jle    131dc <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x16c>
	{
	  _DistanceType __half = __len >> 1;
   131ba:	49 89 c9             	mov    r9,rcx
   131bd:	49 d1 f9             	sar    r9,1
	__i += __n;
   131c0:	4b 8d 3c 88          	lea    rdi,[r8+r9*4]
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   131c4:	39 17                	cmp    DWORD PTR [rdi],edx
   131c6:	0f 83 a4 01 00 00    	jae    13370 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x300>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   131cc:	4c 29 c9             	sub    rcx,r9
	      ++__first;
   131cf:	4c 8d 47 04          	lea    r8,[rdi+0x4]
	      __len = __len - __half - 1;
   131d3:	48 83 e9 01          	sub    rcx,0x1
      while (__len > 0)
   131d7:	48 85 c9             	test   rcx,rcx
   131da:	7f de                	jg     131ba <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x14a>
    return _InCB(__p[-1] & __mask);
   131dc:	41 8b 50 fc          	mov    edx,DWORD PTR [r8-0x4]
   131e0:	83 e2 03             	and    edx,0x3
		&& __incb_property(_M_c) == _InCB::_Consonant
   131e3:	83 fa 01             	cmp    edx,0x1
   131e6:	0f 85 7a ff ff ff    	jne    13166 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
      operator*() const { return _M_buf[_M_buf_index]; }
   131ec:	0f b6 94 24 88 00 00 	movzx  edx,BYTE PTR [rsp+0x88]
   131f3:	00 
   131f4:	49 89 d6             	mov    r14,rdx
    if ((__c << 2) < __incb_edges[0]) [[likely]]
   131f7:	8b 54 94 70          	mov    edx,DWORD PTR [rsp+rdx*4+0x70]
   131fb:	c1 e2 02             	shl    edx,0x2
   131fe:	81 fa 01 0c 00 00    	cmp    edx,0xc01
   13204:	0f 86 5c ff ff ff    	jbe    13166 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
   1320a:	83 ca 03             	or     edx,0x3
      _DistanceType __len = std::distance(__first, __last);
   1320d:	b9 85 01 00 00       	mov    ecx,0x185
      while (__len > 0)
   13212:	4c 8d 05 e7 30 00 00 	lea    r8,[rip+0x30e7]        # 16300 <std::__unicode::__v15_1_0::__incb_edges>
   13219:	48 85 c9             	test   rcx,rcx
   1321c:	7e 22                	jle    13240 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x1d0>
	  _DistanceType __half = __len >> 1;
   1321e:	49 89 c9             	mov    r9,rcx
   13221:	49 d1 f9             	sar    r9,1
   13224:	4b 8d 3c 88          	lea    rdi,[r8+r9*4]
	  if (__comp(__middle, __val))
   13228:	39 17                	cmp    DWORD PTR [rdi],edx
   1322a:	0f 83 a2 01 00 00    	jae    133d2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x362>
	      __len = __len - __half - 1;
   13230:	4c 29 c9             	sub    rcx,r9
	      ++__first;
   13233:	4c 8d 47 04          	lea    r8,[rdi+0x4]
	      __len = __len - __half - 1;
   13237:	48 83 e9 01          	sub    rcx,0x1
      while (__len > 0)
   1323b:	48 85 c9             	test   rcx,rcx
   1323e:	7f de                	jg     1321e <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x1ae>
    return _InCB(__p[-1] & __mask);
   13240:	41 8b 50 fc          	mov    edx,DWORD PTR [r8-0x4]
   13244:	83 e2 03             	and    edx,0x3
		&& __incb_property(*__curr) == _InCB::_Consonant)
   13247:	83 ea 01             	sub    edx,0x1
   1324a:	0f 85 16 ff ff ff    	jne    13166 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
	      auto __it = _M_base;
   13250:	f3 41 0f 6f 44 24 10 	movdqu xmm0,XMMWORD PTR [r12+0x10]
   13257:	49 8b 54 24 30       	mov    rdx,QWORD PTR [r12+0x30]
   1325c:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
   13261:	f3 41 0f 6f 44 24 20 	movdqu xmm0,XMMWORD PTR [r12+0x20]
   13268:	48 89 54 24 30       	mov    QWORD PTR [rsp+0x30],rdx
   1326d:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
   13272:	4c 8b bc 24 80 00 00 	mov    r15,QWORD PTR [rsp+0x80]
   13279:	00 
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
   1327a:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [rsp+0x28]
   1327f:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   13284:	0f b6 d1             	movzx  edx,cl
   13287:	0f b6 7c 24 29       	movzx  edi,BYTE PTR [rsp+0x29]
   1328c:	83 c2 01             	add    edx,0x1
   1328f:	39 fa                	cmp    edx,edi
   13291:	0f 84 e1 00 00 00    	je     13378 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x308>
	else if (_M_buf_index + 1 < _M_buf_last)
   13297:	7d 07                	jge    132a0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x230>
	  ++_M_buf_index;
   13299:	83 c1 01             	add    ecx,0x1
   1329c:	88 4c 24 28          	mov    BYTE PTR [rsp+0x28],cl
		   && __lhs._M_buf_index == __rhs._M_buf_index;
   132a0:	4d 39 c7             	cmp    r15,r8
   132a3:	40 0f 94 c7          	sete   dil
   132a7:	41 38 ce             	cmp    r14b,cl
   132aa:	0f 94 c2             	sete   dl
   132ad:	40 84 d7             	test   dil,dl
   132b0:	0f 85 24 01 00 00    	jne    133da <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x36a>
      operator*() const { return _M_buf[_M_buf_index]; }
   132b6:	0f b6 d1             	movzx  edx,cl
   132b9:	8b 54 94 10          	mov    edx,DWORD PTR [rsp+rdx*4+0x10]
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(__first))
   132bd:	81 fa 4d 09 00 00    	cmp    edx,0x94d
   132c3:	0f 84 f9 00 00 00    	je     133c2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	    return __first;
	  ++__first;

	  if (__pred(__first))
   132c9:	81 fa cd 09 00 00    	cmp    edx,0x9cd
   132cf:	0f 84 ed 00 00 00    	je     133c2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	    return __first;
	  ++__first;

	  if (__pred(__first))
   132d5:	81 fa cd 0a 00 00    	cmp    edx,0xacd
   132db:	0f 84 e1 00 00 00    	je     133c2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	    return __first;
	  ++__first;

	  if (__pred(__first))
   132e1:	81 fa 4d 0b 00 00    	cmp    edx,0xb4d
   132e7:	0f 84 d5 00 00 00    	je     133c2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	  if (__pred(__first))
	    return __first;
	  ++__first;
	  // FALLTHRU
	case 2:
	  if (__pred(__first))
   132ed:	81 fa 4d 0c 00 00    	cmp    edx,0xc4d
   132f3:	0f 84 c9 00 00 00    	je     133c2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	    return __first;
	  ++__first;
	  // FALLTHRU
	case 1:
	  if (__pred(__first))
   132f9:	81 fa 4d 0d 00 00    	cmp    edx,0xd4d
   132ff:	0f 84 bd 00 00 00    	je     133c2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
    if ((__c << 2) < __incb_edges[0]) [[likely]]
   13305:	c1 e2 02             	shl    edx,0x2
   13308:	81 fa 01 0c 00 00    	cmp    edx,0xc01
   1330e:	0f 86 52 fe ff ff    	jbe    13166 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
   13314:	83 ca 03             	or     edx,0x3
      _DistanceType __len = std::distance(__first, __last);
   13317:	b9 85 01 00 00       	mov    ecx,0x185
      while (__len > 0)
   1331c:	4c 8d 05 dd 2f 00 00 	lea    r8,[rip+0x2fdd]        # 16300 <std::__unicode::__v15_1_0::__incb_edges>
   13323:	48 85 c9             	test   rcx,rcx
   13326:	7e 22                	jle    1334a <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x2da>
	  _DistanceType __half = __len >> 1;
   13328:	49 89 c9             	mov    r9,rcx
   1332b:	49 d1 f9             	sar    r9,1
   1332e:	4b 8d 3c 88          	lea    rdi,[r8+r9*4]
	  if (__comp(__middle, __val))
   13332:	39 17                	cmp    DWORD PTR [rdi],edx
   13334:	0f 83 90 00 00 00    	jae    133ca <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x35a>
	      __len = __len - __half - 1;
   1333a:	4c 29 c9             	sub    rcx,r9
	      ++__first;
   1333d:	4c 8d 47 04          	lea    r8,[rdi+0x4]
	      __len = __len - __half - 1;
   13341:	48 83 e9 01          	sub    rcx,0x1
      while (__len > 0)
   13345:	48 85 c9             	test   rcx,rcx
   13348:	7f de                	jg     13328 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x2b8>
    return _InCB(__p[-1] & __mask);
   1334a:	41 8b 50 fc          	mov    edx,DWORD PTR [r8-0x4]
   1334e:	83 e2 03             	and    edx,0x3
		      if (__incb == _InCB::_Consonant)
   13351:	83 fa 01             	cmp    edx,0x1
   13354:	0f 84 9b 00 00 00    	je     133f5 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x385>
		      else if (__incb != _InCB::_Extend)
   1335a:	83 fa 02             	cmp    edx,0x2
   1335d:	0f 84 0f ff ff ff    	je     13272 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x202>
   13363:	e9 fe fd ff ff       	jmp    13166 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
   13368:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1336f:	00 
	    __len = __half;
   13370:	4c 89 c9             	mov    rcx,r9
   13373:	e9 3d fe ff ff       	jmp    131b5 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x145>
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
   13378:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
   1337d:	49 39 d0             	cmp    r8,rdx
   13380:	0f 84 1a ff ff ff    	je     132a0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x230>
   13386:	0f b6 4c 24 2a       	movzx  ecx,BYTE PTR [rsp+0x2a]
   1338b:	49 01 c8             	add    r8,rcx
   1338e:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
	    if (_M_curr() == _M_last)
   13393:	49 39 d0             	cmp    r8,rdx
   13396:	74 51                	je     133e9 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x379>
	  _M_read_utf8();
   13398:	48 8d 7c 24 10       	lea    rdi,[rsp+0x10]
   1339d:	89 74 24 0c          	mov    DWORD PTR [rsp+0xc],esi
   133a1:	88 44 24 0b          	mov    BYTE PTR [rsp+0xb],al
   133a5:	e8 46 36 ff ff       	call   69f0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
   133aa:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   133af:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [rsp+0x28]
      }
   133b4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [rsp+0xb]
   133b9:	8b 74 24 0c          	mov    esi,DWORD PTR [rsp+0xc]
   133bd:	e9 de fe ff ff       	jmp    132a0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x230>
   133c2:	44 89 e8             	mov    eax,r13d
   133c5:	e9 ba fe ff ff       	jmp    13284 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x214>
   133ca:	4c 89 c9             	mov    rcx,r9
   133cd:	e9 51 ff ff ff       	jmp    13323 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x2b3>
   133d2:	4c 89 c9             	mov    rcx,r9
   133d5:	e9 3f fe ff ff       	jmp    13219 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x1a9>
	      if (__it == __curr && __have_linker)
   133da:	84 c0                	test   al,al
   133dc:	0f 84 84 fd ff ff    	je     13166 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
		return false; // Do not break Hangul syllable sequences.
   133e2:	31 c0                	xor    eax,eax
   133e4:	e9 dd fc ff ff       	jmp    130c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
	      _M_buf_index = 0;
   133e9:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
   133ee:	31 c9                	xor    ecx,ecx
   133f0:	e9 ab fe ff ff       	jmp    132a0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x230>
			__have_linker = false;
   133f5:	31 c0                	xor    eax,eax
   133f7:	e9 76 fe ff ff       	jmp    13272 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x202>
   133fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000013400 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()>:
	operator++()
   13400:	41 57                	push   r15
   13402:	41 56                	push   r14
   13404:	41 55                	push   r13
   13406:	41 54                	push   r12
   13408:	55                   	push   rbp
   13409:	53                   	push   rbx
   1340a:	48 89 fb             	mov    rbx,rdi
   1340d:	48 83 ec 58          	sub    rsp,0x58
      end() const { return _M_last; }
   13411:	48 8b 47 30          	mov    rax,QWORD PTR [rdi+0x30]
   13415:	48 8b 77 20          	mov    rsi,QWORD PTR [rdi+0x20]
   13419:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
   1341e:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
	  if (_M_base != __end)
   13423:	48 39 f0             	cmp    rax,rsi
   13426:	0f 84 99 02 00 00    	je     136c5 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x2c5>
	      auto __it = _M_base;
   1342c:	f3 0f 6f 47 10       	movdqu xmm0,XMMWORD PTR [rdi+0x10]
	      auto __p_prev = _M_prop;
   13431:	8b 77 04             	mov    esi,DWORD PTR [rdi+0x4]
	      auto __it = _M_base;
   13434:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
   13439:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
   1343e:	f3 0f 6f 47 20       	movdqu xmm0,XMMWORD PTR [rdi+0x20]
   13443:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
   13448:	44 0f b6 4c 24 38    	movzx  r9d,BYTE PTR [rsp+0x38]
   1344e:	0f b6 54 24 39       	movzx  edx,BYTE PTR [rsp+0x39]
   13453:	41 0f b6 c1          	movzx  eax,r9b
   13457:	83 c0 01             	add    eax,0x1
   1345a:	39 d0                	cmp    eax,edx
   1345c:	0f 84 65 01 00 00    	je     135c7 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x1c7>
   13462:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13469:	00 00 00 00 
   1346d:	0f 1f 00             	nop    DWORD PTR [rax]
	else if (_M_buf_index + 1 < _M_buf_last)
   13470:	7d 09                	jge    1347b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x7b>
	  ++_M_buf_index;
   13472:	41 83 c1 01          	add    r9d,0x1
   13476:	44 88 4c 24 38       	mov    BYTE PTR [rsp+0x38],r9b
	      while (++__it != __end)
   1347b:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   13480:	48 39 4c 24 18       	cmp    QWORD PTR [rsp+0x18],rcx
   13485:	0f 84 0d 02 00 00    	je     13698 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x298>
      operator*() const { return _M_buf[_M_buf_index]; }
   1348b:	0f b6 44 24 38       	movzx  eax,BYTE PTR [rsp+0x38]
      while (__len > 0)
   13490:	4c 8d 15 89 34 00 00 	lea    r10,[rip+0x3489]        # 16920 <std::__unicode::__v15_1_0::__gcb_edges>
   13497:	44 8b 44 84 20       	mov    r8d,DWORD PTR [rsp+rax*4+0x20]
   1349c:	49 89 c1             	mov    r9,rax
      _DistanceType __len = std::distance(__first, __last);
   1349f:	b8 a4 06 00 00       	mov    eax,0x6a4
				 (__c << __gcb_shift_bits) | __mask);
   134a4:	45 89 c3             	mov    r11d,r8d
   134a7:	41 c1 e3 04          	shl    r11d,0x4
   134ab:	41 83 cb 0f          	or     r11d,0xf
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
   134af:	90                   	nop
      while (__len > 0)
   134b0:	48 85 c0             	test   rax,rax
   134b3:	7e 23                	jle    134d8 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0xd8>
	  _DistanceType __half = __len >> 1;
   134b5:	48 89 c2             	mov    rdx,rax
   134b8:	48 d1 fa             	sar    rdx,1
   134bb:	49 8d 3c 92          	lea    rdi,[r10+rdx*4]
	  if (__comp(__middle, __val))
   134bf:	44 39 1f             	cmp    DWORD PTR [rdi],r11d
   134c2:	0f 83 50 01 00 00    	jae    13618 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x218>
	      __len = __len - __half - 1;
   134c8:	48 29 d0             	sub    rax,rdx
	      ++__first;
   134cb:	4c 8d 57 04          	lea    r10,[rdi+0x4]
	      __len = __len - __half - 1;
   134cf:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   134d3:	48 85 c0             	test   rax,rax
   134d6:	7f dd                	jg     134b5 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0xb5>
    return _Gcb_property(__p[-1] & __mask);
   134d8:	41 8b 52 fc          	mov    edx,DWORD PTR [r10-0x4]
      if (_M_xpicto_seq_state == _XPicto::_Failed)
   134dc:	0f b6 43 08          	movzx  eax,BYTE PTR [rbx+0x8]
    return _Gcb_property(__p[-1] & __mask);
   134e0:	83 e2 0f             	and    edx,0xf
      if (_M_xpicto_seq_state == _XPicto::_Failed)
   134e3:	3c 03                	cmp    al,0x3
   134e5:	74 1e                	je     13505 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x105>
      if (_M_xpicto_seq_state != _XPicto::_Zwj) // i.e. Init or Matched
   134e7:	3c 01                	cmp    al,0x1
   134e9:	0f 84 81 01 00 00    	je     13670 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x270>
	  if (__p == _Gcb_property::_Gcb_ZWJ)
   134ef:	83 fa 0a             	cmp    edx,0xa
   134f2:	0f 84 e8 01 00 00    	je     136e0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x2e0>
	  else if (__p == _Gcb_property::_Gcb_Extend)
   134f8:	83 fa 04             	cmp    edx,0x4
   134fb:	0f 84 3f 01 00 00    	je     13640 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x240>
      _M_xpicto_seq_state = __next_state;
   13501:	c6 43 08 03          	mov    BYTE PTR [rbx+0x8],0x3
      if (__p == _Gcb_property::_Gcb_Regional_Indicator)
   13505:	83 fa 0d             	cmp    edx,0xd
   13508:	0f 85 32 01 00 00    	jne    13640 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x240>
	++_M_RI_count;
   1350e:	0f b6 43 09          	movzx  eax,BYTE PTR [rbx+0x9]
   13512:	83 c0 01             	add    eax,0x1
   13515:	88 43 09             	mov    BYTE PTR [rbx+0x9],al
	  if (__pred(__first))
   13518:	44 89 c0             	mov    eax,r8d
   1351b:	24 7f                	and    al,0x7f
   1351d:	3d 4d 09 00 00       	cmp    eax,0x94d
   13522:	0f 84 38 01 00 00    	je     13660 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x260>
	  if (__pred(__first))
   13528:	41 8d 80 33 f5 ff ff 	lea    eax,[r8-0xacd]
   1352f:	a9 7f ff ff ff       	test   eax,0xffffff7f
   13534:	0f 84 26 01 00 00    	je     13660 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x260>
	  if (__pred(__first))
   1353a:	44 89 c0             	mov    eax,r8d
   1353d:	80 e4 fe             	and    ah,0xfe
   13540:	3d 4d 0c 00 00       	cmp    eax,0xc4d
   13545:	0f 84 15 01 00 00    	je     13660 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x260>
   1354b:	44 89 44 24 0c       	mov    DWORD PTR [rsp+0xc],r8d
		  if (_M_is_break(__p_prev, __p, __it))
   13550:	48 83 ec 30          	sub    rsp,0x30
   13554:	48 89 df             	mov    rdi,rbx
   13557:	44 88 4c 24 3b       	mov    BYTE PTR [rsp+0x3b],r9b
   1355c:	4c 8b 74 24 50       	mov    r14,QWORD PTR [rsp+0x50]
   13561:	4c 8b 7c 24 58       	mov    r15,QWORD PTR [rsp+0x58]
   13566:	4c 8b 64 24 60       	mov    r12,QWORD PTR [rsp+0x60]
   1356b:	89 54 24 34          	mov    DWORD PTR [rsp+0x34],edx
   1356f:	4c 8b 6c 24 68       	mov    r13,QWORD PTR [rsp+0x68]
   13574:	48 8b 6c 24 70       	mov    rbp,QWORD PTR [rsp+0x70]
   13579:	4c 89 34 24          	mov    QWORD PTR [rsp],r14
   1357d:	4c 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],r15
   13582:	4c 89 64 24 10       	mov    QWORD PTR [rsp+0x10],r12
   13587:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
   1358c:	48 89 6c 24 20       	mov    QWORD PTR [rsp+0x20],rbp
   13591:	e8 da fa ff ff       	call   13070 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const>
   13596:	48 83 c4 30          	add    rsp,0x30
   1359a:	8b 54 24 04          	mov    edx,DWORD PTR [rsp+0x4]
   1359e:	44 0f b6 4c 24 0b    	movzx  r9d,BYTE PTR [rsp+0xb]
   135a4:	84 c0                	test   al,al
   135a6:	44 8b 44 24 0c       	mov    r8d,DWORD PTR [rsp+0xc]
   135ab:	0f 85 86 01 00 00    	jne    13737 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x337>
		  __p_prev = __p;
   135b1:	89 d6                	mov    esi,edx
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
   135b3:	41 0f b6 c1          	movzx  eax,r9b
   135b7:	0f b6 54 24 39       	movzx  edx,BYTE PTR [rsp+0x39]
   135bc:	83 c0 01             	add    eax,0x1
   135bf:	39 d0                	cmp    eax,edx
   135c1:	0f 85 a9 fe ff ff    	jne    13470 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x70>
   135c7:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   135cc:	48 39 4c 24 18       	cmp    QWORD PTR [rsp+0x18],rcx
   135d1:	0f 84 c1 00 00 00    	je     13698 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x298>
   135d7:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [rsp+0x3a]
   135dc:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   135e1:	48 01 c1             	add    rcx,rax
   135e4:	48 89 4c 24 30       	mov    QWORD PTR [rsp+0x30],rcx
	    if (_M_curr() == _M_last)
   135e9:	48 39 4c 24 18       	cmp    QWORD PTR [rsp+0x18],rcx
   135ee:	0f 84 9f 00 00 00    	je     13693 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x293>
	  _M_read_utf8();
   135f4:	48 8d 7c 24 20       	lea    rdi,[rsp+0x20]
   135f9:	89 74 24 04          	mov    DWORD PTR [rsp+0x4],esi
   135fd:	e8 ee 33 ff ff       	call   69f0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
   13602:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
      }
   13607:	8b 74 24 04          	mov    esi,DWORD PTR [rsp+0x4]
   1360b:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   13610:	e9 66 fe ff ff       	jmp    1347b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x7b>
   13615:	0f 1f 00             	nop    DWORD PTR [rax]
	    __len = __half;
   13618:	48 89 d0             	mov    rax,rdx
   1361b:	e9 90 fe ff ff       	jmp    134b0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0xb0>
    return (__p - __xpicto_edges) % 2;
   13620:	4d 29 d5             	sub    r13,r10
	      else if (__is_extended_pictographic(_M_c))
   13623:	41 83 e5 04          	and    r13d,0x4
   13627:	0f 84 d4 00 00 00    	je     13701 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x301>
      _M_xpicto_seq_state = __next_state;
   1362d:	c6 43 08 01          	mov    BYTE PTR [rbx+0x8],0x1
      if (__p == _Gcb_property::_Gcb_Regional_Indicator)
   13631:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13638:	00 00 00 00 
   1363c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	_M_RI_count = 0;
   13640:	31 c0                	xor    eax,eax
   13642:	88 43 09             	mov    BYTE PTR [rbx+0x9],al
	  if (__pred(__first))
   13645:	44 89 c0             	mov    eax,r8d
   13648:	24 7f                	and    al,0x7f
   1364a:	3d 4d 09 00 00       	cmp    eax,0x94d
   1364f:	0f 85 d3 fe ff ff    	jne    13528 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x128>
   13655:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   1365c:	00 00 00 00 
	_M_incb_linker_seen = true;
   13660:	c6 43 0a 01          	mov    BYTE PTR [rbx+0xa],0x1
   13664:	e9 e2 fe ff ff       	jmp    1354b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x14b>
   13669:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		&& __is_extended_pictographic(__c))
   13670:	85 d2                	test   edx,edx
   13672:	0f 85 89 fe ff ff    	jne    13501 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x101>
    if (__c < __xpicto_edges[0]) [[likely]]
   13678:	41 81 f8 a8 00 00 00 	cmp    r8d,0xa8
   1367f:	0f 87 c7 00 00 00    	ja     1374c <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x34c>
      _M_xpicto_seq_state = __next_state;
   13685:	b9 03 00 00 00       	mov    ecx,0x3
   1368a:	66 89 4b 08          	mov    WORD PTR [rbx+0x8],cx
      for (; __trip_count > 0; --__trip_count)
   1368e:	e9 b8 fe ff ff       	jmp    1354b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x14b>
	      _M_buf_index = 0;
   13693:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
   13698:	4c 8b 74 24 20       	mov    r14,QWORD PTR [rsp+0x20]
   1369d:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
   136a2:	4c 8b 64 24 30       	mov    r12,QWORD PTR [rsp+0x30]
   136a7:	4c 8b 6c 24 38       	mov    r13,QWORD PTR [rsp+0x38]
   136ac:	48 8b 6c 24 40       	mov    rbp,QWORD PTR [rsp+0x40]
	      _M_base = __it;
   136b1:	4c 89 73 10          	mov    QWORD PTR [rbx+0x10],r14
   136b5:	4c 89 7b 18          	mov    QWORD PTR [rbx+0x18],r15
   136b9:	4c 89 63 20          	mov    QWORD PTR [rbx+0x20],r12
   136bd:	4c 89 6b 28          	mov    QWORD PTR [rbx+0x28],r13
   136c1:	48 89 6b 30          	mov    QWORD PTR [rbx+0x30],rbp
	}
   136c5:	48 83 c4 58          	add    rsp,0x58
   136c9:	48 89 d8             	mov    rax,rbx
   136cc:	5b                   	pop    rbx
   136cd:	5d                   	pop    rbp
   136ce:	41 5c                	pop    r12
   136d0:	41 5d                	pop    r13
   136d2:	41 5e                	pop    r14
   136d4:	41 5f                	pop    r15
   136d6:	c3                   	ret
   136d7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   136de:	00 00 
	      if (_M_xpicto_seq_state == _XPicto::_Matched)
   136e0:	3c 02                	cmp    al,0x2
   136e2:	0f 84 45 ff ff ff    	je     1362d <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x22d>
	      else if (__is_extended_pictographic(_M_c))
   136e8:	8b 3b                	mov    edi,DWORD PTR [rbx]
    if (__c < __xpicto_edges[0]) [[likely]]
   136ea:	4c 8d 15 8f 29 00 00 	lea    r10,[rip+0x298f]        # 16080 <std::__unicode::__v15_1_0::__xpicto_edges>
		  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);
   136f1:	b8 9c 00 00 00       	mov    eax,0x9c
   136f6:	4d 89 d5             	mov    r13,r10
   136f9:	81 ff a8 00 00 00    	cmp    edi,0xa8
   136ff:	77 0e                	ja     1370f <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x30f>
      _M_xpicto_seq_state = __next_state;
   13701:	c6 43 08 03          	mov    BYTE PTR [rbx+0x8],0x3
	_M_RI_count = 0;
   13705:	31 c0                	xor    eax,eax
   13707:	e9 36 ff ff ff       	jmp    13642 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x242>
	{
	  _DistanceType __half = __len >> 1;
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__val, __middle))
	    __len = __half;
   1370c:	4c 89 d8             	mov    rax,r11
      while (__len > 0)
   1370f:	48 85 c0             	test   rax,rax
   13712:	0f 8e 08 ff ff ff    	jle    13620 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x220>
	  _DistanceType __half = __len >> 1;
   13718:	49 89 c3             	mov    r11,rax
   1371b:	49 d1 fb             	sar    r11,1
   1371e:	4f 8d 64 9d 00       	lea    r12,[r13+r11*4+0x0]
	  if (__comp(__val, __middle))
   13723:	41 3b 3c 24          	cmp    edi,DWORD PTR [r12]
   13727:	72 e3                	jb     1370c <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x30c>
	  else
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   13729:	4c 29 d8             	sub    rax,r11
	      ++__first;
   1372c:	4d 8d 6c 24 04       	lea    r13,[r12+0x4]
	      __len = __len - __half - 1;
   13731:	48 83 e8 01          	sub    rax,0x1
   13735:	eb d8                	jmp    1370f <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x30f>
      _M_xpicto_seq_state = _XPicto::_Init;
   13737:	31 c0                	xor    eax,eax
      _M_c = __c;
   13739:	44 89 03             	mov    DWORD PTR [rbx],r8d
      _M_prop = __p;
   1373c:	89 53 04             	mov    DWORD PTR [rbx+0x4],edx
      _M_xpicto_seq_state = _XPicto::_Init;
   1373f:	66 89 43 08          	mov    WORD PTR [rbx+0x8],ax
      _M_incb_linker_seen = false;
   13743:	c6 43 0a 00          	mov    BYTE PTR [rbx+0xa],0x0
    }
   13747:	e9 65 ff ff ff       	jmp    136b1 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x2b1>
   1374c:	4c 8d 15 2d 29 00 00 	lea    r10,[rip+0x292d]        # 16080 <std::__unicode::__v15_1_0::__xpicto_edges>
      _DistanceType __len = std::distance(__first, __last);
   13753:	b8 9c 00 00 00       	mov    eax,0x9c
   13758:	4d 89 d4             	mov    r12,r10
      while (__len > 0)
   1375b:	48 85 c0             	test   rax,rax
   1375e:	7e 1f                	jle    1377f <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x37f>
	  _DistanceType __half = __len >> 1;
   13760:	48 89 c7             	mov    rdi,rax
   13763:	48 d1 ff             	sar    rdi,1
   13766:	4d 8d 1c bc          	lea    r11,[r12+rdi*4]
	  if (__comp(__val, __middle))
   1376a:	45 3b 03             	cmp    r8d,DWORD PTR [r11]
   1376d:	72 28                	jb     13797 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x397>
	      __len = __len - __half - 1;
   1376f:	48 29 f8             	sub    rax,rdi
	      ++__first;
   13772:	4d 8d 63 04          	lea    r12,[r11+0x4]
	      __len = __len - __half - 1;
   13776:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   1377a:	48 85 c0             	test   rax,rax
   1377d:	7f e1                	jg     13760 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x360>
    return (__p - __xpicto_edges) % 2;
   1377f:	4d 29 d4             	sub    r12,r10
		&& __is_extended_pictographic(__c))
   13782:	41 83 e4 04          	and    r12d,0x4
   13786:	0f 84 75 ff ff ff    	je     13701 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x301>
      _M_xpicto_seq_state = __next_state;
   1378c:	c6 43 08 02          	mov    BYTE PTR [rbx+0x8],0x2
	_M_RI_count = 0;
   13790:	31 c0                	xor    eax,eax
   13792:	e9 ab fe ff ff       	jmp    13642 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x242>
	    __len = __half;
   13797:	48 89 f8             	mov    rax,rdi
   1379a:	eb bf                	jmp    1375b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x35b>
   1379c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000000137a0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(basic_string_view<_CharT> __s,
   137a0:	41 57                	push   r15
   137a2:	41 56                	push   r14
   137a4:	41 55                	push   r13
   137a6:	49 89 d5             	mov    r13,rdx
   137a9:	41 54                	push   r12
   137ab:	55                   	push   rbp
   137ac:	48 89 f5             	mov    rbp,rsi
   137af:	53                   	push   rbx
   137b0:	48 81 ec 28 01 00 00 	sub    rsp,0x128
   137b7:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
	  if (_M_spec._M_width_kind == _WP_none
   137bc:	66 f7 07 80 07       	test   WORD PTR [rdi],0x780
   137c1:	0f 84 d9 04 00 00    	je     13ca0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x500>
   137c7:	66 48 0f 6e c2       	movq   xmm0,rdx
	      if (_M_spec._M_prec_kind != _WP_none)
   137cc:	0f b6 57 01          	movzx  edx,BYTE PTR [rdi+0x1]
   137d0:	49 89 fe             	mov    r14,rdi
   137d3:	66 0f 6f c8          	movdqa xmm1,xmm0
   137d7:	66 0f 6c c9          	punpcklqdq xmm1,xmm1
   137db:	83 e2 06             	and    edx,0x6
   137de:	0f 85 fc 01 00 00    	jne    139e0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
  // Return the field width of a string.
  template<typename _CharT>
    constexpr size_t
    __field_width(basic_string_view<_CharT> __s)
    {
      if (__s.empty()) [[unlikely]]
   137e4:	48 85 f6             	test   rsi,rsi
   137e7:	0f 84 03 07 00 00    	je     13ef0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x750>
      { return this->_M_str + this->_M_len; }
   137ed:	4d 8d 64 35 00       	lea    r12,[r13+rsi*1+0x0]
	if (_M_curr() != _M_last)
   137f2:	4d 39 ec             	cmp    r12,r13
   137f5:	0f 84 b5 05 00 00    	je     13db0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x610>
	  _M_read_utf8();
   137fb:	31 c9                	xor    ecx,ecx
   137fd:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
   13802:	0f 11 4c 24 78       	movups XMMWORD PTR [rsp+0x78],xmm1
   13807:	66 89 8c 24 88 00 00 	mov    WORD PTR [rsp+0x88],cx
   1380e:	00 
   1380f:	c6 84 24 8a 00 00 00 	mov    BYTE PTR [rsp+0x8a],0x0
   13816:	00 
   13817:	4c 89 a4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r12
   1381e:	00 
   1381f:	e8 cc 31 ff ff       	call   69f0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
   13824:	48 8b 8c 24 80 00 00 	mov    rcx,QWORD PTR [rsp+0x80]
   1382b:	00 
   1382c:	66 49 0f 6e c5       	movq   xmm0,r13
   13831:	4c 89 a4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r12
   13838:	00 
   13839:	4c 89 a4 24 00 01 00 	mov    QWORD PTR [rsp+0x100],r12
   13840:	00 
   13841:	0f b7 94 24 88 00 00 	movzx  edx,WORD PTR [rsp+0x88]
   13848:	00 
  struct _Grapheme_cluster_iterator_base
   13849:	66 48 0f 6e d9       	movq   xmm3,rcx
	: _M_base(__i)
   1384e:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
   13855:	00 
      operator==(_Utf_iterator __lhs, _Sent __rhs)
   13856:	66 0f 6c c3          	punpcklqdq xmm0,xmm3
   1385a:	0f 11 44 24 78       	movups XMMWORD PTR [rsp+0x78],xmm0
   1385f:	66 0f 6f 4c 24 70    	movdqa xmm1,XMMWORD PTR [rsp+0x70]
   13865:	66 0f 6f 84 24 80 00 	movdqa xmm0,XMMWORD PTR [rsp+0x80]
   1386c:	00 00 
   1386e:	0f 29 8c 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm1
   13875:	00 
   13876:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
   1387d:	00 
	: _M_base(__i)
   1387e:	0f 29 8c 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm1
   13885:	00 
   13886:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
   1388d:	00 
	  if (__i != __i.end())
   1388e:	4c 39 e1             	cmp    rcx,r12
   13891:	74 5c                	je     138ef <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x14f>
      operator*() const { return _M_buf[_M_buf_index]; }
   13893:	0f b6 c2             	movzx  eax,dl
      while (__len > 0)
   13896:	48 8d 35 83 30 00 00 	lea    rsi,[rip+0x3083]        # 16920 <std::__unicode::__v15_1_0::__gcb_edges>
   1389d:	44 8b bc 84 e0 00 00 	mov    r15d,DWORD PTR [rsp+rax*4+0xe0]
   138a4:	00 
      _DistanceType __len = std::distance(__first, __last);
   138a5:	b8 a4 06 00 00       	mov    eax,0x6a4
				 (__c << __gcb_shift_bits) | __mask);
   138aa:	44 89 ff             	mov    edi,r15d
   138ad:	c1 e7 04             	shl    edi,0x4
   138b0:	83 cf 0f             	or     edi,0xf
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
   138b3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   138ba:	00 00 00 00 
   138be:	66 90                	xchg   ax,ax
      while (__len > 0)
   138c0:	48 85 c0             	test   rax,rax
   138c3:	7e 22                	jle    138e7 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x147>
	  _DistanceType __half = __len >> 1;
   138c5:	48 89 c2             	mov    rdx,rax
   138c8:	48 d1 fa             	sar    rdx,1
   138cb:	48 8d 0c 96          	lea    rcx,[rsi+rdx*4]
	  if (__comp(__middle, __val))
   138cf:	39 39                	cmp    DWORD PTR [rcx],edi
   138d1:	0f 83 b9 03 00 00    	jae    13c90 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f0>
	      __len = __len - __half - 1;
   138d7:	48 29 d0             	sub    rax,rdx
	      ++__first;
   138da:	48 8d 71 04          	lea    rsi,[rcx+0x4]
	      __len = __len - __half - 1;
   138de:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   138e2:	48 85 c0             	test   rax,rax
   138e5:	7f de                	jg     138c5 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x125>
    return _Gcb_property(__p[-1] & __mask);
   138e7:	8b 46 fc             	mov    eax,DWORD PTR [rsi-0x4]
   138ea:	83 e0 0f             	and    eax,0xf
   138ed:	89 c3                	mov    ebx,eax
      constexpr auto begin() const { return _M_begin; }
   138ef:	31 c0                	xor    eax,eax
   138f1:	89 9c 24 a4 00 00 00 	mov    DWORD PTR [rsp+0xa4],ebx
   138f8:	4c 8d 05 c1 4a 00 00 	lea    r8,[rip+0x4ac1]        # 183c0 <std::__unicode::__v15_1_0::__width_edges>
   138ff:	bb 01 00 00 00       	mov    ebx,0x1
   13904:	66 89 84 24 a8 00 00 	mov    WORD PTR [rsp+0xa8],ax
   1390b:	00 
   1390c:	4c 89 c6             	mov    rsi,r8
      _DistanceType __len = std::distance(__first, __last);
   1390f:	b8 c8 00 00 00       	mov    eax,0xc8
   13914:	44 89 bc 24 a0 00 00 	mov    DWORD PTR [rsp+0xa0],r15d
   1391b:	00 
   1391c:	c6 84 24 aa 00 00 00 	mov    BYTE PTR [rsp+0xaa],0x0
   13923:	00 
   13924:	66 0f 6f 84 24 a0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xa0]
   1392b:	00 00 
   1392d:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
   13934:	00 
   13935:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
   1393c:	00 
   1393d:	66 0f 6f 84 24 b0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xb0]
   13944:	00 00 
   13946:	4c 89 a4 24 10 01 00 	mov    QWORD PTR [rsp+0x110],r12
   1394d:	00 
   1394e:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
   13955:	00 
   13956:	66 0f 6f 84 24 c0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xc0]
   1395d:	00 00 
   1395f:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
   13966:	00 
    if (__c < __width_edges[0]) [[likely]]
   13967:	41 81 ff ff 10 00 00 	cmp    r15d,0x10ff
   1396e:	0f 87 ef 02 00 00    	ja     13c63 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
   13974:	4c 8d bc 24 e0 00 00 	lea    r15,[rsp+0xe0]
   1397b:	00 
	return 0;
      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
      auto __it = __gc.begin();
      const auto __end = __gc.end();
      size_t __n = __it.width();
      while (++__it != __end)
   1397c:	eb 1d                	jmp    1399b <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1fb>
   1397e:	66 90                	xchg   ax,ax
	{ return __field_width(_M_c); }
   13980:	8b 94 24 e0 00 00 00 	mov    edx,DWORD PTR [rsp+0xe0]
    if (__c < __width_edges[0]) [[likely]]
   13987:	b8 01 00 00 00       	mov    eax,0x1
   1398c:	81 fa ff 10 00 00    	cmp    edx,0x10ff
   13992:	0f 87 30 03 00 00    	ja     13cc8 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x528>
	__n += __it.width();
   13998:	48 01 c3             	add    rbx,rax
      while (++__it != __end)
   1399b:	4c 89 ff             	mov    rdi,r15
   1399e:	e8 5d fa ff ff       	call   13400 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()>
   139a3:	4c 39 60 20          	cmp    QWORD PTR [rax+0x20],r12
   139a7:	75 d7                	jne    13980 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
	  return __format::__write_padded_as_spec(__s, __estimated_width,
   139a9:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   139ae:	48 89 ef             	mov    rdi,rbp
   139b1:	4c 89 ee             	mov    rsi,r13
   139b4:	4d 89 f0             	mov    r8,r14
	}
   139b7:	48 81 c4 28 01 00 00 	add    rsp,0x128
	  return __format::__write_padded_as_spec(__s, __estimated_width,
   139be:	48 89 da             	mov    rdx,rbx
   139c1:	41 b9 01 00 00 00    	mov    r9d,0x1
	}
   139c7:	5b                   	pop    rbx
   139c8:	5d                   	pop    rbp
   139c9:	41 5c                	pop    r12
   139cb:	41 5d                	pop    r13
   139cd:	41 5e                	pop    r14
   139cf:	41 5f                	pop    r15
	  return __format::__write_padded_as_spec(__s, __estimated_width,
   139d1:	e9 ba 5e ff ff       	jmp    9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
   139d6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   139dd:	00 00 00 
   139e0:	49 89 f4             	mov    r12,rsi
	  if (_M_prec_kind == _WP_value)
   139e3:	80 fa 02             	cmp    dl,0x2
   139e6:	0f 84 44 03 00 00    	je     13d30 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x590>
	  size_t __prec = -1;
   139ec:	48 c7 44 24 18 ff ff 	mov    QWORD PTR [rsp+0x18],0xffffffffffffffff
   139f3:	ff ff 
	  else if (_M_prec_kind == _WP_from_arg)
   139f5:	80 fa 04             	cmp    dl,0x4
   139f8:	0f 84 1a 05 00 00    	je     13f18 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x778>
  // resulting field width.
  template<typename _CharT>
    constexpr size_t
    __truncate(basic_string_view<_CharT>& __s, size_t __max)
    {
      if (__s.empty()) [[unlikely]]
   139fe:	4d 85 e4             	test   r12,r12
   13a01:	0f 84 e9 04 00 00    	je     13ef0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x750>
   13a07:	66 48 0f 7e c0       	movq   rax,xmm0
   13a0c:	49 01 c4             	add    r12,rax
	if (_M_curr() != _M_last)
   13a0f:	49 39 c4             	cmp    r12,rax
   13a12:	0f 84 80 04 00 00    	je     13e98 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6f8>
	  _M_read_utf8();
   13a18:	45 31 c0             	xor    r8d,r8d
   13a1b:	48 8d 7c 24 40       	lea    rdi,[rsp+0x40]
   13a20:	44 89 4c 24 34       	mov    DWORD PTR [rsp+0x34],r9d
      _M_read()
   13a25:	66 0f d6 44 24 20    	movq   QWORD PTR [rsp+0x20],xmm0
	  _M_read_utf8();
   13a2b:	0f 11 4c 24 48       	movups XMMWORD PTR [rsp+0x48],xmm1
   13a30:	66 44 89 44 24 58    	mov    WORD PTR [rsp+0x58],r8w
   13a36:	c6 44 24 5a 00       	mov    BYTE PTR [rsp+0x5a],0x0
   13a3b:	4c 89 64 24 60       	mov    QWORD PTR [rsp+0x60],r12
   13a40:	e8 ab 2f ff ff       	call   69f0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
   13a45:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
   13a4a:	f3 0f 7e 44 24 20    	movq   xmm0,QWORD PTR [rsp+0x20]
   13a50:	4c 89 64 24 60       	mov    QWORD PTR [rsp+0x60],r12
   13a55:	4c 89 a4 24 00 01 00 	mov    QWORD PTR [rsp+0x100],r12
   13a5c:	00 
   13a5d:	0f b7 44 24 58       	movzx  eax,WORD PTR [rsp+0x58]
  struct _Grapheme_cluster_iterator_base
   13a62:	66 0f 6f c8          	movdqa xmm1,xmm0
   13a66:	66 48 0f 6e ea       	movq   xmm5,rdx
	  if (__i != __i.end())
   13a6b:	49 39 d4             	cmp    r12,rdx
	: _M_base(__i)
   13a6e:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
   13a75:	00 
      operator==(_Utf_iterator __lhs, _Sent __rhs)
   13a76:	66 0f 6c cd          	punpcklqdq xmm1,xmm5
	  if (__i != __i.end())
   13a7a:	44 8b 4c 24 34       	mov    r9d,DWORD PTR [rsp+0x34]
   13a7f:	0f 11 4c 24 48       	movups XMMWORD PTR [rsp+0x48],xmm1
   13a84:	66 0f 6f 54 24 40    	movdqa xmm2,XMMWORD PTR [rsp+0x40]
   13a8a:	66 0f 6f 4c 24 50    	movdqa xmm1,XMMWORD PTR [rsp+0x50]
   13a90:	0f 29 94 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm2
   13a97:	00 
   13a98:	0f 29 8c 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm1
   13a9f:	00 
	: _M_base(__i)
   13aa0:	0f 29 94 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm2
   13aa7:	00 
   13aa8:	0f 29 8c 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm1
   13aaf:	00 
	  if (__i != __i.end())
   13ab0:	74 5f                	je     13b11 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x371>
      operator*() const { return _M_buf[_M_buf_index]; }
   13ab2:	0f b6 c0             	movzx  eax,al
   13ab5:	48 8d 35 64 2e 00 00 	lea    rsi,[rip+0x2e64]        # 16920 <std::__unicode::__v15_1_0::__gcb_edges>
   13abc:	44 8b 8c 84 e0 00 00 	mov    r9d,DWORD PTR [rsp+rax*4+0xe0]
   13ac3:	00 
      _DistanceType __len = std::distance(__first, __last);
   13ac4:	b8 a4 06 00 00       	mov    eax,0x6a4
				 (__c << __gcb_shift_bits) | __mask);
   13ac9:	44 89 cf             	mov    edi,r9d
   13acc:	c1 e7 04             	shl    edi,0x4
   13acf:	83 cf 0f             	or     edi,0xf
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
   13ad2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13ad9:	00 00 00 00 
   13add:	0f 1f 00             	nop    DWORD PTR [rax]
      while (__len > 0)
   13ae0:	48 85 c0             	test   rax,rax
   13ae3:	7e 22                	jle    13b07 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x367>
	  _DistanceType __half = __len >> 1;
   13ae5:	48 89 c2             	mov    rdx,rax
   13ae8:	48 d1 fa             	sar    rdx,1
   13aeb:	48 8d 0c 96          	lea    rcx,[rsi+rdx*4]
	  if (__comp(__middle, __val))
   13aef:	39 39                	cmp    DWORD PTR [rcx],edi
   13af1:	0f 83 99 02 00 00    	jae    13d90 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5f0>
	      __len = __len - __half - 1;
   13af7:	48 29 d0             	sub    rax,rdx
	      ++__first;
   13afa:	48 8d 71 04          	lea    rsi,[rcx+0x4]
	      __len = __len - __half - 1;
   13afe:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   13b02:	48 85 c0             	test   rax,rax
   13b05:	7f de                	jg     13ae5 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x345>
    return _Gcb_property(__p[-1] & __mask);
   13b07:	8b 46 fc             	mov    eax,DWORD PTR [rsi-0x4]
   13b0a:	83 e0 0f             	and    eax,0xf
   13b0d:	89 44 24 08          	mov    DWORD PTR [rsp+0x8],eax
      constexpr auto begin() const { return _M_begin; }
   13b11:	8b 44 24 08          	mov    eax,DWORD PTR [rsp+0x8]
   13b15:	31 f6                	xor    esi,esi
   13b17:	44 89 8c 24 a0 00 00 	mov    DWORD PTR [rsp+0xa0],r9d
   13b1e:	00 
   13b1f:	4c 8d 05 9a 48 00 00 	lea    r8,[rip+0x489a]        # 183c0 <std::__unicode::__v15_1_0::__width_edges>
   13b26:	66 89 b4 24 a8 00 00 	mov    WORD PTR [rsp+0xa8],si
   13b2d:	00 
   13b2e:	bb 01 00 00 00       	mov    ebx,0x1
   13b33:	4c 89 c6             	mov    rsi,r8
   13b36:	89 84 24 a4 00 00 00 	mov    DWORD PTR [rsp+0xa4],eax
   13b3d:	b8 c8 00 00 00       	mov    eax,0xc8
   13b42:	c6 84 24 aa 00 00 00 	mov    BYTE PTR [rsp+0xaa],0x0
   13b49:	00 
   13b4a:	66 0f 6f 8c 24 a0 00 	movdqa xmm1,XMMWORD PTR [rsp+0xa0]
   13b51:	00 00 
   13b53:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
   13b5a:	00 
   13b5b:	0f 29 8c 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm1
   13b62:	00 
   13b63:	66 0f 6f 8c 24 b0 00 	movdqa xmm1,XMMWORD PTR [rsp+0xb0]
   13b6a:	00 00 
   13b6c:	4c 89 a4 24 10 01 00 	mov    QWORD PTR [rsp+0x110],r12
   13b73:	00 
   13b74:	0f 29 8c 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm1
   13b7b:	00 
   13b7c:	66 0f 6f 8c 24 c0 00 	movdqa xmm1,XMMWORD PTR [rsp+0xc0]
   13b83:	00 00 
   13b85:	0f 29 8c 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm1
   13b8c:	00 
    if (__c < __width_edges[0]) [[likely]]
   13b8d:	41 81 f9 ff 10 00 00 	cmp    r9d,0x10ff
   13b94:	0f 87 a9 01 00 00    	ja     13d43 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a3>
   13b9a:	4c 8d bc 24 e0 00 00 	lea    r15,[rsp+0xe0]
   13ba1:	00 

      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
      auto __it = __gc.begin();
      const auto __end = __gc.end();
      size_t __n = __it.width();
      if (__n > __max)
   13ba2:	48 39 5c 24 18       	cmp    QWORD PTR [rsp+0x18],rbx
   13ba7:	73 18                	jae    13bc1 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x421>
   13ba9:	e9 32 03 00 00       	jmp    13ee0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x740>
   13bae:	66 90                	xchg   ax,ax
	  __s = {};
	  return 0;
	}
      while (++__it != __end)
	{
	  size_t __n2 = __n + __it.width();
   13bb0:	48 01 d8             	add    rax,rbx
	  if (__n2 > __max)
   13bb3:	48 39 44 24 18       	cmp    QWORD PTR [rsp+0x18],rax
   13bb8:	0f 82 42 03 00 00    	jb     13f00 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x760>
	    {
	      __s = basic_string_view<_CharT>(__s.begin(), __it.base());
	      return __n;
	    }
	  __n = __n2;
   13bbe:	48 89 c3             	mov    rbx,rax
      while (++__it != __end)
   13bc1:	4c 89 ff             	mov    rdi,r15
   13bc4:	66 0f d6 44 24 08    	movq   QWORD PTR [rsp+0x8],xmm0
   13bca:	e8 31 f8 ff ff       	call   13400 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()>
   13bcf:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [rsp+0x8]
   13bd5:	4c 39 60 20          	cmp    QWORD PTR [rax+0x20],r12
   13bd9:	0f 84 ca fd ff ff    	je     139a9 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x209>
	{ return __field_width(_M_c); }
   13bdf:	8b 94 24 e0 00 00 00 	mov    edx,DWORD PTR [rsp+0xe0]
    if (__c < __width_edges[0]) [[likely]]
   13be6:	b8 01 00 00 00       	mov    eax,0x1
   13beb:	81 fa ff 10 00 00    	cmp    edx,0x10ff
   13bf1:	76 bd                	jbe    13bb0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x410>
   13bf3:	4c 8d 05 c6 47 00 00 	lea    r8,[rip+0x47c6]        # 183c0 <std::__unicode::__v15_1_0::__width_edges>
   13bfa:	b8 c8 00 00 00       	mov    eax,0xc8
   13bff:	4c 89 c7             	mov    rdi,r8
   13c02:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13c09:	00 00 00 00 
   13c0d:	0f 1f 00             	nop    DWORD PTR [rax]
      while (__len > 0)
   13c10:	48 85 c0             	test   rax,rax
   13c13:	7e 22                	jle    13c37 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x497>
	  _DistanceType __half = __len >> 1;
   13c15:	48 89 c1             	mov    rcx,rax
   13c18:	48 d1 f9             	sar    rcx,1
   13c1b:	48 8d 34 8f          	lea    rsi,[rdi+rcx*4]
	  if (__comp(__val, __middle))
   13c1f:	3b 16                	cmp    edx,DWORD PTR [rsi]
   13c21:	0f 82 79 01 00 00    	jb     13da0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
	      __len = __len - __half - 1;
   13c27:	48 29 c8             	sub    rax,rcx
	      ++__first;
   13c2a:	48 8d 7e 04          	lea    rdi,[rsi+0x4]
	      __len = __len - __half - 1;
   13c2e:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   13c32:	48 85 c0             	test   rax,rax
   13c35:	7f de                	jg     13c15 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x475>
    return (__p - __width_edges) % 2 + 1;
   13c37:	4c 29 c7             	sub    rdi,r8
   13c3a:	48 89 f8             	mov    rax,rdi
   13c3d:	48 c1 ef 3f          	shr    rdi,0x3f
   13c41:	48 c1 f8 02          	sar    rax,0x2
   13c45:	48 01 f8             	add    rax,rdi
   13c48:	83 e0 01             	and    eax,0x1
   13c4b:	48 29 f8             	sub    rax,rdi
	  size_t __n2 = __n + __it.width();
   13c4e:	83 c0 01             	add    eax,0x1
    return (__p - __width_edges) % 2 + 1;
   13c51:	e9 5a ff ff ff       	jmp    13bb0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x410>
   13c56:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   13c5d:	00 00 00 
	    __len = __half;
   13c60:	48 89 d0             	mov    rax,rdx
      while (__len > 0)
   13c63:	48 85 c0             	test   rax,rax
   13c66:	0f 8e e4 02 00 00    	jle    13f50 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7b0>
	  _DistanceType __half = __len >> 1;
   13c6c:	48 89 c2             	mov    rdx,rax
   13c6f:	48 d1 fa             	sar    rdx,1
   13c72:	48 8d 0c 96          	lea    rcx,[rsi+rdx*4]
	  if (__comp(__val, __middle))
   13c76:	44 3b 39             	cmp    r15d,DWORD PTR [rcx]
   13c79:	72 e5                	jb     13c60 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c0>
	      __len = __len - __half - 1;
   13c7b:	48 29 d0             	sub    rax,rdx
	      ++__first;
   13c7e:	48 8d 71 04          	lea    rsi,[rcx+0x4]
	      __len = __len - __half - 1;
   13c82:	48 83 e8 01          	sub    rax,0x1
   13c86:	eb db                	jmp    13c63 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
   13c88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   13c8f:	00 
	    __len = __half;
   13c90:	48 89 d0             	mov    rax,rdx
   13c93:	e9 28 fc ff ff       	jmp    138c0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x120>
   13c98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   13c9f:	00 
      iterator out() { return std::move(_M_out); }
   13ca0:	4c 8b 61 10          	mov    r12,QWORD PTR [rcx+0x10]
	  if (__str.size())
   13ca4:	48 85 f6             	test   rsi,rsi
   13ca7:	0f 85 5b 01 00 00    	jne    13e08 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
	}
   13cad:	48 81 c4 28 01 00 00 	add    rsp,0x128
   13cb4:	4c 89 e0             	mov    rax,r12
   13cb7:	5b                   	pop    rbx
   13cb8:	5d                   	pop    rbp
   13cb9:	41 5c                	pop    r12
   13cbb:	41 5d                	pop    r13
   13cbd:	41 5e                	pop    r14
   13cbf:	41 5f                	pop    r15
   13cc1:	c3                   	ret
   13cc2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
   13cc8:	4c 8d 05 f1 46 00 00 	lea    r8,[rip+0x46f1]        # 183c0 <std::__unicode::__v15_1_0::__width_edges>
      _DistanceType __len = std::distance(__first, __last);
   13ccf:	b8 c8 00 00 00       	mov    eax,0xc8
   13cd4:	4c 89 c7             	mov    rdi,r8
   13cd7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   13cde:	00 00 
      while (__len > 0)
   13ce0:	48 85 c0             	test   rax,rax
   13ce3:	7e 1e                	jle    13d03 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x563>
	  _DistanceType __half = __len >> 1;
   13ce5:	48 89 c1             	mov    rcx,rax
   13ce8:	48 d1 f9             	sar    rcx,1
   13ceb:	48 8d 34 8f          	lea    rsi,[rdi+rcx*4]
	  if (__comp(__val, __middle))
   13cef:	3b 16                	cmp    edx,DWORD PTR [rsi]
   13cf1:	72 35                	jb     13d28 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x588>
	      __len = __len - __half - 1;
   13cf3:	48 29 c8             	sub    rax,rcx
	      ++__first;
   13cf6:	48 8d 7e 04          	lea    rdi,[rsi+0x4]
	      __len = __len - __half - 1;
   13cfa:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   13cfe:	48 85 c0             	test   rax,rax
   13d01:	7f e2                	jg     13ce5 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x545>
   13d03:	4c 29 c7             	sub    rdi,r8
   13d06:	48 89 f8             	mov    rax,rdi
   13d09:	48 c1 ef 3f          	shr    rdi,0x3f
   13d0d:	48 c1 f8 02          	sar    rax,0x2
   13d11:	48 01 f8             	add    rax,rdi
   13d14:	83 e0 01             	and    eax,0x1
   13d17:	48 29 f8             	sub    rax,rdi
	__n += __it.width();
   13d1a:	83 c0 01             	add    eax,0x1
    return (__p - __width_edges) % 2 + 1;
   13d1d:	e9 76 fc ff ff       	jmp    13998 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f8>
   13d22:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __len = __half;
   13d28:	48 89 c8             	mov    rax,rcx
   13d2b:	eb b3                	jmp    13ce0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x540>
   13d2d:	0f 1f 00             	nop    DWORD PTR [rax]
	    __prec = _M_prec;
   13d30:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   13d34:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
   13d39:	e9 c0 fc ff ff       	jmp    139fe <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25e>
   13d3e:	66 90                	xchg   ax,ax
   13d40:	48 89 d0             	mov    rax,rdx
      while (__len > 0)
   13d43:	48 85 c0             	test   rax,rax
   13d46:	7e 1f                	jle    13d67 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5c7>
	  _DistanceType __half = __len >> 1;
   13d48:	48 89 c2             	mov    rdx,rax
   13d4b:	48 d1 fa             	sar    rdx,1
   13d4e:	48 8d 0c 96          	lea    rcx,[rsi+rdx*4]
	  if (__comp(__val, __middle))
   13d52:	44 3b 09             	cmp    r9d,DWORD PTR [rcx]
   13d55:	72 e9                	jb     13d40 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a0>
	      __len = __len - __half - 1;
   13d57:	48 29 d0             	sub    rax,rdx
	      ++__first;
   13d5a:	48 8d 71 04          	lea    rsi,[rcx+0x4]
	      __len = __len - __half - 1;
   13d5e:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   13d62:	48 85 c0             	test   rax,rax
   13d65:	7f e1                	jg     13d48 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a8>
   13d67:	4c 29 c6             	sub    rsi,r8
   13d6a:	48 89 f0             	mov    rax,rsi
   13d6d:	48 c1 ee 3f          	shr    rsi,0x3f
   13d71:	48 c1 f8 02          	sar    rax,0x2
   13d75:	48 01 f0             	add    rax,rsi
   13d78:	83 e0 01             	and    eax,0x1
   13d7b:	48 29 f0             	sub    rax,rsi
      size_t __n = __it.width();
   13d7e:	8d 58 01             	lea    ebx,[rax+0x1]
    return (__p - __width_edges) % 2 + 1;
   13d81:	e9 14 fe ff ff       	jmp    13b9a <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3fa>
   13d86:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   13d8d:	00 00 00 
   13d90:	48 89 d0             	mov    rax,rdx
   13d93:	e9 48 fd ff ff       	jmp    13ae0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
   13d98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   13d9f:	00 
	    __len = __half;
   13da0:	48 89 c8             	mov    rax,rcx
   13da3:	e9 68 fe ff ff       	jmp    13c10 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x470>
   13da8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   13daf:	00 
   13db0:	66 49 0f 6e c4       	movq   xmm0,r12
	  _M_buf = {};
   13db5:	c7 44 24 70 00 00 00 	mov    DWORD PTR [rsp+0x70],0x0
   13dbc:	00 
   13dbd:	31 d2                	xor    edx,edx
   13dbf:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
   13dc3:	66 89 94 24 88 00 00 	mov    WORD PTR [rsp+0x88],dx
   13dca:	00 
   13dcb:	0f 11 44 24 78       	movups XMMWORD PTR [rsp+0x78],xmm0
	: _M_base(__i)
   13dd0:	66 0f 6f 44 24 70    	movdqa xmm0,XMMWORD PTR [rsp+0x70]
   13dd6:	c6 84 24 8a 00 00 00 	mov    BYTE PTR [rsp+0x8a],0x0
   13ddd:	00 
   13dde:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
   13de5:	00 
   13de6:	66 0f 6f 84 24 80 00 	movdqa xmm0,XMMWORD PTR [rsp+0x80]
   13ded:	00 00 
   13def:	4c 89 a4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r12
   13df6:	00 
   13df7:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
   13dfe:	00 
      operator==(_Utf_iterator __lhs, _Sent __rhs)
   13dff:	e9 eb fa ff ff       	jmp    138ef <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x14f>
   13e04:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    { return __lhs.base() - __rhs.base(); }
   13e08:	49 8b 7c 24 18       	mov    rdi,QWORD PTR [r12+0x18]
   13e0d:	49 8b 5c 24 10       	mov    rbx,QWORD PTR [r12+0x10]
   13e12:	48 89 f8             	mov    rax,rdi
   13e15:	49 2b 44 24 08       	sub    rax,QWORD PTR [r12+0x8]
   13e1a:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
   13e1d:	48 39 de             	cmp    rsi,rbx
   13e20:	72 5c                	jb     13e7e <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6de>
   13e22:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13e29:	00 00 00 00 
   13e2d:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__b < __a)
   13e30:	48 39 eb             	cmp    rbx,rbp
   13e33:	48 89 ea             	mov    rdx,rbp
   13e36:	48 0f 46 d3          	cmovbe rdx,rbx
	if (__n == 0)
   13e3a:	48 85 d2             	test   rdx,rdx
   13e3d:	74 08                	je     13e47 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6a7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   13e3f:	4c 89 ee             	mov    rsi,r13
   13e42:	e8 69 f3 fe ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
   13e47:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
      { _M_current += __n; return *this; }
   13e4b:	49 01 5c 24 18       	add    QWORD PTR [r12+0x18],rbx
   13e50:	4c 89 e7             	mov    rdi,r12
	this->_M_str += __n;
   13e53:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
   13e56:	48 29 dd             	sub    rbp,rbx
   13e59:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
   13e5b:	49 8b 7c 24 18       	mov    rdi,QWORD PTR [r12+0x18]
   13e60:	49 8b 5c 24 10       	mov    rbx,QWORD PTR [r12+0x10]
   13e65:	48 89 f8             	mov    rax,rdi
   13e68:	49 2b 44 24 08       	sub    rax,QWORD PTR [r12+0x8]
   13e6d:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
   13e70:	48 39 dd             	cmp    rbp,rbx
   13e73:	73 bb                	jae    13e30 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x690>
	if (__s.size())
   13e75:	48 85 ed             	test   rbp,rbp
   13e78:	0f 84 2f fe ff ff    	je     13cad <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50d>
   13e7e:	48 89 ea             	mov    rdx,rbp
   13e81:	4c 89 ee             	mov    rsi,r13
   13e84:	e8 27 f3 fe ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
   13e89:	49 01 6c 24 18       	add    QWORD PTR [r12+0x18],rbp
	    return __format::__write(__fc.out(), __s);
   13e8e:	e9 1a fe ff ff       	jmp    13cad <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50d>
   13e93:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   13e98:	66 0f 6f c8          	movdqa xmm1,xmm0
	  _M_buf = {};
   13e9c:	c7 44 24 40 00 00 00 	mov    DWORD PTR [rsp+0x40],0x0
   13ea3:	00 
   13ea4:	31 ff                	xor    edi,edi
   13ea6:	66 0f 6c c8          	punpcklqdq xmm1,xmm0
   13eaa:	66 89 7c 24 58       	mov    WORD PTR [rsp+0x58],di
   13eaf:	0f 11 4c 24 48       	movups XMMWORD PTR [rsp+0x48],xmm1
	: _M_base(__i)
   13eb4:	66 0f 6f 4c 24 40    	movdqa xmm1,XMMWORD PTR [rsp+0x40]
   13eba:	c6 44 24 5a 00       	mov    BYTE PTR [rsp+0x5a],0x0
   13ebf:	0f 29 8c 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm1
   13ec6:	00 
   13ec7:	66 0f 6f 4c 24 50    	movdqa xmm1,XMMWORD PTR [rsp+0x50]
   13ecd:	66 0f d6 44 24 60    	movq   QWORD PTR [rsp+0x60],xmm0
   13ed3:	0f 29 8c 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm1
   13eda:	00 
      operator==(_Utf_iterator __lhs, _Sent __rhs)
   13edb:	e9 31 fc ff ff       	jmp    13b11 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x371>
	  __s = {};
   13ee0:	45 31 ed             	xor    r13d,r13d
   13ee3:	31 ed                	xor    ebp,ebp
	return 0;
   13ee5:	31 db                	xor    ebx,ebx
   13ee7:	e9 bd fa ff ff       	jmp    139a9 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x209>
   13eec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	return 0;
   13ef0:	31 db                	xor    ebx,ebx
   13ef2:	e9 b2 fa ff ff       	jmp    139a9 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x209>
   13ef7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   13efe:	00 00 
	: _M_len(__last - __first), _M_str(std::to_address(__first))
   13f00:	48 8b ac 24 00 01 00 	mov    rbp,QWORD PTR [rsp+0x100]
   13f07:	00 
   13f08:	66 48 0f 7e c0       	movq   rax,xmm0
   13f0d:	48 29 c5             	sub    rbp,rax
	      return __n;
   13f10:	e9 94 fa ff ff       	jmp    139a9 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x209>
   13f15:	0f 1f 00             	nop    DWORD PTR [rax]
   13f18:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
   13f1c:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
   13f21:	44 89 4c 24 34       	mov    DWORD PTR [rsp+0x34],r9d
   13f26:	0f 29 4c 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm1
   13f2b:	4c 89 6c 24 38       	mov    QWORD PTR [rsp+0x38],r13
   13f30:	e8 7b fc fe ff       	call   3bb0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   13f35:	66 0f 6f 4c 24 20    	movdqa xmm1,XMMWORD PTR [rsp+0x20]
   13f3b:	44 8b 4c 24 34       	mov    r9d,DWORD PTR [rsp+0x34]
   13f40:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
   13f45:	f3 0f 7e 44 24 38    	movq   xmm0,QWORD PTR [rsp+0x38]
   13f4b:	e9 ae fa ff ff       	jmp    139fe <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25e>
    return (__p - __width_edges) % 2 + 1;
   13f50:	4c 29 c6             	sub    rsi,r8
   13f53:	48 89 f0             	mov    rax,rsi
   13f56:	48 c1 ee 3f          	shr    rsi,0x3f
   13f5a:	48 c1 f8 02          	sar    rax,0x2
   13f5e:	48 01 f0             	add    rax,rsi
   13f61:	83 e0 01             	and    eax,0x1
   13f64:	48 29 f0             	sub    rax,rsi
      size_t __n = __it.width();
   13f67:	8d 58 01             	lea    ebx,[rax+0x1]
    return (__p - __width_edges) % 2 + 1;
   13f6a:	e9 05 fa ff ff       	jmp    13974 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d4>
   13f6f:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   13f76:	00 00 00 
   13f79:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000013f80 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
   13f80:	41 56                	push   r14
	  switch (__type)
   13f82:	48 8d 0d b7 1b 00 00 	lea    rcx,[rip+0x1bb7]        # 15b40 <CSWTCH.1104+0xa60>
   13f89:	0f b6 d2             	movzx  edx,dl
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
   13f8c:	41 55                	push   r13
   13f8e:	41 54                	push   r12
   13f90:	55                   	push   rbp
   13f91:	53                   	push   rbx
   13f92:	48 89 fb             	mov    rbx,rdi
   13f95:	48 83 ec 40          	sub    rsp,0x40
	  switch (__type)
   13f99:	48 63 04 91          	movsxd rax,DWORD PTR [rcx+rdx*4]
   13f9d:	48 01 c8             	add    rax,rcx
   13fa0:	ff e0                	jmp    rax
   13fa2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
   13fa8:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   13fab:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   13fb0:	4c 8b 37             	mov    r14,QWORD PTR [rdi]
   13fb3:	ba 01 00 00 00       	mov    edx,0x1
   13fb8:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
   13fbc:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   13fbf:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   13fc6:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   13fc8:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	      _Formatter __f;
   13fcc:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   13fd3:	00 
	    return _M_do_parse(__pc, _AsInteger);
   13fd4:	e8 c7 2d ff ff       	call   6da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   13fd9:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   13fdd:	4c 89 f6             	mov    rsi,r14
   13fe0:	4c 89 ea             	mov    rdx,r13
      { _M_begin = __it; }
   13fe3:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   13fe7:	4c 89 e7             	mov    rdi,r12
   13fea:	48 89 d9             	mov    rcx,rbx
   13fed:	e8 4e a9 ff ff       	call   e940 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   13ff2:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	}
   13ff6:	48 83 c4 40          	add    rsp,0x40
   13ffa:	5b                   	pop    rbx
   13ffb:	5d                   	pop    rbp
   13ffc:	41 5c                	pop    r12
   13ffe:	41 5d                	pop    r13
   14000:	41 5e                	pop    r14
   14002:	c3                   	ret
   14003:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14008:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   1400b:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   14010:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14017:	00 00 
      { return _M_f.parse(__pc); }
   14019:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   1401c:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   14023:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14024:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   14028:	e8 03 3b ff ff       	call   7b30 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>
	{ return _M_f.format(__u, __fc); }
   1402d:	66 0f 6f 03          	movdqa xmm0,XMMWORD PTR [rbx]
   14031:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14034:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14038:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   1403c:	48 89 ee             	mov    rsi,rbp
   1403f:	e8 7c b2 ff ff       	call   f2c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14044:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	}
   14048:	48 83 c4 40          	add    rsp,0x40
   1404c:	5b                   	pop    rbx
   1404d:	5d                   	pop    rbp
   1404e:	41 5c                	pop    r12
   14050:	41 5d                	pop    r13
   14052:	41 5e                	pop    r14
   14054:	c3                   	ret
   14055:	0f 1f 00             	nop    DWORD PTR [rax]
   14058:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	      auto __end = _M_do_parse(__pc, _AsBool);
   1405b:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
   14060:	44 0f b6 2f          	movzx  r13d,BYTE PTR [rdi]
   14064:	31 d2                	xor    edx,edx
   14066:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14069:	c7 44 24 0c 20 00 00 	mov    DWORD PTR [rsp+0xc],0x20
   14070:	00 
   14071:	48 c7 44 24 04 00 00 	mov    QWORD PTR [rsp+0x4],0x0
   14078:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   1407a:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	      auto __end = _M_do_parse(__pc, _AsBool);
   1407e:	e8 1d 2d ff ff       	call   6da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      if (_M_spec._M_type == _Pres_s)
   14083:	f6 44 24 05 78       	test   BYTE PTR [rsp+0x5],0x78
   14088:	75 0b                	jne    14095 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x115>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
   1408a:	f6 44 24 04 5c       	test   BYTE PTR [rsp+0x4],0x5c
   1408f:	0f 85 04 04 00 00    	jne    14499 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x519>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14095:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
      { _M_begin = __it; }
   14099:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   1409d:	41 0f b6 f5          	movzx  esi,r13b
   140a1:	4c 89 e7             	mov    rdi,r12
   140a4:	48 89 da             	mov    rdx,rbx
   140a7:	e8 a4 82 ff ff       	call   c350 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   140ac:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   140b0:	e9 41 ff ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   140b5:	0f 1f 00             	nop    DWORD PTR [rax]
   140b8:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	      auto __end = _M_do_parse(__pc, _AsChar);
   140bb:	4c 8d 64 24 10       	lea    r12,[rsp+0x10]
   140c0:	ba 07 00 00 00       	mov    edx,0x7
	      _Formatter __f;
   140c5:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   140cc:	00 00 
	      auto __end = _M_do_parse(__pc, _AsChar);
   140ce:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   140d1:	c7 44 24 18 20 00 00 	mov    DWORD PTR [rsp+0x18],0x20
   140d8:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   140d9:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	      auto __end = _M_do_parse(__pc, _AsChar);
   140dd:	e8 be 2c ff ff       	call   6da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
   140e2:	0f b6 54 24 11       	movzx  edx,BYTE PTR [rsp+0x11]
	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
   140e7:	89 d1                	mov    ecx,edx
   140e9:	f7 d2                	not    edx
   140eb:	83 e1 78             	and    ecx,0x78
   140ee:	83 e2 38             	and    edx,0x38
   140f1:	0f 85 89 04 00 00    	jne    14580 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x600>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
   140f7:	f6 44 24 10 5c       	test   BYTE PTR [rsp+0x10],0x5c
   140fc:	0f 85 97 03 00 00    	jne    14499 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x519>
      { _M_begin = __it; }
   14102:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14106:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	  if (_M_f._M_spec._M_type == __format::_Pres_none
   1410a:	80 f9 38             	cmp    cl,0x38
   1410d:	0f 84 55 05 00 00    	je     14668 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x6e8>
      iterator out() { return std::move(_M_out); }
   14113:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   14117:	e9 28 ff ff ff       	jmp    14044 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xc4>
   1411c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
   14120:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   14123:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   14128:	ba 01 00 00 00       	mov    edx,0x1
	      _Formatter __f;
   1412d:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14134:	00 00 
	    return _M_do_parse(__pc, _AsInteger);
   14136:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14139:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   14140:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14141:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	    return _M_do_parse(__pc, _AsInteger);
   14145:	e8 56 2c ff ff       	call   6da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	{ return _M_f.format(__u, __fc); }
   1414a:	8b 33                	mov    esi,DWORD PTR [rbx]
   1414c:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   1414f:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14153:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14157:	48 89 ea             	mov    rdx,rbp
   1415a:	e8 a1 85 ff ff       	call   c700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   1415f:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14163:	e9 8e fe ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   14168:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1416f:	00 
   14170:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   14173:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   14178:	ba 01 00 00 00       	mov    edx,0x1
	      _Formatter __f;
   1417d:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14184:	00 00 
	    return _M_do_parse(__pc, _AsInteger);
   14186:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14189:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   14190:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14191:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	    return _M_do_parse(__pc, _AsInteger);
   14195:	e8 06 2c ff ff       	call   6da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	{ return _M_f.format(__u, __fc); }
   1419a:	8b 33                	mov    esi,DWORD PTR [rbx]
   1419c:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   1419f:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   141a3:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   141a7:	48 89 ea             	mov    rdx,rbp
   141aa:	e8 11 8b ff ff       	call   ccc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   141af:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   141b3:	e9 3e fe ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   141b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   141bf:	00 
   141c0:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   141c3:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   141c8:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
   141cb:	ba 01 00 00 00       	mov    edx,0x1
   141d0:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   141d3:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   141da:	00 
   141db:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   141e2:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   141e4:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	    return _M_do_parse(__pc, _AsInteger);
   141e8:	e8 b3 2b ff ff       	call   6da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   141ed:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   141f1:	4c 89 ee             	mov    rsi,r13
   141f4:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   141f7:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   141fb:	48 89 da             	mov    rdx,rbx
   141fe:	e8 fd 8f ff ff       	call   d200 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14203:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14207:	e9 ea fd ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   1420c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
   14210:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   14213:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   14218:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
   1421b:	ba 01 00 00 00       	mov    edx,0x1
   14220:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14223:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1422a:	00 
   1422b:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14232:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14234:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	    return _M_do_parse(__pc, _AsInteger);
   14238:	e8 63 2b ff ff       	call   6da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   1423d:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14241:	4c 89 ee             	mov    rsi,r13
   14244:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14247:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   1424b:	48 89 da             	mov    rdx,rbx
   1424e:	e8 6d 96 ff ff       	call   d8c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14253:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14257:	e9 9a fd ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   1425c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14260:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   14263:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   14268:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   1426f:	00 00 
      { return _M_f.parse(__pc); }
   14271:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14274:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1427b:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   1427c:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   14280:	e8 ab 38 ff ff       	call   7b30 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>
	{ return _M_f.format(__u, __fc); }
   14285:	f3 0f 10 03          	movss  xmm0,DWORD PTR [rbx]
   14289:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   1428c:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14290:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14294:	48 89 ee             	mov    rsi,rbp
   14297:	e8 b4 de ff ff       	call   12150 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   1429c:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   142a0:	e9 51 fd ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   142a5:	0f 1f 00             	nop    DWORD PTR [rax]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   142a8:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   142ab:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   142b0:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   142b7:	00 00 
      { return _M_f.parse(__pc); }
   142b9:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   142bc:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   142c3:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   142c4:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   142c8:	e8 63 38 ff ff       	call   7b30 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>
	{ return _M_f.format(__u, __fc); }
   142cd:	f2 0f 10 03          	movsd  xmm0,QWORD PTR [rbx]
   142d1:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   142d4:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   142d8:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   142dc:	48 89 ee             	mov    rsi,rbp
   142df:	e8 2c cf ff ff       	call   11210 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   142e4:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   142e8:	e9 09 fd ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   142ed:	0f 1f 00             	nop    DWORD PTR [rax]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   142f0:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   142f3:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   142f8:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   142ff:	00 00 
      { return _M_f.parse(__pc); }
   14301:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14304:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1430b:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   1430c:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   14310:	e8 1b 38 ff ff       	call   7b30 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>
	{ return _M_f.format(__u, __fc); }
   14315:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14318:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   1431c:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14320:	ff 73 08             	push   QWORD PTR [rbx+0x8]
   14323:	ff 33                	push   QWORD PTR [rbx]
   14325:	48 89 ee             	mov    rsi,rbp
   14328:	e8 e3 bf ff ff       	call   10310 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   1432d:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14331:	5a                   	pop    rdx
   14332:	59                   	pop    rcx
   14333:	e9 be fc ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   14338:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1433f:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14340:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   14343:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   14348:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   1434f:	00 00 
      { return _M_f.parse(__pc); }
   14351:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14354:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1435b:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   1435c:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   14360:	e8 8b 3c ff ff       	call   7ff0 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)>
      { _M_begin = __it; }
   14365:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14369:	48 8b 1b             	mov    rbx,QWORD PTR [rbx]
   1436c:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	return __builtin_strlen(__s);
   14370:	48 89 df             	mov    rdi,rbx
   14373:	e8 78 ed fe ff       	call   30f0 <strlen@plt>
	_M_str{__str}
   14378:	48 89 da             	mov    rdx,rbx
	{ return _M_f.format(__u, __fc); }
   1437b:	48 89 e9             	mov    rcx,rbp
   1437e:	4c 89 e7             	mov    rdi,r12
   14381:	48 89 c6             	mov    rsi,rax
   14384:	e8 17 f4 ff ff       	call   137a0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14389:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   1438d:	e9 64 fc ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   14392:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14398:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   1439b:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   143a0:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   143a7:	00 00 
      { return _M_f.parse(__pc); }
   143a9:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   143ac:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   143b3:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   143b4:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   143b8:	e8 33 3c ff ff       	call   7ff0 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)>
      advance_to(const_iterator __it) noexcept
   143bd:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
   143c0:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
	{ return _M_f.format(__u, __fc); }
   143c4:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   143c7:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   143cb:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   143cf:	48 89 e9             	mov    rcx,rbp
   143d2:	e8 c9 f3 ff ff       	call   137a0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   143d7:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   143db:	e9 16 fc ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   143e0:	4c 8b 2e             	mov    r13,QWORD PTR [rsi]
	__format::_Spec<_CharT> __spec{};
   143e3:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   143ea:	00 
      constexpr const_iterator end() const noexcept { return _M_end; }
   143eb:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	__format::_Spec<_CharT> __spec{};
   143f0:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   143f7:	00 00 
      constexpr const_iterator end() const noexcept { return _M_end; }
   143f9:	4d 8b 75 10          	mov    r14,QWORD PTR [r13+0x10]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
   143fd:	49 8b 6d 08          	mov    rbp,QWORD PTR [r13+0x8]
	  if (__first == __last || *__first == '}')
   14401:	49 39 ee             	cmp    r14,rbp
   14404:	0f 84 16 01 00 00    	je     14520 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5a0>
   1440a:	80 7d 00 7d          	cmp    BYTE PTR [rbp+0x0],0x7d
   1440e:	0f 84 0c 01 00 00    	je     14520 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5a0>
	__first = __spec._M_parse_fill_and_align(__first, __last);
   14414:	48 89 ee             	mov    rsi,rbp
   14417:	4c 89 f2             	mov    rdx,r14
   1441a:	4c 89 e7             	mov    rdi,r12
   1441d:	e8 9e 27 ff ff       	call   6bc0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
   14422:	48 89 c5             	mov    rbp,rax
	  if (__first == __last || *__first == '}')
   14425:	49 39 c6             	cmp    r14,rax
   14428:	0f 84 f2 00 00 00    	je     14520 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5a0>
   1442e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   14431:	3c 7d                	cmp    al,0x7d
   14433:	0f 84 e7 00 00 00    	je     14520 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5a0>
	bool __arg_id = false;
   14439:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	if (*__first == '0')
   1443e:	3c 30                	cmp    al,0x30
   14440:	74 57                	je     14499 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x519>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
   14442:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
   14447:	48 8d 54 24 24       	lea    rdx,[rsp+0x24]
   1444c:	4c 89 f6             	mov    rsi,r14
   1444f:	48 89 ef             	mov    rdi,rbp
   14452:	4d 8d 45 08          	lea    r8,[r13+0x8]
   14456:	e8 85 1d ff ff       	call   61e0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next != __first)
   1445b:	48 39 c5             	cmp    rbp,rax
   1445e:	74 1f                	je     1447f <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4ff>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
   14460:	0f b6 7c 24 03       	movzx  edi,BYTE PTR [rsp+0x3]
   14465:	0f b7 4c 24 20       	movzx  ecx,WORD PTR [rsp+0x20]
   1446a:	8d 57 01             	lea    edx,[rdi+0x1]
   1446d:	66 81 e1 7f fe       	and    cx,0xfe7f
   14472:	83 e2 03             	and    edx,0x3
   14475:	c1 e2 07             	shl    edx,0x7
   14478:	09 ca                	or     edx,ecx
   1447a:	66 89 54 24 20       	mov    WORD PTR [rsp+0x20],dx
	if (__first != __last)
   1447f:	49 39 c6             	cmp    r14,rax
   14482:	0f 84 8e 00 00 00    	je     14516 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x596>
	    if (*__first == 'p')
   14488:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   1448b:	80 fa 70             	cmp    dl,0x70
   1448e:	0f 84 13 02 00 00    	je     146a7 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x727>
	  if (__first == __last || *__first == '}')
   14494:	80 fa 7d             	cmp    dl,0x7d
   14497:	74 7d                	je     14516 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x596>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
   14499:	e8 b2 ec fe ff       	call   3150 <abort@plt>
   1449e:	66 90                	xchg   ax,ax
	    __arg.format(this->_M_pc, this->_M_fc);
   144a0:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
	  __f(__pc, __fc, this->_M_ptr);
   144a3:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   144a6:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
   144aa:	48 8b 77 30          	mov    rsi,QWORD PTR [rdi+0x30]
	}
   144ae:	48 83 c4 40          	add    rsp,0x40
	    __arg.format(this->_M_pc, this->_M_fc);
   144b2:	48 83 c7 08          	add    rdi,0x8
	}
   144b6:	5b                   	pop    rbx
   144b7:	5d                   	pop    rbp
   144b8:	41 5c                	pop    r12
   144ba:	41 5d                	pop    r13
   144bc:	41 5e                	pop    r14
	  __f(__pc, __fc, this->_M_ptr);
   144be:	ff e0                	jmp    rax
   144c0:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   144c3:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   144c8:	4c 8b 37             	mov    r14,QWORD PTR [rdi]
   144cb:	ba 01 00 00 00       	mov    edx,0x1
   144d0:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
   144d4:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   144d7:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   144de:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   144e0:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	      _Formatter __f;
   144e4:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   144eb:	00 
	    return _M_do_parse(__pc, _AsInteger);
   144ec:	e8 af 28 ff ff       	call   6da0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   144f1:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   144f5:	4c 89 f6             	mov    rsi,r14
   144f8:	4c 89 ea             	mov    rdx,r13
      { _M_begin = __it; }
   144fb:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   144ff:	4c 89 e7             	mov    rdi,r12
   14502:	48 89 d9             	mov    rcx,rbx
   14505:	e8 36 9a ff ff       	call   df40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   1450a:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   1450e:	e9 e3 fa ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   14513:	4c 89 f0             	mov    rax,r14
	  return __first;
   14516:	48 89 c5             	mov    rbp,rax
   14519:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  _M_spec = __spec;
   14520:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
   14525:	48 89 44 24 04       	mov    QWORD PTR [rsp+0x4],rax
   1452a:	8b 44 24 28          	mov    eax,DWORD PTR [rsp+0x28]
      { _M_begin = __it; }
   1452e:	49 89 6d 08          	mov    QWORD PTR [r13+0x8],rbp
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14532:	49 8b 6d 30          	mov    rbp,QWORD PTR [r13+0x30]
	  _M_spec = __spec;
   14536:	89 44 24 0c          	mov    DWORD PTR [rsp+0xc],eax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   1453a:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      if (__value == 0)
   1453d:	48 85 c0             	test   rax,rax
   14540:	75 66                	jne    145a8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x628>
	  *__first = '0';
   14542:	c6 44 24 22 30       	mov    BYTE PTR [rsp+0x22],0x30
   14547:	ba 03 00 00 00       	mov    edx,0x3
	  __buf[0] = '0';
   1454c:	b8 30 78 00 00       	mov    eax,0x7830
	  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,
   14551:	48 89 d7             	mov    rdi,rdx
   14554:	4c 89 e6             	mov    rsi,r12
   14557:	48 89 e9             	mov    rcx,rbp
   1455a:	41 b9 02 00 00 00    	mov    r9d,0x2
   14560:	4c 8d 44 24 04       	lea    r8,[rsp+0x4]
	  __buf[0] = '0';
   14565:	66 89 44 24 20       	mov    WORD PTR [rsp+0x20],ax
	  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,
   1456a:	e8 21 53 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   1456f:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14573:	e9 7e fa ff ff       	jmp    13ff6 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   14578:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1457f:	00 
      { _M_begin = __it; }
   14580:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14584:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
   14588:	0f b6 33             	movzx  esi,BYTE PTR [rbx]
	  if (_M_f._M_spec._M_type == __format::_Pres_none
   1458b:	84 c9                	test   cl,cl
   1458d:	0f 84 d8 00 00 00    	je     1466b <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x6eb>
	    return _M_f.format(static_cast<make_unsigned_t<_CharT>>(__u), __fc);
   14593:	48 89 ea             	mov    rdx,rbp
   14596:	4c 89 e7             	mov    rdi,r12
   14599:	e8 a2 79 ff ff       	call   bf40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
   1459e:	e9 a1 fa ff ff       	jmp    14044 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xc4>
   145a3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
   145a8:	48 0f bd d0          	bsr    rdx,rax
      constexpr char __digits[] = {
   145ac:	66 0f 6f 05 fc 41 00 	movdqa xmm0,XMMWORD PTR [rip+0x41fc]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
   145b3:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
   145b4:	83 c2 04             	add    edx,0x4
   145b7:	89 d7                	mov    edi,edx
      constexpr char __digits[] = {
   145b9:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
   145be:	c1 ef 02             	shr    edi,0x2
      unsigned __pos = __len - 1;
   145c1:	8d 57 ff             	lea    edx,[rdi-0x1]
      while (__val >= 0x100)
   145c4:	48 3d ff 00 00 00    	cmp    rax,0xff
   145ca:	76 6b                	jbe    14637 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x6b7>
   145cc:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   145d3:	00 00 00 00 
   145d7:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   145de:	00 00 00 00 
   145e2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   145e9:	00 00 00 00 
   145ed:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   145f4:	00 00 00 00 
   145f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   145ff:	00 
	  auto __num = __val & 0xF;
   14600:	48 89 c6             	mov    rsi,rax
	  __first[__pos] = __digits[__num];
   14603:	89 d1                	mov    ecx,edx
	  auto __num = __val & 0xF;
   14605:	83 e6 0f             	and    esi,0xf
	  __first[__pos] = __digits[__num];
   14608:	0f b6 74 34 10       	movzx  esi,BYTE PTR [rsp+rsi*1+0x10]
   1460d:	40 88 74 0c 22       	mov    BYTE PTR [rsp+rcx*1+0x22],sil
	  __val >>= 4;
   14612:	48 89 c1             	mov    rcx,rax
	  __first[__pos - 1] = __digits[__num];
   14615:	8d 72 ff             	lea    esi,[rdx-0x1]
	  __val >>= 4;
   14618:	48 c1 e8 08          	shr    rax,0x8
	  __val >>= 4;
   1461c:	48 c1 e9 04          	shr    rcx,0x4
	  __pos -= 2;
   14620:	83 ea 02             	sub    edx,0x2
	  __num = __val & 0xF;
   14623:	83 e1 0f             	and    ecx,0xf
	  __first[__pos - 1] = __digits[__num];
   14626:	0f b6 4c 0c 10       	movzx  ecx,BYTE PTR [rsp+rcx*1+0x10]
   1462b:	88 4c 34 22          	mov    BYTE PTR [rsp+rsi*1+0x22],cl
      while (__val >= 0x100)
   1462f:	48 3d ff 00 00 00    	cmp    rax,0xff
   14635:	77 c9                	ja     14600 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x680>
      if (__val >= 0x10)
   14637:	48 83 f8 0f          	cmp    rax,0xf
   1463b:	76 63                	jbe    146a0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x720>
	  const auto __num = __val & 0xF;
   1463d:	48 89 c2             	mov    rdx,rax
	  __val >>= 4;
   14640:	48 c1 e8 04          	shr    rax,0x4
	  const auto __num = __val & 0xF;
   14644:	83 e2 0f             	and    edx,0xf
	  __first[1] = __digits[__num];
   14647:	0f b6 54 14 10       	movzx  edx,BYTE PTR [rsp+rdx*1+0x10]
   1464c:	88 54 24 23          	mov    BYTE PTR [rsp+0x23],dl
	  __first[0] = __digits[__val];
   14650:	0f b6 44 04 10       	movzx  eax,BYTE PTR [rsp+rax*1+0x10]
	  int __n = __ptr - __buf;
   14655:	8d 57 02             	lea    edx,[rdi+0x2]
   14658:	88 44 24 22          	mov    BYTE PTR [rsp+0x22],al
	    __str = string_view(__buf, __n);
   1465c:	48 63 d2             	movsxd rdx,edx
   1465f:	e9 e8 fe ff ff       	jmp    1454c <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5cc>
   14664:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14668:	0f b6 33             	movzx  esi,BYTE PTR [rbx]
      : _M_len{__len}, _M_str{__str}
   1466b:	48 8d 4c 24 20       	lea    rcx,[rsp+0x20]
   14670:	b8 01 00 00 00       	mov    eax,0x1
   14675:	40 88 74 24 20       	mov    BYTE PTR [rsp+0x20],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
   1467a:	41 b9 01 00 00 00    	mov    r9d,0x1
   14680:	48 89 ce             	mov    rsi,rcx
   14683:	48 89 c7             	mov    rdi,rax
   14686:	4d 89 e0             	mov    r8,r12
   14689:	48 89 e9             	mov    rcx,rbp
   1468c:	ba 01 00 00 00       	mov    edx,0x1
   14691:	e8 fa 51 ff ff       	call   9890 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	    return _M_f._M_format_character(__u, __fc);
   14696:	e9 a9 f9 ff ff       	jmp    14044 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xc4>
   1469b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	__first[0] = __digits[__val];
   146a0:	0f b6 44 04 10       	movzx  eax,BYTE PTR [rsp+rax*1+0x10]
   146a5:	eb ae                	jmp    14655 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x6d5>
	      ++__first;
   146a7:	48 8d 48 01          	lea    rcx,[rax+0x1]
	  if (__first == __last || *__first == '}')
   146ab:	49 39 ce             	cmp    r14,rcx
   146ae:	0f 84 5f fe ff ff    	je     14513 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x593>
   146b4:	0f b6 50 01          	movzx  edx,BYTE PTR [rax+0x1]
   146b8:	48 89 c8             	mov    rax,rcx
   146bb:	e9 d4 fd ff ff       	jmp    14494 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x514>

00000000000146c0 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)>:
      _M_format_arg(size_t __id) override
   146c0:	48 83 ec 58          	sub    rsp,0x58
   146c4:	48 89 f8             	mov    rax,rdi
	}, _M_fc.arg(__id));
   146c7:	48 8b 7f 30          	mov    rdi,QWORD PTR [rdi+0x30]
	if (__i < _M_packed_size)
   146cb:	0f b6 17             	movzx  edx,BYTE PTR [rdi]
   146ce:	89 d1                	mov    ecx,edx
   146d0:	83 e2 0f             	and    edx,0xf
   146d3:	83 e1 0f             	and    ecx,0xf
   146d6:	48 39 d6             	cmp    rsi,rdx
   146d9:	73 5d                	jae    14738 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0x78>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
   146db:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
   146de:	48 8d 0c b6          	lea    rcx,[rsi+rsi*4]
	    __arg._M_val = _M_values[__i];
   146e2:	48 c1 e6 04          	shl    rsi,0x4
   146e6:	48 03 77 08          	add    rsi,QWORD PTR [rdi+0x8]
   146ea:	66 0f 6f 06          	movdqa xmm0,XMMWORD PTR [rsi]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
   146ee:	48 c1 ea 04          	shr    rdx,0x4
   146f2:	48 d3 ea             	shr    rdx,cl
	    __arg._M_val = _M_values[__i];
   146f5:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
   146fa:	89 d1                	mov    ecx,edx
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
   146fc:	83 e2 1f             	and    edx,0x1f
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
   146ff:	83 e1 1f             	and    ecx,0x1f
   14702:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
   14708:	88 4c 24 20          	mov    BYTE PTR [rsp+0x20],cl
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
   1470c:	48 8d 74 24 08       	lea    rsi,[rsp+0x8]
   14711:	48 8d 7c 24 30       	lea    rdi,[rsp+0x30]
	std::visit_format_arg([this](auto& __arg) {
   14716:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
   1471b:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
   14720:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
   14726:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
   1472b:	e8 50 f8 ff ff       	call   13f80 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>
      }
   14730:	48 83 c4 58          	add    rsp,0x58
   14734:	c3                   	ret
   14735:	0f 1f 00             	nop    DWORD PTR [rax]
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
   14738:	84 c9                	test   cl,cl
   1473a:	75 2c                	jne    14768 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0xa8>
   1473c:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
   1473f:	31 d2                	xor    edx,edx
   14741:	49 c1 e8 04          	shr    r8,0x4
   14745:	4c 39 c6             	cmp    rsi,r8
   14748:	73 b8                	jae    14702 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0x42>
	  __arg = _M_args[__i];
   1474a:	48 c1 e6 05          	shl    rsi,0x5
   1474e:	48 03 77 08          	add    rsi,QWORD PTR [rdi+0x8]
   14752:	f3 0f 6f 06          	movdqu xmm0,XMMWORD PTR [rsi]
   14756:	0f b6 56 10          	movzx  edx,BYTE PTR [rsi+0x10]
   1475a:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
   1475f:	89 d1                	mov    ecx,edx
   14761:	eb 9f                	jmp    14702 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0x42>
   14763:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   14768:	31 d2                	xor    edx,edx
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
   1476a:	31 c9                	xor    ecx,ecx
   1476c:	eb 94                	jmp    14702 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0x42>

Disassembly of section .fini:

0000000000014770 <_fini>:
   14770:	48 83 ec 08          	sub    rsp,0x8
   14774:	48 83 c4 08          	add    rsp,0x8
   14778:	c3                   	ret
