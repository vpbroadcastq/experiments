
./a.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <_init>:
    3000:	48 83 ec 08          	sub    rsp,0x8
    3004:	48 8b 05 cd 8f 01 00 	mov    rax,QWORD PTR [rip+0x18fcd]        # 1bfd8 <__gmon_start__@Base>
    300b:	48 85 c0             	test   rax,rax
    300e:	74 02                	je     3012 <_init+0x12>
    3010:	ff d0                	call   rax
    3012:	48 83 c4 08          	add    rsp,0x8
    3016:	c3                   	ret

Disassembly of section .plt:

0000000000003020 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt-0x10>:
    3020:	ff 35 ca 8f 01 00    	push   QWORD PTR [rip+0x18fca]        # 1bff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    3026:	ff 25 cc 8f 01 00    	jmp    QWORD PTR [rip+0x18fcc]        # 1bff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    302c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000003030 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt>:
    3030:	ff 25 ca 8f 01 00    	jmp    QWORD PTR [rip+0x18fca]        # 1c000 <std::basic_ostream<char, std::char_traits<char> >::put(char)@GLIBCXX_3.4>
    3036:	68 00 00 00 00       	push   0x0
    303b:	e9 e0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003040 <std::to_chars(char*, char*, float)@plt>:
    3040:	ff 25 c2 8f 01 00    	jmp    QWORD PTR [rip+0x18fc2]        # 1c008 <std::to_chars(char*, char*, float)@GLIBCXX_3.4.29>
    3046:	68 01 00 00 00       	push   0x1
    304b:	e9 d0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003050 <frexpf@plt>:
    3050:	ff 25 ba 8f 01 00    	jmp    QWORD PTR [rip+0x18fba]        # 1c010 <frexpf@GLIBC_2.2.5>
    3056:	68 02 00 00 00       	push   0x2
    305b:	e9 c0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003060 <std::to_chars(char*, char*, long double, std::chars_format)@plt>:
    3060:	ff 25 b2 8f 01 00    	jmp    QWORD PTR [rip+0x18fb2]        # 1c018 <std::to_chars(char*, char*, long double, std::chars_format)@GLIBCXX_3.4.29>
    3066:	68 03 00 00 00       	push   0x3
    306b:	e9 b0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003070 <std::locale::operator==(std::locale const&) const@plt>:
    3070:	ff 25 aa 8f 01 00    	jmp    QWORD PTR [rip+0x18faa]        # 1c020 <std::locale::operator==(std::locale const&) const@GLIBCXX_3.4>
    3076:	68 04 00 00 00       	push   0x4
    307b:	e9 a0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003080 <std::to_chars(char*, char*, double)@plt>:
    3080:	ff 25 a2 8f 01 00    	jmp    QWORD PTR [rip+0x18fa2]        # 1c028 <std::to_chars(char*, char*, double)@GLIBCXX_3.4.29>
    3086:	68 05 00 00 00       	push   0x5
    308b:	e9 90 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003090 <std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@plt>:
    3090:	ff 25 9a 8f 01 00    	jmp    QWORD PTR [rip+0x18f9a]        # 1c030 <std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@GLIBCXX_3.4>
    3096:	68 06 00 00 00       	push   0x6
    309b:	e9 80 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030a0 <std::terminate()@plt>:
    30a0:	ff 25 92 8f 01 00    	jmp    QWORD PTR [rip+0x18f92]        # 1c038 <std::terminate()@GLIBCXX_3.4>
    30a6:	68 07 00 00 00       	push   0x7
    30ab:	e9 70 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030b0 <std::ios_base::ios_base()@plt>:
    30b0:	ff 25 8a 8f 01 00    	jmp    QWORD PTR [rip+0x18f8a]        # 1c040 <std::ios_base::ios_base()@GLIBCXX_3.4>
    30b6:	68 08 00 00 00       	push   0x8
    30bb:	e9 60 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030c0 <__udivti3@plt>:
    30c0:	ff 25 82 8f 01 00    	jmp    QWORD PTR [rip+0x18f82]        # 1c048 <__udivti3@GCC_3.0>
    30c6:	68 09 00 00 00       	push   0x9
    30cb:	e9 50 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030d0 <std::ios_base::~ios_base()@plt>:
    30d0:	ff 25 7a 8f 01 00    	jmp    QWORD PTR [rip+0x18f7a]        # 1c050 <std::ios_base::~ios_base()@GLIBCXX_3.4>
    30d6:	68 0a 00 00 00       	push   0xa
    30db:	e9 40 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030e0 <std::__throw_bad_alloc()@plt>:
    30e0:	ff 25 72 8f 01 00    	jmp    QWORD PTR [rip+0x18f72]        # 1c058 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    30e6:	68 0b 00 00 00       	push   0xb
    30eb:	e9 30 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030f0 <strlen@plt>:
    30f0:	ff 25 6a 8f 01 00    	jmp    QWORD PTR [rip+0x18f6a]        # 1c060 <strlen@GLIBC_2.2.5>
    30f6:	68 0c 00 00 00       	push   0xc
    30fb:	e9 20 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003100 <std::thread::_State::~_State()@plt>:
    3100:	ff 25 62 8f 01 00    	jmp    QWORD PTR [rip+0x18f62]        # 1c068 <std::thread::_State::~_State()@GLIBCXX_3.4.22>
    3106:	68 0d 00 00 00       	push   0xd
    310b:	e9 10 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003110 <__gttf2@plt>:
    3110:	ff 25 5a 8f 01 00    	jmp    QWORD PTR [rip+0x18f5a]        # 1c070 <__gttf2@GCC_4.3.0>
    3116:	68 0e 00 00 00       	push   0xe
    311b:	e9 00 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003120 <std::locale::id::_M_id() const@plt>:
    3120:	ff 25 52 8f 01 00    	jmp    QWORD PTR [rip+0x18f52]        # 1c078 <std::locale::id::_M_id() const@GLIBCXX_3.4>
    3126:	68 0f 00 00 00       	push   0xf
    312b:	e9 f0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003130 <std::__throw_length_error(char const*)@plt>:
    3130:	ff 25 4a 8f 01 00    	jmp    QWORD PTR [rip+0x18f4a]        # 1c080 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    3136:	68 10 00 00 00       	push   0x10
    313b:	e9 e0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003140 <memset@plt>:
    3140:	ff 25 42 8f 01 00    	jmp    QWORD PTR [rip+0x18f42]        # 1c088 <memset@GLIBC_2.2.5>
    3146:	68 11 00 00 00       	push   0x11
    314b:	e9 d0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003150 <abort@plt>:
    3150:	ff 25 3a 8f 01 00    	jmp    QWORD PTR [rip+0x18f3a]        # 1c090 <abort@GLIBC_2.2.5>
    3156:	68 12 00 00 00       	push   0x12
    315b:	e9 c0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003160 <std::to_chars(char*, char*, long double)@plt>:
    3160:	ff 25 32 8f 01 00    	jmp    QWORD PTR [rip+0x18f32]        # 1c098 <std::to_chars(char*, char*, long double)@GLIBCXX_3.4.29>
    3166:	68 13 00 00 00       	push   0x13
    316b:	e9 b0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003170 <std::to_chars(char*, char*, double, std::chars_format)@plt>:
    3170:	ff 25 2a 8f 01 00    	jmp    QWORD PTR [rip+0x18f2a]        # 1c0a0 <std::to_chars(char*, char*, double, std::chars_format)@GLIBCXX_3.4.29>
    3176:	68 14 00 00 00       	push   0x14
    317b:	e9 a0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003180 <std::to_chars(char*, char*, double, std::chars_format, int)@plt>:
    3180:	ff 25 22 8f 01 00    	jmp    QWORD PTR [rip+0x18f22]        # 1c0a8 <std::to_chars(char*, char*, double, std::chars_format, int)@GLIBCXX_3.4.29>
    3186:	68 15 00 00 00       	push   0x15
    318b:	e9 90 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003190 <std::locale::locale(std::locale const&)@plt>:
    3190:	ff 25 1a 8f 01 00    	jmp    QWORD PTR [rip+0x18f1a]        # 1c0b0 <std::locale::locale(std::locale const&)@GLIBCXX_3.4>
    3196:	68 16 00 00 00       	push   0x16
    319b:	e9 80 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031a0 <std::to_chars(char*, char*, _Float128, std::chars_format)@plt>:
    31a0:	ff 25 12 8f 01 00    	jmp    QWORD PTR [rip+0x18f12]        # 1c0b8 <std::to_chars(char*, char*, _Float128, std::chars_format)@GLIBCXX_3.4.31>
    31a6:	68 17 00 00 00       	push   0x17
    31ab:	e9 70 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031b0 <memcpy@plt>:
    31b0:	ff 25 0a 8f 01 00    	jmp    QWORD PTR [rip+0x18f0a]        # 1c0c0 <memcpy@GLIBC_2.14>
    31b6:	68 18 00 00 00       	push   0x18
    31bb:	e9 60 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031c0 <std::to_chars(char*, char*, _Float128, std::chars_format, int)@plt>:
    31c0:	ff 25 02 8f 01 00    	jmp    QWORD PTR [rip+0x18f02]        # 1c0c8 <std::to_chars(char*, char*, _Float128, std::chars_format, int)@GLIBCXX_3.4.31>
    31c6:	68 19 00 00 00       	push   0x19
    31cb:	e9 50 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>:
    31d0:	ff 25 fa 8e 01 00    	jmp    QWORD PTR [rip+0x18efa]        # 1c0d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@GLIBCXX_3.4.22>
    31d6:	68 1a 00 00 00       	push   0x1a
    31db:	e9 40 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031e0 <operator new(unsigned long)@plt>:
    31e0:	ff 25 f2 8e 01 00    	jmp    QWORD PTR [rip+0x18ef2]        # 1c0d8 <operator new(unsigned long)@GLIBCXX_3.4>
    31e6:	68 1b 00 00 00       	push   0x1b
    31eb:	e9 30 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031f0 <std::to_chars(char*, char*, float, std::chars_format)@plt>:
    31f0:	ff 25 ea 8e 01 00    	jmp    QWORD PTR [rip+0x18eea]        # 1c0e0 <std::to_chars(char*, char*, float, std::chars_format)@GLIBCXX_3.4.29>
    31f6:	68 1c 00 00 00       	push   0x1c
    31fb:	e9 20 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003200 <operator delete(void*, unsigned long)@plt>:
    3200:	ff 25 e2 8e 01 00    	jmp    QWORD PTR [rip+0x18ee2]        # 1c0e8 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    3206:	68 1d 00 00 00       	push   0x1d
    320b:	e9 10 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003210 <std::to_chars(char*, char*, long double, std::chars_format, int)@plt>:
    3210:	ff 25 da 8e 01 00    	jmp    QWORD PTR [rip+0x18eda]        # 1c0f0 <std::to_chars(char*, char*, long double, std::chars_format, int)@GLIBCXX_3.4.29>
    3216:	68 1e 00 00 00       	push   0x1e
    321b:	e9 00 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003220 <memchr@plt>:
    3220:	ff 25 d2 8e 01 00    	jmp    QWORD PTR [rip+0x18ed2]        # 1c0f8 <memchr@GLIBC_2.2.5>
    3226:	68 1f 00 00 00       	push   0x1f
    322b:	e9 f0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003230 <__dynamic_cast@plt>:
    3230:	ff 25 ca 8e 01 00    	jmp    QWORD PTR [rip+0x18eca]        # 1c100 <__dynamic_cast@CXXABI_1.3>
    3236:	68 20 00 00 00       	push   0x20
    323b:	e9 e0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    3240:	ff 25 c2 8e 01 00    	jmp    QWORD PTR [rip+0x18ec2]        # 1c108 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    3246:	68 21 00 00 00       	push   0x21
    324b:	e9 d0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003250 <std::to_chars(char*, char*, float, std::chars_format, int)@plt>:
    3250:	ff 25 ba 8e 01 00    	jmp    QWORD PTR [rip+0x18eba]        # 1c110 <std::to_chars(char*, char*, float, std::chars_format, int)@GLIBCXX_3.4.29>
    3256:	68 22 00 00 00       	push   0x22
    325b:	e9 c0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003260 <std::__throw_bad_cast()@plt>:
    3260:	ff 25 b2 8e 01 00    	jmp    QWORD PTR [rip+0x18eb2]        # 1c118 <std::__throw_bad_cast()@GLIBCXX_3.4>
    3266:	68 23 00 00 00       	push   0x23
    326b:	e9 b0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003270 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>:
    3270:	ff 25 aa 8e 01 00    	jmp    QWORD PTR [rip+0x18eaa]        # 1c120 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@GLIBCXX_3.4.21>
    3276:	68 24 00 00 00       	push   0x24
    327b:	e9 a0 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003280 <std::chrono::_V2::steady_clock::now()@plt>:
    3280:	ff 25 a2 8e 01 00    	jmp    QWORD PTR [rip+0x18ea2]        # 1c128 <std::chrono::_V2::steady_clock::now()@GLIBCXX_3.4.19>
    3286:	68 25 00 00 00       	push   0x25
    328b:	e9 90 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>:
    3290:	ff 25 9a 8e 01 00    	jmp    QWORD PTR [rip+0x18e9a]        # 1c130 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@GLIBCXX_3.4>
    3296:	68 26 00 00 00       	push   0x26
    329b:	e9 80 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032a0 <std::locale::classic()@plt>:
    32a0:	ff 25 92 8e 01 00    	jmp    QWORD PTR [rip+0x18e92]        # 1c138 <std::locale::classic()@GLIBCXX_3.4>
    32a6:	68 27 00 00 00       	push   0x27
    32ab:	e9 70 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>:
    32b0:	ff 25 8a 8e 01 00    	jmp    QWORD PTR [rip+0x18e8a]        # 1c140 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@GLIBCXX_3.4.31>
    32b6:	68 28 00 00 00       	push   0x28
    32bb:	e9 60 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032c0 <std::locale::~locale()@plt>:
    32c0:	ff 25 82 8e 01 00    	jmp    QWORD PTR [rip+0x18e82]        # 1c148 <std::locale::~locale()@GLIBCXX_3.4>
    32c6:	68 29 00 00 00       	push   0x29
    32cb:	e9 50 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032d0 <__unordtf2@plt>:
    32d0:	ff 25 7a 8e 01 00    	jmp    QWORD PTR [rip+0x18e7a]        # 1c150 <__unordtf2@GCC_4.3.0>
    32d6:	68 2a 00 00 00       	push   0x2a
    32db:	e9 40 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
    32e0:	ff 25 72 8e 01 00    	jmp    QWORD PTR [rip+0x18e72]        # 1c158 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
    32e6:	68 2b 00 00 00       	push   0x2b
    32eb:	e9 30 fd ff ff       	jmp    3020 <_init+0x20>

00000000000032f0 <frexpl@plt>:
    32f0:	ff 25 6a 8e 01 00    	jmp    QWORD PTR [rip+0x18e6a]        # 1c160 <frexpl@GLIBC_2.2.5>
    32f6:	68 2c 00 00 00       	push   0x2c
    32fb:	e9 20 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003300 <std::locale::name[abi:cxx11]() const@plt>:
    3300:	ff 25 62 8e 01 00    	jmp    QWORD PTR [rip+0x18e62]        # 1c168 <std::locale::name[abi:cxx11]() const@GLIBCXX_3.4.21>
    3306:	68 2d 00 00 00       	push   0x2d
    330b:	e9 10 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003310 <std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)@plt>:
    3310:	ff 25 5a 8e 01 00    	jmp    QWORD PTR [rip+0x18e5a]        # 1c170 <std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)@GLIBCXX_3.4.9>
    3316:	68 2e 00 00 00       	push   0x2e
    331b:	e9 00 fd ff ff       	jmp    3020 <_init+0x20>

0000000000003320 <memmove@plt>:
    3320:	ff 25 52 8e 01 00    	jmp    QWORD PTR [rip+0x18e52]        # 1c178 <memmove@GLIBC_2.2.5>
    3326:	68 2f 00 00 00       	push   0x2f
    332b:	e9 f0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003330 <std::to_chars(char*, char*, _Float128)@plt>:
    3330:	ff 25 4a 8e 01 00    	jmp    QWORD PTR [rip+0x18e4a]        # 1c180 <std::to_chars(char*, char*, _Float128)@GLIBCXX_3.4.31>
    3336:	68 30 00 00 00       	push   0x30
    333b:	e9 e0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003340 <std::thread::join()@plt>:
    3340:	ff 25 42 8e 01 00    	jmp    QWORD PTR [rip+0x18e42]        # 1c188 <std::thread::join()@GLIBCXX_3.4.11>
    3346:	68 31 00 00 00       	push   0x31
    334b:	e9 d0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003350 <toupper@plt>:
    3350:	ff 25 3a 8e 01 00    	jmp    QWORD PTR [rip+0x18e3a]        # 1c190 <toupper@GLIBC_2.2.5>
    3356:	68 32 00 00 00       	push   0x32
    335b:	e9 c0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003360 <frexp@plt>:
    3360:	ff 25 32 8e 01 00    	jmp    QWORD PTR [rip+0x18e32]        # 1c198 <frexp@GLIBC_2.2.5>
    3366:	68 33 00 00 00       	push   0x33
    336b:	e9 b0 fc ff ff       	jmp    3020 <_init+0x20>

0000000000003370 <std::locale::locale()@plt>:
    3370:	ff 25 2a 8e 01 00    	jmp    QWORD PTR [rip+0x18e2a]        # 1c1a0 <std::locale::locale()@GLIBCXX_3.4>
    3376:	68 34 00 00 00       	push   0x34
    337b:	e9 a0 fc ff ff       	jmp    3020 <_init+0x20>

Disassembly of section .plt.got:

0000000000003380 <__cxa_finalize@plt>:
    3380:	ff 25 3a 8c 01 00    	jmp    QWORD PTR [rip+0x18c3a]        # 1bfc0 <__cxa_finalize@GLIBC_2.2.5>
    3386:	66 90                	xchg   ax,ax

Disassembly of section .text:

00000000000033c0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>:

  /// @cond undocumented
  [[noreturn]]
  inline void
  __throw_format_error(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    33c0:	e8 8b fd ff ff       	call   3150 <abort@plt>
    33c5:	e8 86 fd ff ff       	call   3150 <abort@plt>

00000000000033ca <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>:
    33ca:	e8 81 fd ff ff       	call   3150 <abort@plt>
    33cf:	e8 7c fd ff ff       	call   3150 <abort@plt>

00000000000033d4 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0] [clone .cold]>:
#else
      (void) static_cast<const _Facet*>(static_cast<const locale::facet*>(0));
#endif
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
	return *__f;
      __throw_bad_cast();
    33d4:	e8 87 fe ff ff       	call   3260 <std::__throw_bad_cast()@plt>

00000000000033d9 <main.cold>:
  // and without making the declaration of std::terminate visible to users.
  extern "C++" __attribute__ ((__noreturn__, __always_inline__))
  inline void __terminate() _GLIBCXX_USE_NOEXCEPT
  {
    void terminate() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__noreturn__,__cold__));
    terminate();
    33d9:	e8 c2 fc ff ff       	call   30a0 <std::terminate()@plt>

00000000000033de <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]>:
      _GLIBCXX20_CONSTEXPR
      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
	if (this->max_size() - (this->size() - __n1) < __n2)
	  __throw_length_error(__N(__s));
    33de:	48 8d 3d 73 1d 01 00 	lea    rdi,[rip+0x11d73]        # 15158 <CSWTCH.1110+0x78>
    33e5:	e8 46 fd ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>

00000000000033ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0] [clone .cold]>:
		this->_S_move(__p + __len2, __p + __len1, __how_much);
	      if (__len2)
		this->_S_copy(__p, __s, __len2);
	    }
	  else
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
    33ea:	4c 89 e1             	mov    rcx,r12
    33ed:	4c 89 ee             	mov    rsi,r13
    33f0:	48 89 df             	mov    rdi,rbx
    33f3:	e8 b8 fe ff ff       	call   32b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>
    33f8:	e9 0d 13 00 00       	jmp    470a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
    33fd:	48 8d 3d 71 1d 01 00 	lea    rdi,[rip+0x11d71]        # 15175 <CSWTCH.1110+0x95>
    3404:	e8 27 fd ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    3409:	90                   	nop

000000000000340a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]>:
    340a:	48 8d 3d 47 1d 01 00 	lea    rdi,[rip+0x11d47]        # 15158 <CSWTCH.1110+0x78>
    3411:	e8 1a fd ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    3416:	48 89 d1             	mov    rcx,rdx
    3419:	48 8d 3d a8 1f 01 00 	lea    rdi,[rip+0x11fa8]        # 153c8 <CSWTCH.1110+0x2e8>
    3420:	48 89 f2             	mov    rdx,rsi
    3423:	31 c0                	xor    eax,eax
    3425:	48 8d 35 62 1d 01 00 	lea    rsi,[rip+0x11d62]        # 1518e <CSWTCH.1110+0xae>
    342c:	e8 af fe ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    3431:	90                   	nop

0000000000003432 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0] [clone .cold]>:
    3432:	e8 29 fe ff ff       	call   3260 <std::__throw_bad_cast()@plt>
  // Helper for basic_string and basic_string_view members.
  constexpr size_t
  __sv_check(size_t __size, size_t __pos, const char* __s)
  {
    if (__pos > __size)
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
    3437:	48 89 e9             	mov    rcx,rbp
    343a:	4c 89 e2             	mov    rdx,r12
    343d:	48 8d 35 5f 1d 01 00 	lea    rsi,[rip+0x11d5f]        # 151a3 <CSWTCH.1110+0xc3>
    3444:	31 c0                	xor    eax,eax
    3446:	48 8d 3d b3 1f 01 00 	lea    rdi,[rip+0x11fb3]        # 15400 <CSWTCH.1110+0x320>
    344d:	e8 8e fe ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    3452:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    3459:	00 00 00 
    345c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000003460 <main>:
};




int main(int argc, char* argv[]) {
    3460:	41 57                	push   r15
    3462:	41 56                	push   r14
    3464:	41 55                	push   r13
    3466:	41 54                	push   r12
	  );

	using _Wrapper = _Call_wrapper<_Callable, _Args...>;
	// Create a call wrapper with DECAY_COPY(__f) as its target object
	// and DECAY_COPY(__args)... as its bound argument entities.
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3468:	4c 8d 25 81 16 00 00 	lea    r12,[rip+0x1681]        # 4af0 <std::thread::_M_thread_deps_never_run()>
    346f:	55                   	push   rbp
    3470:	53                   	push   rbx
    3471:	48 81 ec d8 01 00 00 	sub    rsp,0x1d8
    3478:	48 8d 54 24 68       	lea    rdx,[rsp+0x68]
    347d:	48 8d 44 24 6c       	lea    rax,[rsp+0x6c]
	{	
		// Not using atomics at all
		// x and y start out ==.  t1 sets x before y, therefore expect x >= y always
		constexpr std::uint32_t niter {std::numeric_limits<std::uint32_t>::max()};
    3482:	c7 44 24 40 ff ff ff 	mov    DWORD PTR [rsp+0x40],0xffffffff
    3489:	ff 
		std::uint32_t x {0};
    348a:	66 48 0f 6e f0       	movq   xmm6,rax
    348f:	66 48 0f 6e d2       	movq   xmm2,rdx
    3494:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    3499:	c7 44 24 44 00 00 00 	mov    DWORD PTR [rsp+0x44],0x0
    34a0:	00 
		std::uint32_t y {0};
    34a1:	48 8d 54 24 5c       	lea    rdx,[rsp+0x5c]
    34a6:	66 48 0f 6e f8       	movq   xmm7,rax
    34ab:	48 8d 44 24 54       	lea    rax,[rsp+0x54]
    34b0:	c7 44 24 48 00 00 00 	mov    DWORD PTR [rsp+0x48],0x0
    34b7:	00 
		non_atomic_write naw {x, y, niter};
		non_atomic_read nar {x, y, niter, 0};
    34b8:	66 48 0f 6e da       	movq   xmm3,rdx
    34bd:	48 8d 54 24 50       	lea    rdx,[rsp+0x50]
    34c2:	66 0f 6c d6          	punpcklqdq xmm2,xmm6
    34c6:	c7 84 24 04 01 00 00 	mov    DWORD PTR [rsp+0x104],0x0
    34cd:	00 00 00 00 
		
		std::chrono::time_point<std::chrono::steady_clock> start {std::chrono::steady_clock::now()};
    34d1:	66 48 0f 6e f0       	movq   xmm6,rax
    34d6:	66 48 0f 6e e2       	movq   xmm4,rdx
    34db:	48 8d 44 24 48       	lea    rax,[rsp+0x48]
    34e0:	0f 29 54 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm2
    34e5:	48 8d 54 24 44       	lea    rdx,[rsp+0x44]
    34ea:	66 0f 6c df          	punpcklqdq xmm3,xmm7
    34ee:	66 48 0f 6e f8       	movq   xmm7,rax
    34f3:	66 48 0f 6e ca       	movq   xmm1,rdx
    34f8:	66 0f 6c e6          	punpcklqdq xmm4,xmm6
    34fc:	0f 29 5c 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm3
    3501:	48 8d 9c 24 b0 01 00 	lea    rbx,[rsp+0x1b0]
    3508:	00 
    3509:	66 0f 6c cf          	punpcklqdq xmm1,xmm7
    350d:	0f 29 64 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm4
    3512:	4c 8d 6c 24 70       	lea    r13,[rsp+0x70]
    3517:	0f 29 0c 24          	movaps XMMWORD PTR [rsp],xmm1
    351b:	e8 60 fd ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
    3520:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    3525:	48 c7 44 24 70 00 00 	mov    QWORD PTR [rsp+0x70],0x0
    352c:	00 00 
    352e:	48 89 c5             	mov    rbp,rax
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3531:	e8 aa fc ff ff       	call   31e0 <operator new(unsigned long)@plt>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    3536:	b9 ff ff ff ff       	mov    ecx,0xffffffff
    353b:	4c 89 ef             	mov    rdi,r13
    353e:	4c 89 e2             	mov    rdx,r12
      {
	_Callable		_M_func;

	template<typename... _Args>
	  _State_impl(_Args&&... __args)
	  : _M_func(std::forward<_Args>(__args)...)
    3541:	48 8d 35 a0 83 01 00 	lea    rsi,[rip+0x183a0]        # 1b8e8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >+0x10>
    3548:	66 0f 6f 0c 24       	movdqa xmm1,XMMWORD PTR [rsp]
    354d:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
    3551:	48 89 30             	mov    QWORD PTR [rax],rsi
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3554:	48 89 de             	mov    rsi,rbx
    3557:	0f 11 48 08          	movups XMMWORD PTR [rax+0x8],xmm1
    355b:	48 89 8c 24 e0 00 00 	mov    QWORD PTR [rsp+0xe0],rcx
    3562:	00 
		     "unique_ptr's deleter type must be a function object type"
		     " or an lvalue reference type" );

      __uniq_ptr_impl() = default;
      _GLIBCXX23_CONSTEXPR
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    3563:	48 89 84 24 b0 01 00 	mov    QWORD PTR [rsp+0x1b0],rax
    356a:	00 
    356b:	0f 29 8c 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm1
    3572:	00 
    3573:	e8 58 fc ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
    3578:	48 8b bc 24 b0 01 00 	mov    rdi,QWORD PTR [rsp+0x1b0]
    357f:	00 
    3580:	48 85 ff             	test   rdi,rdi
    3583:	74 06                	je     358b <main+0x12b>
	delete __ptr;
    3585:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    3588:	ff 50 08             	call   QWORD PTR [rax+0x8]
    358b:	bf 20 00 00 00       	mov    edi,0x20
    3590:	4c 8d 74 24 78       	lea    r14,[rsp+0x78]
      id() noexcept : _M_thread() { }
    3595:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
    359c:	00 00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    359e:	e8 3d fc ff ff       	call   31e0 <operator new(unsigned long)@plt>
	  : _M_func(std::forward<_Args>(__args)...)
    35a3:	48 8d 35 66 83 01 00 	lea    rsi,[rip+0x18366]        # 1b910 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >+0x10>
    35aa:	66 0f 6f 2c 24       	movdqa xmm5,XMMWORD PTR [rsp]
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    35af:	4c 89 f7             	mov    rdi,r14
    35b2:	c7 84 24 00 01 00 00 	mov    DWORD PTR [rsp+0x100],0xffffffff
    35b9:	ff ff ff ff 
    35bd:	48 8b 94 24 00 01 00 	mov    rdx,QWORD PTR [rsp+0x100]
    35c4:	00 
	  : _M_func(std::forward<_Args>(__args)...)
    35c5:	48 89 30             	mov    QWORD PTR [rax],rsi
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    35c8:	48 89 de             	mov    rsi,rbx
    35cb:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    35cf:	4c 89 e2             	mov    rdx,r12
    35d2:	0f 11 68 08          	movups XMMWORD PTR [rax+0x8],xmm5
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    35d6:	48 89 84 24 b0 01 00 	mov    QWORD PTR [rsp+0x1b0],rax
    35dd:	00 
    35de:	0f 29 ac 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm5
    35e5:	00 
    35e6:	e8 e5 fb ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    35eb:	48 8b bc 24 b0 01 00 	mov    rdi,QWORD PTR [rsp+0x1b0]
    35f2:	00 
    35f3:	48 85 ff             	test   rdi,rdi
    35f6:	74 06                	je     35fe <main+0x19e>
	delete __ptr;
    35f8:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    35fb:	ff 50 08             	call   QWORD PTR [rax+0x8]
		std::thread t1(naw);
		std::thread t2(nar);
		t1.join();
    35fe:	4c 89 ef             	mov    rdi,r13
		t2.join();
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
		
		std::chrono::duration<double> time_seconds {end-start};
		std::format_to(std::ostream_iterator<char>(std::cout),"No atomics:  After {} iterations, count_mismatches == {}\n", niter, nar.count_mismatch);
    3601:	4c 8d ac 24 90 01 00 	lea    r13,[rsp+0x190]
    3608:	00 
		t1.join();
    3609:	e8 32 fd ff ff       	call   3340 <std::thread::join()@plt>
		t2.join();
    360e:	4c 89 f7             	mov    rdi,r14
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    3611:	4c 8d 35 23 1b 01 00 	lea    r14,[rip+0x11b23]        # 1513b <CSWTCH.1110+0x5b>
		t2.join();
    3618:	e8 23 fd ff ff       	call   3340 <std::thread::join()@plt>
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
    361d:	e8 5e fc ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
		std::format_to(std::ostream_iterator<char>(std::cout),"No atomics:  After {} iterations, count_mismatches == {}\n", niter, nar.count_mismatch);
    3622:	4c 8d 44 24 40       	lea    r8,[rsp+0x40]
    3627:	4c 89 ee             	mov    rsi,r13
    362a:	48 89 df             	mov    rdi,rbx
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    362d:	48 29 e8             	sub    rax,rbp
    3630:	ba 39 00 00 00       	mov    edx,0x39
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3635:	66 0f ef c0          	pxor   xmm0,xmm0
      const _CharT*	_M_string;

    public:
      /// Construct from an ostream.
      ostream_iterator(ostream_type& __s) _GLIBCXX_NOEXCEPT
      : _M_stream(std::__addressof(__s)), _M_string(0) {}
    3639:	48 c7 84 24 98 01 00 	mov    QWORD PTR [rsp+0x198],0x0
    3640:	00 00 00 00 00 
    3645:	48 8d 2d f4 8b 01 00 	lea    rbp,[rip+0x18bf4]        # 1c240 <std::cout@GLIBCXX_3.4>
    364c:	4c 8d 8c 24 04 01 00 	lea    r9,[rsp+0x104]
    3653:	00 
    3654:	48 8d 0d 95 1c 01 00 	lea    rcx,[rip+0x11c95]        # 152f0 <CSWTCH.1110+0x210>
    365b:	48 89 ac 24 90 01 00 	mov    QWORD PTR [rsp+0x190],rbp
    3662:	00 
    3663:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    3668:	f2 0f 5e 05 80 52 01 	divsd  xmm0,QWORD PTR [rip+0x15280]        # 188f0 <std::__unicode::__v15_1_0::__width_edges+0x470>
    366f:	00 
	  : __r(duration_cast<duration>(__d).count()) { }
    3670:	f2 0f 11 84 24 80 00 	movsd  QWORD PTR [rsp+0x80],xmm0
    3677:	00 00 
    3679:	e8 22 36 00 00       	call   6ca0 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    367e:	ba 1c 00 00 00       	mov    edx,0x1c
    3683:	4c 89 f1             	mov    rcx,r14
    3686:	4c 89 ee             	mov    rsi,r13
    3689:	4c 8d 84 24 80 00 00 	lea    r8,[rsp+0x80]
    3690:	00 
    3691:	48 89 df             	mov    rdi,rbx
    3694:	48 89 ac 24 90 01 00 	mov    QWORD PTR [rsp+0x190],rbp
    369b:	00 
    369c:	48 c7 84 24 98 01 00 	mov    QWORD PTR [rsp+0x198],0x0
    36a3:	00 00 00 00 00 
    36a8:	e8 93 35 00 00       	call   6c40 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>
      if (joinable())
    36ad:	48 83 7c 24 78 00    	cmp    QWORD PTR [rsp+0x78],0x0
    36b3:	0f 85 20 fd ff ff    	jne    33d9 <main.cold>
    36b9:	48 83 7c 24 70 00    	cmp    QWORD PTR [rsp+0x70],0x0
    36bf:	0f 85 14 fd ff ff    	jne    33d9 <main.cold>
	}

	{
		// x and y start out ==.  t1 sets x before y, therefore expect x >= y always
		// All atomic operations use memory_order_relaxed
		constexpr std::uint32_t niter {std::numeric_limits<std::uint32_t>::max()};
    36c5:	c7 44 24 4c ff ff ff 	mov    DWORD PTR [rsp+0x4c],0xffffffff
    36cc:	ff 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    36cd:	4c 8d bc 24 88 00 00 	lea    r15,[rsp+0x88]
    36d4:	00 
		std::atomic<std::uint32_t> x {0};
    36d5:	c7 44 24 50 00 00 00 	mov    DWORD PTR [rsp+0x50],0x0
    36dc:	00 
		std::atomic<std::uint32_t> y {0};
    36dd:	c7 44 24 54 00 00 00 	mov    DWORD PTR [rsp+0x54],0x0
    36e4:	00 
		relaxed_relaxed_write rrw {x, y, niter};
		relaxed_relaxed_read rrr {x, y, niter, 0};
    36e5:	c7 84 24 44 01 00 00 	mov    DWORD PTR [rsp+0x144],0x0
    36ec:	00 00 00 00 
		
		std::chrono::time_point<std::chrono::steady_clock> start {std::chrono::steady_clock::now()};
    36f0:	e8 8b fb ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
    36f5:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    36fa:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
    3701:	00 00 00 00 00 
    3706:	48 89 04 24          	mov    QWORD PTR [rsp],rax
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    370a:	e8 d1 fa ff ff       	call   31e0 <operator new(unsigned long)@plt>
    370f:	be ff ff ff ff       	mov    esi,0xffffffff
    3714:	4c 89 ff             	mov    rdi,r15
    3717:	4c 89 e2             	mov    rdx,r12
	  : _M_func(std::forward<_Args>(__args)...)
    371a:	48 8d 0d 17 82 01 00 	lea    rcx,[rip+0x18217]        # 1b938 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >+0x10>
    3721:	66 0f 6f 74 24 20    	movdqa xmm6,XMMWORD PTR [rsp+0x20]
    3727:	48 89 70 18          	mov    QWORD PTR [rax+0x18],rsi
    372b:	48 89 08             	mov    QWORD PTR [rax],rcx
    372e:	48 89 b4 24 20 01 00 	mov    QWORD PTR [rsp+0x120],rsi
    3735:	00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3736:	48 89 de             	mov    rsi,rbx
    3739:	0f 11 70 08          	movups XMMWORD PTR [rax+0x8],xmm6
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    373d:	48 89 84 24 b0 01 00 	mov    QWORD PTR [rsp+0x1b0],rax
    3744:	00 
    3745:	0f 29 b4 24 10 01 00 	movaps XMMWORD PTR [rsp+0x110],xmm6
    374c:	00 
    374d:	e8 7e fa ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    3752:	48 8b bc 24 b0 01 00 	mov    rdi,QWORD PTR [rsp+0x1b0]
    3759:	00 
    375a:	48 85 ff             	test   rdi,rdi
    375d:	74 06                	je     3765 <main+0x305>
	delete __ptr;
    375f:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    3762:	ff 50 08             	call   QWORD PTR [rax+0x8]
    3765:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    376a:	48 c7 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],0x0
    3771:	00 00 00 00 00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3776:	e8 65 fa ff ff       	call   31e0 <operator new(unsigned long)@plt>
    377b:	66 0f 6f 7c 24 20    	movdqa xmm7,XMMWORD PTR [rsp+0x20]
    3781:	c7 84 24 40 01 00 00 	mov    DWORD PTR [rsp+0x140],0xffffffff
    3788:	ff ff ff ff 
	  : _M_func(std::forward<_Args>(__args)...)
    378c:	48 8d 35 cd 81 01 00 	lea    rsi,[rip+0x181cd]        # 1b960 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >+0x10>
    3793:	48 8b 94 24 40 01 00 	mov    rdx,QWORD PTR [rsp+0x140]
    379a:	00 
    379b:	48 89 30             	mov    QWORD PTR [rax],rsi
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    379e:	48 89 de             	mov    rsi,rbx
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    37a1:	48 89 84 24 b0 01 00 	mov    QWORD PTR [rsp+0x1b0],rax
    37a8:	00 
    37a9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    37ad:	4c 89 e2             	mov    rdx,r12
    37b0:	0f 11 78 08          	movups XMMWORD PTR [rax+0x8],xmm7
    37b4:	48 8d 84 24 90 00 00 	lea    rax,[rsp+0x90]
    37bb:	00 
    37bc:	48 89 c7             	mov    rdi,rax
    37bf:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    37c4:	0f 29 bc 24 30 01 00 	movaps XMMWORD PTR [rsp+0x130],xmm7
    37cb:	00 
    37cc:	e8 ff f9 ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    37d1:	48 8b bc 24 b0 01 00 	mov    rdi,QWORD PTR [rsp+0x1b0]
    37d8:	00 
    37d9:	48 85 ff             	test   rdi,rdi
    37dc:	74 06                	je     37e4 <main+0x384>
	delete __ptr;
    37de:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    37e1:	ff 50 08             	call   QWORD PTR [rax+0x8]
		std::thread t1(rrw);
		std::thread t2(rrr);
		t1.join();
    37e4:	4c 89 ff             	mov    rdi,r15
    37e7:	e8 54 fb ff ff       	call   3340 <std::thread::join()@plt>
		t2.join();
    37ec:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    37f1:	e8 4a fb ff ff       	call   3340 <std::thread::join()@plt>
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
    37f6:	e8 85 fa ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    37fb:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
		
		std::chrono::duration<double> time_seconds {end-start};
		std::format_to(std::ostream_iterator<char>(std::cout),"memory_order_relaxed:  After {} iterations, count_mismatches == {}\n", niter, rrr.count_mismatch);
    37ff:	4c 89 ee             	mov    rsi,r13
    3802:	48 89 df             	mov    rdi,rbx
    3805:	4c 8d 44 24 4c       	lea    r8,[rsp+0x4c]
    380a:	4c 8d 8c 24 44 01 00 	lea    r9,[rsp+0x144]
    3811:	00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3812:	66 0f ef c0          	pxor   xmm0,xmm0
    3816:	ba 43 00 00 00       	mov    edx,0x43
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    381b:	48 29 c8             	sub    rax,rcx
    381e:	48 8d 0d 0b 1b 01 00 	lea    rcx,[rip+0x11b0b]        # 15330 <CSWTCH.1110+0x250>
    3825:	48 89 ac 24 90 01 00 	mov    QWORD PTR [rsp+0x190],rbp
    382c:	00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    382d:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    3832:	48 c7 84 24 98 01 00 	mov    QWORD PTR [rsp+0x198],0x0
    3839:	00 00 00 00 00 
    383e:	f2 0f 5e 05 aa 50 01 	divsd  xmm0,QWORD PTR [rip+0x150aa]        # 188f0 <std::__unicode::__v15_1_0::__width_edges+0x470>
    3845:	00 
	  : __r(duration_cast<duration>(__d).count()) { }
    3846:	f2 0f 11 84 24 98 00 	movsd  QWORD PTR [rsp+0x98],xmm0
    384d:	00 00 
    384f:	e8 4c 34 00 00       	call   6ca0 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    3854:	ba 1c 00 00 00       	mov    edx,0x1c
    3859:	4c 89 f1             	mov    rcx,r14
    385c:	4c 89 ee             	mov    rsi,r13
    385f:	4c 8d 84 24 98 00 00 	lea    r8,[rsp+0x98]
    3866:	00 
    3867:	48 89 df             	mov    rdi,rbx
    386a:	48 89 ac 24 90 01 00 	mov    QWORD PTR [rsp+0x190],rbp
    3871:	00 
    3872:	48 c7 84 24 98 01 00 	mov    QWORD PTR [rsp+0x198],0x0
    3879:	00 00 00 00 00 
    387e:	e8 bd 33 00 00       	call   6c40 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>
      if (joinable())
    3883:	48 83 bc 24 90 00 00 	cmp    QWORD PTR [rsp+0x90],0x0
    388a:	00 00 
    388c:	0f 85 47 fb ff ff    	jne    33d9 <main.cold>
    3892:	48 83 bc 24 88 00 00 	cmp    QWORD PTR [rsp+0x88],0x0
    3899:	00 00 
    389b:	0f 85 38 fb ff ff    	jne    33d9 <main.cold>
	}

	{
		// x and y start out ==.  t1 sets x before y, therefore expect x >= y always
		// Uses memory_order_release and memory_order_acquire for one of the writes and one of the reads, respectively
		constexpr std::uint32_t niter {std::numeric_limits<std::uint32_t>::max()};
    38a1:	c7 44 24 58 ff ff ff 	mov    DWORD PTR [rsp+0x58],0xffffffff
    38a8:	ff 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    38a9:	4c 8d bc 24 a0 00 00 	lea    r15,[rsp+0xa0]
    38b0:	00 
		std::atomic<std::uint32_t> x {0};
    38b1:	c7 44 24 5c 00 00 00 	mov    DWORD PTR [rsp+0x5c],0x0
    38b8:	00 
		std::atomic<std::uint32_t> y {0};
    38b9:	c7 44 24 60 00 00 00 	mov    DWORD PTR [rsp+0x60],0x0
    38c0:	00 
		relaxed_release_write rxrlw {x, y, niter};
		acquire_relaxed_read arr {x, y, niter, 0};
    38c1:	c7 84 24 84 01 00 00 	mov    DWORD PTR [rsp+0x184],0x0
    38c8:	00 00 00 00 
		
		std::chrono::time_point<std::chrono::steady_clock> start {std::chrono::steady_clock::now()};
    38cc:	e8 af f9 ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
    38d1:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    38d6:	48 c7 84 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],0x0
    38dd:	00 00 00 00 00 
    38e2:	48 89 04 24          	mov    QWORD PTR [rsp],rax
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    38e6:	e8 f5 f8 ff ff       	call   31e0 <operator new(unsigned long)@plt>
    38eb:	b9 ff ff ff ff       	mov    ecx,0xffffffff
    38f0:	4c 89 ff             	mov    rdi,r15
    38f3:	4c 89 e2             	mov    rdx,r12
	  : _M_func(std::forward<_Args>(__args)...)
    38f6:	48 8d 35 8b 80 01 00 	lea    rsi,[rip+0x1808b]        # 1b988 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >+0x10>
    38fd:	66 0f 6f 54 24 30    	movdqa xmm2,XMMWORD PTR [rsp+0x30]
    3903:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
    3907:	48 89 30             	mov    QWORD PTR [rax],rsi
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    390a:	48 89 de             	mov    rsi,rbx
    390d:	0f 11 50 08          	movups XMMWORD PTR [rax+0x8],xmm2
    3911:	48 89 8c 24 60 01 00 	mov    QWORD PTR [rsp+0x160],rcx
    3918:	00 
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    3919:	48 89 84 24 b0 01 00 	mov    QWORD PTR [rsp+0x1b0],rax
    3920:	00 
    3921:	0f 29 94 24 50 01 00 	movaps XMMWORD PTR [rsp+0x150],xmm2
    3928:	00 
    3929:	e8 a2 f8 ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    392e:	48 8b bc 24 b0 01 00 	mov    rdi,QWORD PTR [rsp+0x1b0]
    3935:	00 
    3936:	48 85 ff             	test   rdi,rdi
    3939:	74 06                	je     3941 <main+0x4e1>
	delete __ptr;
    393b:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    393e:	ff 50 08             	call   QWORD PTR [rax+0x8]
    3941:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    3946:	48 c7 84 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],0x0
    394d:	00 00 00 00 00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3952:	e8 89 f8 ff ff       	call   31e0 <operator new(unsigned long)@plt>
    3957:	66 0f 6f 5c 24 30    	movdqa xmm3,XMMWORD PTR [rsp+0x30]
	  : _M_func(std::forward<_Args>(__args)...)
    395d:	48 8d 0d 4c 80 01 00 	lea    rcx,[rip+0x1804c]        # 1b9b0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >+0x10>
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3964:	48 89 de             	mov    rsi,rbx
    3967:	c7 84 24 80 01 00 00 	mov    DWORD PTR [rsp+0x180],0xffffffff
    396e:	ff ff ff ff 
    3972:	48 8b 94 24 80 01 00 	mov    rdx,QWORD PTR [rsp+0x180]
    3979:	00 
	  : _M_func(std::forward<_Args>(__args)...)
    397a:	48 89 08             	mov    QWORD PTR [rax],rcx
    397d:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3981:	4c 89 e2             	mov    rdx,r12
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    3984:	48 89 84 24 b0 01 00 	mov    QWORD PTR [rsp+0x1b0],rax
    398b:	00 
    398c:	0f 11 58 08          	movups XMMWORD PTR [rax+0x8],xmm3
    3990:	48 8d 84 24 a8 00 00 	lea    rax,[rsp+0xa8]
    3997:	00 
    3998:	48 89 c7             	mov    rdi,rax
    399b:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    39a0:	0f 29 9c 24 70 01 00 	movaps XMMWORD PTR [rsp+0x170],xmm3
    39a7:	00 
    39a8:	e8 23 f8 ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    39ad:	48 8b bc 24 b0 01 00 	mov    rdi,QWORD PTR [rsp+0x1b0]
    39b4:	00 
    39b5:	48 85 ff             	test   rdi,rdi
    39b8:	74 06                	je     39c0 <main+0x560>
	delete __ptr;
    39ba:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    39bd:	ff 50 08             	call   QWORD PTR [rax+0x8]
		std::thread t1(rxrlw);
		std::thread t2(arr);
		t1.join();
    39c0:	4c 89 ff             	mov    rdi,r15
		t2.join();
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
		
		std::chrono::duration<double> time_seconds {end-start};
		std::format_to(std::ostream_iterator<char>(std::cout),"Mixed _release and _acquire:  After {} iterations, count_mismatches == {}\n", niter, arr.count_mismatch);
    39c3:	4c 8d bc 24 70 01 00 	lea    r15,[rsp+0x170]
    39ca:	00 
		t1.join();
    39cb:	e8 70 f9 ff ff       	call   3340 <std::thread::join()@plt>
		t2.join();
    39d0:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    39d5:	e8 66 f9 ff ff       	call   3340 <std::thread::join()@plt>
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
    39da:	e8 a1 f8 ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    39df:	48 8b 34 24          	mov    rsi,QWORD PTR [rsp]
		std::format_to(std::ostream_iterator<char>(std::cout),"Mixed _release and _acquire:  After {} iterations, count_mismatches == {}\n", niter, arr.count_mismatch);
    39e3:	48 89 df             	mov    rdi,rbx
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    39e6:	66 0f ef c0          	pxor   xmm0,xmm0
    39ea:	4c 8d 8c 24 84 01 00 	lea    r9,[rsp+0x184]
    39f1:	00 
    39f2:	4c 8d 44 24 58       	lea    r8,[rsp+0x58]
    39f7:	ba 4a 00 00 00       	mov    edx,0x4a
    39fc:	48 89 ac 24 90 01 00 	mov    QWORD PTR [rsp+0x190],rbp
    3a03:	00 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    3a04:	48 29 f0             	sub    rax,rsi
    3a07:	4c 89 ee             	mov    rsi,r13
    3a0a:	48 8d 0d 67 19 01 00 	lea    rcx,[rip+0x11967]        # 15378 <CSWTCH.1110+0x298>
    3a11:	48 c7 84 24 98 01 00 	mov    QWORD PTR [rsp+0x198],0x0
    3a18:	00 00 00 00 00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3a1d:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    3a22:	f2 0f 5e 05 c6 4e 01 	divsd  xmm0,QWORD PTR [rip+0x14ec6]        # 188f0 <std::__unicode::__v15_1_0::__width_edges+0x470>
    3a29:	00 
	  : __r(duration_cast<duration>(__d).count()) { }
    3a2a:	f2 0f 11 84 24 b0 00 	movsd  QWORD PTR [rsp+0xb0],xmm0
    3a31:	00 00 
    3a33:	e8 68 32 00 00       	call   6ca0 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    3a38:	ba 1c 00 00 00       	mov    edx,0x1c
    3a3d:	4c 89 f1             	mov    rcx,r14
    3a40:	4c 89 ee             	mov    rsi,r13
    3a43:	4c 8d 84 24 b0 00 00 	lea    r8,[rsp+0xb0]
    3a4a:	00 
    3a4b:	48 89 df             	mov    rdi,rbx
    3a4e:	48 89 ac 24 90 01 00 	mov    QWORD PTR [rsp+0x190],rbp
    3a55:	00 
    3a56:	48 c7 84 24 98 01 00 	mov    QWORD PTR [rsp+0x198],0x0
    3a5d:	00 00 00 00 00 
    3a62:	e8 d9 31 00 00       	call   6c40 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>
      if (joinable())
    3a67:	48 83 bc 24 a8 00 00 	cmp    QWORD PTR [rsp+0xa8],0x0
    3a6e:	00 00 
    3a70:	0f 85 63 f9 ff ff    	jne    33d9 <main.cold>
    3a76:	48 83 bc 24 a0 00 00 	cmp    QWORD PTR [rsp+0xa0],0x0
    3a7d:	00 00 
    3a7f:	0f 85 54 f9 ff ff    	jne    33d9 <main.cold>
	}

	{
		// x and y start out ==.  t1 sets x before y, therefore expect x >= y always
		// Uses memory_order_release and memory_order_acquire for one of the writes and one of the reads, respectively
		constexpr std::uint32_t niter {std::numeric_limits<std::uint32_t>::max()};
    3a85:	c7 44 24 64 ff ff ff 	mov    DWORD PTR [rsp+0x64],0xffffffff
    3a8c:	ff 
	  : _M_func(std::forward<_Args>(__args)...)
    3a8d:	48 8d 1d 44 7f 01 00 	lea    rbx,[rip+0x17f44]        # 1b9d8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_sequential_write> > >+0x10>
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3a94:	4c 8d ac 24 b8 00 00 	lea    r13,[rsp+0xb8]
    3a9b:	00 
		std::atomic<std::uint32_t> x {0};
    3a9c:	c7 44 24 68 00 00 00 	mov    DWORD PTR [rsp+0x68],0x0
    3aa3:	00 
		std::atomic<std::uint32_t> y {0};
    3aa4:	c7 44 24 6c 00 00 00 	mov    DWORD PTR [rsp+0x6c],0x0
    3aab:	00 
		relaxed_sequential_write rxsqw {x, y, niter};
		sequential_relaxed_read sqrr {x, y, niter, 0};
    3aac:	c7 84 24 c4 01 00 00 	mov    DWORD PTR [rsp+0x1c4],0x0
    3ab3:	00 00 00 00 
		
		std::chrono::time_point<std::chrono::steady_clock> start {std::chrono::steady_clock::now()};
    3ab7:	e8 c4 f7 ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
    3abc:	bf 20 00 00 00       	mov    edi,0x20
      id() noexcept : _M_thread() { }
    3ac1:	48 c7 84 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],0x0
    3ac8:	00 00 00 00 00 
    3acd:	48 89 04 24          	mov    QWORD PTR [rsp],rax
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3ad1:	e8 0a f7 ff ff       	call   31e0 <operator new(unsigned long)@plt>
    3ad6:	4c 89 ef             	mov    rdi,r13
    3ad9:	4c 89 e2             	mov    rdx,r12
    3adc:	4c 89 fe             	mov    rsi,r15
	  : _M_func(std::forward<_Args>(__args)...)
    3adf:	48 89 18             	mov    QWORD PTR [rax],rbx
    3ae2:	bb ff ff ff ff       	mov    ebx,0xffffffff
    3ae7:	66 0f 6f 64 24 10    	movdqa xmm4,XMMWORD PTR [rsp+0x10]
    3aed:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
    3af1:	0f 11 60 08          	movups XMMWORD PTR [rax+0x8],xmm4
    3af5:	48 89 9c 24 a0 01 00 	mov    QWORD PTR [rsp+0x1a0],rbx
    3afc:	00 
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    3afd:	48 89 84 24 70 01 00 	mov    QWORD PTR [rsp+0x170],rax
    3b04:	00 
    3b05:	0f 29 a4 24 90 01 00 	movaps XMMWORD PTR [rsp+0x190],xmm4
    3b0c:	00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3b0d:	e8 be f6 ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    3b12:	48 8b bc 24 70 01 00 	mov    rdi,QWORD PTR [rsp+0x170]
    3b19:	00 
    3b1a:	48 85 ff             	test   rdi,rdi
    3b1d:	74 06                	je     3b25 <main+0x6c5>
	delete __ptr;
    3b1f:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    3b22:	ff 50 08             	call   QWORD PTR [rax+0x8]
    3b25:	bf 20 00 00 00       	mov    edi,0x20
	  : _M_func(std::forward<_Args>(__args)...)
    3b2a:	48 8d 1d cf 7e 01 00 	lea    rbx,[rip+0x17ecf]        # 1ba00 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<sequential_relaxed_read> > >+0x10>
      id() noexcept : _M_thread() { }
    3b31:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x0
    3b38:	00 00 00 00 00 
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3b3d:	e8 9e f6 ff ff       	call   31e0 <operator new(unsigned long)@plt>
    3b42:	66 0f 6f 6c 24 10    	movdqa xmm5,XMMWORD PTR [rsp+0x10]
    3b48:	4c 89 fe             	mov    rsi,r15
    3b4b:	c7 84 24 c0 01 00 00 	mov    DWORD PTR [rsp+0x1c0],0xffffffff
    3b52:	ff ff ff ff 
    3b56:	48 8b 94 24 c0 01 00 	mov    rdx,QWORD PTR [rsp+0x1c0]
    3b5d:	00 
	  : _M_func(std::forward<_Args>(__args)...)
    3b5e:	48 89 18             	mov    QWORD PTR [rax],rbx
	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
    3b61:	48 8d 9c 24 c0 00 00 	lea    rbx,[rsp+0xc0]
    3b68:	00 
    3b69:	48 89 df             	mov    rdi,rbx
    3b6c:	0f 11 68 08          	movups XMMWORD PTR [rax+0x8],xmm5
    3b70:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    3b74:	4c 89 e2             	mov    rdx,r12
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    3b77:	48 89 84 24 70 01 00 	mov    QWORD PTR [rsp+0x170],rax
    3b7e:	00 
    3b7f:	0f 29 ac 24 b0 01 00 	movaps XMMWORD PTR [rsp+0x1b0],xmm5
    3b86:	00 
    3b87:	e8 44 f6 ff ff       	call   31d0 <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@plt>
	if (__ptr != nullptr)
    3b8c:	48 8b bc 24 70 01 00 	mov    rdi,QWORD PTR [rsp+0x170]
    3b93:	00 
    3b94:	48 85 ff             	test   rdi,rdi
    3b97:	74 06                	je     3b9f <main+0x73f>
	delete __ptr;
    3b99:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    3b9c:	ff 50 08             	call   QWORD PTR [rax+0x8]
		std::thread t1(rxsqw);
		std::thread t2(sqrr);
		t1.join();
    3b9f:	4c 89 ef             	mov    rdi,r13
    3ba2:	e8 99 f7 ff ff       	call   3340 <std::thread::join()@plt>
		t2.join();
    3ba7:	48 89 df             	mov    rdi,rbx
    3baa:	e8 91 f7 ff ff       	call   3340 <std::thread::join()@plt>
		std::chrono::time_point<std::chrono::steady_clock> end {std::chrono::steady_clock::now()};
    3baf:	e8 cc f6 ff ff       	call   3280 <std::chrono::_V2::steady_clock::now()@plt>
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    3bb4:	48 8b 1c 24          	mov    rbx,QWORD PTR [rsp]
		
		std::chrono::duration<double> time_seconds {end-start};
		std::format_to(std::ostream_iterator<char>(std::cout),"Mixed _release and _acquire:  After {} iterations, count_mismatches == {}\n", niter, sqrr.count_mismatch);
    3bb8:	4c 89 ff             	mov    rdi,r15
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3bbb:	66 0f ef c0          	pxor   xmm0,xmm0
    3bbf:	4c 8d 8c 24 c4 01 00 	lea    r9,[rsp+0x1c4]
    3bc6:	00 
    3bc7:	4c 8d 44 24 64       	lea    r8,[rsp+0x64]
    3bcc:	ba 4a 00 00 00       	mov    edx,0x4a
    3bd1:	48 89 ac 24 50 01 00 	mov    QWORD PTR [rsp+0x150],rbp
    3bd8:	00 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    3bd9:	48 29 d8             	sub    rax,rbx
    3bdc:	48 8d 9c 24 50 01 00 	lea    rbx,[rsp+0x150]
    3be3:	00 
    3be4:	48 8d 0d 8d 17 01 00 	lea    rcx,[rip+0x1178d]        # 15378 <CSWTCH.1110+0x298>
    3beb:	48 c7 84 24 58 01 00 	mov    QWORD PTR [rsp+0x158],0x0
    3bf2:	00 00 00 00 00 
    3bf7:	48 89 de             	mov    rsi,rbx
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3bfa:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    3bff:	f2 0f 5e 05 e9 4c 01 	divsd  xmm0,QWORD PTR [rip+0x14ce9]        # 188f0 <std::__unicode::__v15_1_0::__width_edges+0x470>
    3c06:	00 
	  : __r(duration_cast<duration>(__d).count()) { }
    3c07:	f2 0f 11 84 24 c8 00 	movsd  QWORD PTR [rsp+0xc8],xmm0
    3c0e:	00 00 
    3c10:	e8 8b 30 00 00       	call   6ca0 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>
		std::format_to(std::ostream_iterator<char>(std::cout),"\tElapsed time == {} seconds\n", time_seconds);
    3c15:	ba 1c 00 00 00       	mov    edx,0x1c
    3c1a:	4c 89 f1             	mov    rcx,r14
    3c1d:	48 89 de             	mov    rsi,rbx
    3c20:	4c 8d 84 24 c8 00 00 	lea    r8,[rsp+0xc8]
    3c27:	00 
    3c28:	4c 89 ff             	mov    rdi,r15
    3c2b:	48 89 ac 24 50 01 00 	mov    QWORD PTR [rsp+0x150],rbp
    3c32:	00 
    3c33:	48 c7 84 24 58 01 00 	mov    QWORD PTR [rsp+0x158],0x0
    3c3a:	00 00 00 00 00 
    3c3f:	e8 fc 2f 00 00       	call   6c40 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>
      if (joinable())
    3c44:	48 83 bc 24 c0 00 00 	cmp    QWORD PTR [rsp+0xc0],0x0
    3c4b:	00 00 
    3c4d:	0f 85 86 f7 ff ff    	jne    33d9 <main.cold>
    3c53:	48 83 bc 24 b8 00 00 	cmp    QWORD PTR [rsp+0xb8],0x0
    3c5a:	00 00 
    3c5c:	0f 85 77 f7 ff ff    	jne    33d9 <main.cold>
	}



	return 0;
}
    3c62:	48 81 c4 d8 01 00 00 	add    rsp,0x1d8
    3c69:	31 c0                	xor    eax,eax
    3c6b:	5b                   	pop    rbx
    3c6c:	5d                   	pop    rbp
    3c6d:	41 5c                	pop    r12
    3c6f:	41 5d                	pop    r13
    3c71:	41 5e                	pop    r14
    3c73:	41 5f                	pop    r15
    3c75:	c3                   	ret
    3c76:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    3c7d:	00 00 00 

0000000000003c80 <_start>:
    3c80:	31 ed                	xor    ebp,ebp
    3c82:	49 89 d1             	mov    r9,rdx
    3c85:	5e                   	pop    rsi
    3c86:	48 89 e2             	mov    rdx,rsp
    3c89:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    3c8d:	50                   	push   rax
    3c8e:	54                   	push   rsp
    3c8f:	45 31 c0             	xor    r8d,r8d
    3c92:	31 c9                	xor    ecx,ecx
    3c94:	48 8d 3d c5 f7 ff ff 	lea    rdi,[rip+0xfffffffffffff7c5]        # 3460 <main>
    3c9b:	ff 15 27 83 01 00    	call   QWORD PTR [rip+0x18327]        # 1bfc8 <__libc_start_main@GLIBC_2.34>
    3ca1:	f4                   	hlt
    3ca2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    3ca9:	00 00 00 
    3cac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000003cb0 <deregister_tm_clones>:
    3cb0:	48 8d 3d 01 85 01 00 	lea    rdi,[rip+0x18501]        # 1c1b8 <__TMC_END__>
    3cb7:	48 8d 05 fa 84 01 00 	lea    rax,[rip+0x184fa]        # 1c1b8 <__TMC_END__>
    3cbe:	48 39 f8             	cmp    rax,rdi
    3cc1:	74 15                	je     3cd8 <deregister_tm_clones+0x28>
    3cc3:	48 8b 05 06 83 01 00 	mov    rax,QWORD PTR [rip+0x18306]        # 1bfd0 <_ITM_deregisterTMCloneTable@Base>
    3cca:	48 85 c0             	test   rax,rax
    3ccd:	74 09                	je     3cd8 <deregister_tm_clones+0x28>
    3ccf:	ff e0                	jmp    rax
    3cd1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    3cd8:	c3                   	ret
    3cd9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000003ce0 <register_tm_clones>:
    3ce0:	48 8d 3d d1 84 01 00 	lea    rdi,[rip+0x184d1]        # 1c1b8 <__TMC_END__>
    3ce7:	48 8d 35 ca 84 01 00 	lea    rsi,[rip+0x184ca]        # 1c1b8 <__TMC_END__>
    3cee:	48 29 fe             	sub    rsi,rdi
    3cf1:	48 89 f0             	mov    rax,rsi
    3cf4:	48 c1 ee 3f          	shr    rsi,0x3f
    3cf8:	48 c1 f8 03          	sar    rax,0x3
    3cfc:	48 01 c6             	add    rsi,rax
    3cff:	48 d1 fe             	sar    rsi,1
    3d02:	74 14                	je     3d18 <register_tm_clones+0x38>
    3d04:	48 8b 05 d5 82 01 00 	mov    rax,QWORD PTR [rip+0x182d5]        # 1bfe0 <_ITM_registerTMCloneTable@Base>
    3d0b:	48 85 c0             	test   rax,rax
    3d0e:	74 08                	je     3d18 <register_tm_clones+0x38>
    3d10:	ff e0                	jmp    rax
    3d12:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    3d18:	c3                   	ret
    3d19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000003d20 <__do_global_dtors_aux>:
    3d20:	f3 0f 1e fa          	endbr64
    3d24:	80 3d 2d 86 01 00 00 	cmp    BYTE PTR [rip+0x1862d],0x0        # 1c358 <completed.0>
    3d2b:	75 2b                	jne    3d58 <__do_global_dtors_aux+0x38>
    3d2d:	55                   	push   rbp
    3d2e:	48 83 3d 8a 82 01 00 	cmp    QWORD PTR [rip+0x1828a],0x0        # 1bfc0 <__cxa_finalize@GLIBC_2.2.5>
    3d35:	00 
    3d36:	48 89 e5             	mov    rbp,rsp
    3d39:	74 0c                	je     3d47 <__do_global_dtors_aux+0x27>
    3d3b:	48 8b 3d 6e 84 01 00 	mov    rdi,QWORD PTR [rip+0x1846e]        # 1c1b0 <__dso_handle>
    3d42:	e8 39 f6 ff ff       	call   3380 <__cxa_finalize@plt>
    3d47:	e8 64 ff ff ff       	call   3cb0 <deregister_tm_clones>
    3d4c:	c6 05 05 86 01 00 01 	mov    BYTE PTR [rip+0x18605],0x1        # 1c358 <completed.0>
    3d53:	5d                   	pop    rbp
    3d54:	c3                   	ret
    3d55:	0f 1f 00             	nop    DWORD PTR [rax]
    3d58:	c3                   	ret
    3d59:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000003d60 <frame_dummy>:
    3d60:	f3 0f 1e fa          	endbr64
    3d64:	e9 77 ff ff ff       	jmp    3ce0 <register_tm_clones>
    3d69:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000003d70 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>:
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    3d70:	55                   	push   rbp
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
    3d71:	48 c7 c5 ff ff ff ff 	mov    rbp,0xffffffffffffffff
    basic_string_view<_CharT, _Traits>::
    3d78:	53                   	push   rbx
    3d79:	48 83 ec 08          	sub    rsp,0x8
      if (__pos < this->_M_len)
    3d7d:	48 39 f9             	cmp    rcx,rdi
    3d80:	73 25                	jae    3da7 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]+0x37>
    3d82:	48 89 f3             	mov    rbx,rsi
    3d85:	89 d6                	mov    esi,edx
	{
	  const size_type __n = this->_M_len - __pos;
    3d87:	48 89 fa             	mov    rdx,rdi
    3d8a:	48 29 ca             	sub    rdx,rcx
	  return 0;
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    3d8d:	40 0f be f6          	movsx  esi,sil
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
    3d91:	48 8d 3c 0b          	lea    rdi,[rbx+rcx*1]
    3d95:	e8 86 f4 ff ff       	call   3220 <memchr@plt>
	  if (__p)
	    __ret = __p - this->_M_str;
    3d9a:	48 89 c2             	mov    rdx,rax
    3d9d:	48 29 da             	sub    rdx,rbx
    3da0:	48 85 c0             	test   rax,rax
    3da3:	48 0f 45 ea          	cmovne rbp,rdx
	}
      return __ret;
    }
    3da7:	48 83 c4 08          	add    rsp,0x8
    3dab:	48 89 e8             	mov    rax,rbp
    3dae:	5b                   	pop    rbx
    3daf:	5d                   	pop    rbp
    3db0:	c3                   	ret
    3db1:	90                   	nop
    3db2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    3db9:	00 00 00 00 
    3dbd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000003dc0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>:
	  return __width;
	}

      template<typename _Context>
	size_t
	_M_get_precision(_Context& __ctx) const
    3dc0:	48 83 ec 48          	sub    rsp,0x48
      [[nodiscard,__gnu__::__always_inline__]]
      basic_format_arg<_Context>
      get(size_t __i) const noexcept
      {
	basic_format_arg<_Context> __arg;
	if (__i < _M_packed_size)
    3dc4:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
	    __prec = __format::__int_from_arg(__ctx.arg(_M_prec));
    3dc7:	0f b7 ff             	movzx  edi,di
	if (__i < _M_packed_size)
    3dca:	89 c2                	mov    edx,eax
    3dcc:	83 e0 0f             	and    eax,0xf
    3dcf:	83 e2 0f             	and    edx,0xf
    3dd2:	48 39 c7             	cmp    rdi,rax
    3dd5:	73 49                	jae    3e20 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]+0x60>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    3dd7:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    3dda:	48 8d 0c bf          	lea    rcx,[rdi+rdi*4]
	  {
	    __arg._M_type = _M_type(__i);
	    __arg._M_val = _M_values[__i];
    3dde:	48 c1 e7 04          	shl    rdi,0x4
    3de2:	48 03 7e 08          	add    rdi,QWORD PTR [rsi+0x8]
    3de6:	66 0f 6f 07          	movdqa xmm0,XMMWORD PTR [rdi]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    3dea:	48 c1 e8 04          	shr    rax,0x4
    3dee:	48 d3 e8             	shr    rax,cl
	    __arg._M_val = _M_values[__i];
    3df1:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    3df5:	83 e0 1f             	and    eax,0x1f
	  switch (__type)
    3df8:	48 8d 15 21 12 01 00 	lea    rdx,[rip+0x11221]        # 15020 <_IO_stdin_used+0x20>
    3dff:	88 44 24 10          	mov    BYTE PTR [rsp+0x10],al
    3e03:	0f b6 c0             	movzx  eax,al
    3e06:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    3e0b:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    3e0f:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    3e14:	48 01 d0             	add    rax,rdx
    3e17:	ff e0                	jmp    rax
    3e19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  }
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    3e20:	84 d2                	test   dl,dl
    3e22:	0f 85 98 f5 ff ff    	jne    33c0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>
    3e28:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    3e2b:	48 c1 e8 04          	shr    rax,0x4
    3e2f:	48 39 c7             	cmp    rdi,rax
    3e32:	0f 83 88 f5 ff ff    	jae    33c0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>
	  __arg = _M_args[__i];
    3e38:	48 c1 e7 05          	shl    rdi,0x5
    3e3c:	48 03 7e 08          	add    rdi,QWORD PTR [rsi+0x8]
    3e40:	f3 0f 6f 07          	movdqu xmm0,XMMWORD PTR [rdi]
    3e44:	0f b6 47 10          	movzx  eax,BYTE PTR [rdi+0x10]
    3e48:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
    3e4c:	eb aa                	jmp    3df8 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]+0x38>
    3e4e:	66 90                	xchg   ax,ax
	      if (__arg >= 0)
    3e50:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    3e55:	48 85 c0             	test   rax,rax
    3e58:	0f 88 67 f5 ff ff    	js     33c5 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]+0x5>
	}
    3e5e:	48 83 c4 48          	add    rsp,0x48
    3e62:	c3                   	ret
    3e63:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      return __arg;
    3e68:	8b 44 24 20          	mov    eax,DWORD PTR [rsp+0x20]
	}
    3e6c:	48 83 c4 48          	add    rsp,0x48
    3e70:	c3                   	ret
    3e71:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__arg >= 0)
    3e78:	48 63 44 24 20       	movsxd rax,DWORD PTR [rsp+0x20]
    3e7d:	85 c0                	test   eax,eax
    3e7f:	0f 88 40 f5 ff ff    	js     33c5 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]+0x5>
	}
    3e85:	48 83 c4 48          	add    rsp,0x48
    3e89:	c3                   	ret
    3e8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __arg;
    3e90:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
	}
    3e95:	48 83 c4 48          	add    rsp,0x48
    3e99:	c3                   	ret
    3e9a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000003ea0 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>:
	_M_get_width(_Context& __ctx) const
    3ea0:	48 83 ec 48          	sub    rsp,0x48
	if (__i < _M_packed_size)
    3ea4:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    3ea7:	0f b7 ff             	movzx  edi,di
	if (__i < _M_packed_size)
    3eaa:	89 c2                	mov    edx,eax
    3eac:	83 e0 0f             	and    eax,0xf
    3eaf:	83 e2 0f             	and    edx,0xf
    3eb2:	48 39 c7             	cmp    rdi,rax
    3eb5:	73 49                	jae    3f00 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]+0x60>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    3eb7:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    3eba:	48 8d 0c bf          	lea    rcx,[rdi+rdi*4]
	    __arg._M_val = _M_values[__i];
    3ebe:	48 c1 e7 04          	shl    rdi,0x4
    3ec2:	48 03 7e 08          	add    rdi,QWORD PTR [rsi+0x8]
    3ec6:	66 0f 6f 07          	movdqa xmm0,XMMWORD PTR [rdi]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    3eca:	48 c1 e8 04          	shr    rax,0x4
    3ece:	48 d3 e8             	shr    rax,cl
	    __arg._M_val = _M_values[__i];
    3ed1:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    3ed5:	83 e0 1f             	and    eax,0x1f
	  switch (__type)
    3ed8:	48 8d 15 95 11 01 00 	lea    rdx,[rip+0x11195]        # 15074 <_IO_stdin_used+0x74>
    3edf:	88 44 24 10          	mov    BYTE PTR [rsp+0x10],al
    3ee3:	0f b6 c0             	movzx  eax,al
    3ee6:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    3eeb:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    3eef:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    3ef4:	48 01 d0             	add    rax,rdx
    3ef7:	ff e0                	jmp    rax
    3ef9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    3f00:	84 d2                	test   dl,dl
    3f02:	0f 85 c2 f4 ff ff    	jne    33ca <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>
    3f08:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    3f0b:	48 c1 e8 04          	shr    rax,0x4
    3f0f:	48 39 c7             	cmp    rdi,rax
    3f12:	0f 83 b2 f4 ff ff    	jae    33ca <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]>
	  __arg = _M_args[__i];
    3f18:	48 c1 e7 05          	shl    rdi,0x5
    3f1c:	48 03 7e 08          	add    rdi,QWORD PTR [rsi+0x8]
    3f20:	f3 0f 6f 07          	movdqu xmm0,XMMWORD PTR [rdi]
    3f24:	0f b6 47 10          	movzx  eax,BYTE PTR [rdi+0x10]
    3f28:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
    3f2c:	eb aa                	jmp    3ed8 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]+0x38>
    3f2e:	66 90                	xchg   ax,ax
	      if (__arg >= 0)
    3f30:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    3f35:	48 85 c0             	test   rax,rax
    3f38:	0f 88 91 f4 ff ff    	js     33cf <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]+0x5>
	}
    3f3e:	48 83 c4 48          	add    rsp,0x48
    3f42:	c3                   	ret
    3f43:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      return __arg;
    3f48:	8b 44 24 20          	mov    eax,DWORD PTR [rsp+0x20]
	}
    3f4c:	48 83 c4 48          	add    rsp,0x48
    3f50:	c3                   	ret
    3f51:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__arg >= 0)
    3f58:	48 63 44 24 20       	movsxd rax,DWORD PTR [rsp+0x20]
    3f5d:	85 c0                	test   eax,eax
    3f5f:	0f 88 6a f4 ff ff    	js     33cf <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0] [clone .cold]+0x5>
	}
    3f65:	48 83 c4 48          	add    rsp,0x48
    3f69:	c3                   	ret
    3f6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __arg;
    3f70:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
	}
    3f75:	48 83 c4 48          	add    rsp,0x48
    3f79:	c3                   	ret
    3f7a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000003f80 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]>:

      // Use the formatting locale's std::time_put facet to produce
      // a locale-specific representation.
      template<typename _Iter>
	_Iter
	_M_locale_fmt(_Iter __out, const locale& __loc, const struct tm& __tm,
    3f80:	41 57                	push   r15
       *
       *  That's a lie.  We initialize the base class with NULL, because the
       *  string class does its own memory management.
      */
      basic_ostringstream()
      : __ostream_type(), _M_stringbuf(ios_base::out)
    3f82:	4c 8d 3d f7 7b 01 00 	lea    r15,[rip+0x17bf7]        # 1bb80 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    3f89:	41 56                	push   r14
    3f8b:	41 55                	push   r13
    3f8d:	41 54                	push   r12
    3f8f:	4c 8d 25 42 7c 01 00 	lea    r12,[rip+0x17c42]        # 1bbd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
    3f96:	55                   	push   rbp
    3f97:	66 49 0f 6e dc       	movq   xmm3,r12
    3f9c:	48 89 f5             	mov    rbp,rsi
    3f9f:	53                   	push   rbx
    3fa0:	48 89 fb             	mov    rbx,rdi
    3fa3:	48 81 ec c8 01 00 00 	sub    rsp,0x1c8
    3faa:	f3 0f 7e 15 ee 7d 01 	movq   xmm2,QWORD PTR [rip+0x17dee]        # 1bda0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x260>
    3fb1:	00 
    3fb2:	f3 0f 7e 0d e6 7d 01 	movq   xmm1,QWORD PTR [rip+0x17de6]        # 1bda0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x260>
    3fb9:	00 
       *  The default constructor does nothing and is not normally
       *  accessible to users.
      */
      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    3fba:	4c 8d ac 24 b0 00 00 	lea    r13,[rsp+0xb0]
    3fc1:	00 
    3fc2:	48 89 54 24 38       	mov    QWORD PTR [rsp+0x38],rdx
    3fc7:	4c 8d 74 24 40       	lea    r14,[rsp+0x40]
    3fcc:	66 0f 6c d3          	punpcklqdq xmm2,xmm3
    3fd0:	0f 16 0d d1 7d 01 00 	movhps xmm1,QWORD PTR [rip+0x17dd1]        # 1bda8 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x2f8>
    3fd7:	4c 89 ef             	mov    rdi,r13
    3fda:	89 4c 24 18          	mov    DWORD PTR [rsp+0x18],ecx
    3fde:	44 89 44 24 34       	mov    DWORD PTR [rsp+0x34],r8d
    3fe3:	0f 29 14 24          	movaps XMMWORD PTR [rsp],xmm2
    3fe7:	0f 29 4c 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm1
    3fec:	e8 bf f0 ff ff       	call   30b0 <std::ios_base::ios_base()@plt>
    3ff1:	48 8d 05 a8 7a 01 00 	lea    rax,[rip+0x17aa8]        # 1baa0 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    3ff8:	31 c9                	xor    ecx,ecx
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }
    3ffa:	31 f6                	xor    esi,esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    3ffc:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    4003:	00 
    4004:	66 0f ef c0          	pxor   xmm0,xmm0
    4008:	48 8b 05 89 7b 01 00 	mov    rax,QWORD PTR [rip+0x17b89]        # 1bb98 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x8>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    400f:	66 89 8c 24 90 01 00 	mov    WORD PTR [rsp+0x190],cx
    4016:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    4017:	0f 11 84 24 98 01 00 	movups XMMWORD PTR [rsp+0x198],xmm0
    401e:	00 
    401f:	0f 11 84 24 a8 01 00 	movups XMMWORD PTR [rsp+0x1a8],xmm0
    4026:	00 
    4027:	48 8b 78 e8          	mov    rdi,QWORD PTR [rax-0x18]
    402b:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    4030:	48 8b 05 69 7b 01 00 	mov    rax,QWORD PTR [rip+0x17b69]        # 1bba0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    4037:	48 c7 84 24 88 01 00 	mov    QWORD PTR [rsp+0x188],0x0
    403e:	00 00 00 00 00 
    4043:	4c 01 f7             	add    rdi,r14
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    4046:	4c 8d b4 24 a0 00 00 	lea    r14,[rsp+0xa0]
    404d:	00 
    404e:	48 89 07             	mov    QWORD PTR [rdi],rax
    4051:	e8 3a f2 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    4056:	66 0f 6f 4c 24 20    	movdqa xmm1,XMMWORD PTR [rsp+0x20]
       *  - this is not an error
      */
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
    405c:	48 8d 84 24 80 00 00 	lea    rax,[rsp+0x80]
    4063:	00 
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    4064:	66 0f ef c0          	pxor   xmm0,xmm0
      _M_buf_locale(locale())
    4068:	48 89 c7             	mov    rdi,rax
    406b:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    4070:	0f 29 4c 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm1
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    4075:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
    407a:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
    407f:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    4084:	4c 89 bc 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],r15
    408b:	00 
      _M_buf_locale(locale())
    408c:	e8 df f2 ff ff       	call   3370 <std::locale::locale()@plt>
      { this->init(&_M_stringbuf); }
    4091:	48 8d 74 24 48       	lea    rsi,[rsp+0x48]
    4096:	4c 89 ef             	mov    rdi,r13
      : __streambuf_type(), _M_mode(__mode), _M_string()
    4099:	4c 89 64 24 48       	mov    QWORD PTR [rsp+0x48],r12
    409e:	c7 84 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],0x10
    40a5:	10 00 00 00 
    40a9:	4c 89 b4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r14
    40b0:	00 
      { _M_string_length = __length; }
    40b1:	48 c7 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],0x0
    40b8:	00 00 00 00 00 
	__c1 = __c2;
    40bd:	c6 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],0x0
    40c4:	00 
      { this->init(&_M_stringbuf); }
    40c5:	e8 c6 f1 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
      const size_t __i = _Facet::id._M_id();
    40ca:	48 8d 3d 7f 82 01 00 	lea    rdi,[rip+0x1827f]        # 1c350 <std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::id@GLIBCXX_3.4>
    40d1:	e8 4a f0 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
    40d6:	48 89 c2             	mov    rdx,rax
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    40d9:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
      _GLIBCXX_STD_FACET(time_put<char>);
    40dd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    40e1:	48 8b 3c d0          	mov    rdi,QWORD PTR [rax+rdx*8]
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    40e5:	48 85 ff             	test   rdi,rdi
    40e8:	0f 84 e6 f2 ff ff    	je     33d4 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0] [clone .cold]>
      : _M_sbuf(nullptr), _M_failed(true) { }
#endif

      ///  Construct output iterator from ostream.
      ostreambuf_iterator(ostream_type& __s) _GLIBCXX_USE_NOEXCEPT
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }
    40ee:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
       *  @return  Iterator after writing.
       */
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
	  const tm* __tm, char __format, char __mod = 0) const
      { return this->do_put(__s, __io, __fill, __tm, __format, __mod); }
    40f3:	44 0f be 64 24 34    	movsx  r12d,BYTE PTR [rsp+0x34]
    40f9:	31 d2                	xor    edx,edx
    40fb:	41 b8 20 00 00 00    	mov    r8d,0x20
      { return _M_streambuf; }
    4101:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    4105:	48 8b 8c 04 28 01 00 	mov    rcx,QWORD PTR [rsp+rax*1+0x128]
    410c:	00 
    410d:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    4110:	41 54                	push   r12
    4112:	0f be 6c 24 20       	movsx  ebp,BYTE PTR [rsp+0x20]
    4117:	48 85 c9             	test   rcx,rcx
    411a:	48 89 ce             	mov    rsi,rcx
    411d:	4c 89 e9             	mov    rcx,r13
    4120:	55                   	push   rbp
    4121:	0f 94 c2             	sete   dl
    4124:	4c 8b 4c 24 48       	mov    r9,QWORD PTR [rsp+0x48]
    4129:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      char __fmt, char __mod) const
	{
	  basic_ostringstream<_CharT> __os;
	  const auto& __tp = use_facet<time_put<_CharT>>(__loc);
	  __tp.put(__os, __os, _S_space, &__tm, __fmt, __mod);
	  if (__os)
    412c:	58                   	pop    rax
    412d:	5a                   	pop    rdx
    412e:	f6 84 24 d0 00 00 00 	test   BYTE PTR [rsp+0xd0],0x5
    4135:	05 
    4136:	0f 84 94 00 00 00    	je     41d0 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x250>
       *
       *  The buffer is deallocated by the stringbuf object, not the
       *  formatting stream.
      */
      ~basic_ostringstream()
      { }
    413c:	66 0f 6f 24 24       	movdqa xmm4,XMMWORD PTR [rsp]
      { return _M_dataplus._M_p; }
    4141:	48 8b bc 24 90 00 00 	mov    rdi,QWORD PTR [rsp+0x90]
    4148:	00 
    4149:	4c 89 bc 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],r15
    4150:	00 
    4151:	0f 29 64 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm4
	if (_M_data() == _M_local_data())
    4156:	4c 39 f7             	cmp    rdi,r14
    4159:	74 11                	je     416c <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x1ec>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    415b:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    4162:	00 
    4163:	48 8d 70 01          	lea    rsi,[rax+0x1]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    4167:	e8 94 f0 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    416c:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    4171:	48 8d 05 48 79 01 00 	lea    rax,[rip+0x17948]        # 1bac0 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    4178:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    417d:	e8 3e f1 ff ff       	call   32c0 <std::locale::~locale()@plt>
      ~basic_ostream() { }
    4182:	48 8b 05 0f 7a 01 00 	mov    rax,QWORD PTR [rip+0x17a0f]        # 1bb98 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x8>
    4189:	48 8b 0d 10 7a 01 00 	mov    rcx,QWORD PTR [rip+0x17a10]        # 1bba0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      ~basic_ios() { }
    4190:	4c 89 ef             	mov    rdi,r13
    4193:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    4198:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    419c:	48 89 4c 04 40       	mov    QWORD PTR [rsp+rax*1+0x40],rcx
    41a1:	48 8d 05 f8 78 01 00 	lea    rax,[rip+0x178f8]        # 1baa0 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    41a8:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    41af:	00 
    41b0:	e8 1b ef ff ff       	call   30d0 <std::ios_base::~ios_base()@plt>
	    __out = __format::__write(std::move(__out), __os.view());
	  return __out;
	}
    41b5:	48 81 c4 c8 01 00 00 	add    rsp,0x1c8
    41bc:	48 89 d8             	mov    rax,rbx
    41bf:	5b                   	pop    rbx
    41c0:	5d                   	pop    rbp
    41c1:	41 5c                	pop    r12
    41c3:	41 5d                	pop    r13
    41c5:	41 5e                	pop    r14
    41c7:	41 5f                	pop    r15
    41c9:	c3                   	ret
    41ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      */
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }
    41d0:	4c 8b 64 24 70       	mov    r12,QWORD PTR [rsp+0x70]
	if (char_type* __pptr = this->pptr())
    41d5:	4d 85 e4             	test   r12,r12
    41d8:	0f 84 ba 00 00 00    	je     4298 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x318>
      egptr() const { return _M_in_end; }
    41de:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
	      return __egptr; // Underlying sequence is [pbase, egptr).
    41e3:	4c 89 e2             	mov    rdx,r12
      pbase() const { return _M_out_beg; }
    41e6:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
    41eb:	4c 39 e0             	cmp    rax,r12
    41ee:	4c 0f 43 e0          	cmovae r12,rax
    41f2:	48 85 c0             	test   rax,rax
    41f5:	4c 0f 44 e2          	cmove  r12,rdx
	requires same_as<iter_value_t<_It>, _CharT>
	  && (!convertible_to<_End, size_type>)
	constexpr
	basic_string_view(_It __first, _End __last)
	noexcept(noexcept(__last - __first))
	: _M_len(__last - __first), _M_str(std::to_address(__first))
    41f9:	49 29 f4             	sub    r12,rsi
	  if (__str.size())
    41fc:	4d 85 e4             	test   r12,r12
    41ff:	0f 84 37 ff ff ff    	je     413c <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x1bc>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    4205:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
      subspan(size_type __offset, size_type __count = dynamic_extent) const
      noexcept
      {
	__glibcxx_assert(__offset <= size());
	if (__count == dynamic_extent)
	  __count = this->size() - __offset;
    4209:	48 8b 6b 10          	mov    rbp,QWORD PTR [rbx+0x10]
    420d:	48 89 f8             	mov    rax,rdi
    4210:	48 2b 43 08          	sub    rax,QWORD PTR [rbx+0x8]
    4214:	48 29 c5             	sub    rbp,rax
	while (__to.size() <= __s.size())
    4217:	49 39 ec             	cmp    r12,rbp
    421a:	72 68                	jb     4284 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x304>
    421c:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
    4221:	4d 89 e5             	mov    r13,r12
    4224:	49 89 f4             	mov    r12,rsi
    4227:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    422e:	00 00 
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    4230:	4c 39 ed             	cmp    rbp,r13
    4233:	4c 89 ea             	mov    rdx,r13
    4236:	48 0f 46 d5          	cmovbe rdx,rbp
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
    423a:	48 85 d2             	test   rdx,rdx
    423d:	74 08                	je     4247 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x2c7>
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    423f:	4c 89 e6             	mov    rsi,r12
    4242:	e8 69 ef ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    4247:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_current += __n; return *this; }
    424a:	48 01 6b 18          	add    QWORD PTR [rbx+0x18],rbp
    424e:	48 89 df             	mov    rdi,rbx

      constexpr void
      remove_prefix(size_type __n) noexcept
      {
	__glibcxx_assert(this->_M_len >= __n);
	this->_M_str += __n;
    4251:	49 01 ec             	add    r12,rbp
	this->_M_len -= __n;
    4254:	49 29 ed             	sub    r13,rbp
    4257:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    4259:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    425d:	48 8b 6b 10          	mov    rbp,QWORD PTR [rbx+0x10]
    4261:	48 89 f8             	mov    rax,rdi
    4264:	48 2b 43 08          	sub    rax,QWORD PTR [rbx+0x8]
    4268:	48 29 c5             	sub    rbp,rax
	while (__to.size() <= __s.size())
    426b:	49 39 ed             	cmp    r13,rbp
    426e:	73 c0                	jae    4230 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x2b0>
	if (__s.size())
    4270:	4c 89 e6             	mov    rsi,r12
    4273:	4d 89 ec             	mov    r12,r13
    4276:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    427b:	4d 85 e4             	test   r12,r12
    427e:	0f 84 b8 fe ff ff    	je     413c <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x1bc>
    4284:	4c 89 e2             	mov    rdx,r12
    4287:	e8 24 ef ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    428c:	4c 01 63 18          	add    QWORD PTR [rbx+0x18],r12
    4290:	e9 a7 fe ff ff       	jmp    413c <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x1bc>
    4295:	0f 1f 00             	nop    DWORD PTR [rax]
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
    4298:	4c 8b a4 24 98 00 00 	mov    r12,QWORD PTR [rsp+0x98]
    429f:	00 
      { return _M_dataplus._M_p; }
    42a0:	48 8b b4 24 90 00 00 	mov    rsi,QWORD PTR [rsp+0x90]
    42a7:	00 
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    42a8:	e9 4f ff ff ff       	jmp    41fc <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]+0x27c>
    42ad:	0f 1f 00             	nop    DWORD PTR [rax]

00000000000042b0 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]>:
	}
    };

  template<typename _Out, typename _CharT, typename _Context>
    inline _Out
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    42b0:	41 57                	push   r15
    42b2:	41 56                	push   r14
    42b4:	41 55                	push   r13
    42b6:	41 54                	push   r12
    42b8:	49 89 cc             	mov    r12,rcx
      : _M_out(std::move(__out)), _M_max(__max)
    42bb:	48 8d 0d ae 77 01 00 	lea    rcx,[rip+0x177ae]        # 1ba70 <vtable for std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >+0x10>
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    42c2:	55                   	push   rbp
      : _M_out(std::move(__out)), _M_max(__max)
    42c3:	66 48 0f 6e c1       	movq   xmm0,rcx
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    42c8:	48 89 fd             	mov    rbp,rdi
    42cb:	53                   	push   rbx
    42cc:	4c 89 c3             	mov    rbx,r8
    42cf:	48 81 ec f8 01 00 00 	sub    rsp,0x1f8
      : _M_span(__span), _M_next(__span.begin())
    42d6:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    42dd:	00 
    42de:	4c 8d ac 24 b0 00 00 	lea    r13,[rsp+0xb0]
    42e5:	00 
    42e6:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x100
    42ed:	00 00 01 00 00 
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    42f2:	4c 8b 84 24 30 02 00 	mov    r8,QWORD PTR [rsp+0x230]
    42f9:	00 
      : _M_out(std::move(__out)), _M_max(__max)
    42fa:	66 48 0f 6e c8       	movq   xmm1,rax
      : _M_span(__span), _M_next(__span.begin())
    42ff:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    4306:	00 
      : _M_out(std::move(__out)), _M_max(__max)
    4307:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
      ostream_iterator(ostream_type& __s, const _CharT* __c) _GLIBCXX_NOEXCEPT
      : _M_stream(std::__addressof(__s)), _M_string(__c)  { }

      /// Copy constructor.
      ostream_iterator(const ostream_iterator& __obj) _GLIBCXX_NOEXCEPT
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }
    430b:	48 89 b4 24 d0 01 00 	mov    QWORD PTR [rsp+0x1d0],rsi
    4312:	00 
    4313:	48 89 94 24 d8 01 00 	mov    QWORD PTR [rsp+0x1d8],rdx
    431a:	00 
    431b:	48 c7 84 24 e0 01 00 	mov    QWORD PTR [rsp+0x1e0],0xffffffffffffffff
    4322:	00 ff ff ff ff 
    4327:	48 c7 84 24 e8 01 00 	mov    QWORD PTR [rsp+0x1e8],0x0
    432e:	00 00 00 00 00 
      _Sink_iter<_CharT> __sink_out;

      if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
	__sink_out = __out; // Already a sink iterator, safe to use post-move.
      else
	__sink_out = __sink.out();
    4333:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
      : _M_out(std::move(__out)), _M_max(__max)
    4338:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    433f:	00 

      if constexpr (is_same_v<_CharT, char>)
	// Fast path for "{}" format strings and simple format arg types.
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    4340:	49 83 fc 02          	cmp    r12,0x2
    4344:	0f 84 de 00 00 00    	je     4428 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x178>
    434a:	4c 89 ea             	mov    rdx,r13
    434d:	4c 8d 74 24 40       	lea    r14,[rsp+0x40]
    4352:	4c 8d 7c 24 70       	lea    r15,[rsp+0x70]
    4357:	f3 41 0f 6f 01       	movdqu xmm0,XMMWORD PTR [r9]
      : _M_args(__args), _M_out(std::move(__out))
    435c:	48 89 54 24 50       	mov    QWORD PTR [rsp+0x50],rdx
    4361:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
		  return std::move(__sink)._M_finish().out;
	      }
	  }

      auto __ctx = __loc == nullptr
		     ? _Context(__args, __sink_out)
    4366:	4d 85 c0             	test   r8,r8
    4369:	0f 84 a1 00 00 00    	je     4410 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x160>
    : _M_loc(__loc), _M_hasval(true)
    436f:	48 8d 7c 24 58       	lea    rdi,[rsp+0x58]
    4374:	4c 89 c6             	mov    rsi,r8
    4377:	e8 14 ee ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    437c:	c6 44 24 60 01       	mov    BYTE PTR [rsp+0x60],0x1
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    4381:	66 0f 6f 05 f7 44 01 	movdqa xmm0,XMMWORD PTR [rip+0x144f7]        # 18880 <std::__unicode::__v15_1_0::__width_edges+0x400>
    4388:	00 
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    4389:	48 8d 05 c0 76 01 00 	lea    rax,[rip+0x176c0]        # 1ba50 <vtable for std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>+0x10>
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    4390:	48 89 5c 24 78       	mov    QWORD PTR [rsp+0x78],rbx
		     : _Context(__args, __sink_out, *__loc);
      _Formatting_scanner<_Sink_iter<_CharT>, _CharT> __scanner(__ctx, __fmt);
      __scanner._M_scan();
    4395:	4c 89 ff             	mov    rdi,r15
      { return this->_M_str + this->_M_len; }
    4398:	4c 01 e3             	add    rbx,r12
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    439b:	48 89 44 24 70       	mov    QWORD PTR [rsp+0x70],rax
    43a0:	48 89 9c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbx
    43a7:	00 
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    43a8:	c7 84 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],0x0
    43af:	00 00 00 00 
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    43b3:	4c 89 b4 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],r14
    43ba:	00 
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    43bb:	0f 29 84 24 90 00 00 	movaps XMMWORD PTR [rsp+0x90],xmm0
    43c2:	00 
      __scanner._M_scan();
    43c3:	e8 68 10 00 00       	call   5430 <std::__format::_Scanner<char>::_M_scan()>
	if (this->_M_used().size() != 0)
    43c8:	48 8b 84 24 c8 00 00 	mov    rax,QWORD PTR [rsp+0xc8]
    43cf:	00 
    43d0:	48 39 84 24 b8 00 00 	cmp    QWORD PTR [rsp+0xb8],rax
    43d7:	00 
    43d8:	0f 85 42 01 00 00    	jne    4520 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x270>
    43de:	66 0f 6f 84 24 d0 01 	movdqa xmm0,XMMWORD PTR [rsp+0x1d0]
    43e5:	00 00 
    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    43e7:	80 7c 24 60 00       	cmp    BYTE PTR [rsp+0x60],0x0
    43ec:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    43f0:	0f 85 12 01 00 00    	jne    4508 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x258>

      if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
	return __ctx.out();
      else
	return std::move(__sink)._M_finish().out;
    }
    43f6:	48 81 c4 f8 01 00 00 	add    rsp,0x1f8
    43fd:	48 89 e8             	mov    rax,rbp
    4400:	5b                   	pop    rbx
    4401:	5d                   	pop    rbp
    4402:	41 5c                	pop    r12
    4404:	41 5d                	pop    r13
    4406:	41 5e                	pop    r14
    4408:	41 5f                	pop    r15
    440a:	c3                   	ret
    440b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }
    4410:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
    4417:	00 00 
    4419:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
    441e:	e9 5e ff ff ff       	jmp    4381 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0xd1>
    4423:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    4428:	80 3b 7b             	cmp    BYTE PTR [rbx],0x7b
    442b:	0f 85 19 ff ff ff    	jne    434a <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x9a>
    4431:	80 7b 01 7d          	cmp    BYTE PTR [rbx+0x1],0x7d
    4435:	0f 85 0f ff ff ff    	jne    434a <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x9a>
	    bool __done = false;
    443b:	c6 44 24 17 00       	mov    BYTE PTR [rsp+0x17],0x0
	if (__i < _M_packed_size)
    4440:	41 f6 01 0f          	test   BYTE PTR [r9],0xf
    4444:	0f 84 e6 00 00 00    	je     4530 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x280>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    444a:	49 8b 11             	mov    rdx,QWORD PTR [r9]
	    __arg._M_val = _M_values[__i];
    444d:	49 8b 49 08          	mov    rcx,QWORD PTR [r9+0x8]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    4451:	48 c1 ea 04          	shr    rdx,0x4
	    __arg._M_val = _M_values[__i];
    4455:	66 0f 6f 01          	movdqa xmm0,XMMWORD PTR [rcx]
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    4459:	89 d0                	mov    eax,edx
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    445b:	83 e2 1f             	and    edx,0x1f
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    445e:	83 e0 1f             	and    eax,0x1f
	    __arg._M_val = _M_values[__i];
    4461:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
	    std::visit_format_arg([&](auto& __arg) {
    4466:	48 8d 74 24 18       	lea    rsi,[rsp+0x18]
    446b:	48 8d 4c 24 17       	lea    rcx,[rsp+0x17]
    4470:	88 44 24 30          	mov    BYTE PTR [rsp+0x30],al
    4474:	66 48 0f 6e c6       	movq   xmm0,rsi
    4479:	66 48 0f 6e d1       	movq   xmm2,rcx
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    447e:	4c 8d 74 24 40       	lea    r14,[rsp+0x40]
    4483:	4c 89 84 24 30 02 00 	mov    QWORD PTR [rsp+0x230],r8
    448a:	00 
	    std::visit_format_arg([&](auto& __arg) {
    448b:	66 0f 6c c2          	punpcklqdq xmm0,xmm2
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    448f:	4c 8d 7c 24 70       	lea    r15,[rsp+0x70]
    4494:	4c 89 f6             	mov    rsi,r14
    4497:	4c 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],r9
	    std::visit_format_arg([&](auto& __arg) {
    449c:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
    44a1:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    44a7:	4c 89 ff             	mov    rdi,r15
    44aa:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    44af:	66 0f 6f 44 24 30    	movdqa xmm0,XMMWORD PTR [rsp+0x30]
    44b5:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
    44bc:	00 
    44bd:	e8 ee 21 00 00       	call   66b0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>
	    if (__done)
    44c2:	80 7c 24 17 00       	cmp    BYTE PTR [rsp+0x17],0x0
    44c7:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    44cc:	4c 8b 4c 24 08       	mov    r9,QWORD PTR [rsp+0x8]
    44d1:	4c 8b 84 24 30 02 00 	mov    r8,QWORD PTR [rsp+0x230]
    44d8:	00 
    44d9:	0f 84 78 fe ff ff    	je     4357 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0xa7>
	if (this->_M_used().size() != 0)
    44df:	48 8b 84 24 c8 00 00 	mov    rax,QWORD PTR [rsp+0xc8]
    44e6:	00 
    44e7:	48 39 84 24 b8 00 00 	cmp    QWORD PTR [rsp+0xb8],rax
    44ee:	00 
    44ef:	75 68                	jne    4559 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x2a9>
    44f1:	66 0f 6f 84 24 d0 01 	movdqa xmm0,XMMWORD PTR [rsp+0x1d0]
    44f8:	00 00 
    44fa:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    44fe:	e9 f3 fe ff ff       	jmp    43f6 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x146>
    4503:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    4508:	48 8d 7c 24 58       	lea    rdi,[rsp+0x58]
    450d:	e8 ae ed ff ff       	call   32c0 <std::locale::~locale()@plt>
      ~basic_format_context() = default;
    4512:	e9 df fe ff ff       	jmp    43f6 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x146>
    4517:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    451e:	00 00 
	  _Iter_sink::_M_overflow();
    4520:	4c 89 ef             	mov    rdi,r13
    4523:	e8 48 08 00 00       	call   4d70 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()>
    4528:	e9 b1 fe ff ff       	jmp    43de <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x12e>
    452d:	0f 1f 00             	nop    DWORD PTR [rax]
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    4530:	49 8b 31             	mov    rsi,QWORD PTR [r9]
    4533:	31 c0                	xor    eax,eax
    4535:	31 d2                	xor    edx,edx
    4537:	48 c1 ee 04          	shr    rsi,0x4
    453b:	0f 84 25 ff ff ff    	je     4466 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x1b6>
	  __arg = _M_args[__i];
    4541:	49 8b 41 08          	mov    rax,QWORD PTR [r9+0x8]
    4545:	f3 0f 6f 00          	movdqu xmm0,XMMWORD PTR [rax]
    4549:	0f b6 50 10          	movzx  edx,BYTE PTR [rax+0x10]
    454d:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    4552:	89 d0                	mov    eax,edx
    4554:	e9 0d ff ff ff       	jmp    4466 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x1b6>
	  _Iter_sink::_M_overflow();
    4559:	4c 89 ef             	mov    rdi,r13
    455c:	e8 0f 08 00 00       	call   4d70 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()>
    4561:	eb 8e                	jmp    44f1 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]+0x241>
    4563:	90                   	nop
    4564:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    456b:	00 00 00 00 
    456f:	90                   	nop

0000000000004570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>:
	if (this->max_size() - (this->size() - __n1) < __n2)
    4570:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    4577:	ff ff 7f 
    basic_string<_CharT, _Traits, _Alloc>::
    457a:	41 56                	push   r14
    457c:	41 55                	push   r13
    457e:	48 01 d0             	add    rax,rdx
    4581:	41 54                	push   r12
    4583:	55                   	push   rbp
    4584:	48 89 cd             	mov    rbp,rcx
    4587:	53                   	push   rbx
      { return _M_string_length; }
    4588:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
	if (this->max_size() - (this->size() - __n1) < __n2)
    458c:	48 29 c8             	sub    rax,rcx
    458f:	48 39 e8             	cmp    rax,rbp
    4592:	0f 82 46 ee ff ff    	jb     33de <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]>
    4598:	48 89 fb             	mov    rbx,rdi
      const size_type __new_size = __old_size + __n2 - __n1;
    459b:	49 89 ec             	mov    r12,rbp
      { return _M_dataplus._M_p; }
    459e:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
    45a1:	49 89 f6             	mov    r14,rsi
    45a4:	49 29 d4             	sub    r12,rdx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    45a7:	48 8d 43 10          	lea    rax,[rbx+0x10]
    45ab:	45 89 c5             	mov    r13d,r8d
    45ae:	49 01 cc             	add    r12,rcx
	if (_M_data() == _M_local_data())
    45b1:	48 39 c7             	cmp    rdi,rax
    45b4:	0f 84 86 00 00 00    	je     4640 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0xd0>
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      {
	return _M_is_local() ? size_type(_S_local_capacity)
    45ba:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
      if (__new_size <= this->capacity())
    45be:	4c 39 e0             	cmp    rax,r12
    45c1:	72 5d                	jb     4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0xb0>
	  const size_type __how_much = __old_size - __pos1 - __n1;
    45c3:	4a 8d 04 32          	lea    rax,[rdx+r14*1]
	  if (__how_much && __n1 != __n2)
    45c7:	48 29 c1             	sub    rcx,rax
    45ca:	74 24                	je     45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x80>
    45cc:	48 39 ea             	cmp    rdx,rbp
    45cf:	74 1f                	je     45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x80>
	  pointer __p = this->_M_data() + __pos1;
    45d1:	4c 01 f7             	add    rdi,r14
	    this->_S_move(__p + __n2, __p + __n1, __how_much);
    45d4:	48 8d 34 17          	lea    rsi,[rdi+rdx*1]
    45d8:	48 01 ef             	add    rdi,rbp
	if (__n == 1)
    45db:	48 83 f9 01          	cmp    rcx,0x1
    45df:	74 6f                	je     4650 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0xe0>
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    45e1:	48 89 ca             	mov    rdx,rcx
    45e4:	e8 37 ed ff ff       	call   3320 <memmove@plt>
      { return _M_dataplus._M_p; }
    45e9:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    45ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (__n2)
    45f0:	48 85 ed             	test   rbp,rbp
    45f3:	74 18                	je     460d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x9d>
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    45f5:	4c 01 f7             	add    rdi,r14
	if (__n == 1)
    45f8:	48 83 fd 01          	cmp    rbp,0x1
    45fc:	74 3a                	je     4638 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0xc8>
	  return __s;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
#endif
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    45fe:	41 0f be f5          	movsx  esi,r13b
    4602:	48 89 ea             	mov    rdx,rbp
    4605:	e8 36 eb ff ff       	call   3140 <memset@plt>
      { return _M_dataplus._M_p; }
    460a:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      { _M_string_length = __length; }
    460d:	4c 89 63 08          	mov    QWORD PTR [rbx+0x8],r12
	__c1 = __c2;
    4611:	42 c6 04 27 00       	mov    BYTE PTR [rdi+r12*1],0x0
    }
    4616:	5b                   	pop    rbx
    4617:	5d                   	pop    rbp
    4618:	41 5c                	pop    r12
    461a:	41 5d                	pop    r13
    461c:	41 5e                	pop    r14
    461e:	c3                   	ret
    461f:	90                   	nop
	this->_M_mutate(__pos1, __n1, 0, __n2);
    4620:	48 89 df             	mov    rdi,rbx
    4623:	49 89 e8             	mov    r8,rbp
    4626:	31 c9                	xor    ecx,ecx
    4628:	4c 89 f6             	mov    rsi,r14
    462b:	e8 40 32 00 00       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
    4630:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    4633:	eb bb                	jmp    45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x80>
    4635:	0f 1f 00             	nop    DWORD PTR [rax]
    4638:	44 88 2f             	mov    BYTE PTR [rdi],r13b
    463b:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      }
    463e:	eb cd                	jmp    460d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x9d>
	return _M_is_local() ? size_type(_S_local_capacity)
    4640:	b8 0f 00 00 00       	mov    eax,0xf
    4645:	e9 74 ff ff ff       	jmp    45be <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x4e>
    464a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	__c1 = __c2;
    4650:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    4653:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
    4655:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      }
    4658:	eb 96                	jmp    45f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]+0x80>
    465a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000004660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>:
	if (this->max_size() - (this->size() - __n1) < __n2)
    4660:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    4667:	ff ff 7f 
    basic_string<_CharT, _Traits, _Alloc>::
    466a:	41 55                	push   r13
    466c:	41 54                	push   r12
    466e:	49 89 cc             	mov    r12,rcx
    4671:	48 01 d0             	add    rax,rdx
    4674:	55                   	push   rbp
    4675:	53                   	push   rbx
    4676:	48 83 ec 18          	sub    rsp,0x18
      { return _M_string_length; }
    467a:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
	if (this->max_size() - (this->size() - __n1) < __n2)
    467e:	48 29 c8             	sub    rax,rcx
    4681:	4c 39 c0             	cmp    rax,r8
    4684:	0f 82 73 ed ff ff    	jb     33fd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0] [clone .cold]+0x13>
      { return _M_dataplus._M_p; }
    468a:	48 8b 07             	mov    rax,QWORD PTR [rdi]
      const size_type __new_size = __old_size + __len2 - __len1;
    468d:	4c 89 c5             	mov    rbp,r8
    4690:	48 89 fb             	mov    rbx,rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    4693:	48 8d 7f 10          	lea    rdi,[rdi+0x10]
    4697:	48 29 d5             	sub    rbp,rdx
    469a:	48 01 cd             	add    rbp,rcx
	if (_M_data() == _M_local_data())
    469d:	48 39 f8             	cmp    rax,rdi
    46a0:	0f 84 9a 00 00 00    	je     4740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xe0>
	return _M_is_local() ? size_type(_S_local_capacity)
    46a6:	48 8b 7b 10          	mov    rdi,QWORD PTR [rbx+0x10]
      if (__new_size <= this->capacity())
    46aa:	48 39 ef             	cmp    rdi,rbp
    46ad:	0f 82 7d 00 00 00    	jb     4730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xd0>
	  pointer __p = this->_M_data() + __pos;
    46b3:	4c 8d 2c 30          	lea    r13,[rax+rsi*1]
	  const size_type __how_much = __old_size - __pos - __len1;
    46b7:	49 89 c9             	mov    r9,rcx
    46ba:	48 01 d6             	add    rsi,rdx
    46bd:	49 29 f1             	sub    r9,rsi
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    46c0:	49 39 c4             	cmp    r12,rax
    46c3:	73 5b                	jae    4720 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xc0>
	      if (__how_much && __len1 != __len2)
    46c5:	4d 85 c9             	test   r9,r9
    46c8:	74 27                	je     46f1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x91>
    46ca:	4c 39 c2             	cmp    rdx,r8
    46cd:	74 22                	je     46f1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x91>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
    46cf:	49 8d 74 15 00       	lea    rsi,[r13+rdx*1+0x0]
    46d4:	4b 8d 7c 05 00       	lea    rdi,[r13+r8*1+0x0]
	if (__n == 1)
    46d9:	49 83 f9 01          	cmp    r9,0x1
    46dd:	74 71                	je     4750 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xf0>
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    46df:	4c 89 ca             	mov    rdx,r9
    46e2:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
    46e7:	e8 34 ec ff ff       	call   3320 <memmove@plt>
    46ec:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
	      if (__len2)
    46f1:	4d 85 c0             	test   r8,r8
    46f4:	74 14                	je     470a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
	if (__n == 1)
    46f6:	49 83 f8 01          	cmp    r8,0x1
    46fa:	74 64                	je     4760 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x100>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    46fc:	4c 89 c2             	mov    rdx,r8
    46ff:	4c 89 e6             	mov    rsi,r12
    4702:	4c 89 ef             	mov    rdi,r13
    4705:	e8 a6 ea ff ff       	call   31b0 <memcpy@plt>
	__c1 = __c2;
    470a:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_string_length = __length; }
    470d:	48 89 6b 08          	mov    QWORD PTR [rbx+0x8],rbp
    4711:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
      else
	this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }
    4715:	48 83 c4 18          	add    rsp,0x18
    4719:	5b                   	pop    rbx
    471a:	5d                   	pop    rbp
    471b:	41 5c                	pop    r12
    471d:	41 5d                	pop    r13
    471f:	c3                   	ret
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    4720:	48 01 c8             	add    rax,rcx
    4723:	4c 39 e0             	cmp    rax,r12
    4726:	72 9d                	jb     46c5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x65>
    4728:	e9 bd ec ff ff       	jmp    33ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0] [clone .cold]>
    472d:	0f 1f 00             	nop    DWORD PTR [rax]
	this->_M_mutate(__pos, __len1, __s, __len2);
    4730:	4c 89 e1             	mov    rcx,r12
    4733:	48 89 df             	mov    rdi,rbx
    4736:	e8 35 31 00 00       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    473b:	eb cd                	jmp    470a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
    473d:	0f 1f 00             	nop    DWORD PTR [rax]
	return _M_is_local() ? size_type(_S_local_capacity)
    4740:	bf 0f 00 00 00       	mov    edi,0xf
    4745:	e9 60 ff ff ff       	jmp    46aa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x4a>
    474a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    4750:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    4753:	88 07                	mov    BYTE PTR [rdi],al
	      if (__len2)
    4755:	4d 85 c0             	test   r8,r8
    4758:	74 b0                	je     470a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
    475a:	eb 9a                	jmp    46f6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0x96>
    475c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    4760:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
    4765:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
      }
    4769:	eb 9f                	jmp    470a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]+0xaa>
    476b:	90                   	nop
    476c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004770 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>:
       *  out_of_range is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */
      _GLIBCXX20_CONSTEXPR
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
    4770:	41 56                	push   r14
    4772:	41 55                	push   r13
    4774:	41 54                	push   r12
    4776:	49 89 f4             	mov    r12,rsi
    4779:	55                   	push   rbp
    477a:	48 89 d5             	mov    rbp,rdx
    477d:	53                   	push   rbx
      { return _M_string_length; }
    477e:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
	if (__pos > this->size())
    4782:	48 39 f2             	cmp    rdx,rsi
    4785:	0f 82 8b ec ff ff    	jb     3416 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]+0xc>
	if (this->max_size() - (this->size() - __n1) < __n2)
    478b:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    4792:	ff ff 7f 
    4795:	48 29 d0             	sub    rax,rdx
    4798:	48 39 e8             	cmp    rax,rbp
    479b:	0f 82 69 ec ff ff    	jb     340a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0] [clone .cold]>
    47a1:	48 89 fb             	mov    rbx,rdi
      { return _M_dataplus._M_p; }
    47a4:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
    47a7:	41 89 cd             	mov    r13d,ecx
      const size_type __new_size = __old_size + __n2 - __n1;
    47aa:	4c 8d 34 2a          	lea    r14,[rdx+rbp*1]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    47ae:	48 8d 43 10          	lea    rax,[rbx+0x10]
	if (_M_data() == _M_local_data())
    47b2:	48 39 c7             	cmp    rdi,rax
    47b5:	0f 84 85 00 00 00    	je     4840 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xd0>
	return _M_is_local() ? size_type(_S_local_capacity)
    47bb:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
      if (__new_size <= this->capacity())
    47bf:	4c 39 f0             	cmp    rax,r14
    47c2:	72 4c                	jb     4810 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xa0>
	  if (__how_much && __n1 != __n2)
    47c4:	4c 29 e2             	sub    rdx,r12
    47c7:	74 5c                	je     4825 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xb5>
    47c9:	48 85 ed             	test   rbp,rbp
    47cc:	74 2e                	je     47fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x8c>
	  pointer __p = this->_M_data() + __pos1;
    47ce:	4a 8d 34 27          	lea    rsi,[rdi+r12*1]
	    this->_S_move(__p + __n2, __p + __n1, __how_much);
    47d2:	48 8d 3c 2e          	lea    rdi,[rsi+rbp*1]
	if (__n == 1)
    47d6:	48 83 fa 01          	cmp    rdx,0x1
    47da:	74 74                	je     4850 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xe0>
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    47dc:	e8 3f eb ff ff       	call   3320 <memmove@plt>
      { return _M_dataplus._M_p; }
    47e1:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    47e4:	4c 01 e7             	add    rdi,r12
	if (__n == 1)
    47e7:	48 83 fd 01          	cmp    rbp,0x1
    47eb:	74 43                	je     4830 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xc0>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    47ed:	41 0f be f5          	movsx  esi,r13b
    47f1:	48 89 ea             	mov    rdx,rbp
    47f4:	e8 47 e9 ff ff       	call   3140 <memset@plt>
      { return _M_dataplus._M_p; }
    47f9:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      { _M_string_length = __length; }
    47fc:	4c 89 73 08          	mov    QWORD PTR [rbx+0x8],r14
	__c1 = __c2;
    4800:	42 c6 04 37 00       	mov    BYTE PTR [rdi+r14*1],0x0
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
			      size_type(0), __n, __c); }
    4805:	5b                   	pop    rbx
    4806:	5d                   	pop    rbp
    4807:	41 5c                	pop    r12
    4809:	41 5d                	pop    r13
    480b:	41 5e                	pop    r14
    480d:	c3                   	ret
    480e:	66 90                	xchg   ax,ax
	this->_M_mutate(__pos1, __n1, 0, __n2);
    4810:	48 89 df             	mov    rdi,rbx
    4813:	49 89 e8             	mov    r8,rbp
    4816:	31 c9                	xor    ecx,ecx
    4818:	31 d2                	xor    edx,edx
    481a:	4c 89 e6             	mov    rsi,r12
    481d:	e8 4e 30 00 00       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
    4822:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      if (__n2)
    4825:	48 85 ed             	test   rbp,rbp
    4828:	74 d2                	je     47fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x8c>
    482a:	eb b8                	jmp    47e4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x74>
    482c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    4830:	44 88 2f             	mov    BYTE PTR [rdi],r13b
    4833:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
      }
    4836:	eb c4                	jmp    47fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x8c>
    4838:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    483f:	00 
	return _M_is_local() ? size_type(_S_local_capacity)
    4840:	b8 0f 00 00 00       	mov    eax,0xf
    4845:	e9 75 ff ff ff       	jmp    47bf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x4f>
    484a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	__c1 = __c2;
    4850:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    4853:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
    4855:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    4858:	4c 01 e7             	add    rdi,r12
	if (__n == 1)
    485b:	48 83 fd 01          	cmp    rbp,0x1
    485f:	75 8c                	jne    47ed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0x7d>
    4861:	eb cd                	jmp    4830 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]+0xc0>
    4863:	90                   	nop
    4864:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    486b:	00 00 00 00 
    486f:	90                   	nop

0000000000004870 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>:
      _M_localize(basic_string_view<_CharT> __str, char __expc,
    4870:	41 57                	push   r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    4872:	48 8d 47 10          	lea    rax,[rdi+0x10]
    4876:	41 56                	push   r14
    4878:	41 89 ce             	mov    r14d,ecx
    487b:	41 55                	push   r13
    487d:	49 89 d5             	mov    r13,rdx
    4880:	41 54                	push   r12
    4882:	4d 89 c4             	mov    r12,r8
    4885:	55                   	push   rbp
    4886:	48 89 f5             	mov    rbp,rsi
    4889:	53                   	push   rbx
    488a:	48 89 fb             	mov    rbx,rdi
    488d:	48 83 ec 58          	sub    rsp,0x58
    4891:	48 89 07             	mov    QWORD PTR [rdi],rax
      { _M_string_length = __length; }
    4894:	48 c7 47 08 00 00 00 	mov    QWORD PTR [rdi+0x8],0x0
    489b:	00 
    489c:	c6 47 10 00          	mov    BYTE PTR [rdi+0x10],0x0
	if (__loc == locale::classic())
    48a0:	e8 fb e9 ff ff       	call   32a0 <std::locale::classic()@plt>
    48a5:	4c 89 e7             	mov    rdi,r12
    48a8:	48 89 c6             	mov    rsi,rax
    48ab:	e8 c0 e7 ff ff       	call   3070 <std::locale::operator==(std::locale const&) const@plt>
    48b0:	84 c0                	test   al,al
    48b2:	74 1c                	je     48d0 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x60>
      }
    48b4:	48 83 c4 58          	add    rsp,0x58
    48b8:	48 89 d8             	mov    rax,rbx
    48bb:	5b                   	pop    rbx
    48bc:	5d                   	pop    rbp
    48bd:	41 5c                	pop    r12
    48bf:	41 5d                	pop    r13
    48c1:	41 5e                	pop    r14
    48c3:	41 5f                	pop    r15
    48c5:	c3                   	ret
    48c6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    48cd:	00 00 00 
      const size_t __i = _Facet::id._M_id();
    48d0:	48 8d 3d e9 78 01 00 	lea    rdi,[rip+0x178e9]        # 1c1c0 <std::__cxx11::numpunct<char>::id@GLIBCXX_3.4.21>
    48d7:	e8 44 e8 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
    48dc:	48 89 c2             	mov    rdx,rax
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    48df:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
      _GLIBCXX_STD_FACET(numpunct<char>);
    48e3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    48e7:	4c 8b 3c d0          	mov    r15,QWORD PTR [rax+rdx*8]
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    48eb:	4d 85 ff             	test   r15,r15
    48ee:	0f 84 3e eb ff ff    	je     3432 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0] [clone .cold]>
       *
       *  @return  @a char_type representing a decimal point.
      */
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
    48f4:	49 8b 07             	mov    rax,QWORD PTR [r15]
    48f7:	4c 89 ff             	mov    rdi,r15
    48fa:	ff 50 10             	call   QWORD PTR [rax+0x10]
       *
       *  @return  string representing grouping specification.
      */
      string
      grouping() const
      { return this->do_grouping(); }
    48fd:	48 8d 7c 24 30       	lea    rdi,[rsp+0x30]
    4902:	4c 89 fe             	mov    rsi,r15
      { return this->do_decimal_point(); }
    4905:	88 04 24             	mov    BYTE PTR [rsp],al
    4908:	41 89 c4             	mov    r12d,eax
      { return this->do_grouping(); }
    490b:	49 8b 07             	mov    rax,QWORD PTR [r15]
    490e:	ff 50 20             	call   QWORD PTR [rax+0x20]
	if (__grp.empty() && __point == __dot)
    4911:	48 83 7c 24 38 00    	cmp    QWORD PTR [rsp+0x38],0x0
    4917:	75 2f                	jne    4948 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0xd8>
    4919:	41 80 fc 2e          	cmp    r12b,0x2e
    491d:	75 29                	jne    4948 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0xd8>
    491f:	90                   	nop
      { return _M_dataplus._M_p; }
    4920:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
	if (_M_data() == _M_local_data())
    4925:	48 8d 44 24 40       	lea    rax,[rsp+0x40]
    492a:	48 39 c7             	cmp    rdi,rax
    492d:	74 85                	je     48b4 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x44>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    492f:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    4934:	48 8d 70 01          	lea    rsi,[rax+0x1]
    4938:	e8 c3 e8 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dispose(); }
    493d:	e9 72 ff ff ff       	jmp    48b4 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x44>
    4942:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      if (__pos < this->_M_len)
    4948:	48 85 ed             	test   rbp,rbp
    494b:	0f 84 0f 01 00 00    	je     4a60 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1f0>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    4951:	48 89 ea             	mov    rdx,rbp
    4954:	be 2e 00 00 00       	mov    esi,0x2e
    4959:	4c 89 ef             	mov    rdi,r13
    495c:	e8 bf e8 ff ff       	call   3220 <memchr@plt>
    4961:	41 0f be f6          	movsx  esi,r14b
    4965:	48 89 ea             	mov    rdx,rbp
    4968:	4c 89 ef             	mov    rdi,r13
    496b:	49 89 c4             	mov    r12,rax
    496e:	e8 ad e8 ff ff       	call   3220 <memchr@plt>
	  if (__p)
    4973:	4d 85 e4             	test   r12,r12
    4976:	0f 84 cc 00 00 00    	je     4a48 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1d8>
	    __ret = __p - this->_M_str;
    497c:	4d 89 e2             	mov    r10,r12
    497f:	4d 29 ea             	sub    r10,r13
	  if (__p)
    4982:	48 85 c0             	test   rax,rax
    4985:	0f 84 5d 01 00 00    	je     4ae8 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x278>
	    __ret = __p - this->_M_str;
    498b:	4c 29 e8             	sub    rax,r13
    498e:	4c 39 d0             	cmp    rax,r10
    4991:	49 0f 47 c2          	cmova  rax,r10
    4995:	49 89 c4             	mov    r12,rax
	if (__e == __str.npos)
    4998:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
    499c:	0f 84 be 00 00 00    	je     4a60 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1f0>
	const size_t __r = __str.size() - __e;
    49a2:	49 89 eb             	mov    r11,rbp
	__lstr.__resize_and_overwrite(__e * 2 + __r, __overwrite);
    49a5:	49 8d 34 2c          	lea    rsi,[r12+rbp*1]
    resize_and_overwrite(const size_type __n, _Operation __op)
#else
    __resize_and_overwrite(const size_type __n, _Operation __op)
#endif
    {
      reserve(__n);
    49a9:	48 89 df             	mov    rdi,rbx
    49ac:	4c 89 54 24 28       	mov    QWORD PTR [rsp+0x28],r10
	const size_t __r = __str.size() - __e;
    49b1:	4d 29 e3             	sub    r11,r12
    49b4:	4c 89 5c 24 20       	mov    QWORD PTR [rsp+0x20],r11
    49b9:	e8 72 12 00 00       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_string_length; }
    49be:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
      { return this->do_thousands_sep(); }
    49c3:	49 8b 07             	mov    rax,QWORD PTR [r15]
    49c6:	4c 89 ff             	mov    rdi,r15
      { return _M_dataplus._M_p; }
    49c9:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
    49ce:	4f 8d 4c 25 00       	lea    r9,[r13+r12*1+0x0]
    49d3:	4c 8b 33             	mov    r14,QWORD PTR [rbx]
    49d6:	4c 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],r9
      { return _M_string_length; }
    49db:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
      { return _M_dataplus._M_p; }
    49e0:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    49e5:	ff 50 18             	call   QWORD PTR [rax+0x18]
    49e8:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
    49ed:	4c 8b 4c 24 18       	mov    r9,QWORD PTR [rsp+0x18]
    49f2:	4d 89 e8             	mov    r8,r13
    49f5:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    49fa:	0f be f0             	movsx  esi,al
    49fd:	4c 89 f7             	mov    rdi,r14
    4a00:	e8 9b 71 00 00       	call   bba0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)>
	  if (__r)
    4a05:	4c 8b 5c 24 20       	mov    r11,QWORD PTR [rsp+0x20]
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
    4a0a:	48 89 c1             	mov    rcx,rax
	  if (__r)
    4a0d:	4d 85 db             	test   r11,r11
    4a10:	74 20                	je     4a32 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1c2>
	      if (__d != __str.npos)
    4a12:	4c 8b 54 24 28       	mov    r10,QWORD PTR [rsp+0x28]
    4a17:	49 83 fa ff          	cmp    r10,0xffffffffffffffff
    4a1b:	74 0f                	je     4a2c <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1bc>
		  *__end = __point;
    4a1d:	0f b6 04 24          	movzx  eax,BYTE PTR [rsp]
		  ++__end;
    4a21:	48 83 c1 01          	add    rcx,0x1
		  ++__e;
    4a25:	49 83 c4 01          	add    r12,0x1
		  *__end = __point;
    4a29:	88 41 ff             	mov    BYTE PTR [rcx-0x1],al
	      if (__r > 1)
    4a2c:	49 83 fb 01          	cmp    r11,0x1
    4a30:	75 7e                	jne    4ab0 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x240>
	__c1 = __c2;
    4a32:	48 8b 03             	mov    rax,QWORD PTR [rbx]
	  return (__end - __p);
    4a35:	4c 29 f1             	sub    rcx,r14
      { _M_string_length = __length; }
    4a38:	48 89 4b 08          	mov    QWORD PTR [rbx+0x8],rcx
    4a3c:	c6 04 08 00          	mov    BYTE PTR [rax+rcx*1],0x0
    4a40:	e9 db fe ff ff       	jmp    4920 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0xb0>
    4a45:	0f 1f 00             	nop    DWORD PTR [rax]
      size_type __ret = npos;
    4a48:	49 c7 c2 ff ff ff ff 	mov    r10,0xffffffffffffffff
	  if (__p)
    4a4f:	48 85 c0             	test   rax,rax
    4a52:	0f 85 33 ff ff ff    	jne    498b <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x11b>
    4a58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    4a5f:	00 
	__lstr.__resize_and_overwrite(__e * 2 + __r, __overwrite);
    4a60:	48 8d 74 2d 00       	lea    rsi,[rbp+rbp*1+0x0]
    4a65:	48 89 df             	mov    rdi,rbx
	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
    4a68:	4c 01 ed             	add    rbp,r13
    4a6b:	e8 c0 11 00 00       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_string_length; }
    4a70:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
    4a75:	49 8b 07             	mov    rax,QWORD PTR [r15]
    4a78:	4c 89 ff             	mov    rdi,r15
      { return _M_dataplus._M_p; }
    4a7b:	4c 8b 33             	mov    r14,QWORD PTR [rbx]
    4a7e:	4c 8b 64 24 30       	mov    r12,QWORD PTR [rsp+0x30]
      { return _M_string_length; }
    4a83:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
    4a87:	ff 50 18             	call   QWORD PTR [rax+0x18]
    4a8a:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
    4a8e:	49 89 e9             	mov    r9,rbp
    4a91:	4d 89 e8             	mov    r8,r13
    4a94:	0f be f0             	movsx  esi,al
    4a97:	4c 89 e2             	mov    rdx,r12
    4a9a:	4c 89 f7             	mov    rdi,r14
    4a9d:	e8 fe 70 00 00       	call   bba0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)>
    4aa2:	48 89 c1             	mov    rcx,rax
    4aa5:	eb 8b                	jmp    4a32 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1c2>
    4aa7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    4aae:	00 00 
    if (__pos > __size)
    4ab0:	4c 39 e5             	cmp    rbp,r12
    4ab3:	0f 82 7e e9 ff ff    	jb     3437 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0] [clone .cold]+0x5>
	if (__n == 0)
    4ab9:	4c 29 e5             	sub    rbp,r12
    4abc:	75 12                	jne    4ad0 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x260>
		__end += __str.copy(__end, __str.npos, __e);
    4abe:	48 01 e9             	add    rcx,rbp
    4ac1:	e9 6c ff ff ff       	jmp    4a32 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x1c2>
    4ac6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4acd:	00 00 00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    4ad0:	48 89 cf             	mov    rdi,rcx
	__glibcxx_requires_string_len(__str, __n);
	__pos = std::__sv_check(size(), __pos, "basic_string_view::copy");
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
	// _GLIBCXX_RESOLVE_LIB_DEFECTS
	// 2777. basic_string_view::copy should use char_traits::copy
	traits_type::copy(__str, data() + __pos, __rlen);
    4ad3:	4b 8d 74 25 00       	lea    rsi,[r13+r12*1+0x0]
    4ad8:	48 89 ea             	mov    rdx,rbp
    4adb:	e8 d0 e6 ff ff       	call   31b0 <memcpy@plt>
    4ae0:	48 89 c1             	mov    rcx,rax
    4ae3:	eb d9                	jmp    4abe <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x24e>
    4ae5:	0f 1f 00             	nop    DWORD PTR [rax]
    4ae8:	4d 89 d4             	mov    r12,r10
    4aeb:	e9 a8 fe ff ff       	jmp    4998 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]+0x128>

0000000000004af0 <std::thread::_M_thread_deps_never_run()>:
    }
    4af0:	c3                   	ret
    4af1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4af8:	00 00 00 
    4afb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004b00 <std::__format::_Sink<char>::_M_reserve(unsigned long)>:
      _M_reserve(size_t __n)
    4b00:	53                   	push   rbx
    4b01:	48 89 f3             	mov    rbx,rsi
    4b04:	48 89 f8             	mov    rax,rdi
    4b07:	48 83 ec 10          	sub    rsp,0x10
	{ return this->_M_extent_value; }
    4b0b:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
    { return __lhs.base() - __rhs.base(); }
    4b0f:	48 8b 57 18          	mov    rdx,QWORD PTR [rdi+0x18]
    4b13:	48 2b 57 08          	sub    rdx,QWORD PTR [rdi+0x8]
	  __count = this->size() - __offset;
    4b17:	48 89 ce             	mov    rsi,rcx
    4b1a:	48 29 d6             	sub    rsi,rdx
	if (__n <= _M_unused().size())
    4b1d:	48 39 de             	cmp    rsi,rbx
    4b20:	73 28                	jae    4b4a <std::__format::_Sink<char>::_M_reserve(unsigned long)+0x4a>
	if (__n <= _M_span.size()) // Cannot meet the request.
    4b22:	48 39 d9             	cmp    rcx,rbx
    4b25:	72 29                	jb     4b50 <std::__format::_Sink<char>::_M_reserve(unsigned long)+0x50>
	    _M_overflow(); // Make more space available.
    4b27:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    4b2a:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
    4b2f:	ff 12                	call   QWORD PTR [rdx]
    4b31:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    4b36:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
    4b3a:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
    4b3e:	48 2b 48 08          	sub    rcx,QWORD PTR [rax+0x8]
    4b42:	48 29 ca             	sub    rdx,rcx
	    if (__n <= _M_unused().size())
    4b45:	48 39 da             	cmp    rdx,rbx
    4b48:	72 06                	jb     4b50 <std::__format::_Sink<char>::_M_reserve(unsigned long)+0x50>
      }
    4b4a:	48 83 c4 10          	add    rsp,0x10
    4b4e:	5b                   	pop    rbx
    4b4f:	c3                   	ret
    4b50:	48 83 c4 10          	add    rsp,0x10
	return { nullptr };
    4b54:	31 c0                	xor    eax,eax
      }
    4b56:	5b                   	pop    rbx
    4b57:	c3                   	ret
    4b58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    4b5f:	00 

0000000000004b60 <std::__format::_Sink<char>::_M_bump(unsigned long)>:
      { _M_current += __n; return *this; }
    4b60:	48 01 77 18          	add    QWORD PTR [rdi+0x18],rsi
      { _M_next += __n; }
    4b64:	c3                   	ret
    4b65:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4b6c:	00 00 00 
    4b6f:	90                   	nop

0000000000004b70 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >::~_State_impl()>:
      struct _State_impl : public _State
    4b70:	48 8d 05 71 6d 01 00 	lea    rax,[rip+0x16d71]        # 1b8e8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >+0x10>
    4b77:	48 89 07             	mov    QWORD PTR [rdi],rax
    4b7a:	e9 81 e5 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4b7f:	90                   	nop

0000000000004b80 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >::~_State_impl()>:
    4b80:	48 8d 05 61 6d 01 00 	lea    rax,[rip+0x16d61]        # 1b8e8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >+0x10>
    4b87:	53                   	push   rbx
    4b88:	48 89 fb             	mov    rbx,rdi
    4b8b:	48 89 07             	mov    QWORD PTR [rdi],rax
    4b8e:	e8 6d e5 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4b93:	48 89 df             	mov    rdi,rbx
    4b96:	be 20 00 00 00       	mov    esi,0x20
    4b9b:	5b                   	pop    rbx
    4b9c:	e9 5f e6 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4ba1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4ba8:	00 00 00 
    4bab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004bb0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<sequential_relaxed_read> > >::~_State_impl()>:
    4bb0:	48 8d 05 49 6e 01 00 	lea    rax,[rip+0x16e49]        # 1ba00 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<sequential_relaxed_read> > >+0x10>
    4bb7:	48 89 07             	mov    QWORD PTR [rdi],rax
    4bba:	e9 41 e5 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4bbf:	90                   	nop

0000000000004bc0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<sequential_relaxed_read> > >::~_State_impl()>:
    4bc0:	48 8d 05 39 6e 01 00 	lea    rax,[rip+0x16e39]        # 1ba00 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<sequential_relaxed_read> > >+0x10>
    4bc7:	53                   	push   rbx
    4bc8:	48 89 fb             	mov    rbx,rdi
    4bcb:	48 89 07             	mov    QWORD PTR [rdi],rax
    4bce:	e8 2d e5 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4bd3:	48 89 df             	mov    rdi,rbx
    4bd6:	be 20 00 00 00       	mov    esi,0x20
    4bdb:	5b                   	pop    rbx
    4bdc:	e9 1f e6 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4be1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4be8:	00 00 00 
    4beb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004bf0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_sequential_write> > >::~_State_impl()>:
    4bf0:	48 8d 05 e1 6d 01 00 	lea    rax,[rip+0x16de1]        # 1b9d8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_sequential_write> > >+0x10>
    4bf7:	48 89 07             	mov    QWORD PTR [rdi],rax
    4bfa:	e9 01 e5 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4bff:	90                   	nop

0000000000004c00 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_sequential_write> > >::~_State_impl()>:
    4c00:	48 8d 05 d1 6d 01 00 	lea    rax,[rip+0x16dd1]        # 1b9d8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_sequential_write> > >+0x10>
    4c07:	53                   	push   rbx
    4c08:	48 89 fb             	mov    rbx,rdi
    4c0b:	48 89 07             	mov    QWORD PTR [rdi],rax
    4c0e:	e8 ed e4 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4c13:	48 89 df             	mov    rdi,rbx
    4c16:	be 20 00 00 00       	mov    esi,0x20
    4c1b:	5b                   	pop    rbx
    4c1c:	e9 df e5 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4c21:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4c28:	00 00 00 
    4c2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004c30 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >::~_State_impl()>:
    4c30:	48 8d 05 79 6d 01 00 	lea    rax,[rip+0x16d79]        # 1b9b0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >+0x10>
    4c37:	48 89 07             	mov    QWORD PTR [rdi],rax
    4c3a:	e9 c1 e4 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4c3f:	90                   	nop

0000000000004c40 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >::~_State_impl()>:
    4c40:	48 8d 05 69 6d 01 00 	lea    rax,[rip+0x16d69]        # 1b9b0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >+0x10>
    4c47:	53                   	push   rbx
    4c48:	48 89 fb             	mov    rbx,rdi
    4c4b:	48 89 07             	mov    QWORD PTR [rdi],rax
    4c4e:	e8 ad e4 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4c53:	48 89 df             	mov    rdi,rbx
    4c56:	be 20 00 00 00       	mov    esi,0x20
    4c5b:	5b                   	pop    rbx
    4c5c:	e9 9f e5 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4c61:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4c68:	00 00 00 
    4c6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004c70 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >::~_State_impl()>:
    4c70:	48 8d 05 11 6d 01 00 	lea    rax,[rip+0x16d11]        # 1b988 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >+0x10>
    4c77:	48 89 07             	mov    QWORD PTR [rdi],rax
    4c7a:	e9 81 e4 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4c7f:	90                   	nop

0000000000004c80 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >::~_State_impl()>:
    4c80:	48 8d 05 01 6d 01 00 	lea    rax,[rip+0x16d01]        # 1b988 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >+0x10>
    4c87:	53                   	push   rbx
    4c88:	48 89 fb             	mov    rbx,rdi
    4c8b:	48 89 07             	mov    QWORD PTR [rdi],rax
    4c8e:	e8 6d e4 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4c93:	48 89 df             	mov    rdi,rbx
    4c96:	be 20 00 00 00       	mov    esi,0x20
    4c9b:	5b                   	pop    rbx
    4c9c:	e9 5f e5 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4ca1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4ca8:	00 00 00 
    4cab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004cb0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >::~_State_impl()>:
    4cb0:	48 8d 05 a9 6c 01 00 	lea    rax,[rip+0x16ca9]        # 1b960 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >+0x10>
    4cb7:	48 89 07             	mov    QWORD PTR [rdi],rax
    4cba:	e9 41 e4 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4cbf:	90                   	nop

0000000000004cc0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >::~_State_impl()>:
    4cc0:	48 8d 05 99 6c 01 00 	lea    rax,[rip+0x16c99]        # 1b960 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >+0x10>
    4cc7:	53                   	push   rbx
    4cc8:	48 89 fb             	mov    rbx,rdi
    4ccb:	48 89 07             	mov    QWORD PTR [rdi],rax
    4cce:	e8 2d e4 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4cd3:	48 89 df             	mov    rdi,rbx
    4cd6:	be 20 00 00 00       	mov    esi,0x20
    4cdb:	5b                   	pop    rbx
    4cdc:	e9 1f e5 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4ce1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4ce8:	00 00 00 
    4ceb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004cf0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >::~_State_impl()>:
    4cf0:	48 8d 05 41 6c 01 00 	lea    rax,[rip+0x16c41]        # 1b938 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >+0x10>
    4cf7:	48 89 07             	mov    QWORD PTR [rdi],rax
    4cfa:	e9 01 e4 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4cff:	90                   	nop

0000000000004d00 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >::~_State_impl()>:
    4d00:	48 8d 05 31 6c 01 00 	lea    rax,[rip+0x16c31]        # 1b938 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >+0x10>
    4d07:	53                   	push   rbx
    4d08:	48 89 fb             	mov    rbx,rdi
    4d0b:	48 89 07             	mov    QWORD PTR [rdi],rax
    4d0e:	e8 ed e3 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4d13:	48 89 df             	mov    rdi,rbx
    4d16:	be 20 00 00 00       	mov    esi,0x20
    4d1b:	5b                   	pop    rbx
    4d1c:	e9 df e4 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4d21:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4d28:	00 00 00 
    4d2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004d30 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >::~_State_impl()>:
    4d30:	48 8d 05 d9 6b 01 00 	lea    rax,[rip+0x16bd9]        # 1b910 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >+0x10>
    4d37:	48 89 07             	mov    QWORD PTR [rdi],rax
    4d3a:	e9 c1 e3 ff ff       	jmp    3100 <std::thread::_State::~_State()@plt>
    4d3f:	90                   	nop

0000000000004d40 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >::~_State_impl()>:
    4d40:	48 8d 05 c9 6b 01 00 	lea    rax,[rip+0x16bc9]        # 1b910 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >+0x10>
    4d47:	53                   	push   rbx
    4d48:	48 89 fb             	mov    rbx,rdi
    4d4b:	48 89 07             	mov    QWORD PTR [rdi],rax
    4d4e:	e8 ad e3 ff ff       	call   3100 <std::thread::_State::~_State()@plt>
    4d53:	48 89 df             	mov    rdi,rbx
    4d56:	be 20 00 00 00       	mov    esi,0x20
    4d5b:	5b                   	pop    rbx
    4d5c:	e9 9f e4 ff ff       	jmp    3200 <operator delete(void*, unsigned long)@plt>
    4d61:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4d68:	00 00 00 
    4d6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004d70 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()>:
      _M_overflow() override
    4d70:	41 57                	push   r15
    4d72:	41 56                	push   r14
    4d74:	41 55                	push   r13
    4d76:	41 54                	push   r12
    4d78:	55                   	push   rbp
    4d79:	48 89 fd             	mov    rbp,rdi
    4d7c:	53                   	push   rbx
    4d7d:	48 83 ec 38          	sub    rsp,0x38
    { return __lhs.base() - __rhs.base(); }
    4d81:	4c 8b 6f 18          	mov    r13,QWORD PTR [rdi+0x18]
      : _M_current(__i) { }
    4d85:	48 8b 5f 08          	mov    rbx,QWORD PTR [rdi+0x8]
	if (_M_max < 0) // No maximum.
    4d89:	4c 8b a7 30 01 00 00 	mov    r12,QWORD PTR [rdi+0x130]
    { return __lhs.base() - __rhs.base(); }
    4d90:	4d 89 ee             	mov    r14,r13
    4d93:	49 29 de             	sub    r14,rbx
    4d96:	4d 85 e4             	test   r12,r12
    4d99:	0f 88 e9 00 00 00    	js     4e88 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x118>
	else if (_M_count < static_cast<size_t>(_M_max))
    4d9f:	48 8b 87 38 01 00 00 	mov    rax,QWORD PTR [rdi+0x138]
    4da6:	4c 39 e0             	cmp    rax,r12
    4da9:	0f 83 b9 00 00 00    	jae    4e68 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xf8>
	    auto __max = _M_max - _M_count;
    4daf:	49 29 c4             	sub    r12,rax
    4db2:	f3 0f 6f 87 20 01 00 	movdqu xmm0,XMMWORD PTR [rdi+0x120]
    4db9:	00 
	    if (__max < __s.size())
    4dba:	4d 39 f4             	cmp    r12,r14
    4dbd:	4d 0f 47 e6          	cmova  r12,r14
      ostream_iterator(const ostream_iterator& __obj) _GLIBCXX_NOEXCEPT
    4dc1:	0f 12 e0             	movhlps xmm4,xmm0
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }
    4dc4:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
    4dc9:	66 49 0f 7e c7       	movq   r15,xmm0
			sizeof(_ValueTypeI) * __num);
		  return {__first + __num, __result + __num};
		}
	    }

	  for (auto __n = __last - __first; __n > 0; --__n)
    4dce:	66 49 0f 7e e5       	movq   r13,xmm4
    4dd3:	4d 85 e4             	test   r12,r12
    4dd6:	0f 8e 7f 00 00 00    	jle    4e5b <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xeb>
  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    {
      if (__out.width() != 0)
	return __ostream_insert(__out, &__c, 1);
    4ddc:	48 8d 44 24 2f       	lea    rax,[rsp+0x2f]
    4de1:	49 01 dc             	add    r12,rbx
    4de4:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    4de9:	eb 3b                	jmp    4e26 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xb6>
    4deb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    4df0:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    4df5:	ba 01 00 00 00       	mov    edx,0x1
    4dfa:	4c 89 ff             	mov    rdi,r15
    4dfd:	e8 3e e4 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
      {
	__glibcxx_requires_cond(_M_stream != 0,
				_M_message(__gnu_debug::__msg_output_ostream)
				._M_iterator(*this));
	*_M_stream << __value;
	if (_M_string)
    4e02:	4d 85 ed             	test   r13,r13
    4e05:	74 16                	je     4e1d <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xad>
	return __builtin_strlen(__s);
    4e07:	4c 89 ef             	mov    rdi,r13
    4e0a:	e8 e1 e2 ff ff       	call   30f0 <strlen@plt>
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
    4e0f:	4c 89 ee             	mov    rsi,r13
    4e12:	4c 89 ff             	mov    rdi,r15
    4e15:	48 89 c2             	mov    rdx,rax
    4e18:	e8 23 e4 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
	    {
	      if constexpr (_IsMove)
		*__result = std::move(*__first);
	      else
		*__result = *__first;
	      ++__first;
    4e1d:	48 83 c3 01          	add    rbx,0x1
	  for (auto __n = __last - __first; __n > 0; --__n)
    4e21:	4c 39 e3             	cmp    rbx,r12
    4e24:	74 2a                	je     4e50 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xe0>
    4e26:	0f be 33             	movsx  esi,BYTE PTR [rbx]
      operator=(const _Tp& __value)
    4e29:	40 88 74 24 2f       	mov    BYTE PTR [rsp+0x2f],sil
      if (__out.width() != 0)
    4e2e:	49 8b 07             	mov    rax,QWORD PTR [r15]
     *
     *  <em>Minimum field width</em> refers to the number of characters.
    */
    streamsize
    width() const
    { return _M_width; }
    4e31:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    4e35:	49 83 7c 07 10 00    	cmp    QWORD PTR [r15+rax*1+0x10],0x0
    4e3b:	75 b3                	jne    4df0 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x80>
      __out.put(__c);
    4e3d:	4c 89 ff             	mov    rdi,r15
    4e40:	e8 eb e1 ff ff       	call   3030 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt>
      return __out;
    4e45:	eb bb                	jmp    4e02 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x92>
    4e47:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    4e4e:	00 00 
      : _M_current(__i) { }
    4e50:	48 8b 5d 08          	mov    rbx,QWORD PTR [rbp+0x8]
	_M_count += __s.size();
    4e54:	48 8b 85 38 01 00 00 	mov    rax,QWORD PTR [rbp+0x138]
	    _M_out = ranges::copy(__first, std::move(_M_out)).out;
    4e5b:	66 0f 6f 54 24 10    	movdqa xmm2,XMMWORD PTR [rsp+0x10]
    4e61:	0f 11 95 20 01 00 00 	movups XMMWORD PTR [rbp+0x120],xmm2
	_M_count += __s.size();
    4e68:	49 01 c6             	add    r14,rax
      { _M_next = _M_span.begin(); }
    4e6b:	48 89 5d 18          	mov    QWORD PTR [rbp+0x18],rbx
	_M_count += __s.size();
    4e6f:	4c 89 b5 38 01 00 00 	mov    QWORD PTR [rbp+0x138],r14
      }
    4e76:	48 83 c4 38          	add    rsp,0x38
    4e7a:	5b                   	pop    rbx
    4e7b:	5d                   	pop    rbp
    4e7c:	41 5c                	pop    r12
    4e7e:	41 5d                	pop    r13
    4e80:	41 5e                	pop    r14
    4e82:	41 5f                	pop    r15
    4e84:	c3                   	ret
    4e85:	0f 1f 00             	nop    DWORD PTR [rax]
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }
    4e88:	f3 0f 6f 8f 20 01 00 	movdqu xmm1,XMMWORD PTR [rdi+0x120]
    4e8f:	00 
    4e90:	0f 12 e9             	movhlps xmm5,xmm1
    4e93:	0f 29 4c 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm1
    4e98:	66 49 0f 7e cf       	movq   r15,xmm1
    4e9d:	66 49 0f 7e ec       	movq   r12,xmm5
    4ea2:	4d 85 f6             	test   r14,r14
    4ea5:	7e 6d                	jle    4f14 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x1a4>
	return __ostream_insert(__out, &__c, 1);
    4ea7:	48 8d 44 24 2f       	lea    rax,[rsp+0x2f]
    4eac:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    4eb1:	eb 3b                	jmp    4eee <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x17e>
    4eb3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    4eb8:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    4ebd:	ba 01 00 00 00       	mov    edx,0x1
    4ec2:	4c 89 ff             	mov    rdi,r15
    4ec5:	e8 76 e3 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
	if (_M_string)
    4eca:	4d 85 e4             	test   r12,r12
    4ecd:	74 16                	je     4ee5 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x175>
    4ecf:	4c 89 e7             	mov    rdi,r12
    4ed2:	e8 19 e2 ff ff       	call   30f0 <strlen@plt>
	__ostream_insert(__out, __s,
    4ed7:	4c 89 e6             	mov    rsi,r12
    4eda:	4c 89 ff             	mov    rdi,r15
    4edd:	48 89 c2             	mov    rdx,rax
    4ee0:	e8 5b e3 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
	      ++__first;
    4ee5:	48 83 c3 01          	add    rbx,0x1
	  for (auto __n = __last - __first; __n > 0; --__n)
    4ee9:	49 39 dd             	cmp    r13,rbx
    4eec:	74 22                	je     4f10 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x1a0>
    4eee:	0f be 33             	movsx  esi,BYTE PTR [rbx]
      operator=(const _Tp& __value)
    4ef1:	40 88 74 24 2f       	mov    BYTE PTR [rsp+0x2f],sil
      if (__out.width() != 0)
    4ef6:	49 8b 07             	mov    rax,QWORD PTR [r15]
    4ef9:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    4efd:	49 83 7c 07 10 00    	cmp    QWORD PTR [r15+rax*1+0x10],0x0
    4f03:	75 b3                	jne    4eb8 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x148>
      __out.put(__c);
    4f05:	4c 89 ff             	mov    rdi,r15
    4f08:	e8 23 e1 ff ff       	call   3030 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt>
      return __out;
    4f0d:	eb bb                	jmp    4eca <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0x15a>
    4f0f:	90                   	nop
    4f10:	48 8b 5d 08          	mov    rbx,QWORD PTR [rbp+0x8]
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
    4f14:	66 0f 6f 5c 24 10    	movdqa xmm3,XMMWORD PTR [rsp+0x10]
	_M_count += __s.size();
    4f1a:	48 8b 85 38 01 00 00 	mov    rax,QWORD PTR [rbp+0x138]
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
    4f21:	0f 11 9d 20 01 00 00 	movups XMMWORD PTR [rbp+0x120],xmm3
    4f28:	e9 3b ff ff ff       	jmp    4e68 <std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >::_M_overflow()+0xf8>
    4f2d:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4f34:	00 00 00 
    4f37:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    4f3e:	00 00 

0000000000004f40 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()>:
      _M_overflow() override
    4f40:	41 57                	push   r15
    4f42:	41 56                	push   r14
    4f44:	41 55                	push   r13
    4f46:	41 54                	push   r12
    4f48:	49 89 fc             	mov    r12,rdi
    4f4b:	55                   	push   rbp
    4f4c:	53                   	push   rbx
    4f4d:	48 83 ec 08          	sub    rsp,0x8
    { return __lhs.base() - __rhs.base(); }
    4f51:	4c 8b 7f 18          	mov    r15,QWORD PTR [rdi+0x18]
      : _M_current(__i) { }
    4f55:	48 8b 5f 08          	mov    rbx,QWORD PTR [rdi+0x8]
	if (_M_max < 0) // No maximum.
    4f59:	4c 8b af 28 01 00 00 	mov    r13,QWORD PTR [rdi+0x128]
    { return __lhs.base() - __rhs.base(); }
    4f60:	4d 89 fe             	mov    r14,r15
    4f63:	49 29 de             	sub    r14,rbx
    4f66:	4d 85 ed             	test   r13,r13
    4f69:	0f 88 c1 00 00 00    	js     5030 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xf0>
	else if (_M_count < static_cast<size_t>(_M_max))
    4f6f:	48 8b 87 30 01 00 00 	mov    rax,QWORD PTR [rdi+0x130]
    4f76:	4c 39 e8             	cmp    rax,r13
    4f79:	0f 83 7e 00 00 00    	jae    4ffd <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xbd>
	    auto __max = _M_max - _M_count;
    4f7f:	49 29 c5             	sub    r13,rax
    4f82:	48 8b af 20 01 00 00 	mov    rbp,QWORD PTR [rdi+0x120]
	    if (__max < __s.size())
    4f89:	4d 39 f5             	cmp    r13,r14
    4f8c:	4d 0f 47 ee          	cmova  r13,r14
    4f90:	4d 85 ed             	test   r13,r13
    4f93:	7e 60                	jle    4ff5 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xb5>
    4f95:	49 01 dd             	add    r13,rbx
    4f98:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4f9f:	00 00 00 00 
    4fa3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4faa:	00 00 00 00 
    4fae:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    4fb5:	00 00 00 00 
    4fb9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      { return __normal_iterator(_M_current++); }
    4fc0:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
		*__result = *__first;
    4fc4:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
    4fc7:	48 8d 48 01          	lea    rcx,[rax+0x1]
    4fcb:	48 89 4d 18          	mov    QWORD PTR [rbp+0x18],rcx
	*_M_next++ = __c;
    4fcf:	88 10                	mov    BYTE PTR [rax],dl
    { return __lhs.base() - __rhs.base(); }
    4fd1:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
    4fd5:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    4fd9:	48 3b 45 10          	cmp    rax,QWORD PTR [rbp+0x10]
    4fdd:	74 41                	je     5020 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xe0>
	      ++__first;
    4fdf:	48 83 c3 01          	add    rbx,0x1
	  for (auto __n = __last - __first; __n > 0; --__n)
    4fe3:	4c 39 eb             	cmp    rbx,r13
    4fe6:	75 d8                	jne    4fc0 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x80>
      : _M_current(__i) { }
    4fe8:	49 8b 5c 24 08       	mov    rbx,QWORD PTR [r12+0x8]
	_M_count += __s.size();
    4fed:	49 8b 84 24 30 01 00 	mov    rax,QWORD PTR [r12+0x130]
    4ff4:	00 
	    _M_out = ranges::copy(__first, std::move(_M_out)).out;
    4ff5:	49 89 ac 24 20 01 00 	mov    QWORD PTR [r12+0x120],rbp
    4ffc:	00 
	_M_count += __s.size();
    4ffd:	49 01 c6             	add    r14,rax
      { _M_next = _M_span.begin(); }
    5000:	49 89 5c 24 18       	mov    QWORD PTR [r12+0x18],rbx
	_M_count += __s.size();
    5005:	4d 89 b4 24 30 01 00 	mov    QWORD PTR [r12+0x130],r14
    500c:	00 
      }
    500d:	48 83 c4 08          	add    rsp,0x8
    5011:	5b                   	pop    rbx
    5012:	5d                   	pop    rbp
    5013:	41 5c                	pop    r12
    5015:	41 5d                	pop    r13
    5017:	41 5e                	pop    r14
    5019:	41 5f                	pop    r15
    501b:	c3                   	ret
    501c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  _M_overflow();
    5020:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    5024:	48 89 ef             	mov    rdi,rbp
    5027:	ff 10                	call   QWORD PTR [rax]
      }
    5029:	eb b4                	jmp    4fdf <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x9f>
    502b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    5030:	48 8b af 20 01 00 00 	mov    rbp,QWORD PTR [rdi+0x120]
    5037:	4d 85 f6             	test   r14,r14
    503a:	7e 31                	jle    506d <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x12d>
    503c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      { return __normal_iterator(_M_current++); }
    5040:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
		*__result = *__first;
    5044:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
    5047:	48 8d 48 01          	lea    rcx,[rax+0x1]
    504b:	48 89 4d 18          	mov    QWORD PTR [rbp+0x18],rcx
	*_M_next++ = __c;
    504f:	88 10                	mov    BYTE PTR [rax],dl
    { return __lhs.base() - __rhs.base(); }
    5051:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
    5055:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    5059:	48 3b 45 10          	cmp    rax,QWORD PTR [rbp+0x10]
    505d:	74 29                	je     5088 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x148>
	      ++__first;
    505f:	48 83 c3 01          	add    rbx,0x1
	  for (auto __n = __last - __first; __n > 0; --__n)
    5063:	49 39 df             	cmp    r15,rbx
    5066:	75 d8                	jne    5040 <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x100>
      : _M_current(__i) { }
    5068:	49 8b 5c 24 08       	mov    rbx,QWORD PTR [r12+0x8]
	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
    506d:	49 89 ac 24 20 01 00 	mov    QWORD PTR [r12+0x120],rbp
    5074:	00 
	_M_count += __s.size();
    5075:	49 8b 84 24 30 01 00 	mov    rax,QWORD PTR [r12+0x130]
    507c:	00 
    507d:	e9 7b ff ff ff       	jmp    4ffd <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0xbd>
    5082:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  _M_overflow();
    5088:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    508c:	48 89 ef             	mov    rdi,rbp
    508f:	ff 10                	call   QWORD PTR [rax]
      }
    5091:	eb cc                	jmp    505f <std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow()+0x11f>
    5093:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    509a:	00 00 00 
    509d:	0f 1f 00             	nop    DWORD PTR [rax]

00000000000050a0 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)>:
      _M_on_chars(iterator __last) override
    50a0:	41 56                	push   r14
    50a2:	41 55                	push   r13
    50a4:	41 54                	push   r12
    50a6:	55                   	push   rbp
    50a7:	53                   	push   rbx
	_M_fc.advance_to(__format::__write(_M_fc.out(), __str));
    50a8:	4c 8b 77 30          	mov    r14,QWORD PTR [rdi+0x30]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    50ac:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
      iterator out() { return std::move(_M_out); }
    50b0:	49 8b 6e 10          	mov    rbp,QWORD PTR [r14+0x10]
	  if (__str.size())
    50b4:	4c 29 ee             	sub    rsi,r13
    50b7:	75 17                	jne    50d0 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x30>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
    50b9:	49 89 6e 10          	mov    QWORD PTR [r14+0x10],rbp
      }
    50bd:	5b                   	pop    rbx
    50be:	5d                   	pop    rbp
    50bf:	41 5c                	pop    r12
    50c1:	41 5d                	pop    r13
    50c3:	41 5e                	pop    r14
    50c5:	c3                   	ret
    50c6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    50cd:	00 00 00 
    { return __lhs.base() - __rhs.base(); }
    50d0:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    50d4:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    50d8:	49 89 f4             	mov    r12,rsi
    50db:	48 89 f8             	mov    rax,rdi
    50de:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    50e2:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    50e5:	48 39 de             	cmp    rsi,rbx
    50e8:	72 4c                	jb     5136 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x96>
    50ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    50f0:	49 39 dc             	cmp    r12,rbx
    50f3:	48 89 da             	mov    rdx,rbx
    50f6:	49 0f 46 d4          	cmovbe rdx,r12
	if (__n == 0)
    50fa:	48 85 d2             	test   rdx,rdx
    50fd:	74 08                	je     5107 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x67>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    50ff:	4c 89 ee             	mov    rsi,r13
    5102:	e8 a9 e0 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    5107:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
      { _M_current += __n; return *this; }
    510b:	48 01 5d 18          	add    QWORD PTR [rbp+0x18],rbx
    510f:	48 89 ef             	mov    rdi,rbp
	this->_M_str += __n;
    5112:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
    5115:	49 29 dc             	sub    r12,rbx
    5118:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    511a:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    511e:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    5122:	48 89 f8             	mov    rax,rdi
    5125:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    5129:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    512c:	49 39 dc             	cmp    r12,rbx
    512f:	73 bf                	jae    50f0 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x50>
	if (__s.size())
    5131:	4d 85 e4             	test   r12,r12
    5134:	74 83                	je     50b9 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*)+0x19>
    5136:	4c 89 e2             	mov    rdx,r12
    5139:	4c 89 ee             	mov    rsi,r13
    513c:	e8 6f e0 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    5141:	4c 01 65 18          	add    QWORD PTR [rbp+0x18],r12
      void advance_to(iterator __it) { _M_out = std::move(__it); }
    5145:	49 89 6e 10          	mov    QWORD PTR [r14+0x10],rbp
      }
    5149:	5b                   	pop    rbx
    514a:	5d                   	pop    rbp
    514b:	41 5c                	pop    r12
    514d:	41 5d                	pop    r13
    514f:	41 5e                	pop    r14
    5151:	c3                   	ret
    5152:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5159:	00 00 00 
    515c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000005160 <non_atomic_write::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) { // At -O2 this loop is completely optimized away
    5160:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    5163:	85 c0                	test   eax,eax
    5165:	74 15                	je     517c <non_atomic_write::operator()()+0x1c>
			x = i;
    5167:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
			y = i;
    516a:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
		for (std::uint32_t i=0; i<niter; ++i) { // At -O2 this loop is completely optimized away
    516e:	31 c0                	xor    eax,eax
			x = i;
    5170:	89 01                	mov    DWORD PTR [rcx],eax
			y = i;
    5172:	89 02                	mov    DWORD PTR [rdx],eax
		for (std::uint32_t i=0; i<niter; ++i) { // At -O2 this loop is completely optimized away
    5174:	83 c0 01             	add    eax,0x1
    5177:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    517a:	72 f4                	jb     5170 <non_atomic_write::operator()()+0x10>
	}
    517c:	c3                   	ret
    517d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000005180 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_write> > >::_M_run()>:
	_GLIBCXX20_CONSTEXPR
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    5180:	48 83 c7 08          	add    rdi,0x8
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
    5184:	e9 d7 ff ff ff       	jmp    5160 <non_atomic_write::operator()()>
    5189:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5190:	00 00 00 
    5193:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    519a:	00 00 00 
    519d:	0f 1f 00             	nop    DWORD PTR [rax]

00000000000051a0 <non_atomic_read::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    51a0:	8b 57 10             	mov    edx,DWORD PTR [rdi+0x10]
    51a3:	85 d2                	test   edx,edx
    51a5:	74 2c                	je     51d3 <non_atomic_read::operator()()+0x33>
			std::uint32_t yy = y;
    51a7:	48 8b 77 08          	mov    rsi,QWORD PTR [rdi+0x8]
			std::uint32_t xx = x;
    51ab:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
		for (std::uint32_t i=0; i<niter; ++i) {
    51ae:	31 c0                	xor    eax,eax
    51b0:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    51b7:	00 00 00 00 
    51bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
			if (xx < yy) { ++count_mismatch; }
    51c0:	44 8b 06             	mov    r8d,DWORD PTR [rsi]
    51c3:	44 39 01             	cmp    DWORD PTR [rcx],r8d
    51c6:	73 04                	jae    51cc <non_atomic_read::operator()()+0x2c>
    51c8:	83 47 14 01          	add    DWORD PTR [rdi+0x14],0x1
		for (std::uint32_t i=0; i<niter; ++i) {
    51cc:	83 c0 01             	add    eax,0x1
    51cf:	39 d0                	cmp    eax,edx
    51d1:	75 ed                	jne    51c0 <non_atomic_read::operator()()+0x20>
	}
    51d3:	c3                   	ret
    51d4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    51db:	00 00 00 
    51de:	66 90                	xchg   ax,ax

00000000000051e0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<non_atomic_read> > >::_M_run()>:
    51e0:	48 83 c7 08          	add    rdi,0x8
    51e4:	e9 b7 ff ff ff       	jmp    51a0 <non_atomic_read::operator()()>
    51e9:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    51f0:	00 00 00 
    51f3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    51fa:	00 00 00 
    51fd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000005200 <relaxed_relaxed_write::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    5200:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    5203:	85 c0                	test   eax,eax
    5205:	74 2c                	je     5233 <relaxed_relaxed_write::operator()()+0x33>
    5207:	31 c0                	xor    eax,eax
    5209:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    5210:	00 00 00 00 
    5214:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    521b:	00 00 00 00 
    521f:	90                   	nop
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
    5220:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    5223:	89 02                	mov    DWORD PTR [rdx],eax
    5225:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
    5229:	89 02                	mov    DWORD PTR [rdx],eax
    522b:	83 c0 01             	add    eax,0x1
    522e:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    5231:	72 ed                	jb     5220 <relaxed_relaxed_write::operator()()+0x20>
	}
    5233:	c3                   	ret
    5234:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    523b:	00 00 00 
    523e:	66 90                	xchg   ax,ax

0000000000005240 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_write> > >::_M_run()>:
    5240:	48 83 c7 08          	add    rdi,0x8
    5244:	e9 b7 ff ff ff       	jmp    5200 <relaxed_relaxed_write::operator()()>
    5249:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5250:	00 00 00 
    5253:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    525a:	00 00 00 
    525d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000005260 <relaxed_relaxed_read::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    5260:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    5263:	85 c0                	test   eax,eax
    5265:	74 2e                	je     5295 <relaxed_relaxed_read::operator()()+0x35>
    5267:	4c 8b 47 08          	mov    r8,QWORD PTR [rdi+0x8]
    526b:	48 8b 37             	mov    rsi,QWORD PTR [rdi]
    526e:	31 c0                	xor    eax,eax
    5270:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    5277:	00 00 00 00 
    527b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
    5280:	41 8b 10             	mov    edx,DWORD PTR [r8]
    5283:	8b 0e                	mov    ecx,DWORD PTR [rsi]
			if (xx < yy) { ++count_mismatch; }
    5285:	39 d1                	cmp    ecx,edx
    5287:	73 04                	jae    528d <relaxed_relaxed_read::operator()()+0x2d>
    5289:	83 47 14 01          	add    DWORD PTR [rdi+0x14],0x1
		for (std::uint32_t i=0; i<niter; ++i) {
    528d:	83 c0 01             	add    eax,0x1
    5290:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    5293:	72 eb                	jb     5280 <relaxed_relaxed_read::operator()()+0x20>
	}
    5295:	c3                   	ret
    5296:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    529d:	00 00 00 

00000000000052a0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_relaxed_read> > >::_M_run()>:
    52a0:	48 83 c7 08          	add    rdi,0x8
    52a4:	e9 b7 ff ff ff       	jmp    5260 <relaxed_relaxed_read::operator()()>
    52a9:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    52b0:	00 00 00 
    52b3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    52ba:	00 00 00 
    52bd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000000052c0 <relaxed_release_write::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    52c0:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    52c3:	85 c0                	test   eax,eax
    52c5:	74 2c                	je     52f3 <relaxed_release_write::operator()()+0x33>
    52c7:	31 c0                	xor    eax,eax
    52c9:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    52d0:	00 00 00 00 
    52d4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    52db:	00 00 00 00 
    52df:	90                   	nop
	__atomic_store_n(&_M_i, __i, int(__m));
    52e0:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    52e3:	89 02                	mov    DWORD PTR [rdx],eax
    52e5:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
    52e9:	89 02                	mov    DWORD PTR [rdx],eax
    52eb:	83 c0 01             	add    eax,0x1
    52ee:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    52f1:	72 ed                	jb     52e0 <relaxed_release_write::operator()()+0x20>
	}
    52f3:	c3                   	ret
    52f4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    52fb:	00 00 00 
    52fe:	66 90                	xchg   ax,ax

0000000000005300 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_release_write> > >::_M_run()>:
    5300:	48 83 c7 08          	add    rdi,0x8
    5304:	e9 b7 ff ff ff       	jmp    52c0 <relaxed_release_write::operator()()>
    5309:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5310:	00 00 00 
    5313:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    531a:	00 00 00 
    531d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000005320 <acquire_relaxed_read::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    5320:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    5323:	85 c0                	test   eax,eax
    5325:	74 34                	je     535b <acquire_relaxed_read::operator()()+0x3b>
    5327:	31 c0                	xor    eax,eax
    5329:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    5330:	00 00 00 00 
    5334:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    533b:	00 00 00 00 
    533f:	90                   	nop
	return __atomic_load_n(&_M_i, int(__m));
    5340:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
    5344:	8b 12                	mov    edx,DWORD PTR [rdx]
    5346:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
    5349:	8b 09                	mov    ecx,DWORD PTR [rcx]
			if (xx < yy) { ++count_mismatch; }
    534b:	39 d1                	cmp    ecx,edx
    534d:	73 04                	jae    5353 <acquire_relaxed_read::operator()()+0x33>
    534f:	83 47 14 01          	add    DWORD PTR [rdi+0x14],0x1
		for (std::uint32_t i=0; i<niter; ++i) {
    5353:	83 c0 01             	add    eax,0x1
    5356:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    5359:	72 e5                	jb     5340 <acquire_relaxed_read::operator()()+0x20>
	}
    535b:	c3                   	ret
    535c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000005360 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<acquire_relaxed_read> > >::_M_run()>:
    5360:	48 83 c7 08          	add    rdi,0x8
    5364:	e9 b7 ff ff ff       	jmp    5320 <acquire_relaxed_read::operator()()>
    5369:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5370:	00 00 00 
    5373:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    537a:	00 00 00 
    537d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000005380 <relaxed_sequential_write::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    5380:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    5383:	85 c0                	test   eax,eax
    5385:	74 2e                	je     53b5 <relaxed_sequential_write::operator()()+0x35>
    5387:	31 c0                	xor    eax,eax
    5389:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    5390:	00 00 00 00 
    5394:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    539b:	00 00 00 00 
    539f:	90                   	nop
	__atomic_store_n(&_M_i, __i, int(__m));
    53a0:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    53a3:	89 c1                	mov    ecx,eax
    53a5:	89 02                	mov    DWORD PTR [rdx],eax
    53a7:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
    53ab:	87 0a                	xchg   DWORD PTR [rdx],ecx
    53ad:	83 c0 01             	add    eax,0x1
    53b0:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    53b3:	72 eb                	jb     53a0 <relaxed_sequential_write::operator()()+0x20>
	}
    53b5:	c3                   	ret
    53b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    53bd:	00 00 00 

00000000000053c0 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<relaxed_sequential_write> > >::_M_run()>:
    53c0:	48 83 c7 08          	add    rdi,0x8
    53c4:	e9 b7 ff ff ff       	jmp    5380 <relaxed_sequential_write::operator()()>
    53c9:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    53d0:	00 00 00 
    53d3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    53da:	00 00 00 
    53dd:	0f 1f 00             	nop    DWORD PTR [rax]

00000000000053e0 <sequential_relaxed_read::operator()()>:
		for (std::uint32_t i=0; i<niter; ++i) {
    53e0:	8b 47 10             	mov    eax,DWORD PTR [rdi+0x10]
    53e3:	85 c0                	test   eax,eax
    53e5:	74 34                	je     541b <sequential_relaxed_read::operator()()+0x3b>
    53e7:	31 c0                	xor    eax,eax
    53e9:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    53f0:	00 00 00 00 
    53f4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    53fb:	00 00 00 00 
    53ff:	90                   	nop
	return __atomic_load_n(&_M_i, int(__m));
    5400:	48 8b 57 08          	mov    rdx,QWORD PTR [rdi+0x8]
    5404:	8b 12                	mov    edx,DWORD PTR [rdx]
    5406:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
    5409:	8b 09                	mov    ecx,DWORD PTR [rcx]
			if (xx < yy) { ++count_mismatch; }
    540b:	39 d1                	cmp    ecx,edx
    540d:	73 04                	jae    5413 <sequential_relaxed_read::operator()()+0x33>
    540f:	83 47 14 01          	add    DWORD PTR [rdi+0x14],0x1
		for (std::uint32_t i=0; i<niter; ++i) {
    5413:	83 c0 01             	add    eax,0x1
    5416:	3b 47 10             	cmp    eax,DWORD PTR [rdi+0x10]
    5419:	72 e5                	jb     5400 <sequential_relaxed_read::operator()()+0x20>
	}
    541b:	c3                   	ret
    541c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000005420 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<sequential_relaxed_read> > >::_M_run()>:
    5420:	48 83 c7 08          	add    rdi,0x8
    5424:	e9 b7 ff ff ff       	jmp    53e0 <sequential_relaxed_read::operator()()>
    5429:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000005430 <std::__format::_Scanner<char>::_M_scan()>:
      _M_scan()
    5430:	41 57                	push   r15
    5432:	41 56                	push   r14
    5434:	41 55                	push   r13
    5436:	41 54                	push   r12
    5438:	55                   	push   rbp
    5439:	48 89 fd             	mov    rbp,rdi
    543c:	53                   	push   rbx
    543d:	48 83 ec 18          	sub    rsp,0x18
	: _M_len(__last - __first), _M_str(std::to_address(__first))
    5441:	4c 8b 77 10          	mov    r14,QWORD PTR [rdi+0x10]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    5445:	48 8b 5f 08          	mov    rbx,QWORD PTR [rdi+0x8]
    5449:	4d 89 f7             	mov    r15,r14
    544c:	49 29 df             	sub    r15,rbx
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    544f:	49 83 ff 02          	cmp    r15,0x2
    5453:	74 1b                	je     5470 <std::__format::_Scanner<char>::_M_scan()+0x40>
      if (__pos < this->_M_len)
    5455:	4d 85 ff             	test   r15,r15
    5458:	75 1f                	jne    5479 <std::__format::_Scanner<char>::_M_scan()+0x49>
      }
    545a:	48 83 c4 18          	add    rsp,0x18
    545e:	5b                   	pop    rbx
    545f:	5d                   	pop    rbp
    5460:	41 5c                	pop    r12
    5462:	41 5d                	pop    r13
    5464:	41 5e                	pop    r14
    5466:	41 5f                	pop    r15
    5468:	c3                   	ret
    5469:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    5470:	80 3b 7b             	cmp    BYTE PTR [rbx],0x7b
    5473:	0f 84 af 03 00 00    	je     5828 <std::__format::_Scanner<char>::_M_scan()+0x3f8>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    5479:	4c 89 fa             	mov    rdx,r15
    547c:	be 7b 00 00 00       	mov    esi,0x7b
    5481:	48 89 df             	mov    rdi,rbx
	    __ret = __p - this->_M_str;
    5484:	49 c7 c5 ff ff ff ff 	mov    r13,0xffffffffffffffff
    548b:	e8 90 dd ff ff       	call   3220 <memchr@plt>
    5490:	4c 89 fa             	mov    rdx,r15
    5493:	be 7d 00 00 00       	mov    esi,0x7d
    5498:	48 89 df             	mov    rdi,rbx
    549b:	49 89 c4             	mov    r12,rax
    549e:	49 29 dc             	sub    r12,rbx
    54a1:	48 85 c0             	test   rax,rax
    54a4:	4d 0f 44 e5          	cmove  r12,r13
    54a8:	e8 73 dd ff ff       	call   3220 <memchr@plt>
    54ad:	48 89 c2             	mov    rdx,rax
    54b0:	48 29 da             	sub    rdx,rbx
    54b3:	48 85 c0             	test   rax,rax
    54b6:	4c 0f 45 ea          	cmovne r13,rdx
      size() const noexcept
    54ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    auto __cmp = __lbr <=> __rbr;
    54c0:	4d 39 ec             	cmp    r12,r13
    54c3:	0f 84 3f 01 00 00    	je     5608 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
    54c9:	0f 82 91 00 00 00    	jb     5560 <std::__format::_Scanner<char>::_M_scan()+0x130>
		if (++__rbr == __fmt.size() || __fmt[__rbr] != '}')
    54cf:	49 8d 55 01          	lea    rdx,[r13+0x1]
    54d3:	4c 39 fa             	cmp    rdx,r15
    54d6:	0f 84 c6 03 00 00    	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
    54dc:	42 80 7c 2b 01 7d    	cmp    BYTE PTR [rbx+r13*1+0x1],0x7d
    54e2:	0f 85 ba 03 00 00    	jne    58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
		_M_on_chars(__last);
    54e8:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
		iterator __last = begin() + __rbr;
    54ec:	48 89 d3             	mov    rbx,rdx
    54ef:	48 03 5d 08          	add    rbx,QWORD PTR [rbp+0x8]
    54f3:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
		_M_on_chars(__last);
    54f8:	48 89 de             	mov    rsi,rbx
    54fb:	48 89 ef             	mov    rdi,rbp
		_M_pc.advance_to(__last + 1);
    54fe:	48 83 c3 01          	add    rbx,0x1
		_M_on_chars(__last);
    5502:	ff 10                	call   QWORD PTR [rax]
	: _M_len(__last - __first), _M_str(std::to_address(__first))
    5504:	4c 8b 75 10          	mov    r14,QWORD PTR [rbp+0x10]
		  __lbr -= __rbr + 1;
    5508:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    550d:	49 8d 44 24 ff       	lea    rax,[r12-0x1]
      { _M_begin = __it; }
    5512:	48 89 5d 08          	mov    QWORD PTR [rbp+0x8],rbx
		  __lbr -= __rbr + 1;
    5516:	48 29 d0             	sub    rax,rdx
      if (__pos < this->_M_len)
    5519:	4d 89 f7             	mov    r15,r14
    551c:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
    5520:	4c 0f 45 e0          	cmovne r12,rax
    5524:	49 29 df             	sub    r15,rbx
    5527:	0f 84 2d ff ff ff    	je     545a <std::__format::_Scanner<char>::_M_scan()+0x2a>
    552d:	4c 89 fa             	mov    rdx,r15
    5530:	be 7d 00 00 00       	mov    esi,0x7d
    5535:	48 89 df             	mov    rdi,rbx
    5538:	e8 e3 dc ff ff       	call   3220 <memchr@plt>
	    __ret = __p - this->_M_str;
    553d:	49 89 c5             	mov    r13,rax
    5540:	49 29 dd             	sub    r13,rbx
	  if (__p)
    5543:	48 85 c0             	test   rax,rax
    5546:	0f 85 74 ff ff ff    	jne    54c0 <std::__format::_Scanner<char>::_M_scan()+0x90>
      size_type __ret = npos;
    554c:	49 c7 c5 ff ff ff ff 	mov    r13,0xffffffffffffffff
	    auto __cmp = __lbr <=> __rbr;
    5553:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
    5557:	0f 84 ab 00 00 00    	je     5608 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
    555d:	0f 1f 00             	nop    DWORD PTR [rax]
		if (__lbr + 1 == __fmt.size()
    5560:	49 8d 44 24 01       	lea    rax,[r12+0x1]
		      || (__rbr == __fmt.npos && __fmt[__lbr + 1] != '{'))
    5565:	49 39 c7             	cmp    r15,rax
    5568:	0f 84 34 03 00 00    	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
    556e:	42 0f b6 44 23 01    	movzx  eax,BYTE PTR [rbx+r12*1+0x1]
    5574:	49 83 fd ff          	cmp    r13,0xffffffffffffffff
    5578:	0f 84 d2 00 00 00    	je     5650 <std::__format::_Scanner<char>::_M_scan()+0x220>
		const bool __is_escape = __fmt[__lbr + 1] == '{';
    557e:	3c 7b                	cmp    al,0x7b
		_M_on_chars(__last);
    5580:	48 8b 55 00          	mov    rdx,QWORD PTR [rbp+0x0]
		const bool __is_escape = __fmt[__lbr + 1] == '{';
    5584:	88 44 24 08          	mov    BYTE PTR [rsp+0x8],al
		_M_on_chars(__last);
    5588:	48 89 ef             	mov    rdi,rbp
		const bool __is_escape = __fmt[__lbr + 1] == '{';
    558b:	41 0f 94 c7          	sete   r15b
    558f:	45 0f b6 ff          	movzx  r15d,r15b
		iterator __last = begin() + __lbr + int(__is_escape);
    5593:	4d 01 e7             	add    r15,r12
    5596:	4c 03 7d 08          	add    r15,QWORD PTR [rbp+0x8]
		_M_on_chars(__last);
    559a:	4c 89 fe             	mov    rsi,r15
		_M_pc.advance_to(__last + 1);
    559d:	49 8d 5f 01          	lea    rbx,[r15+0x1]
		_M_on_chars(__last);
    55a1:	ff 12                	call   QWORD PTR [rdx]
		if (__is_escape)
    55a3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [rsp+0x8]
      constexpr const_iterator end() const noexcept { return _M_end; }
    55a8:	4c 8b 75 10          	mov    r14,QWORD PTR [rbp+0x10]
      { _M_begin = __it; }
    55ac:	48 89 5d 08          	mov    QWORD PTR [rbp+0x8],rbx
		if (__is_escape)
    55b0:	3c 7b                	cmp    al,0x7b
    55b2:	0f 85 b0 00 00 00    	jne    5668 <std::__format::_Scanner<char>::_M_scan()+0x238>
		      __rbr -= __lbr + 2;
    55b8:	49 8d 45 fe          	lea    rax,[r13-0x2]
      if (__pos < this->_M_len)
    55bc:	4d 89 f7             	mov    r15,r14
    55bf:	4c 29 e0             	sub    rax,r12
    55c2:	49 83 fd ff          	cmp    r13,0xffffffffffffffff
    55c6:	4c 0f 45 e8          	cmovne r13,rax
    55ca:	49 29 df             	sub    r15,rbx
    55cd:	0f 84 87 fe ff ff    	je     545a <std::__format::_Scanner<char>::_M_scan()+0x2a>
    55d3:	4c 89 fa             	mov    rdx,r15
    55d6:	be 7b 00 00 00       	mov    esi,0x7b
    55db:	48 89 df             	mov    rdi,rbx
    55de:	e8 3d dc ff ff       	call   3220 <memchr@plt>
	    __ret = __p - this->_M_str;
    55e3:	49 89 c4             	mov    r12,rax
    55e6:	49 29 dc             	sub    r12,rbx
	  if (__p)
    55e9:	48 85 c0             	test   rax,rax
    55ec:	0f 85 ce fe ff ff    	jne    54c0 <std::__format::_Scanner<char>::_M_scan()+0x90>
	    auto __cmp = __lbr <=> __rbr;
    55f2:	49 83 fd ff          	cmp    r13,0xffffffffffffffff
    55f6:	74 10                	je     5608 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
      size_type __ret = npos;
    55f8:	49 c7 c4 ff ff ff ff 	mov    r12,0xffffffffffffffff
    55ff:	e9 cb fe ff ff       	jmp    54cf <std::__format::_Scanner<char>::_M_scan()+0x9f>
    5604:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		_M_on_chars(end());
    5608:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    560c:	4c 89 f6             	mov    rsi,r14
    560f:	48 89 ef             	mov    rdi,rbp
    5612:	ff 10                	call   QWORD PTR [rax]
      { _M_begin = __it; }
    5614:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    5618:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
      }
    561c:	48 83 c4 18          	add    rsp,0x18
    5620:	5b                   	pop    rbx
    5621:	5d                   	pop    rbp
    5622:	41 5c                	pop    r12
    5624:	41 5d                	pop    r13
    5626:	41 5e                	pop    r14
    5628:	41 5f                	pop    r15
    562a:	c3                   	ret
    562b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    auto __cmp = __lbr <=> __rbr;
    5630:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
    5634:	74 d2                	je     5608 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
		if (__lbr + 1 == __fmt.size()
    5636:	49 8d 44 24 01       	lea    rax,[r12+0x1]
		      || (__rbr == __fmt.npos && __fmt[__lbr + 1] != '{'))
    563b:	4c 39 f8             	cmp    rax,r15
    563e:	0f 84 5e 02 00 00    	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
    5644:	41 0f b6 45 01       	movzx  eax,BYTE PTR [r13+0x1]
    5649:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    5650:	3c 7b                	cmp    al,0x7b
    5652:	0f 85 4a 02 00 00    	jne    58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
    5658:	49 c7 c5 ff ff ff ff 	mov    r13,0xffffffffffffffff
    565f:	e9 1a ff ff ff       	jmp    557e <std::__format::_Scanner<char>::_M_scan()+0x14e>
    5664:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	if (*__next == '}')
    5668:	41 0f b6 47 01       	movzx  eax,BYTE PTR [r15+0x1]
    566d:	3c 7d                	cmp    al,0x7d
    566f:	0f 84 5b 01 00 00    	je     57d0 <std::__format::_Scanner<char>::_M_scan()+0x3a0>
	else if (*__next == ':')
    5675:	3c 3a                	cmp    al,0x3a
    5677:	0f 84 7b 01 00 00    	je     57f8 <std::__format::_Scanner<char>::_M_scan()+0x3c8>
      if (*__first == '0')
    567d:	3c 30                	cmp    al,0x30
    567f:	0f 84 8b 00 00 00    	je     5710 <std::__format::_Scanner<char>::_M_scan()+0x2e0>
      if ('1' <= *__first && *__first <= '9')
    5685:	8d 50 cf             	lea    edx,[rax-0x31]
    5688:	80 fa 08             	cmp    dl,0x8
    568b:	0f 87 11 02 00 00    	ja     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
	  const unsigned short __id = *__first - '0';
    5691:	66 0f be f0          	movsx  si,al
	  const auto __next = __first + 1;
    5695:	49 8d 4f 02          	lea    rcx,[r15+0x2]
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    5699:	41 0f b6 47 02       	movzx  eax,BYTE PTR [r15+0x2]
	  const unsigned short __id = *__first - '0';
    569e:	83 ee 30             	sub    esi,0x30
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    56a1:	49 39 ce             	cmp    r14,rcx
    56a4:	74 75                	je     571b <std::__format::_Scanner<char>::_M_scan()+0x2eb>
    56a6:	8d 50 d0             	lea    edx,[rax-0x30]
    56a9:	80 fa 09             	cmp    dl,0x9
    56ac:	77 6d                	ja     571b <std::__format::_Scanner<char>::_M_scan()+0x2eb>
    56ae:	48 89 d9             	mov    rcx,rbx
	  unsigned short __val = 0;
    56b1:	31 f6                	xor    esi,esi
		       int __base)
    {
      // __glibcxx_assert(_DecOnly ? __base <= 10 : __base <= 36);

      const int __bits_per_digit = __bit_width(unsigned(__base & 0x3f));
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
    56b3:	41 b8 10 00 00 00    	mov    r8d,0x10
    56b9:	eb 1c                	jmp    56d7 <std::__format::_Scanner<char>::_M_scan()+0x2a7>
    56bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    return true;

	  __unused_bits_lower_bound -= __bits_per_digit;
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
	    // We're definitely not going to overflow.
	    __val = __val * __base + __c;
    56c0:	8d 34 b6             	lea    esi,[rsi+rsi*4]
    56c3:	40 0f b6 ff          	movzx  edi,dil
    56c7:	8d 34 77             	lea    esi,[rdi+rsi*2]
      for (; __first != __last; ++__first)
    56ca:	48 83 c1 01          	add    rcx,0x1
    56ce:	49 39 ce             	cmp    r14,rcx
    56d1:	0f 84 c3 01 00 00    	je     589a <std::__format::_Scanner<char>::_M_scan()+0x46a>
	return static_cast<unsigned char>(__c - '0');
    56d7:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    56da:	8d 78 d0             	lea    edi,[rax-0x30]
	  if (__c >= __base)
    56dd:	40 80 ff 09          	cmp    dil,0x9
    56e1:	0f 87 ae 01 00 00    	ja     5895 <std::__format::_Scanner<char>::_M_scan()+0x465>
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
    56e7:	41 83 e8 04          	sub    r8d,0x4
    56eb:	79 d3                	jns    56c0 <std::__format::_Scanner<char>::_M_scan()+0x290>
      if (__builtin_mul_overflow(__val, __base, &__val)
    56ed:	ba 0a 00 00 00       	mov    edx,0xa
    56f2:	89 f0                	mov    eax,esi
    56f4:	66 f7 e2             	mul    dx
    56f7:	0f 80 a5 01 00 00    	jo     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
	  || __builtin_add_overflow(__val, __c, &__val))
    56fd:	40 0f b6 ff          	movzx  edi,dil
    5701:	66 01 c7             	add    di,ax
    5704:	0f 82 98 01 00 00    	jb     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
    570a:	89 fe                	mov    esi,edi
    570c:	eb bc                	jmp    56ca <std::__format::_Scanner<char>::_M_scan()+0x29a>
    570e:	66 90                	xchg   ax,ax
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    5710:	41 0f b6 47 02       	movzx  eax,BYTE PTR [r15+0x2]
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
    5715:	49 8d 4f 02          	lea    rcx,[r15+0x2]
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    5719:	31 f6                	xor    esi,esi
	    if (!__ptr || !(*__ptr == '}' || *__ptr == ':'))
    571b:	3c 7d                	cmp    al,0x7d
    571d:	74 08                	je     5727 <std::__format::_Scanner<char>::_M_scan()+0x2f7>
    571f:	3c 3a                	cmp    al,0x3a
    5721:	0f 85 7b 01 00 00    	jne    58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
	if (_M_indexing == _Auto)
    5727:	83 7d 18 02          	cmp    DWORD PTR [rbp+0x18],0x2
	    _M_pc.check_arg_id(__id = __i);
    572b:	0f b7 f6             	movzx  esi,si
	if (_M_indexing == _Auto)
    572e:	0f 84 6e 01 00 00    	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
		_M_pc.advance_to(++__ptr);
    5734:	31 c0                	xor    eax,eax
	_M_indexing = _Manual;
    5736:	c7 45 18 01 00 00 00 	mov    DWORD PTR [rbp+0x18],0x1
		_M_pc.advance_to(++__ptr);
    573d:	80 39 3a             	cmp    BYTE PTR [rcx],0x3a
    5740:	0f 94 c0             	sete   al
    5743:	48 01 c1             	add    rcx,rax
    5746:	48 89 4d 08          	mov    QWORD PTR [rbp+0x8],rcx
	_M_format_arg(__id);
    574a:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    574e:	48 89 ef             	mov    rdi,rbp
    5751:	ff 50 08             	call   QWORD PTR [rax+0x8]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    5754:	48 8b 5d 08          	mov    rbx,QWORD PTR [rbp+0x8]
      constexpr const_iterator end() const noexcept { return _M_end; }
    5758:	4c 8b 75 10          	mov    r14,QWORD PTR [rbp+0x10]
	if (begin() == end() || *begin() != '}')
    575c:	4c 39 f3             	cmp    rbx,r14
    575f:	0f 84 3d 01 00 00    	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
    5765:	80 3b 7d             	cmp    BYTE PTR [rbx],0x7d
    5768:	0f 85 34 01 00 00    	jne    58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
	_M_pc.advance_to(begin() + 1); // Move past '}'
    576e:	48 83 c3 01          	add    rbx,0x1
      if (__pos < this->_M_len)
    5772:	4d 89 f7             	mov    r15,r14
      { _M_begin = __it; }
    5775:	48 89 5d 08          	mov    QWORD PTR [rbp+0x8],rbx
    5779:	49 29 df             	sub    r15,rbx
    577c:	0f 84 d8 fc ff ff    	je     545a <std::__format::_Scanner<char>::_M_scan()+0x2a>
    5782:	4c 89 fa             	mov    rdx,r15
    5785:	be 7b 00 00 00       	mov    esi,0x7b
    578a:	48 89 df             	mov    rdi,rbx
    578d:	e8 8e da ff ff       	call   3220 <memchr@plt>
    5792:	49 89 c5             	mov    r13,rax
	  if (__p)
    5795:	48 85 c0             	test   rax,rax
    5798:	0f 84 d2 00 00 00    	je     5870 <std::__format::_Scanner<char>::_M_scan()+0x440>
	    __ret = __p - this->_M_str;
    579e:	49 89 c4             	mov    r12,rax
    57a1:	4c 89 fa             	mov    rdx,r15
    57a4:	be 7d 00 00 00       	mov    esi,0x7d
    57a9:	48 89 df             	mov    rdi,rbx
    57ac:	49 29 dc             	sub    r12,rbx
    57af:	e8 6c da ff ff       	call   3220 <memchr@plt>
	  if (__p)
    57b4:	48 85 c0             	test   rax,rax
    57b7:	0f 84 73 fe ff ff    	je     5630 <std::__format::_Scanner<char>::_M_scan()+0x200>
	    __ret = __p - this->_M_str;
    57bd:	48 29 d8             	sub    rax,rbx
    57c0:	49 89 c5             	mov    r13,rax
    57c3:	e9 f8 fc ff ff       	jmp    54c0 <std::__format::_Scanner<char>::_M_scan()+0x90>
    57c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    57cf:	00 
	if (_M_indexing == _Manual)
    57d0:	83 7d 18 01          	cmp    DWORD PTR [rbp+0x18],0x1
    57d4:	0f 84 c8 00 00 00    	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
	return _M_next_arg_id++;
    57da:	48 8b 75 20          	mov    rsi,QWORD PTR [rbp+0x20]
	_M_indexing = _Auto;
    57de:	c7 45 18 02 00 00 00 	mov    DWORD PTR [rbp+0x18],0x2
	return _M_next_arg_id++;
    57e5:	48 8d 46 01          	lea    rax,[rsi+0x1]
    57e9:	48 89 45 20          	mov    QWORD PTR [rbp+0x20],rax
    57ed:	e9 58 ff ff ff       	jmp    574a <std::__format::_Scanner<char>::_M_scan()+0x31a>
    57f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	if (_M_indexing == _Manual)
    57f8:	83 7d 18 01          	cmp    DWORD PTR [rbp+0x18],0x1
    57fc:	0f 84 a0 00 00 00    	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
	return _M_next_arg_id++;
    5802:	48 8b 75 20          	mov    rsi,QWORD PTR [rbp+0x20]
	    _M_pc.advance_to(++__next);
    5806:	49 83 c7 02          	add    r15,0x2
	_M_indexing = _Auto;
    580a:	c7 45 18 02 00 00 00 	mov    DWORD PTR [rbp+0x18],0x2
	    _M_pc.advance_to(++__next);
    5811:	4c 89 7d 08          	mov    QWORD PTR [rbp+0x8],r15
	return _M_next_arg_id++;
    5815:	48 8d 46 01          	lea    rax,[rsi+0x1]
    5819:	48 89 45 20          	mov    QWORD PTR [rbp+0x20],rax
      { _M_begin = __it; }
    581d:	e9 28 ff ff ff       	jmp    574a <std::__format::_Scanner<char>::_M_scan()+0x31a>
    5822:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    5828:	80 7b 01 7d          	cmp    BYTE PTR [rbx+0x1],0x7d
    582c:	0f 85 47 fc ff ff    	jne    5479 <std::__format::_Scanner<char>::_M_scan()+0x49>
	    _M_format_arg(_M_pc.next_arg_id());
    5832:	48 8b 07             	mov    rax,QWORD PTR [rdi]
	    _M_pc.advance_to(begin() + 1);
    5835:	48 83 c3 01          	add    rbx,0x1
	if (_M_indexing == _Manual)
    5839:	83 7f 18 01          	cmp    DWORD PTR [rdi+0x18],0x1
	    _M_pc.advance_to(begin() + 1);
    583d:	48 89 5f 08          	mov    QWORD PTR [rdi+0x8],rbx
	    _M_format_arg(_M_pc.next_arg_id());
    5841:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
	if (_M_indexing == _Manual)
    5845:	74 5b                	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
	return _M_next_arg_id++;
    5847:	48 8b 77 20          	mov    rsi,QWORD PTR [rdi+0x20]
	_M_indexing = _Auto;
    584b:	c7 47 18 02 00 00 00 	mov    DWORD PTR [rdi+0x18],0x2
	return _M_next_arg_id++;
    5852:	48 8d 56 01          	lea    rdx,[rsi+0x1]
    5856:	48 89 57 20          	mov    QWORD PTR [rdi+0x20],rdx
      }
    585a:	48 83 c4 18          	add    rsp,0x18
    585e:	5b                   	pop    rbx
    585f:	5d                   	pop    rbp
    5860:	41 5c                	pop    r12
    5862:	41 5d                	pop    r13
    5864:	41 5e                	pop    r14
    5866:	41 5f                	pop    r15
	    _M_format_arg(_M_pc.next_arg_id());
    5868:	ff e0                	jmp    rax
    586a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    5870:	4c 89 fa             	mov    rdx,r15
    5873:	be 7d 00 00 00       	mov    esi,0x7d
    5878:	48 89 df             	mov    rdi,rbx
    587b:	e8 a0 d9 ff ff       	call   3220 <memchr@plt>
	  if (__p)
    5880:	48 85 c0             	test   rax,rax
    5883:	0f 84 7f fd ff ff    	je     5608 <std::__format::_Scanner<char>::_M_scan()+0x1d8>
    5889:	49 c7 c4 ff ff ff ff 	mov    r12,0xffffffffffffffff
    5890:	e9 28 ff ff ff       	jmp    57bd <std::__format::_Scanner<char>::_M_scan()+0x38d>
		&& __first != __start) [[likely]]
    5895:	48 39 cb             	cmp    rbx,rcx
    5898:	74 08                	je     58a2 <std::__format::_Scanner<char>::_M_scan()+0x472>
	    if (!__ptr || !(*__ptr == '}' || *__ptr == ':'))
    589a:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    589d:	e9 79 fe ff ff       	jmp    571b <std::__format::_Scanner<char>::_M_scan()+0x2eb>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    58a2:	e8 a9 d8 ff ff       	call   3150 <abort@plt>
    58a7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    58ae:	00 00 

00000000000058b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    _GLIBCXX23_CONSTEXPR void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    58b0:	48 83 ec 60          	sub    rsp,0x60
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      constexpr char __digits[201] =
    58b4:	66 0f 6f 05 e4 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12ee4]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    58bb:	00 
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    58bc:	89 d1                	mov    ecx,edx
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
    58be:	83 ee 01             	sub    esi,0x1
      constexpr char __digits[201] =
    58c1:	0f 29 44 24 88       	movaps XMMWORD PTR [rsp-0x78],xmm0
    58c6:	66 0f 6f 05 e2 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12ee2]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    58cd:	00 
    58ce:	0f 29 44 24 98       	movaps XMMWORD PTR [rsp-0x68],xmm0
    58d3:	66 0f 6f 05 e5 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12ee5]        # 187c0 <std::__unicode::__v15_1_0::__width_edges+0x340>
    58da:	00 
    58db:	0f 29 44 24 a8       	movaps XMMWORD PTR [rsp-0x58],xmm0
    58e0:	66 0f 6f 05 e8 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12ee8]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x350>
    58e7:	00 
    58e8:	0f 29 44 24 b8       	movaps XMMWORD PTR [rsp-0x48],xmm0
    58ed:	66 0f 6f 05 eb 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12eeb]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x360>
    58f4:	00 
    58f5:	0f 29 44 24 c8       	movaps XMMWORD PTR [rsp-0x38],xmm0
    58fa:	66 0f 6f 05 ee 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12eee]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x370>
    5901:	00 
    5902:	0f 29 44 24 d8       	movaps XMMWORD PTR [rsp-0x28],xmm0
    5907:	66 0f 6f 05 f1 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12ef1]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x380>
    590e:	00 
    590f:	0f 29 44 24 e8       	movaps XMMWORD PTR [rsp-0x18],xmm0
    5914:	66 0f 6f 05 f4 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12ef4]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x390>
    591b:	00 
    591c:	0f 29 44 24 f8       	movaps XMMWORD PTR [rsp-0x8],xmm0
    5921:	66 0f 6f 05 f7 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12ef7]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    5928:	00 
    5929:	0f 29 44 24 08       	movaps XMMWORD PTR [rsp+0x8],xmm0
    592e:	66 0f 6f 05 fa 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12efa]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    5935:	00 
    5936:	0f 29 44 24 18       	movaps XMMWORD PTR [rsp+0x18],xmm0
    593b:	66 0f 6f 05 fd 2e 01 	movdqa xmm0,XMMWORD PTR [rip+0x12efd]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    5942:	00 
    5943:	0f 29 44 24 28       	movaps XMMWORD PTR [rsp+0x28],xmm0
    5948:	66 0f 6f 05 00 2f 01 	movdqa xmm0,XMMWORD PTR [rip+0x12f00]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    594f:	00 
    5950:	0f 29 44 24 38       	movaps XMMWORD PTR [rsp+0x38],xmm0
    5955:	66 0f 6f 05 03 2f 01 	movdqa xmm0,XMMWORD PTR [rip+0x12f03]        # 18860 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    595c:	00 
    595d:	0f 11 44 24 41       	movups XMMWORD PTR [rsp+0x41],xmm0
      while (__val >= 100)
    5962:	83 fa 63             	cmp    edx,0x63
    5965:	76 4d                	jbe    59b4 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x104>
    5967:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    596e:	00 00 
	{
	  auto const __num = (__val % 100) * 2;
    5970:	89 ca                	mov    edx,ecx
    5972:	89 c8                	mov    eax,ecx
    5974:	48 69 d2 1f 85 eb 51 	imul   rdx,rdx,0x51eb851f
    597b:	48 c1 ea 25          	shr    rdx,0x25
    597f:	44 6b c2 64          	imul   r8d,edx,0x64
    5983:	44 29 c0             	sub    eax,r8d
    5986:	41 89 c8             	mov    r8d,ecx
	  __val /= 100;
    5989:	89 d1                	mov    ecx,edx
	  __first[__pos] = __digits[__num + 1];
    598b:	89 f2                	mov    edx,esi
	  auto const __num = (__val % 100) * 2;
    598d:	01 c0                	add    eax,eax
	  __first[__pos] = __digits[__num + 1];
    598f:	44 8d 48 01          	lea    r9d,[rax+0x1]
	  __first[__pos - 1] = __digits[__num];
    5993:	0f b6 44 04 88       	movzx  eax,BYTE PTR [rsp+rax*1-0x78]
	  __first[__pos] = __digits[__num + 1];
    5998:	46 0f b6 4c 0c 88    	movzx  r9d,BYTE PTR [rsp+r9*1-0x78]
    599e:	44 88 0c 17          	mov    BYTE PTR [rdi+rdx*1],r9b
	  __first[__pos - 1] = __digits[__num];
    59a2:	8d 56 ff             	lea    edx,[rsi-0x1]
	  __pos -= 2;
    59a5:	83 ee 02             	sub    esi,0x2
	  __first[__pos - 1] = __digits[__num];
    59a8:	88 04 17             	mov    BYTE PTR [rdi+rdx*1],al
      while (__val >= 100)
    59ab:	41 81 f8 0f 27 00 00 	cmp    r8d,0x270f
    59b2:	77 bc                	ja     5970 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xc0>
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
    59b4:	8d 41 30             	lea    eax,[rcx+0x30]
      if (__val >= 10)
    59b7:	83 f9 09             	cmp    ecx,0x9
    59ba:	76 12                	jbe    59ce <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x11e>
	  auto const __num = __val * 2;
    59bc:	01 c9                	add    ecx,ecx
	  __first[1] = __digits[__num + 1];
    59be:	8d 41 01             	lea    eax,[rcx+0x1]
    59c1:	0f b6 44 04 88       	movzx  eax,BYTE PTR [rsp+rax*1-0x78]
    59c6:	88 47 01             	mov    BYTE PTR [rdi+0x1],al
	  __first[0] = __digits[__num];
    59c9:	0f b6 44 0c 88       	movzx  eax,BYTE PTR [rsp+rcx*1-0x78]
    59ce:	88 07                	mov    BYTE PTR [rdi],al
    }
    59d0:	48 83 c4 60          	add    rsp,0x60
    59d4:	c3                   	ret
    59d5:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    59dc:	00 00 00 
    59df:	90                   	nop

00000000000059e0 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    59e0:	48 83 ec 60          	sub    rsp,0x60
      constexpr char __digits[201] =
    59e4:	66 0f 6f 05 b4 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12db4]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    59eb:	00 
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    59ec:	48 89 d1             	mov    rcx,rdx
      unsigned __pos = __len - 1;
    59ef:	83 ee 01             	sub    esi,0x1
      constexpr char __digits[201] =
    59f2:	0f 29 44 24 88       	movaps XMMWORD PTR [rsp-0x78],xmm0
    59f7:	66 0f 6f 05 b1 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12db1]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    59fe:	00 
    59ff:	0f 29 44 24 98       	movaps XMMWORD PTR [rsp-0x68],xmm0
    5a04:	66 0f 6f 05 b4 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12db4]        # 187c0 <std::__unicode::__v15_1_0::__width_edges+0x340>
    5a0b:	00 
    5a0c:	0f 29 44 24 a8       	movaps XMMWORD PTR [rsp-0x58],xmm0
    5a11:	66 0f 6f 05 b7 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12db7]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x350>
    5a18:	00 
    5a19:	0f 29 44 24 b8       	movaps XMMWORD PTR [rsp-0x48],xmm0
    5a1e:	66 0f 6f 05 ba 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dba]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x360>
    5a25:	00 
    5a26:	0f 29 44 24 c8       	movaps XMMWORD PTR [rsp-0x38],xmm0
    5a2b:	66 0f 6f 05 bd 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dbd]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x370>
    5a32:	00 
    5a33:	0f 29 44 24 d8       	movaps XMMWORD PTR [rsp-0x28],xmm0
    5a38:	66 0f 6f 05 c0 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dc0]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x380>
    5a3f:	00 
    5a40:	0f 29 44 24 e8       	movaps XMMWORD PTR [rsp-0x18],xmm0
    5a45:	66 0f 6f 05 c3 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dc3]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x390>
    5a4c:	00 
    5a4d:	0f 29 44 24 f8       	movaps XMMWORD PTR [rsp-0x8],xmm0
    5a52:	66 0f 6f 05 c6 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dc6]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    5a59:	00 
    5a5a:	0f 29 44 24 08       	movaps XMMWORD PTR [rsp+0x8],xmm0
    5a5f:	66 0f 6f 05 c9 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dc9]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    5a66:	00 
    5a67:	0f 29 44 24 18       	movaps XMMWORD PTR [rsp+0x18],xmm0
    5a6c:	66 0f 6f 05 cc 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dcc]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    5a73:	00 
    5a74:	0f 29 44 24 28       	movaps XMMWORD PTR [rsp+0x28],xmm0
    5a79:	66 0f 6f 05 cf 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dcf]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    5a80:	00 
    5a81:	0f 29 44 24 38       	movaps XMMWORD PTR [rsp+0x38],xmm0
    5a86:	66 0f 6f 05 d2 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12dd2]        # 18860 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    5a8d:	00 
    5a8e:	0f 11 44 24 41       	movups XMMWORD PTR [rsp+0x41],xmm0
      while (__val >= 100)
    5a93:	48 83 fa 63          	cmp    rdx,0x63
    5a97:	76 6f                	jbe    5b08 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)+0x128>
	  auto const __num = (__val % 100) * 2;
    5a99:	49 b9 c3 f5 28 5c 8f 	movabs r9,0x28f5c28f5c28f5c3
    5aa0:	c2 f5 28 
    5aa3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    5aaa:	00 00 00 00 
    5aae:	66 90                	xchg   ax,ax
    5ab0:	48 89 ca             	mov    rdx,rcx
    5ab3:	48 c1 ea 02          	shr    rdx,0x2
    5ab7:	48 89 d0             	mov    rax,rdx
    5aba:	49 f7 e1             	mul    r9
    5abd:	48 89 c8             	mov    rax,rcx
    5ac0:	49 89 d0             	mov    r8,rdx
    5ac3:	48 83 e2 fc          	and    rdx,0xfffffffffffffffc
    5ac7:	49 c1 e8 02          	shr    r8,0x2
    5acb:	4c 01 c2             	add    rdx,r8
    5ace:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    5ad2:	48 c1 e2 02          	shl    rdx,0x2
    5ad6:	48 29 d0             	sub    rax,rdx
    5ad9:	48 89 ca             	mov    rdx,rcx
	  __val /= 100;
    5adc:	4c 89 c1             	mov    rcx,r8
	  __first[__pos] = __digits[__num + 1];
    5adf:	41 89 f0             	mov    r8d,esi
	  auto const __num = (__val % 100) * 2;
    5ae2:	48 01 c0             	add    rax,rax
	  __first[__pos] = __digits[__num + 1];
    5ae5:	44 0f b6 54 04 89    	movzx  r10d,BYTE PTR [rsp+rax*1-0x77]
	  __first[__pos - 1] = __digits[__num];
    5aeb:	0f b6 44 04 88       	movzx  eax,BYTE PTR [rsp+rax*1-0x78]
	  __first[__pos] = __digits[__num + 1];
    5af0:	46 88 14 07          	mov    BYTE PTR [rdi+r8*1],r10b
	  __first[__pos - 1] = __digits[__num];
    5af4:	44 8d 46 ff          	lea    r8d,[rsi-0x1]
	  __pos -= 2;
    5af8:	83 ee 02             	sub    esi,0x2
	  __first[__pos - 1] = __digits[__num];
    5afb:	42 88 04 07          	mov    BYTE PTR [rdi+r8*1],al
      while (__val >= 100)
    5aff:	48 81 fa 0f 27 00 00 	cmp    rdx,0x270f
    5b06:	77 a8                	ja     5ab0 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)+0xd0>
	__first[0] = '0' + __val;
    5b08:	8d 41 30             	lea    eax,[rcx+0x30]
      if (__val >= 10)
    5b0b:	48 83 f9 09          	cmp    rcx,0x9
    5b0f:	76 10                	jbe    5b21 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)+0x141>
	  auto const __num = __val * 2;
    5b11:	48 01 c9             	add    rcx,rcx
	  __first[1] = __digits[__num + 1];
    5b14:	0f b6 44 0c 89       	movzx  eax,BYTE PTR [rsp+rcx*1-0x77]
    5b19:	88 47 01             	mov    BYTE PTR [rdi+0x1],al
	  __first[0] = __digits[__num];
    5b1c:	0f b6 44 0c 88       	movzx  eax,BYTE PTR [rsp+rcx*1-0x78]
    5b21:	88 07                	mov    BYTE PTR [rdi],al
    }
    5b23:	48 83 c4 60          	add    rsp,0x60
    5b27:	c3                   	ret
    5b28:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5b2f:	00 00 00 
    5b32:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    5b39:	00 00 00 
    5b3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000005b40 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>:
      if (__builtin_expect((__last - __first) < __len, 0))
    5b40:	48 89 f1             	mov    rcx,rsi
    5b43:	48 29 f9             	sub    rcx,rdi
    __countl_zero(_Tp __x) noexcept
    {
      using __gnu_cxx::__int_traits;
      constexpr auto _Nd = __int_traits<_Tp>::__digits;

      if (__x == 0)
    5b46:	48 85 d2             	test   rdx,rdx
    5b49:	0f 84 c1 00 00 00    	je     5c10 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0xd0>
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    5b4f:	48 0f bd c2          	bsr    rax,rdx
    5b53:	83 c0 04             	add    eax,0x4
    5b56:	c1 e8 02             	shr    eax,0x2
      if (__builtin_expect((__last - __first) < __len, 0))
    5b59:	41 89 c0             	mov    r8d,eax
    5b5c:	49 39 c8             	cmp    r8,rcx
    5b5f:	0f 8f bb 00 00 00    	jg     5c20 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0xe0>
      constexpr char __digits[] = {
    5b65:	66 0f 6f 05 03 2d 01 	movdqa xmm0,XMMWORD PTR [rip+0x12d03]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    5b6c:	00 
      unsigned __pos = __len - 1;
    5b6d:	83 e8 01             	sub    eax,0x1
      constexpr char __digits[] = {
    5b70:	0f 29 44 24 e8       	movaps XMMWORD PTR [rsp-0x18],xmm0
      while (__val >= 0x100)
    5b75:	48 81 fa ff 00 00 00 	cmp    rdx,0xff
    5b7c:	76 38                	jbe    5bb6 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x76>
    5b7e:	66 90                	xchg   ax,ax
	  auto __num = __val & 0xF;
    5b80:	48 89 d6             	mov    rsi,rdx
	  __first[__pos] = __digits[__num];
    5b83:	89 c1                	mov    ecx,eax
	  auto __num = __val & 0xF;
    5b85:	83 e6 0f             	and    esi,0xf
	  __first[__pos] = __digits[__num];
    5b88:	0f b6 74 34 e8       	movzx  esi,BYTE PTR [rsp+rsi*1-0x18]
    5b8d:	40 88 34 0f          	mov    BYTE PTR [rdi+rcx*1],sil
	  __val >>= 4;
    5b91:	48 89 d1             	mov    rcx,rdx
	  __first[__pos - 1] = __digits[__num];
    5b94:	8d 70 ff             	lea    esi,[rax-0x1]
	  __val >>= 4;
    5b97:	48 c1 ea 08          	shr    rdx,0x8
	  __val >>= 4;
    5b9b:	48 c1 e9 04          	shr    rcx,0x4
	  __pos -= 2;
    5b9f:	83 e8 02             	sub    eax,0x2
	  __num = __val & 0xF;
    5ba2:	83 e1 0f             	and    ecx,0xf
	  __first[__pos - 1] = __digits[__num];
    5ba5:	0f b6 4c 0c e8       	movzx  ecx,BYTE PTR [rsp+rcx*1-0x18]
    5baa:	88 0c 37             	mov    BYTE PTR [rdi+rsi*1],cl
      while (__val >= 0x100)
    5bad:	48 81 fa ff 00 00 00 	cmp    rdx,0xff
    5bb4:	77 ca                	ja     5b80 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x40>
      __res.ptr = __first + __len;
    5bb6:	4a 8d 34 07          	lea    rsi,[rdi+r8*1]
      if (__val >= 0x10)
    5bba:	48 83 fa 0f          	cmp    rdx,0xf
    5bbe:	76 40                	jbe    5c00 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0xc0>
	  const auto __num = __val & 0xF;
    5bc0:	48 89 d0             	mov    rax,rdx
	  __val >>= 4;
    5bc3:	48 c1 ea 04          	shr    rdx,0x4
	  const auto __num = __val & 0xF;
    5bc7:	83 e0 0f             	and    eax,0xf
	  __first[1] = __digits[__num];
    5bca:	0f b6 44 04 e8       	movzx  eax,BYTE PTR [rsp+rax*1-0x18]
    5bcf:	88 47 01             	mov    BYTE PTR [rdi+0x1],al
	  __first[0] = __digits[__val];
    5bd2:	0f b6 44 14 e8       	movzx  eax,BYTE PTR [rsp+rdx*1-0x18]
    5bd7:	88 07                	mov    BYTE PTR [rdi],al
      return __res;
    5bd9:	31 c9                	xor    ecx,ecx
	  return __res;
    5bdb:	48 bf 00 00 00 00 ff 	movabs rdi,0xffffffff00000000
    5be2:	ff ff ff 
    5be5:	31 d2                	xor    edx,edx
    5be7:	48 89 f0             	mov    rax,rsi
    5bea:	89 ce                	mov    esi,ecx
    5bec:	48 89 d1             	mov    rcx,rdx
    5bef:	48 21 f9             	and    rcx,rdi
    5bf2:	48 09 f1             	or     rcx,rsi
    5bf5:	48 89 ca             	mov    rdx,rcx
    }
    5bf8:	c3                   	ret
    5bf9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	__first[0] = __digits[__val];
    5c00:	0f b6 44 14 e8       	movzx  eax,BYTE PTR [rsp+rdx*1-0x18]
    5c05:	eb d0                	jmp    5bd7 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x97>
    5c07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5c0e:	00 00 
      if (__builtin_expect((__last - __first) < __len, 0))
    5c10:	48 85 c9             	test   rcx,rcx
    5c13:	78 0b                	js     5c20 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0xe0>
    5c15:	48 89 fe             	mov    rsi,rdi
    5c18:	b8 30 00 00 00       	mov    eax,0x30
    5c1d:	eb b8                	jmp    5bd7 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x97>
    5c1f:	90                   	nop
    5c20:	b9 4b 00 00 00       	mov    ecx,0x4b
    5c25:	eb b4                	jmp    5bdb <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)+0x9b>
    5c27:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5c2e:	00 00 

0000000000005c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>:
    basic_string<_CharT, _Traits, _Alloc>::
    5c30:	41 56                	push   r14
    5c32:	41 55                	push   r13
    5c34:	41 54                	push   r12
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    5c36:	4c 8d 67 10          	lea    r12,[rdi+0x10]
    5c3a:	55                   	push   rbp
    5c3b:	48 89 f5             	mov    rbp,rsi
    5c3e:	53                   	push   rbx
    5c3f:	48 89 fb             	mov    rbx,rdi
	if (_M_data() == _M_local_data())
    5c42:	4c 3b 27             	cmp    r12,QWORD PTR [rdi]
    5c45:	0f 84 a5 00 00 00    	je     5cf0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xc0>
	return _M_is_local() ? size_type(_S_local_capacity)
    5c4b:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
      if (__res <= __capacity)
    5c4f:	48 39 f0             	cmp    rax,rsi
    5c52:	72 0c                	jb     5c60 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x30>
    }
    5c54:	5b                   	pop    rbx
    5c55:	5d                   	pop    rbp
    5c56:	41 5c                	pop    r12
    5c58:	41 5d                	pop    r13
    5c5a:	41 5e                	pop    r14
    5c5c:	c3                   	ret
    5c5d:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__capacity > max_size())
    5c60:	48 85 f6             	test   rsi,rsi
    5c63:	0f 88 ba 00 00 00    	js     5d23 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xf3>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    5c69:	48 01 c0             	add    rax,rax
    5c6c:	48 39 c6             	cmp    rsi,rax
    5c6f:	72 67                	jb     5cd8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xa8>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    5c71:	48 89 ef             	mov    rdi,rbp
    5c74:	48 83 c7 01          	add    rdi,0x1
    5c78:	78 6a                	js     5ce4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xb4>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    5c7a:	e8 61 d5 ff ff       	call   31e0 <operator new(unsigned long)@plt>
      { return _M_dataplus._M_p; }
    5c7f:	4c 8b 33             	mov    r14,QWORD PTR [rbx]
    5c82:	49 89 c5             	mov    r13,rax
      this->_S_copy(__tmp, _M_data(), length() + 1);
    5c85:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5c89:	48 8d 50 01          	lea    rdx,[rax+0x1]
	if (__n == 1)
    5c8d:	48 85 c0             	test   rax,rax
    5c90:	74 7e                	je     5d10 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xe0>
	if (__n == 0)
    5c92:	48 85 d2             	test   rdx,rdx
    5c95:	75 29                	jne    5cc0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x90>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    5c97:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    5c9b:	4c 89 f7             	mov    rdi,r14
    5c9e:	48 8d 70 01          	lea    rsi,[rax+0x1]
    5ca2:	e8 59 d5 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
    5ca7:	4c 89 2b             	mov    QWORD PTR [rbx],r13
      { _M_allocated_capacity = __capacity; }
    5caa:	48 89 6b 10          	mov    QWORD PTR [rbx+0x10],rbp
    }
    5cae:	5b                   	pop    rbx
    5caf:	5d                   	pop    rbp
    5cb0:	41 5c                	pop    r12
    5cb2:	41 5d                	pop    r13
    5cb4:	41 5e                	pop    r14
    5cb6:	c3                   	ret
    5cb7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5cbe:	00 00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    5cc0:	4c 89 f6             	mov    rsi,r14
    5cc3:	4c 89 ef             	mov    rdi,r13
    5cc6:	e8 e5 d4 ff ff       	call   31b0 <memcpy@plt>
	if (_M_data() == _M_local_data())
    5ccb:	4d 39 f4             	cmp    r12,r14
    5cce:	75 c7                	jne    5c97 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x67>
    5cd0:	eb d5                	jmp    5ca7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x77>
    5cd2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    5cd8:	48 8d 78 01          	lea    rdi,[rax+0x1]
	  __capacity = 2 * __old_capacity;
    5cdc:	48 89 c5             	mov    rbp,rax
	  if (__capacity > max_size())
    5cdf:	48 85 c0             	test   rax,rax
    5ce2:	79 96                	jns    5c7a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x4a>
	    std::__throw_bad_alloc();
    5ce4:	e8 f7 d3 ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
    5ce9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      if (__res <= __capacity)
    5cf0:	48 83 fe 0f          	cmp    rsi,0xf
    5cf4:	0f 86 5a ff ff ff    	jbe    5c54 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x24>
      if (__capacity > max_size())
    5cfa:	48 85 f6             	test   rsi,rsi
    5cfd:	78 24                	js     5d23 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0xf3>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    5cff:	b8 1e 00 00 00       	mov    eax,0x1e
    5d04:	48 39 c6             	cmp    rsi,rax
    5d07:	48 0f 42 e8          	cmovb  rbp,rax
    5d0b:	e9 61 ff ff ff       	jmp    5c71 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x41>
	__c1 = __c2;
    5d10:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
    5d14:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
    5d18:	4d 39 f4             	cmp    r12,r14
    5d1b:	0f 85 76 ff ff ff    	jne    5c97 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x67>
    5d21:	eb 84                	jmp    5ca7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x77>
	std::__throw_length_error(__N("basic_string::_M_create"));
    5d23:	48 8d 3d ee f3 00 00 	lea    rdi,[rip+0xf3ee]        # 15118 <CSWTCH.1110+0x38>
    5d2a:	e8 01 d4 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    5d2f:	90                   	nop

0000000000005d30 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
    5d30:	41 57                	push   r15
	  switch (__type)
    5d32:	48 8d 0d 0b f5 00 00 	lea    rcx,[rip+0xf50b]        # 15244 <CSWTCH.1110+0x164>
    5d39:	0f b6 d2             	movzx  edx,dl
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
    5d3c:	41 56                	push   r14
    5d3e:	41 55                	push   r13
    5d40:	41 54                	push   r12
    5d42:	55                   	push   rbp
    5d43:	48 89 fd             	mov    rbp,rdi
    5d46:	53                   	push   rbx
    5d47:	48 89 f3             	mov    rbx,rsi
    5d4a:	48 83 ec 18          	sub    rsp,0x18
	  switch (__type)
    5d4e:	48 63 04 91          	movsxd rax,DWORD PTR [rcx+rdx*4]
    5d52:	48 01 c8             	add    rax,rcx
    5d55:	ff e0                	jmp    rax
    5d57:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5d5e:	00 00 
    5d60:	48 8b 07             	mov    rax,QWORD PTR [rdi]
		  const bool __neg = __arg < 0;
    5d63:	49 89 c7             	mov    r15,rax
		  if (__neg)
    5d66:	49 89 c5             	mov    r13,rax
		  const bool __neg = __arg < 0;
    5d69:	49 c1 ef 3f          	shr    r15,0x3f
		  if (__neg)
    5d6d:	49 f7 dd             	neg    r13
    5d70:	4c 0f 48 e8          	cmovs  r13,rax
	  if (__value < (unsigned)__base) return __n;
    5d74:	49 83 fd 09          	cmp    r13,0x9
    5d78:	0f 86 ea 04 00 00    	jbe    6268 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x538>
    5d7e:	4c 89 e9             	mov    rcx,r13
      unsigned __n = 1;
    5d81:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    5d86:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    5d8d:	c5 6d 34 
    5d90:	eb 39                	jmp    5dcb <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x9b>
    5d92:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  if (__value < __b3) return __n + 2;
    5d98:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    5d9f:	0f 86 4b 04 00 00    	jbe    61f0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4c0>
	  if (__value < __b4) return __n + 3;
    5da5:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    5dac:	0f 86 6e 04 00 00    	jbe    6220 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4f0>
	  __value /= __b4;
    5db2:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    5db5:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    5db8:	48 f7 e6             	mul    rsi
    5dbb:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    5dbf:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    5dc6:	76 0c                	jbe    5dd4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    5dc8:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    5dcb:	48 83 f9 63          	cmp    rcx,0x63
    5dcf:	77 c7                	ja     5d98 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x68>
    5dd1:	83 c5 01             	add    ebp,0x1
      { return _M_sink->_M_reserve(__n); }
    5dd4:	48 8b 03             	mov    rax,QWORD PTR [rbx]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5dd7:	46 8d 74 3d 00       	lea    r14d,[rbp+r15*1+0x0]
      { return _M_sink->_M_reserve(__n); }
    5ddc:	4c 89 f6             	mov    rsi,r14
    5ddf:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5de2:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5de5:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5de8:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5deb:	48 85 c0             	test   rax,rax
    5dee:	74 28                	je     5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
      { return _M_current; }
    5df0:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      *__ptr = '-';
    5df4:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    5df7:	4c 01 ff             	add    rdi,r15
    5dfa:	4c 89 ea             	mov    rdx,r13
    5dfd:	89 ee                	mov    esi,ebp
    5dff:	e8 dc fb ff ff       	call   59e0 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5e04:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
    5e08:	4c 89 f6             	mov    rsi,r14
    5e0b:	4c 89 e7             	mov    rdi,r12
    5e0e:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5e11:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5e15:	c6 00 01             	mov    BYTE PTR [rax],0x1
	}
    5e18:	48 83 c4 18          	add    rsp,0x18
    5e1c:	5b                   	pop    rbx
    5e1d:	5d                   	pop    rbp
    5e1e:	41 5c                	pop    r12
    5e20:	41 5d                	pop    r13
    5e22:	41 5e                	pop    r14
    5e24:	41 5f                	pop    r15
    5e26:	c3                   	ret
    5e27:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5e2e:	00 00 
    5e30:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
	return __builtin_strlen(__s);
    5e33:	4c 89 ef             	mov    rdi,r13
    5e36:	e8 b5 d2 ff ff       	call   30f0 <strlen@plt>
    5e3b:	49 89 c4             	mov    r12,rax
      { return _M_sink->_M_reserve(__n); }
    5e3e:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    5e41:	4c 89 e6             	mov    rsi,r12
    5e44:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5e47:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5e4a:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5e4d:	48 89 c5             	mov    rbp,rax
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
    5e50:	48 85 c0             	test   rax,rax
    5e53:	74 c3                	je     5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
    5e55:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
    5e59:	4c 89 e2             	mov    rdx,r12
    5e5c:	4c 89 ee             	mov    rsi,r13
    5e5f:	e8 4c d3 ff ff       	call   31b0 <memcpy@plt>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5e64:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    5e68:	4c 89 e6             	mov    rsi,r12
    5e6b:	48 89 ef             	mov    rdi,rbp
    5e6e:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5e71:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5e75:	c6 00 01             	mov    BYTE PTR [rax],0x1
	}
    5e78:	48 83 c4 18          	add    rsp,0x18
    5e7c:	5b                   	pop    rbx
    5e7d:	5d                   	pop    rbp
    5e7e:	41 5c                	pop    r12
    5e80:	41 5d                	pop    r13
    5e82:	41 5e                	pop    r14
    5e84:	41 5f                	pop    r15
    5e86:	c3                   	ret
    5e87:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5e8e:	00 00 
    5e90:	4c 8b 27             	mov    r12,QWORD PTR [rdi]
    5e93:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
    5e97:	eb a5                	jmp    5e3e <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x10e>
    5e99:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  const char* __chars[] = { "false", "true" };
    5ea0:	48 8d 05 89 f2 00 00 	lea    rax,[rip+0xf289]        # 15130 <CSWTCH.1110+0x50>
		  size_t __len = 4 + !__arg;
    5ea7:	44 0f b6 27          	movzx  r12d,BYTE PTR [rdi]
		  const char* __chars[] = { "false", "true" };
    5eab:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    5eaf:	48 8d 05 80 f2 00 00 	lea    rax,[rip+0xf280]        # 15136 <CSWTCH.1110+0x56>
    5eb6:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
      { return _M_sink->_M_reserve(__n); }
    5ebb:	48 8b 06             	mov    rax,QWORD PTR [rsi]
		  size_t __len = 4 + !__arg;
    5ebe:	41 83 f4 01          	xor    r12d,0x1
    5ec2:	45 0f b6 e4          	movzx  r12d,r12b
      { return _M_sink->_M_reserve(__n); }
    5ec6:	48 8b 38             	mov    rdi,QWORD PTR [rax]
		  size_t __len = 4 + !__arg;
    5ec9:	41 83 c4 04          	add    r12d,0x4
    5ecd:	4d 63 ec             	movsxd r13,r12d
      { return _M_sink->_M_reserve(__n); }
    5ed0:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5ed3:	4c 89 ee             	mov    rsi,r13
    5ed6:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5ed9:	48 89 c7             	mov    rdi,rax
		  if (auto __res = __sink_out._M_reserve(__len))
    5edc:	48 85 c0             	test   rax,rax
    5edf:	0f 84 33 ff ff ff    	je     5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    5ee5:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
    5ee9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
    5eed:	48 8b 14 d4          	mov    rdx,QWORD PTR [rsp+rdx*8]
    5ef1:	41 83 fc 08          	cmp    r12d,0x8
    5ef5:	0f 83 75 02 00 00    	jae    6170 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x440>
    5efb:	41 f6 c4 04          	test   r12b,0x4
    5eff:	0f 85 87 03 00 00    	jne    628c <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x55c>
    5f05:	45 85 e4             	test   r12d,r12d
    5f08:	74 0f                	je     5f19 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    5f0a:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    5f0d:	88 08                	mov    BYTE PTR [rax],cl
    5f0f:	41 f6 c4 02          	test   r12b,0x2
    5f13:	0f 85 89 03 00 00    	jne    62a2 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x572>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5f19:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5f1c:	4c 89 ee             	mov    rsi,r13
    5f1f:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5f22:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5f26:	c6 00 01             	mov    BYTE PTR [rax],0x1
	    std::visit_format_arg([&](auto& __arg) {
    5f29:	e9 ea fe ff ff       	jmp    5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5f2e:	66 90                	xchg   ax,ax
      { return _M_sink->_M_reserve(__n); }
    5f30:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    5f33:	be 01 00 00 00       	mov    esi,0x1
    5f38:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5f3b:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5f3e:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5f41:	48 89 c7             	mov    rdi,rax
		  if (auto __res = __sink_out._M_reserve(1))
    5f44:	48 85 c0             	test   rax,rax
    5f47:	0f 84 cb fe ff ff    	je     5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5f4d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
		      *__res.get() = __arg;
    5f51:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5f55:	be 01 00 00 00       	mov    esi,0x1
		      *__res.get() = __arg;
    5f5a:	88 10                	mov    BYTE PTR [rax],dl
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    5f5c:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5f5f:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    5f62:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    5f66:	c6 00 01             	mov    BYTE PTR [rax],0x1
    5f69:	e9 aa fe ff ff       	jmp    5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    5f6e:	66 90                	xchg   ax,ax
    5f70:	8b 07                	mov    eax,DWORD PTR [rdi]
		  const bool __neg = __arg < 0;
    5f72:	41 89 c6             	mov    r14d,eax
		  if (__neg)
    5f75:	41 89 c5             	mov    r13d,eax
		  const bool __neg = __arg < 0;
    5f78:	41 c1 ee 1f          	shr    r14d,0x1f
		  if (__neg)
    5f7c:	41 f7 dd             	neg    r13d
    5f7f:	44 0f 48 e8          	cmovs  r13d,eax
	  if (__value < (unsigned)__base) return __n;
    5f83:	41 83 fd 09          	cmp    r13d,0x9
    5f87:	0f 86 f5 02 00 00    	jbe    6282 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x552>
    5f8d:	44 89 e9             	mov    ecx,r13d
      unsigned __n = 1;
    5f90:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    5f95:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    5f9c:	c5 6d 34 
    5f9f:	eb 38                	jmp    5fd9 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2a9>
    5fa1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    5fa8:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    5fae:	0f 86 0c 02 00 00    	jbe    61c0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x490>
	  if (__value < __b4) return __n + 3;
    5fb4:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    5fba:	0f 86 40 02 00 00    	jbe    6200 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4d0>
	  __value /= __b4;
    5fc0:	89 ca                	mov    edx,ecx
	  __n += 4;
    5fc2:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    5fc5:	48 89 d0             	mov    rax,rdx
    5fc8:	48 f7 e6             	mul    rsi
    5fcb:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    5fcf:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    5fd5:	76 0a                	jbe    5fe1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    5fd7:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    5fd9:	83 f9 63             	cmp    ecx,0x63
    5fdc:	77 ca                	ja     5fa8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x278>
    5fde:	83 c5 01             	add    ebp,0x1
      { return _M_sink->_M_reserve(__n); }
    5fe1:	48 8b 03             	mov    rax,QWORD PTR [rbx]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5fe4:	45 8d 3c 2e          	lea    r15d,[r14+rbp*1]
      { return _M_sink->_M_reserve(__n); }
    5fe8:	4c 89 fe             	mov    rsi,r15
    5feb:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    5fee:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    5ff1:	ff 50 08             	call   QWORD PTR [rax+0x8]
    5ff4:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    5ff7:	48 85 c0             	test   rax,rax
    5ffa:	0f 84 18 fe ff ff    	je     5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    6000:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6004:	45 0f b6 f6          	movzx  r14d,r14b
    6008:	44 89 ea             	mov    edx,r13d
    600b:	89 ee                	mov    esi,ebp
		      *__ptr = '-';
    600d:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6010:	4c 01 f7             	add    rdi,r14
    6013:	e8 98 f8 ff ff       	call   58b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    6018:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
    601c:	4c 89 fe             	mov    rsi,r15
    601f:	4c 89 e7             	mov    rdi,r12
    6022:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    6025:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    6029:	c6 00 01             	mov    BYTE PTR [rax],0x1
    602c:	e9 e7 fd ff ff       	jmp    5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    6031:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    6038:	44 8b 2f             	mov    r13d,DWORD PTR [rdi]
	  if (__value < (unsigned)__base) return __n;
    603b:	41 83 fd 09          	cmp    r13d,0x9
    603f:	0f 86 2d 02 00 00    	jbe    6272 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x542>
    6045:	44 89 e9             	mov    ecx,r13d
      unsigned __n = 1;
    6048:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    604d:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    6054:	c5 6d 34 
    6057:	eb 3c                	jmp    6095 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x365>
    6059:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    6060:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    6066:	0f 86 64 01 00 00    	jbe    61d0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4a0>
	  if (__value < __b4) return __n + 3;
    606c:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    6072:	0f 86 98 01 00 00    	jbe    6210 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4e0>
	  __value /= __b4;
    6078:	89 ca                	mov    edx,ecx
	  __n += 4;
    607a:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    607d:	48 89 d0             	mov    rax,rdx
    6080:	48 f7 e6             	mul    rsi
    6083:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    6087:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    608d:	0f 86 bd 01 00 00    	jbe    6250 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x520>
    6093:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    6095:	83 f9 63             	cmp    ecx,0x63
    6098:	77 c6                	ja     6060 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x330>
    609a:	44 8d 75 01          	lea    r14d,[rbp+0x1]
    609e:	4c 89 f5             	mov    rbp,r14
      { return _M_sink->_M_reserve(__n); }
    60a1:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    60a4:	4c 89 f6             	mov    rsi,r14
    60a7:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    60aa:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    60ad:	ff 50 08             	call   QWORD PTR [rax+0x8]
    60b0:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    60b3:	48 85 c0             	test   rax,rax
    60b6:	0f 84 5c fd ff ff    	je     5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    60bc:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    60c0:	44 89 ea             	mov    edx,r13d
    60c3:	89 ee                	mov    esi,ebp
		      *__ptr = '-';
    60c5:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    60c8:	e8 e3 f7 ff ff       	call   58b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    60cd:	e9 32 fd ff ff       	jmp    5e04 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xd4>
    60d2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    60d8:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
	  if (__value < (unsigned)__base) return __n;
    60db:	49 83 fd 09          	cmp    r13,0x9
    60df:	0f 86 73 01 00 00    	jbe    6258 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x528>
    60e5:	4c 89 e9             	mov    rcx,r13
      unsigned __n = 1;
    60e8:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    60ed:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    60f4:	c5 6d 34 
    60f7:	eb 3e                	jmp    6137 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x407>
    60f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    6100:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    6107:	0f 86 d3 00 00 00    	jbe    61e0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4b0>
	  if (__value < __b4) return __n + 3;
    610d:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    6114:	0f 86 16 01 00 00    	jbe    6230 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x500>
	  __value /= __b4;
    611a:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    611d:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    6120:	48 f7 e6             	mul    rsi
    6123:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    6127:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    612e:	0f 86 0c 01 00 00    	jbe    6240 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x510>
    6134:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    6137:	48 83 f9 63          	cmp    rcx,0x63
    613b:	77 c3                	ja     6100 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x3d0>
    613d:	44 8d 75 01          	lea    r14d,[rbp+0x1]
    6141:	4c 89 f5             	mov    rbp,r14
      { return _M_sink->_M_reserve(__n); }
    6144:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    6147:	4c 89 f6             	mov    rsi,r14
    614a:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    614d:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6150:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6153:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6156:	48 85 c0             	test   rax,rax
    6159:	0f 84 b9 fc ff ff    	je     5e18 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    615f:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      *__ptr = '-';
    6163:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
    6166:	e9 8f fc ff ff       	jmp    5dfa <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xca>
    616b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    6170:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
    6173:	48 89 08             	mov    QWORD PTR [rax],rcx
    6176:	44 89 e1             	mov    ecx,r12d
    6179:	48 8b 74 0a f8       	mov    rsi,QWORD PTR [rdx+rcx*1-0x8]
    617e:	48 89 74 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rsi
    6183:	48 8d 48 08          	lea    rcx,[rax+0x8]
    6187:	48 83 e1 f8          	and    rcx,0xfffffffffffffff8
    618b:	48 29 c8             	sub    rax,rcx
    618e:	41 01 c4             	add    r12d,eax
    6191:	48 29 c2             	sub    rdx,rax
    6194:	41 83 e4 f8          	and    r12d,0xfffffff8
    6198:	41 83 fc 08          	cmp    r12d,0x8
    619c:	0f 82 77 fd ff ff    	jb     5f19 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    61a2:	41 83 e4 f8          	and    r12d,0xfffffff8
    61a6:	31 c0                	xor    eax,eax
    61a8:	89 c6                	mov    esi,eax
    61aa:	83 c0 08             	add    eax,0x8
    61ad:	4c 8b 04 32          	mov    r8,QWORD PTR [rdx+rsi*1]
    61b1:	4c 89 04 31          	mov    QWORD PTR [rcx+rsi*1],r8
    61b5:	44 39 e0             	cmp    eax,r12d
    61b8:	72 ee                	jb     61a8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x478>
    61ba:	e9 5a fd ff ff       	jmp    5f19 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    61bf:	90                   	nop
	  if (__value < __b3) return __n + 2;
    61c0:	83 c5 02             	add    ebp,0x2
    61c3:	e9 19 fe ff ff       	jmp    5fe1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    61c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    61cf:	00 
    61d0:	44 8d 75 02          	lea    r14d,[rbp+0x2]
    61d4:	4c 89 f5             	mov    rbp,r14
    61d7:	e9 c5 fe ff ff       	jmp    60a1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    61dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    61e0:	44 8d 75 02          	lea    r14d,[rbp+0x2]
    61e4:	4c 89 f5             	mov    rbp,r14
    61e7:	e9 58 ff ff ff       	jmp    6144 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    61ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    61f0:	83 c5 02             	add    ebp,0x2
    61f3:	e9 dc fb ff ff       	jmp    5dd4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    61f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    61ff:	00 
	  if (__value < __b4) return __n + 3;
    6200:	83 c5 03             	add    ebp,0x3
    6203:	e9 d9 fd ff ff       	jmp    5fe1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    6208:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    620f:	00 
    6210:	44 8d 75 03          	lea    r14d,[rbp+0x3]
    6214:	4c 89 f5             	mov    rbp,r14
    6217:	e9 85 fe ff ff       	jmp    60a1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    621c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6220:	83 c5 03             	add    ebp,0x3
    6223:	e9 ac fb ff ff       	jmp    5dd4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6228:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    622f:	00 
    6230:	44 8d 75 03          	lea    r14d,[rbp+0x3]
    6234:	4c 89 f5             	mov    rbp,r14
    6237:	e9 08 ff ff ff       	jmp    6144 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    623c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6240:	41 89 ee             	mov    r14d,ebp
    6243:	e9 fc fe ff ff       	jmp    6144 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    6248:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    624f:	00 
    6250:	41 89 ee             	mov    r14d,ebp
    6253:	e9 49 fe ff ff       	jmp    60a1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
	  if (__value < (unsigned)__base) return __n;
    6258:	41 be 01 00 00 00    	mov    r14d,0x1
    625e:	bd 01 00 00 00       	mov    ebp,0x1
    6263:	e9 dc fe ff ff       	jmp    6144 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    6268:	bd 01 00 00 00       	mov    ebp,0x1
    626d:	e9 62 fb ff ff       	jmp    5dd4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6272:	41 be 01 00 00 00    	mov    r14d,0x1
    6278:	bd 01 00 00 00       	mov    ebp,0x1
    627d:	e9 1f fe ff ff       	jmp    60a1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    6282:	bd 01 00 00 00       	mov    ebp,0x1
    6287:	e9 55 fd ff ff       	jmp    5fe1 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    628c:	8b 0a                	mov    ecx,DWORD PTR [rdx]
    628e:	45 89 e4             	mov    r12d,r12d
    6291:	89 08                	mov    DWORD PTR [rax],ecx
    6293:	42 8b 54 22 fc       	mov    edx,DWORD PTR [rdx+r12*1-0x4]
    6298:	42 89 54 20 fc       	mov    DWORD PTR [rax+r12*1-0x4],edx
    629d:	e9 77 fc ff ff       	jmp    5f19 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    62a2:	45 89 e4             	mov    r12d,r12d
    62a5:	42 0f b7 54 22 fe    	movzx  edx,WORD PTR [rdx+r12*1-0x2]
    62ab:	66 42 89 54 20 fe    	mov    WORD PTR [rax+r12*1-0x2],dx
    62b1:	e9 63 fc ff ff       	jmp    5f19 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    62b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    62bd:	00 00 00 

00000000000062c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>:
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    62c0:	41 55                	push   r13
    62c2:	41 54                	push   r12
    62c4:	55                   	push   rbp
    62c5:	48 89 f5             	mov    rbp,rsi
    62c8:	53                   	push   rbx
    62c9:	48 89 d3             	mov    rbx,rdx
      : _M_out(std::move(__out)), _M_max(__max)
    62cc:	48 8d 15 55 57 01 00 	lea    rdx,[rip+0x15755]        # 1ba28 <vtable for std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >+0x10>
    62d3:	66 48 0f 6e c2       	movq   xmm0,rdx
    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
    62d8:	48 81 ec f8 01 00 00 	sub    rsp,0x1f8
      : _M_span(__span), _M_next(__span.begin())
    62df:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    62e6:	00 
    62e7:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x100
    62ee:	00 00 01 00 00 
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    62f3:	4c 8d 6c 24 40       	lea    r13,[rsp+0x40]
      : _M_out(std::move(__out)), _M_max(__max)
    62f8:	66 48 0f 6e c8       	movq   xmm1,rax
      : _M_span(__span), _M_next(__span.begin())
    62fd:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    6304:	00 
    6305:	4c 8d 64 24 70       	lea    r12,[rsp+0x70]
      : _M_out(std::move(__out)), _M_max(__max)
    630a:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    630e:	48 89 bc 24 d0 01 00 	mov    QWORD PTR [rsp+0x1d0],rdi
    6315:	00 
    6316:	48 c7 84 24 d8 01 00 	mov    QWORD PTR [rsp+0x1d8],0xffffffffffffffff
    631d:	00 ff ff ff ff 
    6322:	48 c7 84 24 e0 01 00 	mov    QWORD PTR [rsp+0x1e0],0x0
    6329:	00 00 00 00 00 
	__sink_out = __out; // Already a sink iterator, safe to use post-move.
    632e:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
      : _M_out(std::move(__out)), _M_max(__max)
    6333:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    633a:	00 
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    633b:	48 83 fe 02          	cmp    rsi,0x2
    633f:	0f 84 b3 00 00 00    	je     63f8 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x138>
    6345:	f3 0f 6f 01          	movdqu xmm0,XMMWORD PTR [rcx]
      basic_format_context(basic_format_args<basic_format_context> __args,
    6349:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
      : _M_args(__args), _M_out(std::move(__out))
    634e:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
    6353:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
		     ? _Context(__args, __sink_out)
    6358:	4d 85 c0             	test   r8,r8
    635b:	0f 84 7f 00 00 00    	je     63e0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x120>
    : _M_loc(__loc), _M_hasval(true)
    6361:	48 8d 7c 24 58       	lea    rdi,[rsp+0x58]
    6366:	4c 89 c6             	mov    rsi,r8
    6369:	e8 22 ce ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    636e:	c6 44 24 60 01       	mov    BYTE PTR [rsp+0x60],0x1
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    6373:	66 0f 6f 05 05 25 01 	movdqa xmm0,XMMWORD PTR [rip+0x12505]        # 18880 <std::__unicode::__v15_1_0::__width_edges+0x400>
    637a:	00 
    637b:	48 89 5c 24 78       	mov    QWORD PTR [rsp+0x78],rbx
      __scanner._M_scan();
    6380:	4c 89 e7             	mov    rdi,r12
      { return this->_M_str + this->_M_len; }
    6383:	48 01 eb             	add    rbx,rbp
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    6386:	48 8d 05 c3 56 01 00 	lea    rax,[rip+0x156c3]        # 1ba50 <vtable for std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>+0x10>
    638d:	48 89 9c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbx
    6394:	00 
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    6395:	c7 84 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],0x0
    639c:	00 00 00 00 
      : _Scanner<_CharT>(__str), _M_fc(__fc)
    63a0:	48 89 44 24 70       	mov    QWORD PTR [rsp+0x70],rax
    63a5:	4c 89 ac 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],r13
    63ac:	00 
      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    63ad:	0f 29 84 24 90 00 00 	movaps XMMWORD PTR [rsp+0x90],xmm0
    63b4:	00 
      __scanner._M_scan();
    63b5:	e8 76 f0 ff ff       	call   5430 <std::__format::_Scanner<char>::_M_scan()>
    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    63ba:	80 7c 24 60 00       	cmp    BYTE PTR [rsp+0x60],0x0
    63bf:	48 8b 5c 24 50       	mov    rbx,QWORD PTR [rsp+0x50]
    63c4:	0f 85 e6 00 00 00    	jne    64b0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x1f0>
    }
    63ca:	48 81 c4 f8 01 00 00 	add    rsp,0x1f8
    63d1:	48 89 d8             	mov    rax,rbx
    63d4:	5b                   	pop    rbx
    63d5:	5d                   	pop    rbp
    63d6:	41 5c                	pop    r12
    63d8:	41 5d                	pop    r13
    63da:	c3                   	ret
    63db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    _Optional_locale() : _M_dummy(), _M_hasval(false) { }
    63e0:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
    63e7:	00 00 
    63e9:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
    63ee:	e9 80 ff ff ff       	jmp    6373 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0xb3>
    63f3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
    63f8:	80 3b 7b             	cmp    BYTE PTR [rbx],0x7b
    63fb:	0f 85 44 ff ff ff    	jne    6345 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x85>
    6401:	80 7b 01 7d          	cmp    BYTE PTR [rbx+0x1],0x7d
    6405:	0f 85 3a ff ff ff    	jne    6345 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x85>
	    bool __done = false;
    640b:	c6 44 24 17 00       	mov    BYTE PTR [rsp+0x17],0x0
	if (__i < _M_packed_size)
    6410:	f6 01 0f             	test   BYTE PTR [rcx],0xf
    6413:	0f 84 a7 00 00 00    	je     64c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x200>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    6419:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
	    __arg._M_val = _M_values[__i];
    641c:	48 8b 71 08          	mov    rsi,QWORD PTR [rcx+0x8]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    6420:	48 c1 ea 04          	shr    rdx,0x4
	    __arg._M_val = _M_values[__i];
    6424:	66 0f 6f 06          	movdqa xmm0,XMMWORD PTR [rsi]
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    6428:	89 d0                	mov    eax,edx
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    642a:	83 e2 1f             	and    edx,0x1f
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    642d:	83 e0 1f             	and    eax,0x1f
	    __arg._M_val = _M_values[__i];
    6430:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
	    std::visit_format_arg([&](auto& __arg) {
    6435:	48 8d 74 24 18       	lea    rsi,[rsp+0x18]
    643a:	88 44 24 30          	mov    BYTE PTR [rsp+0x30],al
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    643e:	4c 8d 6c 24 40       	lea    r13,[rsp+0x40]
	    std::visit_format_arg([&](auto& __arg) {
    6443:	66 48 0f 6e c6       	movq   xmm0,rsi
    6448:	48 8d 74 24 17       	lea    rsi,[rsp+0x17]
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    644d:	4c 8d 64 24 70       	lea    r12,[rsp+0x70]
    6452:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
	    std::visit_format_arg([&](auto& __arg) {
    6456:	66 48 0f 6e d6       	movq   xmm2,rsi
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    645b:	4c 89 e7             	mov    rdi,r12
    645e:	4c 89 ee             	mov    rsi,r13
    6461:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
	    std::visit_format_arg([&](auto& __arg) {
    6466:	66 0f 6c c2          	punpcklqdq xmm0,xmm2
    646a:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
    646f:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    6475:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    647a:	66 0f 6f 44 24 30    	movdqa xmm0,XMMWORD PTR [rsp+0x30]
    6480:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
    6487:	00 
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    6488:	e8 a3 f8 ff ff       	call   5d30 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>
	    if (__done)
    648d:	80 7c 24 17 00       	cmp    BYTE PTR [rsp+0x17],0x0
    6492:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
    6496:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
    649b:	0f 84 a4 fe ff ff    	je     6345 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x85>
		  return __sink_out;
    64a1:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
    64a6:	e9 1f ff ff ff       	jmp    63ca <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x10a>
    64ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    64b0:	48 8d 7c 24 58       	lea    rdi,[rsp+0x58]
    64b5:	e8 06 ce ff ff       	call   32c0 <std::locale::~locale()@plt>
      ~basic_format_context() = default;
    64ba:	e9 0b ff ff ff       	jmp    63ca <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x10a>
    64bf:	90                   	nop
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    64c0:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
    64c3:	31 c0                	xor    eax,eax
    64c5:	31 d2                	xor    edx,edx
    64c7:	48 c1 ee 04          	shr    rsi,0x4
    64cb:	0f 84 64 ff ff ff    	je     6435 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x175>
	  __arg = _M_args[__i];
    64d1:	48 8b 41 08          	mov    rax,QWORD PTR [rcx+0x8]
    64d5:	f3 0f 6f 00          	movdqu xmm0,XMMWORD PTR [rax]
    64d9:	0f b6 50 10          	movzx  edx,BYTE PTR [rax+0x10]
    64dd:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    64e2:	89 d0                	mov    eax,edx
    64e4:	e9 4c ff ff ff       	jmp    6435 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)+0x175>
    64e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000064f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>:
      _S_parse_width_or_precision(iterator __first, iterator __last,
    64f0:	49 89 f9             	mov    r9,rdi
    64f3:	49 89 d2             	mov    r10,rdx
    64f6:	48 89 f7             	mov    rdi,rsi
	if (__format::__is_digit(*__first))
    64f9:	41 0f b6 11          	movzx  edx,BYTE PTR [r9]
    64fd:	48 8d 35 3c fb 00 00 	lea    rsi,[rip+0xfb3c]        # 16040 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
    6504:	80 3c 16 09          	cmp    BYTE PTR [rsi+rdx*1],0x9
    6508:	77 76                	ja     6580 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x90>
    650a:	4c 89 ce             	mov    rsi,r9
	  unsigned short __val = 0;
    650d:	31 c0                	xor    eax,eax
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
    650f:	41 b8 10 00 00 00    	mov    r8d,0x10
    6515:	eb 1b                	jmp    6532 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x42>
    6517:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    651e:	00 00 
	    __val = __val * __base + __c;
    6520:	8d 04 80             	lea    eax,[rax+rax*4]
    6523:	0f b6 c9             	movzx  ecx,cl
      for (; __first != __last; ++__first)
    6526:	48 83 c6 01          	add    rsi,0x1
	    __val = __val * __base + __c;
    652a:	8d 04 41             	lea    eax,[rcx+rax*2]
      for (; __first != __last; ++__first)
    652d:	48 39 f7             	cmp    rdi,rsi
    6530:	74 3e                	je     6570 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x80>
	return static_cast<unsigned char>(__c - '0');
    6532:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
    6535:	8d 4a d0             	lea    ecx,[rdx-0x30]
	  if (__c >= __base)
    6538:	80 f9 09             	cmp    cl,0x9
    653b:	0f 87 af 00 00 00    	ja     65f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x100>
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
    6541:	41 83 e8 04          	sub    r8d,0x4
    6545:	79 d9                	jns    6520 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x30>
      if (__builtin_mul_overflow(__val, __base, &__val)
    6547:	ba 0a 00 00 00       	mov    edx,0xa
    654c:	66 f7 e2             	mul    dx
    654f:	0f 80 a4 00 00 00    	jo     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	  || __builtin_add_overflow(__val, __c, &__val))
    6555:	0f b6 c9             	movzx  ecx,cl
    6558:	66 01 c1             	add    cx,ax
    655b:	0f 82 98 00 00 00    	jb     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
      for (; __first != __last; ++__first)
    6561:	48 83 c6 01          	add    rsi,0x1
	  || __builtin_add_overflow(__val, __c, &__val))
    6565:	89 c8                	mov    eax,ecx
      for (; __first != __last; ++__first)
    6567:	48 39 f7             	cmp    rdi,rsi
    656a:	75 c6                	jne    6532 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x42>
    656c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	    __val = __v;
    6570:	66 41 89 02          	mov    WORD PTR [r10],ax
      }
    6574:	48 89 f0             	mov    rax,rsi
    6577:	c3                   	ret
    6578:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    657f:	00 
    6580:	4c 89 ce             	mov    rsi,r9
	else if (*__first == '{')
    6583:	80 fa 7b             	cmp    dl,0x7b
    6586:	75 ec                	jne    6574 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x84>
	    ++__first;
    6588:	49 8d 71 01          	lea    rsi,[r9+0x1]
	    __arg_id = true;
    658c:	c6 01 01             	mov    BYTE PTR [rcx],0x1
	    if (__first == __last)
    658f:	48 39 fe             	cmp    rsi,rdi
    6592:	74 65                	je     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	    if (*__first == '}')
    6594:	66 41 0f be 41 01    	movsx  ax,BYTE PTR [r9+0x1]
    659a:	3c 7d                	cmp    al,0x7d
    659c:	74 62                	je     6600 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x110>
      if (*__first == '0')
    659e:	3c 30                	cmp    al,0x30
    65a0:	0f 84 81 00 00 00    	je     6627 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x137>
      if ('1' <= *__first && *__first <= '9')
    65a6:	8d 50 cf             	lea    edx,[rax-0x31]
    65a9:	80 fa 08             	cmp    dl,0x8
    65ac:	77 4b                	ja     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	  const auto __next = __first + 1;
    65ae:	49 8d 49 02          	lea    rcx,[r9+0x2]
	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    65b2:	48 39 cf             	cmp    rdi,rcx
    65b5:	74 42                	je     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
    65b7:	41 0f b6 51 02       	movzx  edx,BYTE PTR [r9+0x2]
    65bc:	83 ea 30             	sub    edx,0x30
    65bf:	80 fa 09             	cmp    dl,0x9
    65c2:	76 7c                	jbe    6640 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x150>
	  const unsigned short __id = *__first - '0';
    65c4:	83 e8 30             	sub    eax,0x30
	    return {__id, __next};
    65c7:	48 89 ce             	mov    rsi,rcx
    65ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    65d0:	80 3e 7d             	cmp    BYTE PTR [rsi],0x7d
    65d3:	75 24                	jne    65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	if (_M_indexing == _Auto)
    65d5:	41 83 78 10 02       	cmp    DWORD PTR [r8+0x10],0x2
    65da:	74 1d                	je     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	_M_indexing = _Manual;
    65dc:	41 c7 40 10 01 00 00 	mov    DWORD PTR [r8+0x10],0x1
    65e3:	00 
		__val = __v;
    65e4:	66 41 89 02          	mov    WORD PTR [r10],ax
    65e8:	eb 35                	jmp    661f <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x12f>
    65ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
		&& __first != __start) [[likely]]
    65f0:	49 39 f1             	cmp    r9,rsi
    65f3:	0f 85 77 ff ff ff    	jne    6570 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x80>
      _S_parse_width_or_precision(iterator __first, iterator __last,
    65f9:	50                   	push   rax
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    65fa:	e8 51 cb ff ff       	call   3150 <abort@plt>
    65ff:	90                   	nop
	if (_M_indexing == _Manual)
    6600:	41 83 78 10 01       	cmp    DWORD PTR [r8+0x10],0x1
    6605:	74 f2                	je     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	return _M_next_arg_id++;
    6607:	49 8b 40 18          	mov    rax,QWORD PTR [r8+0x18]
	_M_indexing = _Auto;
    660b:	41 c7 40 10 02 00 00 	mov    DWORD PTR [r8+0x10],0x2
    6612:	00 
	return _M_next_arg_id++;
    6613:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6617:	49 89 50 18          	mov    QWORD PTR [r8+0x18],rdx
	      __val = __pc.next_arg_id();
    661b:	66 41 89 02          	mov    WORD PTR [r10],ax
	    ++__first; // past the '}'
    661f:	48 83 c6 01          	add    rsi,0x1
      }
    6623:	48 89 f0             	mov    rax,rsi
    6626:	c3                   	ret
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
    6627:	49 8d 71 02          	lea    rsi,[r9+0x2]
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    662b:	48 39 f7             	cmp    rdi,rsi
    662e:	0f 94 c2             	sete   dl
	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
    6631:	31 c0                	xor    eax,eax
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    6633:	84 d2                	test   dl,dl
    6635:	74 99                	je     65d0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0xe0>
    6637:	eb c0                	jmp    65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
    6639:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    6640:	49 89 f1             	mov    r9,rsi
	  unsigned short __val = 0;
    6643:	31 c0                	xor    eax,eax
      int __unused_bits_lower_bound = __gnu_cxx::__int_traits<_Tp>::__digits;
    6645:	41 bb 10 00 00 00    	mov    r11d,0x10
    664b:	eb 15                	jmp    6662 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x172>
    664d:	0f 1f 00             	nop    DWORD PTR [rax]
	    __val = __val * __base + __c;
    6650:	8d 04 80             	lea    eax,[rax+rax*4]
    6653:	0f b6 c9             	movzx  ecx,cl
    6656:	8d 04 41             	lea    eax,[rcx+rax*2]
      for (; __first != __last; ++__first)
    6659:	49 83 c1 01          	add    r9,0x1
    665d:	4c 39 cf             	cmp    rdi,r9
    6660:	74 97                	je     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	return static_cast<unsigned char>(__c - '0');
    6662:	41 0f b6 11          	movzx  edx,BYTE PTR [r9]
    6666:	8d 4a d0             	lea    ecx,[rdx-0x30]
	  if (__c >= __base)
    6669:	80 f9 09             	cmp    cl,0x9
    666c:	77 24                	ja     6692 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x1a2>
	  if (__unused_bits_lower_bound >= 0) [[__likely__]]
    666e:	41 83 eb 04          	sub    r11d,0x4
    6672:	79 dc                	jns    6650 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x160>
      if (__builtin_mul_overflow(__val, __base, &__val)
    6674:	ba 0a 00 00 00       	mov    edx,0xa
    6679:	66 f7 e2             	mul    dx
    667c:	0f 80 77 ff ff ff    	jo     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
	  || __builtin_add_overflow(__val, __c, &__val))
    6682:	0f b6 c9             	movzx  ecx,cl
    6685:	66 01 c1             	add    cx,ax
    6688:	0f 82 6b ff ff ff    	jb     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
    668e:	89 c8                	mov    eax,ecx
    6690:	eb c7                	jmp    6659 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x169>
		&& __first != __start) [[likely]]
    6692:	4c 39 ce             	cmp    rsi,r9
    6695:	0f 84 5e ff ff ff    	je     65f9 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x109>
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    669b:	4c 39 cf             	cmp    rdi,r9
	    return __format::__parse_integer(__first, __last);
    669e:	4c 89 ce             	mov    rsi,r9
		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
    66a1:	0f 94 c2             	sete   dl
	    return __format::__parse_integer(__first, __last);
    66a4:	eb 8d                	jmp    6633 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)+0x143>
    66a6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    66ad:	00 00 00 

00000000000066b0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
    66b0:	41 57                	push   r15
	  switch (__type)
    66b2:	48 8d 0d df eb 00 00 	lea    rcx,[rip+0xebdf]        # 15298 <CSWTCH.1110+0x1b8>
    66b9:	0f b6 d2             	movzx  edx,dl
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
    66bc:	41 56                	push   r14
    66be:	41 55                	push   r13
    66c0:	41 54                	push   r12
    66c2:	55                   	push   rbp
    66c3:	48 89 fd             	mov    rbp,rdi
    66c6:	53                   	push   rbx
    66c7:	48 89 f3             	mov    rbx,rsi
    66ca:	48 83 ec 18          	sub    rsp,0x18
	  switch (__type)
    66ce:	48 63 04 91          	movsxd rax,DWORD PTR [rcx+rdx*4]
    66d2:	48 01 c8             	add    rax,rcx
    66d5:	ff e0                	jmp    rax
    66d7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    66de:	00 00 
    66e0:	48 8b 07             	mov    rax,QWORD PTR [rdi]
		  const bool __neg = __arg < 0;
    66e3:	49 89 c7             	mov    r15,rax
		  if (__neg)
    66e6:	49 89 c5             	mov    r13,rax
		  const bool __neg = __arg < 0;
    66e9:	49 c1 ef 3f          	shr    r15,0x3f
		  if (__neg)
    66ed:	49 f7 dd             	neg    r13
    66f0:	4c 0f 48 e8          	cmovs  r13,rax
    66f4:	49 83 fd 09          	cmp    r13,0x9
    66f8:	0f 86 ea 04 00 00    	jbe    6be8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x538>
    66fe:	4c 89 e9             	mov    rcx,r13
      unsigned __n = 1;
    6701:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    6706:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    670d:	c5 6d 34 
    6710:	eb 39                	jmp    674b <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x9b>
    6712:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  if (__value < __b3) return __n + 2;
    6718:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    671f:	0f 86 4b 04 00 00    	jbe    6b70 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4c0>
	  if (__value < __b4) return __n + 3;
    6725:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    672c:	0f 86 6e 04 00 00    	jbe    6ba0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4f0>
	  __value /= __b4;
    6732:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    6735:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    6738:	48 f7 e6             	mul    rsi
    673b:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    673f:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    6746:	76 0c                	jbe    6754 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6748:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    674b:	48 83 f9 63          	cmp    rcx,0x63
    674f:	77 c7                	ja     6718 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x68>
    6751:	83 c5 01             	add    ebp,0x1
      { return _M_sink->_M_reserve(__n); }
    6754:	48 8b 03             	mov    rax,QWORD PTR [rbx]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6757:	46 8d 74 3d 00       	lea    r14d,[rbp+r15*1+0x0]
      { return _M_sink->_M_reserve(__n); }
    675c:	4c 89 f6             	mov    rsi,r14
    675f:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    6762:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6765:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6768:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    676b:	48 85 c0             	test   rax,rax
    676e:	74 28                	je     6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
      { return _M_current; }
    6770:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      *__ptr = '-';
    6774:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6777:	4c 01 ff             	add    rdi,r15
    677a:	4c 89 ea             	mov    rdx,r13
    677d:	89 ee                	mov    esi,ebp
    677f:	e8 5c f2 ff ff       	call   59e0 <void std::__detail::__to_chars_10_impl<unsigned long long>(char*, unsigned int, unsigned long long)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    6784:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
    6788:	4c 89 f6             	mov    rsi,r14
    678b:	4c 89 e7             	mov    rdi,r12
    678e:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    6791:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    6795:	c6 00 01             	mov    BYTE PTR [rax],0x1
	}
    6798:	48 83 c4 18          	add    rsp,0x18
    679c:	5b                   	pop    rbx
    679d:	5d                   	pop    rbp
    679e:	41 5c                	pop    r12
    67a0:	41 5d                	pop    r13
    67a2:	41 5e                	pop    r14
    67a4:	41 5f                	pop    r15
    67a6:	c3                   	ret
    67a7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    67ae:	00 00 
    67b0:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
    67b3:	4c 89 ef             	mov    rdi,r13
    67b6:	e8 35 c9 ff ff       	call   30f0 <strlen@plt>
    67bb:	49 89 c4             	mov    r12,rax
      { return _M_sink->_M_reserve(__n); }
    67be:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    67c1:	4c 89 e6             	mov    rsi,r12
    67c4:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    67c7:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    67ca:	ff 50 08             	call   QWORD PTR [rax+0x8]
    67cd:	48 89 c5             	mov    rbp,rax
		  if (auto __res = __sink_out._M_reserve(__sv.size()))
    67d0:	48 85 c0             	test   rax,rax
    67d3:	74 c3                	je     6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
		      __builtin_memcpy(__res.get(), __sv.data(), __sv.size());
    67d5:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
    67d9:	4c 89 e2             	mov    rdx,r12
    67dc:	4c 89 ee             	mov    rsi,r13
    67df:	e8 cc c9 ff ff       	call   31b0 <memcpy@plt>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    67e4:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
    67e8:	4c 89 e6             	mov    rsi,r12
    67eb:	48 89 ef             	mov    rdi,rbp
    67ee:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    67f1:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    67f5:	c6 00 01             	mov    BYTE PTR [rax],0x1
	}
    67f8:	48 83 c4 18          	add    rsp,0x18
    67fc:	5b                   	pop    rbx
    67fd:	5d                   	pop    rbp
    67fe:	41 5c                	pop    r12
    6800:	41 5d                	pop    r13
    6802:	41 5e                	pop    r14
    6804:	41 5f                	pop    r15
    6806:	c3                   	ret
    6807:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    680e:	00 00 
    6810:	4c 8b 27             	mov    r12,QWORD PTR [rdi]
    6813:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
    6817:	eb a5                	jmp    67be <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x10e>
    6819:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  const char* __chars[] = { "false", "true" };
    6820:	48 8d 05 09 e9 00 00 	lea    rax,[rip+0xe909]        # 15130 <CSWTCH.1110+0x50>
		  size_t __len = 4 + !__arg;
    6827:	44 0f b6 27          	movzx  r12d,BYTE PTR [rdi]
		  const char* __chars[] = { "false", "true" };
    682b:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    682f:	48 8d 05 00 e9 00 00 	lea    rax,[rip+0xe900]        # 15136 <CSWTCH.1110+0x56>
    6836:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
      { return _M_sink->_M_reserve(__n); }
    683b:	48 8b 06             	mov    rax,QWORD PTR [rsi]
		  size_t __len = 4 + !__arg;
    683e:	41 83 f4 01          	xor    r12d,0x1
    6842:	45 0f b6 e4          	movzx  r12d,r12b
      { return _M_sink->_M_reserve(__n); }
    6846:	48 8b 38             	mov    rdi,QWORD PTR [rax]
		  size_t __len = 4 + !__arg;
    6849:	41 83 c4 04          	add    r12d,0x4
    684d:	4d 63 ec             	movsxd r13,r12d
      { return _M_sink->_M_reserve(__n); }
    6850:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6853:	4c 89 ee             	mov    rsi,r13
    6856:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6859:	48 89 c7             	mov    rdi,rax
		  if (auto __res = __sink_out._M_reserve(__len))
    685c:	48 85 c0             	test   rax,rax
    685f:	0f 84 33 ff ff ff    	je     6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    6865:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
    6869:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
    686d:	48 8b 14 d4          	mov    rdx,QWORD PTR [rsp+rdx*8]
    6871:	41 83 fc 08          	cmp    r12d,0x8
    6875:	0f 83 75 02 00 00    	jae    6af0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x440>
    687b:	41 f6 c4 04          	test   r12b,0x4
    687f:	0f 85 87 03 00 00    	jne    6c0c <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x55c>
    6885:	45 85 e4             	test   r12d,r12d
    6888:	74 0f                	je     6899 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    688a:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    688d:	88 08                	mov    BYTE PTR [rax],cl
    688f:	41 f6 c4 02          	test   r12b,0x2
    6893:	0f 85 89 03 00 00    	jne    6c22 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x572>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    6899:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    689c:	4c 89 ee             	mov    rsi,r13
    689f:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    68a2:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    68a6:	c6 00 01             	mov    BYTE PTR [rax],0x1
	    std::visit_format_arg([&](auto& __arg) {
    68a9:	e9 ea fe ff ff       	jmp    6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    68ae:	66 90                	xchg   ax,ax
      { return _M_sink->_M_reserve(__n); }
    68b0:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    68b3:	be 01 00 00 00       	mov    esi,0x1
    68b8:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    68bb:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    68be:	ff 50 08             	call   QWORD PTR [rax+0x8]
    68c1:	48 89 c7             	mov    rdi,rax
		  if (auto __res = __sink_out._M_reserve(1))
    68c4:	48 85 c0             	test   rax,rax
    68c7:	0f 84 cb fe ff ff    	je     6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    68cd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
		      *__res.get() = __arg;
    68d1:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    68d5:	be 01 00 00 00       	mov    esi,0x1
		      *__res.get() = __arg;
    68da:	88 10                	mov    BYTE PTR [rax],dl
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    68dc:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    68df:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    68e2:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    68e6:	c6 00 01             	mov    BYTE PTR [rax],0x1
    68e9:	e9 aa fe ff ff       	jmp    6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    68ee:	66 90                	xchg   ax,ax
    68f0:	8b 07                	mov    eax,DWORD PTR [rdi]
		  const bool __neg = __arg < 0;
    68f2:	41 89 c6             	mov    r14d,eax
		  if (__neg)
    68f5:	41 89 c5             	mov    r13d,eax
		  const bool __neg = __arg < 0;
    68f8:	41 c1 ee 1f          	shr    r14d,0x1f
		  if (__neg)
    68fc:	41 f7 dd             	neg    r13d
    68ff:	44 0f 48 e8          	cmovs  r13d,eax
	  if (__value < (unsigned)__base) return __n;
    6903:	41 83 fd 09          	cmp    r13d,0x9
    6907:	0f 86 f5 02 00 00    	jbe    6c02 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x552>
    690d:	44 89 e9             	mov    ecx,r13d
      unsigned __n = 1;
    6910:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    6915:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    691c:	c5 6d 34 
    691f:	eb 38                	jmp    6959 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2a9>
    6921:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    6928:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    692e:	0f 86 0c 02 00 00    	jbe    6b40 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x490>
	  if (__value < __b4) return __n + 3;
    6934:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    693a:	0f 86 40 02 00 00    	jbe    6b80 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4d0>
	  __value /= __b4;
    6940:	89 ca                	mov    edx,ecx
	  __n += 4;
    6942:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    6945:	48 89 d0             	mov    rax,rdx
    6948:	48 f7 e6             	mul    rsi
    694b:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    694f:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    6955:	76 0a                	jbe    6961 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    6957:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    6959:	83 f9 63             	cmp    ecx,0x63
    695c:	77 ca                	ja     6928 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x278>
    695e:	83 c5 01             	add    ebp,0x1
      { return _M_sink->_M_reserve(__n); }
    6961:	48 8b 03             	mov    rax,QWORD PTR [rbx]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6964:	45 8d 3c 2e          	lea    r15d,[r14+rbp*1]
      { return _M_sink->_M_reserve(__n); }
    6968:	4c 89 fe             	mov    rsi,r15
    696b:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    696e:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6971:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6974:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6977:	48 85 c0             	test   rax,rax
    697a:	0f 84 18 fe ff ff    	je     6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    6980:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6984:	45 0f b6 f6          	movzx  r14d,r14b
    6988:	44 89 ea             	mov    edx,r13d
    698b:	89 ee                	mov    esi,ebp
		      *__ptr = '-';
    698d:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6990:	4c 01 f7             	add    rdi,r14
    6993:	e8 18 ef ff ff       	call   58b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    6998:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
    699c:	4c 89 fe             	mov    rsi,r15
    699f:	4c 89 e7             	mov    rdi,r12
    69a2:	ff 50 10             	call   QWORD PTR [rax+0x10]
		      __done = true;
    69a5:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    69a9:	c6 00 01             	mov    BYTE PTR [rax],0x1
    69ac:	e9 e7 fd ff ff       	jmp    6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    69b1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    69b8:	44 8b 2f             	mov    r13d,DWORD PTR [rdi]
	  if (__value < (unsigned)__base) return __n;
    69bb:	41 83 fd 09          	cmp    r13d,0x9
    69bf:	0f 86 2d 02 00 00    	jbe    6bf2 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x542>
    69c5:	44 89 e9             	mov    ecx,r13d
      unsigned __n = 1;
    69c8:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    69cd:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    69d4:	c5 6d 34 
    69d7:	eb 3c                	jmp    6a15 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x365>
    69d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    69e0:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    69e6:	0f 86 64 01 00 00    	jbe    6b50 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4a0>
	  if (__value < __b4) return __n + 3;
    69ec:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    69f2:	0f 86 98 01 00 00    	jbe    6b90 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4e0>
	  __value /= __b4;
    69f8:	89 ca                	mov    edx,ecx
	  __n += 4;
    69fa:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    69fd:	48 89 d0             	mov    rax,rdx
    6a00:	48 f7 e6             	mul    rsi
    6a03:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    6a07:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    6a0d:	0f 86 bd 01 00 00    	jbe    6bd0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x520>
    6a13:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    6a15:	83 f9 63             	cmp    ecx,0x63
    6a18:	77 c6                	ja     69e0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x330>
    6a1a:	44 8d 75 01          	lea    r14d,[rbp+0x1]
    6a1e:	4c 89 f5             	mov    rbp,r14
      { return _M_sink->_M_reserve(__n); }
    6a21:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    6a24:	4c 89 f6             	mov    rsi,r14
    6a27:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    6a2a:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6a2d:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6a30:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6a33:	48 85 c0             	test   rax,rax
    6a36:	0f 84 5c fd ff ff    	je     6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    6a3c:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6a40:	44 89 ea             	mov    edx,r13d
    6a43:	89 ee                	mov    esi,ebp
		      *__ptr = '-';
    6a45:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
		      __detail::__to_chars_10_impl(__ptr + (int)__neg, __n,
    6a48:	e8 63 ee ff ff       	call   58b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
	void _M_bump(size_t __n) { _M_sink->_M_bump(__n); }
    6a4d:	e9 32 fd ff ff       	jmp    6784 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xd4>
    6a52:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    6a58:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
	  if (__value < (unsigned)__base) return __n;
    6a5b:	49 83 fd 09          	cmp    r13,0x9
    6a5f:	0f 86 73 01 00 00    	jbe    6bd8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x528>
    6a65:	4c 89 e9             	mov    rcx,r13
      unsigned __n = 1;
    6a68:	bd 01 00 00 00       	mov    ebp,0x1
	  __value /= __b4;
    6a6d:	48 be 4b 59 86 38 d6 	movabs rsi,0x346dc5d63886594b
    6a74:	c5 6d 34 
    6a77:	eb 3e                	jmp    6ab7 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x407>
    6a79:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    6a80:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    6a87:	0f 86 d3 00 00 00    	jbe    6b60 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4b0>
	  if (__value < __b4) return __n + 3;
    6a8d:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    6a94:	0f 86 16 01 00 00    	jbe    6bb0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x500>
	  __value /= __b4;
    6a9a:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    6a9d:	83 c5 04             	add    ebp,0x4
	  __value /= __b4;
    6aa0:	48 f7 e6             	mul    rsi
    6aa3:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    6aa7:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    6aae:	0f 86 0c 01 00 00    	jbe    6bc0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x510>
    6ab4:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    6ab7:	48 83 f9 63          	cmp    rcx,0x63
    6abb:	77 c3                	ja     6a80 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x3d0>
    6abd:	44 8d 75 01          	lea    r14d,[rbp+0x1]
    6ac1:	4c 89 f5             	mov    rbp,r14
      { return _M_sink->_M_reserve(__n); }
    6ac4:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    6ac7:	4c 89 f6             	mov    rsi,r14
    6aca:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    6acd:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    6ad0:	ff 50 08             	call   QWORD PTR [rax+0x8]
    6ad3:	49 89 c4             	mov    r12,rax
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6ad6:	48 85 c0             	test   rax,rax
    6ad9:	0f 84 b9 fc ff ff    	je     6798 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xe8>
    6adf:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
		      *__ptr = '-';
    6ae3:	c6 07 2d             	mov    BYTE PTR [rdi],0x2d
    6ae6:	e9 8f fc ff ff       	jmp    677a <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xca>
    6aeb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    6af0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
    6af3:	48 89 08             	mov    QWORD PTR [rax],rcx
    6af6:	44 89 e1             	mov    ecx,r12d
    6af9:	48 8b 74 0a f8       	mov    rsi,QWORD PTR [rdx+rcx*1-0x8]
    6afe:	48 89 74 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rsi
    6b03:	48 8d 48 08          	lea    rcx,[rax+0x8]
    6b07:	48 83 e1 f8          	and    rcx,0xfffffffffffffff8
    6b0b:	48 29 c8             	sub    rax,rcx
    6b0e:	41 01 c4             	add    r12d,eax
    6b11:	48 29 c2             	sub    rdx,rax
    6b14:	41 83 e4 f8          	and    r12d,0xfffffff8
    6b18:	41 83 fc 08          	cmp    r12d,0x8
    6b1c:	0f 82 77 fd ff ff    	jb     6899 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    6b22:	41 83 e4 f8          	and    r12d,0xfffffff8
    6b26:	31 c0                	xor    eax,eax
    6b28:	89 c6                	mov    esi,eax
    6b2a:	83 c0 08             	add    eax,0x8
    6b2d:	4c 8b 04 32          	mov    r8,QWORD PTR [rdx+rsi*1]
    6b31:	4c 89 04 31          	mov    QWORD PTR [rcx+rsi*1],r8
    6b35:	44 39 e0             	cmp    eax,r12d
    6b38:	72 ee                	jb     6b28 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x478>
    6b3a:	e9 5a fd ff ff       	jmp    6899 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    6b3f:	90                   	nop
	  if (__value < __b3) return __n + 2;
    6b40:	83 c5 02             	add    ebp,0x2
    6b43:	e9 19 fe ff ff       	jmp    6961 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    6b48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6b4f:	00 
    6b50:	44 8d 75 02          	lea    r14d,[rbp+0x2]
    6b54:	4c 89 f5             	mov    rbp,r14
    6b57:	e9 c5 fe ff ff       	jmp    6a21 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    6b5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6b60:	44 8d 75 02          	lea    r14d,[rbp+0x2]
    6b64:	4c 89 f5             	mov    rbp,r14
    6b67:	e9 58 ff ff ff       	jmp    6ac4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    6b6c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6b70:	83 c5 02             	add    ebp,0x2
    6b73:	e9 dc fb ff ff       	jmp    6754 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6b78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6b7f:	00 
	  if (__value < __b4) return __n + 3;
    6b80:	83 c5 03             	add    ebp,0x3
    6b83:	e9 d9 fd ff ff       	jmp    6961 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
    6b88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6b8f:	00 
    6b90:	44 8d 75 03          	lea    r14d,[rbp+0x3]
    6b94:	4c 89 f5             	mov    rbp,r14
    6b97:	e9 85 fe ff ff       	jmp    6a21 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    6b9c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6ba0:	83 c5 03             	add    ebp,0x3
    6ba3:	e9 ac fb ff ff       	jmp    6754 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6ba8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6baf:	00 
    6bb0:	44 8d 75 03          	lea    r14d,[rbp+0x3]
    6bb4:	4c 89 f5             	mov    rbp,r14
    6bb7:	e9 08 ff ff ff       	jmp    6ac4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    6bbc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  if (auto __res = __sink_out._M_reserve(__n + __neg))
    6bc0:	41 89 ee             	mov    r14d,ebp
    6bc3:	e9 fc fe ff ff       	jmp    6ac4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    6bc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6bcf:	00 
    6bd0:	41 89 ee             	mov    r14d,ebp
    6bd3:	e9 49 fe ff ff       	jmp    6a21 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
	  if (__value < (unsigned)__base) return __n;
    6bd8:	41 be 01 00 00 00    	mov    r14d,0x1
    6bde:	bd 01 00 00 00       	mov    ebp,0x1
    6be3:	e9 dc fe ff ff       	jmp    6ac4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x414>
    6be8:	bd 01 00 00 00       	mov    ebp,0x1
    6bed:	e9 62 fb ff ff       	jmp    6754 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xa4>
    6bf2:	41 be 01 00 00 00    	mov    r14d,0x1
    6bf8:	bd 01 00 00 00       	mov    ebp,0x1
    6bfd:	e9 1f fe ff ff       	jmp    6a21 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x371>
    6c02:	bd 01 00 00 00       	mov    ebp,0x1
    6c07:	e9 55 fd ff ff       	jmp    6961 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x2b1>
		      __builtin_memcpy(__res.get(), __chars[__arg], __len);
    6c0c:	8b 0a                	mov    ecx,DWORD PTR [rdx]
    6c0e:	45 89 e4             	mov    r12d,r12d
    6c11:	89 08                	mov    DWORD PTR [rax],ecx
    6c13:	42 8b 54 22 fc       	mov    edx,DWORD PTR [rdx+r12*1-0x4]
    6c18:	42 89 54 20 fc       	mov    DWORD PTR [rax+r12*1-0x4],edx
    6c1d:	e9 77 fc ff ff       	jmp    6899 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    6c22:	45 89 e4             	mov    r12d,r12d
    6c25:	42 0f b7 54 22 fe    	movzx  edx,WORD PTR [rdx+r12*1-0x2]
    6c2b:	66 42 89 54 20 fe    	mov    WORD PTR [rax+r12*1-0x2],dx
    6c31:	e9 63 fc ff ff       	jmp    6899 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}>(std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x1e9>
    6c36:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    6c3d:	00 00 00 

0000000000006c40 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, std::chrono::duration<double, std::ratio<1l, 1l> >&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<std::chrono::duration<double, std::ratio<1l, 1l> >&>::type>, std::chrono::duration<double, std::ratio<1l, 1l> >&)>:
#endif

  template<typename _Out, typename... _Args>
    requires output_iterator<_Out, const char&>
    inline _Out
    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
    6c40:	53                   	push   rbx
    {
      return std::vformat_to(std::move(__out), __fmt.get(),
			     std::make_format_args(__args...));
    6c41:	48 8d 05 88 4e 00 00 	lea    rax,[rip+0x4e88]        # bad0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
    6c48:	48 89 fb             	mov    rbx,rdi
    6c4b:	49 89 d1             	mov    r9,rdx
    6c4e:	48 89 ca             	mov    rdx,rcx
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    6c51:	4c 89 c9             	mov    rcx,r9
    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
    6c54:	48 83 ec 20          	sub    rsp,0x20
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }
    6c58:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
    6c5b:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
			     std::make_format_args(__args...));
    6c5f:	4c 89 04 24          	mov    QWORD PTR [rsp],r8
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    6c63:	49 89 d0             	mov    r8,rdx
			     std::make_format_args(__args...));
    6c66:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    6c6b:	48 89 f2             	mov    rdx,rsi
    6c6e:	48 89 fe             	mov    rsi,rdi
    6c71:	48 89 df             	mov    rdi,rbx
    6c74:	48 c7 44 24 10 d1 00 	mov    QWORD PTR [rsp+0x10],0xd1
    6c7b:	00 00 
    6c7d:	48 89 64 24 18       	mov    QWORD PTR [rsp+0x18],rsp
    6c82:	48 83 ec 08          	sub    rsp,0x8
    6c86:	6a 00                	push   0x0
    6c88:	4c 8d 4c 24 20       	lea    r9,[rsp+0x20]
    6c8d:	e8 1e d6 ff ff       	call   42b0 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]>
    }
    6c92:	48 83 c4 30          	add    rsp,0x30
    6c96:	48 89 d8             	mov    rax,rbx
    6c99:	5b                   	pop    rbx
    6c9a:	c3                   	ret
    6c9b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000006ca0 <std::ostream_iterator<char, char, std::char_traits<char> > std::format_to<std::ostream_iterator<char, char, std::char_traits<char> >, unsigned int const&, unsigned int&>(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_format_string<char, std::type_identity<unsigned int const&>::type, std::type_identity<unsigned int&>::type>, unsigned int const&, unsigned int&)>:
    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
    6ca0:	53                   	push   rbx
    6ca1:	49 89 d2             	mov    r10,rdx
    6ca4:	48 89 ca             	mov    rdx,rcx
    6ca7:	48 89 fb             	mov    rbx,rdi
    6caa:	48 83 ec 30          	sub    rsp,0x30
	: _M_args{_S_make_elt(__a)...}
    6cae:	41 8b 00             	mov    eax,DWORD PTR [r8]
    6cb1:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    6cb4:	49 89 d0             	mov    r8,rdx
    6cb7:	48 8d 4c 24 10       	lea    rcx,[rsp+0x10]
    6cbc:	48 c7 04 24 42 08 00 	mov    QWORD PTR [rsp],0x842
    6cc3:	00 
    6cc4:	48 83 ec 08          	sub    rsp,0x8
    6cc8:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
	: _M_args{_S_make_elt(__a)...}
    6ccc:	89 44 24 18          	mov    DWORD PTR [rsp+0x18],eax
    6cd0:	41 8b 01             	mov    eax,DWORD PTR [r9]
    6cd3:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    6cd8:	48 89 f2             	mov    rdx,rsi
    6cdb:	4c 89 d1             	mov    rcx,r10
    6cde:	48 89 fe             	mov    rsi,rdi
	: _M_args{_S_make_elt(__a)...}
    6ce1:	89 44 24 28          	mov    DWORD PTR [rsp+0x28],eax
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    6ce5:	48 89 df             	mov    rdi,rbx
    6ce8:	6a 00                	push   0x0
    6cea:	4c 8d 4c 24 10       	lea    r9,[rsp+0x10]
    6cef:	e8 bc d5 ff ff       	call   42b0 <std::ostream_iterator<char, char, std::char_traits<char> > std::__format::__do_vformat_to<std::ostream_iterator<char, char, std::char_traits<char> >, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::ostream_iterator<char, char, std::char_traits<char> >, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) [clone .isra.0]>
    }
    6cf4:	48 83 c4 40          	add    rsp,0x40
    6cf8:	48 89 d8             	mov    rax,rbx
    6cfb:	5b                   	pop    rbx
    6cfc:	c3                   	ret
    6cfd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000006d00 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>:
	};

      constexpr void
      _M_read_utf8()
      {
	_Guard<_Iter> __g{this, _M_curr()};
    6d00:	48 8b 77 10          	mov    rsi,QWORD PTR [rdi+0x10]
      _M_read_utf8()
    6d04:	48 89 f8             	mov    rax,rdi
	char32_t __c{};
	const uint8_t __lo_bound = 0x80, __hi_bound = 0xBF;
	uint8_t __u = *_M_curr()++;
    6d07:	48 8d 4e 01          	lea    rcx,[rsi+0x1]
    6d0b:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
    6d0f:	0f be 16             	movsx  edx,BYTE PTR [rsi]
	auto __incr = [&, this] {
	  ++__to_incr;
	  return ++_M_curr();
	};

	if (__u <= 0x7F) [[likely]]      // 0x00 to 0x7F
    6d12:	84 d2                	test   dl,dl
    6d14:	78 1a                	js     6d30 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x30>
	uint8_t __to_incr = 1;
    6d16:	b9 01 00 00 00       	mov    ecx,0x1
      {
	_M_to_increment = __to_incr;
	_M_buf_index = 0;
	if constexpr (sizeof(_ToFmt) == sizeof(uint32_t))
	  {
	    _M_buf[0] = __c;
    6d1b:	89 10                	mov    DWORD PTR [rax],edx
	_M_buf_index = 0;
    6d1d:	ba 00 01 00 00       	mov    edx,0x100
	_M_to_increment = __to_incr;
    6d22:	88 48 1a             	mov    BYTE PTR [rax+0x1a],cl
	_M_buf_index = 0;
    6d25:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    6d29:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
      }
    6d2d:	c3                   	ret
    6d2e:	66 90                	xchg   ax,ax
	else if (__u < 0xC2) [[unlikely]]
    6d30:	80 fa c1             	cmp    dl,0xc1
    6d33:	0f 86 b7 00 00 00    	jbe    6df0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	else if (_M_curr() == _M_last) [[unlikely]]
    6d39:	48 8b 7f 20          	mov    rdi,QWORD PTR [rdi+0x20]
    6d3d:	48 39 f9             	cmp    rcx,rdi
    6d40:	0f 84 aa 00 00 00    	je     6df0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	else if (__u <= 0xDF) // 0xC2 to 0xDF
    6d46:	80 fa df             	cmp    dl,0xdf
    6d49:	76 7d                	jbe    6dc8 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xc8>
	else if (__u <= 0xEF) // 0xE0 to 0xEF
    6d4b:	80 fa ef             	cmp    dl,0xef
    6d4e:	0f 87 ac 00 00 00    	ja     6e00 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x100>
	    const uint8_t __lo_bound_2 = __u == 0xE0 ? 0xA0 : __lo_bound;
    6d54:	80 fa e0             	cmp    dl,0xe0
    6d57:	0f 84 31 01 00 00    	je     6e8e <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x18e>
	    const uint8_t __hi_bound_2 = __u == 0xED ? 0x9F : __hi_bound;
    6d5d:	80 fa ed             	cmp    dl,0xed
    6d60:	41 b8 bf ff ff ff    	mov    r8d,0xffffffbf
    6d66:	b9 9f ff ff ff       	mov    ecx,0xffffff9f
    6d6b:	41 b9 80 ff ff ff    	mov    r9d,0xffffff80
    6d71:	44 0f 44 c1          	cmove  r8d,ecx
	    __u = *_M_curr();
    6d75:	0f b6 4e 01          	movzx  ecx,BYTE PTR [rsi+0x1]
	    __c = __u & 0x0F;
    6d79:	83 e2 0f             	and    edx,0xf
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
    6d7c:	44 38 c9             	cmp    cl,r9b
    6d7f:	72 6f                	jb     6df0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
    6d81:	41 38 c8             	cmp    r8b,cl
    6d84:	72 6a                	jb     6df0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	  return ++_M_curr();
    6d86:	4c 8d 46 02          	lea    r8,[rsi+0x2]
    6d8a:	4c 89 40 10          	mov    QWORD PTR [rax+0x10],r8
	    else if (__incr() == _M_last) [[unlikely]]
    6d8e:	4c 39 c7             	cmp    rdi,r8
    6d91:	0f 84 08 01 00 00    	je     6e9f <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x19f>
		__c = (__c << 6) | (__u & 0x3F);
    6d97:	c1 e2 06             	shl    edx,0x6
    6d9a:	83 e1 3f             	and    ecx,0x3f
    6d9d:	09 d1                	or     ecx,edx
		__u = *_M_curr();
    6d9f:	0f b6 56 02          	movzx  edx,BYTE PTR [rsi+0x2]
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
    6da3:	8d 7a 80             	lea    edi,[rdx-0x80]
    6da6:	40 80 ff 3f          	cmp    dil,0x3f
    6daa:	0f 87 ef 00 00 00    	ja     6e9f <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x19f>
		    __c = (__c << 6) | (__u & 0x3F);
    6db0:	c1 e1 06             	shl    ecx,0x6
    6db3:	83 e2 3f             	and    edx,0x3f
    6db6:	09 ca                	or     edx,ecx
	  ++__to_incr;
    6db8:	b9 03 00 00 00       	mov    ecx,0x3
	  return ++_M_curr();
    6dbd:	e9 59 ff ff ff       	jmp    6d1b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
    6dc2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __u = *_M_curr();
    6dc8:	0f b6 4e 01          	movzx  ecx,BYTE PTR [rsi+0x1]
	    __c = __u & 0x1F;
    6dcc:	83 e2 1f             	and    edx,0x1f
	    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
    6dcf:	8d 79 80             	lea    edi,[rcx-0x80]
    6dd2:	40 80 ff 3f          	cmp    dil,0x3f
    6dd6:	77 18                	ja     6df0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
		__c = (__c << 6) | (__u & 0x3F);
    6dd8:	83 e1 3f             	and    ecx,0x3f
    6ddb:	c1 e2 06             	shl    edx,0x6
    6dde:	09 ca                	or     edx,ecx
	  ++__to_incr;
    6de0:	b9 02 00 00 00       	mov    ecx,0x2
	  return ++_M_curr();
    6de5:	e9 31 ff ff ff       	jmp    6d1b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
    6dea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	uint8_t __to_incr = 1;
    6df0:	b9 01 00 00 00       	mov    ecx,0x1
	  __c = _S_error();
    6df5:	ba fd ff 00 00       	mov    edx,0xfffd
    6dfa:	e9 1c ff ff ff       	jmp    6d1b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
    6dff:	90                   	nop
	else if (__u <= 0xF4) // 0xF0 to 0xF4
    6e00:	80 fa f4             	cmp    dl,0xf4
    6e03:	77 eb                	ja     6df0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	    const uint8_t __lo_bound_2 = __u == 0xF0 ? 0x90 : __lo_bound;
    6e05:	80 fa f0             	cmp    dl,0xf0
    6e08:	0f 84 a0 00 00 00    	je     6eae <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1ae>
	    const uint8_t __hi_bound_2 = __u == 0xF4 ? 0x8F : __hi_bound;
    6e0e:	80 fa f4             	cmp    dl,0xf4
    6e11:	41 b8 bf ff ff ff    	mov    r8d,0xffffffbf
    6e17:	b9 8f ff ff ff       	mov    ecx,0xffffff8f
    6e1c:	41 b9 80 ff ff ff    	mov    r9d,0xffffff80
    6e22:	44 0f 44 c1          	cmove  r8d,ecx
	    __u = *_M_curr();
    6e26:	0f b6 4e 01          	movzx  ecx,BYTE PTR [rsi+0x1]
	    __c = __u & 0x07;
    6e2a:	83 e2 07             	and    edx,0x7
	    if (__u < __lo_bound_2 || __u > __hi_bound_2) [[unlikely]]
    6e2d:	44 38 c9             	cmp    cl,r9b
    6e30:	72 be                	jb     6df0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
    6e32:	41 38 c8             	cmp    r8b,cl
    6e35:	72 b9                	jb     6df0 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0xf0>
	  return ++_M_curr();
    6e37:	4c 8d 46 02          	lea    r8,[rsi+0x2]
    6e3b:	4c 89 40 10          	mov    QWORD PTR [rax+0x10],r8
	    else if (__incr() == _M_last) [[unlikely]]
    6e3f:	4c 39 c7             	cmp    rdi,r8
    6e42:	74 5b                	je     6e9f <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x19f>
		__c = (__c << 6) | (__u & 0x3F);
    6e44:	c1 e2 06             	shl    edx,0x6
    6e47:	83 e1 3f             	and    ecx,0x3f
    6e4a:	09 d1                	or     ecx,edx
		__u = *_M_curr();
    6e4c:	0f b6 56 02          	movzx  edx,BYTE PTR [rsi+0x2]
		if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
    6e50:	44 8d 42 80          	lea    r8d,[rdx-0x80]
    6e54:	41 80 f8 3f          	cmp    r8b,0x3f
    6e58:	77 45                	ja     6e9f <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x19f>
	  return ++_M_curr();
    6e5a:	4c 8d 46 03          	lea    r8,[rsi+0x3]
    6e5e:	4c 89 40 10          	mov    QWORD PTR [rax+0x10],r8
		else if (__incr() == _M_last) [[unlikely]]
    6e62:	4c 39 c7             	cmp    rdi,r8
    6e65:	74 58                	je     6ebf <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1bf>
		    __c = (__c << 6) | (__u & 0x3F);
    6e67:	83 e2 3f             	and    edx,0x3f
    6e6a:	c1 e1 06             	shl    ecx,0x6
    6e6d:	09 d1                	or     ecx,edx
		    __u = *_M_curr();
    6e6f:	0f b6 56 03          	movzx  edx,BYTE PTR [rsi+0x3]
		    if (__u < __lo_bound || __u > __hi_bound) [[unlikely]]
    6e73:	8d 7a 80             	lea    edi,[rdx-0x80]
    6e76:	40 80 ff 3f          	cmp    dil,0x3f
    6e7a:	77 43                	ja     6ebf <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1bf>
			__c = (__c << 6) | (__u & 0x3F);
    6e7c:	c1 e1 06             	shl    ecx,0x6
    6e7f:	83 e2 3f             	and    edx,0x3f
    6e82:	09 ca                	or     edx,ecx
	  ++__to_incr;
    6e84:	b9 04 00 00 00       	mov    ecx,0x4
	  return ++_M_curr();
    6e89:	e9 8d fe ff ff       	jmp    6d1b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
	    const uint8_t __lo_bound_2 = __u == 0xE0 ? 0xA0 : __lo_bound;
    6e8e:	41 b9 a0 ff ff ff    	mov    r9d,0xffffffa0
	    const uint8_t __hi_bound_2 = __u == 0xED ? 0x9F : __hi_bound;
    6e94:	41 b8 bf ff ff ff    	mov    r8d,0xffffffbf
    6e9a:	e9 d6 fe ff ff       	jmp    6d75 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x75>
	  ++__to_incr;
    6e9f:	b9 02 00 00 00       	mov    ecx,0x2
	  __c = _S_error();
    6ea4:	ba fd ff 00 00       	mov    edx,0xfffd
    6ea9:	e9 6d fe ff ff       	jmp    6d1b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
	    const uint8_t __lo_bound_2 = __u == 0xF0 ? 0x90 : __lo_bound;
    6eae:	41 b9 90 ff ff ff    	mov    r9d,0xffffff90
	    const uint8_t __hi_bound_2 = __u == 0xF4 ? 0x8F : __hi_bound;
    6eb4:	41 b8 bf ff ff ff    	mov    r8d,0xffffffbf
    6eba:	e9 67 ff ff ff       	jmp    6e26 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x126>
	  ++__to_incr;
    6ebf:	b9 03 00 00 00       	mov    ecx,0x3
	  __c = _S_error();
    6ec4:	ba fd ff 00 00       	mov    edx,0xfffd
    6ec9:	e9 4d fe ff ff       	jmp    6d1b <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()+0x1b>
    6ece:	66 90                	xchg   ax,ax

0000000000006ed0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>:
      _M_parse_fill_and_align(iterator __first, iterator __last) noexcept
    6ed0:	41 57                	push   r15
    6ed2:	41 56                	push   r14
    6ed4:	41 55                	push   r13
    6ed6:	41 54                	push   r12
    6ed8:	55                   	push   rbp
    6ed9:	53                   	push   rbx
    6eda:	48 89 f3             	mov    rbx,rsi
    6edd:	48 83 ec 68          	sub    rsp,0x68
	if (*__first != '{')
    6ee1:	44 0f b6 26          	movzx  r12d,BYTE PTR [rsi]
    6ee5:	41 80 fc 7b          	cmp    r12b,0x7b
    6ee9:	0f 84 31 01 00 00    	je     7020 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x150>
    6eef:	49 89 fd             	mov    r13,rdi
    6ef2:	48 89 d5             	mov    rbp,rdx
		if (!__uv.empty())
    6ef5:	48 39 d6             	cmp    rsi,rdx
    6ef8:	0f 84 e2 00 00 00    	je     6fe0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
	  _M_read_utf8();
    6efe:	66 48 0f 6e c6       	movq   xmm0,rsi
    6f03:	31 c0                	xor    eax,eax
    6f05:	48 89 e7             	mov    rdi,rsp
    6f08:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
    6f0d:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    6f11:	66 89 44 24 18       	mov    WORD PTR [rsp+0x18],ax
    6f16:	0f 11 44 24 08       	movups XMMWORD PTR [rsp+0x8],xmm0
    6f1b:	c6 44 24 1a 00       	mov    BYTE PTR [rsp+0x1a],0x0
    6f20:	e8 db fd ff ff       	call   6d00 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
	auto __tmp = *this;
    6f25:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    6f2a:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
	  _M_read_utf8();
    6f2f:	44 0f b6 74 24 18    	movzx  r14d,BYTE PTR [rsp+0x18]
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6f35:	0f b6 74 24 19       	movzx  esi,BYTE PTR [rsp+0x19]
	auto __tmp = *this;
    6f3a:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
    6f3f:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
	  _M_read_utf8();
    6f45:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
	auto __tmp = *this;
    6f4a:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6f4f:	41 0f b6 c6          	movzx  eax,r14b
	  _M_read_utf8();
    6f53:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [rsp+0x1a]
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6f58:	83 c0 01             	add    eax,0x1
	auto __tmp = *this;
    6f5b:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6f60:	39 f0                	cmp    eax,esi
    6f62:	74 5c                	je     6fc0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0xf0>
      operator*() const { return _M_buf[_M_buf_index]; }
    6f64:	42 8b 4c b4 30       	mov    ecx,DWORD PTR [rsp+r14*4+0x30]
    if (__c < 0xD800) [[likely]]
    6f69:	81 f9 ff d7 00 00    	cmp    ecx,0xd7ff
    6f6f:	0f 87 1b 01 00 00    	ja     7090 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x1c0>
		      if (auto __next = __beg.base(); __next != __last)
    6f75:	48 39 d5             	cmp    rbp,rdx
    6f78:	74 66                	je     6fe0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
			if (_Align __align = _S_align(*__next))
    6f7a:	0f b6 02             	movzx  eax,BYTE PTR [rdx]
	switch (__c)
    6f7d:	3c 3e                	cmp    al,0x3e
    6f7f:	0f 84 b3 00 00 00    	je     7038 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x168>
    6f85:	3c 5e                	cmp    al,0x5e
    6f87:	0f 84 d3 00 00 00    	je     7060 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x190>
    6f8d:	be 01 00 00 00       	mov    esi,0x1
    6f92:	3c 3c                	cmp    al,0x3c
    6f94:	75 4a                	jne    6fe0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
			    _M_align = __align;
    6f96:	41 0f b6 45 00       	movzx  eax,BYTE PTR [r13+0x0]
			    _M_fill = __c;
    6f9b:	41 89 4d 08          	mov    DWORD PTR [r13+0x8],ecx
			    _M_align = __align;
    6f9f:	83 e0 fc             	and    eax,0xfffffffc
    6fa2:	09 f0                	or     eax,esi
    6fa4:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
      }
    6fa8:	48 83 c4 68          	add    rsp,0x68
			    return ++__next;
    6fac:	48 8d 42 01          	lea    rax,[rdx+0x1]
      }
    6fb0:	5b                   	pop    rbx
    6fb1:	5d                   	pop    rbp
    6fb2:	41 5c                	pop    r12
    6fb4:	41 5d                	pop    r13
    6fb6:	41 5e                	pop    r14
    6fb8:	41 5f                	pop    r15
    6fba:	c3                   	ret
    6fbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    6fc0:	48 39 d5             	cmp    rbp,rdx
    6fc3:	74 1b                	je     6fe0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
    6fc5:	48 01 d1             	add    rcx,rdx
	    if (_M_curr() == _M_last)
    6fc8:	48 39 cd             	cmp    rbp,rcx
    6fcb:	0f 85 9f 00 00 00    	jne    7070 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x1a0>
    6fd1:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    6fd8:	00 00 00 00 
    6fdc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	switch (__c)
    6fe0:	41 80 fc 3e          	cmp    r12b,0x3e
    6fe4:	74 62                	je     7048 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x178>
    6fe6:	41 80 fc 5e          	cmp    r12b,0x5e
    6fea:	74 64                	je     7050 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x180>
    6fec:	ba 01 00 00 00       	mov    edx,0x1
    6ff1:	41 80 fc 3c          	cmp    r12b,0x3c
    6ff5:	75 29                	jne    7020 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x150>
		_M_align = __align;
    6ff7:	41 0f b6 45 00       	movzx  eax,BYTE PTR [r13+0x0]
		_M_fill = ' ';
    6ffc:	41 c7 45 08 20 00 00 	mov    DWORD PTR [r13+0x8],0x20
    7003:	00 
		_M_align = __align;
    7004:	83 e0 fc             	and    eax,0xfffffffc
    7007:	09 d0                	or     eax,edx
    7009:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
      }
    700d:	48 83 c4 68          	add    rsp,0x68
		return __first + 1;
    7011:	48 8d 43 01          	lea    rax,[rbx+0x1]
      }
    7015:	5b                   	pop    rbx
    7016:	5d                   	pop    rbp
    7017:	41 5c                	pop    r12
    7019:	41 5d                	pop    r13
    701b:	41 5e                	pop    r14
    701d:	41 5f                	pop    r15
    701f:	c3                   	ret
    7020:	48 83 c4 68          	add    rsp,0x68
	return __first;
    7024:	48 89 d8             	mov    rax,rbx
      }
    7027:	5b                   	pop    rbx
    7028:	5d                   	pop    rbp
    7029:	41 5c                	pop    r12
    702b:	41 5d                	pop    r13
    702d:	41 5e                	pop    r14
    702f:	41 5f                	pop    r15
    7031:	c3                   	ret
    7032:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	switch (__c)
    7038:	be 02 00 00 00       	mov    esi,0x2
    703d:	e9 54 ff ff ff       	jmp    6f96 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0xc6>
    7042:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    7048:	ba 02 00 00 00       	mov    edx,0x2
    704d:	eb a8                	jmp    6ff7 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x127>
    704f:	90                   	nop
    7050:	ba 03 00 00 00       	mov    edx,0x3
    7055:	eb a0                	jmp    6ff7 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x127>
    7057:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    705e:	00 00 
    7060:	be 03 00 00 00       	mov    esi,0x3
    7065:	e9 2c ff ff ff       	jmp    6f96 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0xc6>
    706a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  _M_read_utf8();
    7070:	48 89 e7             	mov    rdi,rsp
    7073:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
    7078:	e8 83 fc ff ff       	call   6d00 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
    707d:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
      }
    7082:	e9 dd fe ff ff       	jmp    6f64 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x94>
    7087:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    708e:	00 00 
    return 0xDFFF < __c && __c <= 0x10FFFF;
    7090:	8d 81 00 20 ff ff    	lea    eax,[rcx-0xe000]
		    if (__is_scalar_value(__c))
    7096:	3d ff 1f 10 00       	cmp    eax,0x101fff
    709b:	0f 87 3f ff ff ff    	ja     6fe0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0x110>
    70a1:	e9 cf fe ff ff       	jmp    6f75 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)+0xa5>
    70a6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    70ad:	00 00 00 

00000000000070b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>:
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
    70b0:	41 56                	push   r14
	__spec._M_type = __type;
    70b2:	89 d0                	mov    eax,edx
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
    70b4:	41 55                	push   r13
	__spec._M_type = __type;
    70b6:	83 e0 0f             	and    eax,0xf
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
    70b9:	41 54                	push   r12
	__spec._M_type = __type;
    70bb:	c1 e0 03             	shl    eax,0x3
      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
    70be:	55                   	push   rbp
    70bf:	48 89 fd             	mov    rbp,rdi
    70c2:	53                   	push   rbx
    70c3:	48 83 ec 10          	sub    rsp,0x10
      constexpr const_iterator end() const noexcept { return _M_end; }
    70c7:	4c 8b 76 08          	mov    r14,QWORD PTR [rsi+0x8]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    70cb:	48 8b 1e             	mov    rbx,QWORD PTR [rsi]
	_Spec<_CharT> __spec{};
    70ce:	48 c7 44 24 04 00 00 	mov    QWORD PTR [rsp+0x4],0x0
    70d5:	00 00 
    70d7:	c7 44 24 0c 20 00 00 	mov    DWORD PTR [rsp+0xc],0x20
    70de:	00 
	__spec._M_type = __type;
    70df:	88 44 24 05          	mov    BYTE PTR [rsp+0x5],al
	  if (__first == __last || *__first == '}')
    70e3:	49 39 de             	cmp    r14,rbx
    70e6:	0f 84 fc 00 00 00    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    70ec:	80 3b 7d             	cmp    BYTE PTR [rbx],0x7d
    70ef:	0f 84 f3 00 00 00    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    70f5:	49 89 f4             	mov    r12,rsi
    70f8:	41 89 d5             	mov    r13d,edx
	__first = __spec._M_parse_fill_and_align(__first, __last);
    70fb:	48 89 de             	mov    rsi,rbx
    70fe:	4c 89 f2             	mov    rdx,r14
    7101:	48 8d 7c 24 04       	lea    rdi,[rsp+0x4]
    7106:	e8 c5 fd ff ff       	call   6ed0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
    710b:	48 89 c3             	mov    rbx,rax
	  if (__first == __last || *__first == '}')
    710e:	4c 39 f0             	cmp    rax,r14
    7111:	0f 84 d1 00 00 00    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7117:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    711a:	3c 7d                	cmp    al,0x7d
    711c:	0f 84 c6 00 00 00    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
      _S_sign(_CharT __c) noexcept
    7122:	8d 50 e0             	lea    edx,[rax-0x20]
    7125:	80 fa 0d             	cmp    dl,0xd
    7128:	0f 87 f2 00 00 00    	ja     7220 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x170>
    712e:	0f b6 d2             	movzx  edx,dl
    7131:	48 8d 0d a8 df 00 00 	lea    rcx,[rip+0xdfa8]        # 150e0 <CSWTCH.1110>
    7138:	8b 14 91             	mov    edx,DWORD PTR [rcx+rdx*4]
	if (_Sign __sign = _S_sign(*__first))
    713b:	85 d2                	test   edx,edx
    713d:	0f 85 85 00 00 00    	jne    71c8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x118>
	if (*__first == '#')
    7143:	3c 23                	cmp    al,0x23
    7145:	0f 84 b5 01 00 00    	je     7300 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x250>
	bool __arg_id = false;
    714b:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    7150:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
    7155:	48 8d 54 24 08       	lea    rdx,[rsp+0x8]
    715a:	4d 89 e0             	mov    r8,r12
    715d:	4c 89 f6             	mov    rsi,r14
    7160:	48 89 df             	mov    rdi,rbx
    7163:	e8 88 f3 ff ff       	call   64f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next != __first)
    7168:	48 39 c3             	cmp    rbx,rax
    716b:	74 1f                	je     718c <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0xdc>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    716d:	0f b6 4c 24 03       	movzx  ecx,BYTE PTR [rsp+0x3]
    7172:	8d 51 01             	lea    edx,[rcx+0x1]
    7175:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [rsp+0x4]
    717a:	83 e2 03             	and    edx,0x3
    717d:	c1 e2 07             	shl    edx,0x7
    7180:	66 81 e1 7f fe       	and    cx,0xfe7f
    7185:	09 ca                	or     edx,ecx
    7187:	66 89 54 24 04       	mov    WORD PTR [rsp+0x4],dx
	  if (__first == __last || *__first == '}')
    718c:	49 39 c6             	cmp    r14,rax
    718f:	74 54                	je     71e5 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x135>
    7191:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    7194:	80 fa 7d             	cmp    dl,0x7d
    7197:	0f 84 bb 00 00 00    	je     7258 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1a8>
	if (*__first == 'L')
    719d:	80 fa 4c             	cmp    dl,0x4c
    71a0:	0f 84 8a 01 00 00    	je     7330 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x280>
	switch (*__first)
    71a6:	83 ea 42             	sub    edx,0x42
    71a9:	80 fa 36             	cmp    dl,0x36
    71ac:	0f 87 de 00 00 00    	ja     7290 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1e0>
    71b2:	48 8d 0d 83 e3 00 00 	lea    rcx,[rip+0xe383]        # 1553c <CSWTCH.1110+0x45c>
    71b9:	0f b6 d2             	movzx  edx,dl
    71bc:	48 63 14 91          	movsxd rdx,DWORD PTR [rcx+rdx*4]
    71c0:	48 01 ca             	add    rdx,rcx
    71c3:	ff e2                	jmp    rdx
    71c5:	0f 1f 00             	nop    DWORD PTR [rax]
	    _M_sign = __sign;
    71c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [rsp+0x4]
    71cd:	83 e2 03             	and    edx,0x3
    71d0:	c1 e2 02             	shl    edx,0x2
    71d3:	83 e0 f3             	and    eax,0xfffffff3
    71d6:	09 d0                	or     eax,edx
	    return __first + 1;
    71d8:	48 8d 53 01          	lea    rdx,[rbx+0x1]
	    _M_sign = __sign;
    71dc:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
	  if (__first == __last || *__first == '}')
    71e0:	49 39 d6             	cmp    r14,rdx
    71e3:	75 23                	jne    7208 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x158>
	  return __first;
    71e5:	4c 89 f3             	mov    rbx,r14
	  _M_spec = __spec;
    71e8:	48 8b 44 24 04       	mov    rax,QWORD PTR [rsp+0x4]
    71ed:	48 89 45 00          	mov    QWORD PTR [rbp+0x0],rax
    71f1:	8b 44 24 0c          	mov    eax,DWORD PTR [rsp+0xc]
    71f5:	89 45 08             	mov    DWORD PTR [rbp+0x8],eax
      }
    71f8:	48 83 c4 10          	add    rsp,0x10
    71fc:	48 89 d8             	mov    rax,rbx
    71ff:	5b                   	pop    rbx
    7200:	5d                   	pop    rbp
    7201:	41 5c                	pop    r12
    7203:	41 5d                	pop    r13
    7205:	41 5e                	pop    r14
    7207:	c3                   	ret
	  if (__first == __last || *__first == '}')
    7208:	0f b6 43 01          	movzx  eax,BYTE PTR [rbx+0x1]
    720c:	3c 7d                	cmp    al,0x7d
    720e:	0f 84 43 01 00 00    	je     7357 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x2a7>
	if (*__first == '#')
    7214:	3c 23                	cmp    al,0x23
    7216:	0f 84 e7 00 00 00    	je     7303 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x253>
    721c:	48 89 d3             	mov    rbx,rdx
    721f:	90                   	nop
	if (*__first == '0')
    7220:	3c 30                	cmp    al,0x30
    7222:	0f 85 23 ff ff ff    	jne    714b <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x9b>
	    ++__first;
    7228:	48 8d 43 01          	lea    rax,[rbx+0x1]
	    _M_zero_fill = true;
    722c:	80 4c 24 04 40       	or     BYTE PTR [rsp+0x4],0x40
	  if (__first == __last || *__first == '}')
    7231:	49 39 c6             	cmp    r14,rax
    7234:	74 af                	je     71e5 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x135>
    7236:	0f b6 53 01          	movzx  edx,BYTE PTR [rbx+0x1]
    723a:	80 fa 7d             	cmp    dl,0x7d
    723d:	74 19                	je     7258 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1a8>
	bool __arg_id = false;
    723f:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	if (*__first == '0')
    7244:	80 fa 30             	cmp    dl,0x30
    7247:	74 4c                	je     7295 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1e5>
    7249:	48 89 c3             	mov    rbx,rax
    724c:	e9 ff fe ff ff       	jmp    7150 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0xa0>
    7251:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  return __first;
    7258:	48 89 c3             	mov    rbx,rax
    725b:	eb 8b                	jmp    71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
	    ++__first;
    725d:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    7261:	b8 05 00 00 00       	mov    eax,0x5
    7266:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    726d:	00 00 00 
		__spec._M_type = _Pres_s; // same value (and meaning) as "none"
    7270:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
    7275:	c1 e0 03             	shl    eax,0x3
    7278:	83 e2 87             	and    edx,0xffffff87
    727b:	09 d0                	or     eax,edx
    727d:	88 44 24 05          	mov    BYTE PTR [rsp+0x5],al
	  if (__first == __last || *__first == '}')
    7281:	49 39 de             	cmp    r14,rbx
    7284:	0f 84 5e ff ff ff    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    728a:	48 89 d8             	mov    rax,rbx
    728d:	0f 1f 00             	nop    DWORD PTR [rax]
    7290:	80 38 7d             	cmp    BYTE PTR [rax],0x7d
    7293:	74 c3                	je     7258 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1a8>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    7295:	e8 b6 be ff ff       	call   3150 <abort@plt>
    729a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    ++__first;
    72a0:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    72a4:	b8 06 00 00 00       	mov    eax,0x6
    72a9:	eb c5                	jmp    7270 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    ++__first;
    72ab:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    72af:	b8 03 00 00 00       	mov    eax,0x3
    72b4:	eb ba                	jmp    7270 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    ++__first;
    72b6:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    72ba:	b8 04 00 00 00       	mov    eax,0x4
    72bf:	eb af                	jmp    7270 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    ++__first;
    72c1:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    72c5:	b8 01 00 00 00       	mov    eax,0x1
    72ca:	eb a4                	jmp    7270 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    ++__first;
    72cc:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    break;
    72d0:	b8 02 00 00 00       	mov    eax,0x2
    72d5:	eb 99                	jmp    7270 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    if (__type != _AsBool)
    72d7:	45 85 ed             	test   r13d,r13d
    72da:	74 b9                	je     7295 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1e5>
		++__first;
    72dc:	48 8d 58 01          	lea    rbx,[rax+0x1]
    72e0:	b8 07 00 00 00       	mov    eax,0x7
    72e5:	eb 89                	jmp    7270 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
	    if (__type == _AsBool)
    72e7:	45 85 ed             	test   r13d,r13d
    72ea:	75 a9                	jne    7295 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1e5>
		++__first;
    72ec:	48 8d 58 01          	lea    rbx,[rax+0x1]
    72f0:	31 c0                	xor    eax,eax
    72f2:	e9 79 ff ff ff       	jmp    7270 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x1c0>
    72f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    72fe:	00 00 
    7300:	48 89 da             	mov    rdx,rbx
	    ++__first;
    7303:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
	    _M_alt = true;
    7307:	80 4c 24 04 10       	or     BYTE PTR [rsp+0x4],0x10
	  if (__first == __last || *__first == '}')
    730c:	49 39 de             	cmp    r14,rbx
    730f:	0f 84 d3 fe ff ff    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7315:	0f b6 42 01          	movzx  eax,BYTE PTR [rdx+0x1]
    7319:	3c 7d                	cmp    al,0x7d
    731b:	0f 84 c7 fe ff ff    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7321:	e9 fa fe ff ff       	jmp    7220 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x170>
    7326:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    732d:	00 00 00 
	    ++__first;
    7330:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    _M_localized = true;
    7334:	80 4c 24 04 20       	or     BYTE PTR [rsp+0x4],0x20
	  if (__first == __last || *__first == '}')
    7339:	49 39 de             	cmp    r14,rbx
    733c:	0f 84 a6 fe ff ff    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7342:	0f b6 50 01          	movzx  edx,BYTE PTR [rax+0x1]
    7346:	48 89 d8             	mov    rax,rbx
    7349:	80 fa 7d             	cmp    dl,0x7d
    734c:	0f 84 96 fe ff ff    	je     71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    7352:	e9 4f fe ff ff       	jmp    71a6 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0xf6>
	  return __first;
    7357:	48 89 d3             	mov    rbx,rdx
    735a:	e9 89 fe ff ff       	jmp    71e8 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)+0x138>
    735f:	90                   	nop

0000000000007360 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)>:
	_M_parse(_ParseContext& __pc, _ChronoParts __parts)
    7360:	41 57                	push   r15
	  _ChronoSpec<_CharT> __spec{};
    7362:	66 0f ef c0          	pxor   xmm0,xmm0
	_M_parse(_ParseContext& __pc, _ChronoParts __parts)
    7366:	41 56                	push   r14
    7368:	41 55                	push   r13
    736a:	41 54                	push   r12
    736c:	55                   	push   rbp
    736d:	48 89 fd             	mov    rbp,rdi
    7370:	53                   	push   rbx
    7371:	48 83 ec 48          	sub    rsp,0x48
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    7375:	48 8b 1e             	mov    rbx,QWORD PTR [rsi]
      constexpr const_iterator end() const noexcept { return _M_end; }
    7378:	4c 8b 7e 08          	mov    r15,QWORD PTR [rsi+0x8]
	  _ChronoSpec<_CharT> __spec{};
    737c:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    7381:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
    7386:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
    738d:	00 
	    if (__first == __last || *__first == '}')
    738e:	49 39 df             	cmp    r15,rbx
    7391:	0f 84 49 01 00 00    	je     74e0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    7397:	80 3b 7d             	cmp    BYTE PTR [rbx],0x7d
    739a:	0f 84 40 01 00 00    	je     74e0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    73a0:	49 89 f6             	mov    r14,rsi
    73a3:	41 89 d4             	mov    r12d,edx
	  __first = __spec._M_parse_fill_and_align(__first, __last);
    73a6:	48 89 de             	mov    rsi,rbx
    73a9:	4c 89 fa             	mov    rdx,r15
    73ac:	48 8d 7c 24 20       	lea    rdi,[rsp+0x20]
    73b1:	e8 1a fb ff ff       	call   6ed0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
    73b6:	48 89 c3             	mov    rbx,rax
	    if (__first == __last || *__first == '}')
    73b9:	4c 39 f8             	cmp    rax,r15
    73bc:	0f 84 1e 01 00 00    	je     74e0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    73c2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    73c5:	3c 7d                	cmp    al,0x7d
    73c7:	0f 84 13 01 00 00    	je     74e0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
	bool __arg_id = false;
    73cd:	c6 44 24 1e 00       	mov    BYTE PTR [rsp+0x1e],0x0
	if (*__first == '0')
    73d2:	3c 30                	cmp    al,0x30
    73d4:	0f 84 30 02 00 00    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    73da:	48 8d 4c 24 1e       	lea    rcx,[rsp+0x1e]
    73df:	48 8d 54 24 24       	lea    rdx,[rsp+0x24]
    73e4:	4d 89 f0             	mov    r8,r14
    73e7:	4c 89 fe             	mov    rsi,r15
    73ea:	48 89 df             	mov    rdi,rbx
    73ed:	e8 fe f0 ff ff       	call   64f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
    73f2:	49 89 c5             	mov    r13,rax
	if (__next != __first)
    73f5:	48 39 c3             	cmp    rbx,rax
    73f8:	74 1f                	je     7419 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0xb9>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    73fa:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [rsp+0x1e]
    73ff:	0f b7 54 24 20       	movzx  edx,WORD PTR [rsp+0x20]
    7404:	83 c0 01             	add    eax,0x1
    7407:	66 81 e2 7f fe       	and    dx,0xfe7f
    740c:	83 e0 03             	and    eax,0x3
    740f:	c1 e0 07             	shl    eax,0x7
    7412:	09 d0                	or     eax,edx
    7414:	66 89 44 24 20       	mov    WORD PTR [rsp+0x20],ax
    7419:	4d 39 ef             	cmp    r15,r13
    741c:	0f 84 ee 00 00 00    	je     7510 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1b0>
    7422:	41 0f b6 4d 00       	movzx  ecx,BYTE PTR [r13+0x0]
    7427:	80 f9 7d             	cmp    cl,0x7d
    742a:	0f 84 e0 00 00 00    	je     7510 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1b0>
	  if (__parts & _ChronoParts::_Duration)
    7430:	44 89 e0             	mov    eax,r12d
    7433:	25 80 00 00 00       	and    eax,0x80
    7438:	89 44 24 0c          	mov    DWORD PTR [rsp+0xc],eax
    743c:	0f 84 ee 00 00 00    	je     7530 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1d0>
	if (__first[0] != '.')
    7442:	80 f9 2e             	cmp    cl,0x2e
    7445:	0f 85 e5 00 00 00    	jne    7530 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1d0>
	iterator __next = ++__first;
    744b:	49 83 c5 01          	add    r13,0x1
	bool __arg_id = false;
    744f:	c6 44 24 1f 00       	mov    BYTE PTR [rsp+0x1f],0x0
	if (__next != __last)
    7454:	4d 39 ef             	cmp    r15,r13
    7457:	0f 84 ad 01 00 00    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
    745d:	48 8d 4c 24 1f       	lea    rcx,[rsp+0x1f]
    7462:	48 8d 54 24 26       	lea    rdx,[rsp+0x26]
    7467:	4d 89 f0             	mov    r8,r14
    746a:	4c 89 fe             	mov    rsi,r15
    746d:	4c 89 ef             	mov    rdi,r13
    7470:	e8 7b f0 ff ff       	call   64f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
    7475:	48 89 c3             	mov    rbx,rax
	if (__next == __first)
    7478:	49 39 c5             	cmp    r13,rax
    747b:	0f 84 89 01 00 00    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
    7481:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [rsp+0x1f]
    7486:	0f b6 44 24 21       	movzx  eax,BYTE PTR [rsp+0x21]
    748b:	8d 54 12 02          	lea    edx,[rdx+rdx*1+0x2]
    748f:	83 e0 f9             	and    eax,0xfffffff9
    7492:	83 e2 06             	and    edx,0x6
    7495:	09 d0                	or     eax,edx
    7497:	88 44 24 21          	mov    BYTE PTR [rsp+0x21],al
	    if (__first == __last || *__first == '}')
    749b:	49 39 df             	cmp    r15,rbx
    749e:	74 40                	je     74e0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    74a0:	0f b6 0b             	movzx  ecx,BYTE PTR [rbx]
    74a3:	80 f9 7d             	cmp    cl,0x7d
    74a6:	74 38                	je     74e0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
	if (*__first == 'L')
    74a8:	80 f9 4c             	cmp    cl,0x4c
    74ab:	74 08                	je     74b5 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x155>
    74ad:	49 89 dd             	mov    r13,rbx
    74b0:	e9 80 00 00 00       	jmp    7535 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x1d5>
	      __first = __spec._M_parse_precision(__first, __last, __pc);
    74b5:	49 89 dd             	mov    r13,rbx
    74b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    74bf:	00 
	    ++__first;
    74c0:	49 8d 5d 01          	lea    rbx,[r13+0x1]
	    _M_localized = true;
    74c4:	80 4c 24 20 20       	or     BYTE PTR [rsp+0x20],0x20
	    if (__first == __last || *__first == '}')
    74c9:	49 39 df             	cmp    r15,rbx
    74cc:	74 12                	je     74e0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x180>
    74ce:	41 0f b6 4d 01       	movzx  ecx,BYTE PTR [r13+0x1]
    74d3:	80 f9 7d             	cmp    cl,0x7d
    74d6:	75 d5                	jne    74ad <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x14d>
    74d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    74df:	00 
	    _M_spec = __spec;
    74e0:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    74e6:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    74ea:	66 0f 6f 44 24 30    	movdqa xmm0,XMMWORD PTR [rsp+0x30]
    74f0:	0f 11 45 10          	movups XMMWORD PTR [rbp+0x10],xmm0
	}
    74f4:	48 83 c4 48          	add    rsp,0x48
    74f8:	48 89 d8             	mov    rax,rbx
    74fb:	5b                   	pop    rbx
    74fc:	5d                   	pop    rbp
    74fd:	41 5c                	pop    r12
    74ff:	41 5d                	pop    r13
    7501:	41 5e                	pop    r14
    7503:	41 5f                	pop    r15
    7505:	c3                   	ret
    7506:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    750d:	00 00 00 
	    _M_spec = __spec;
    7510:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
	    return __first;
    7516:	4c 89 eb             	mov    rbx,r13
	    _M_spec = __spec;
    7519:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    751d:	66 0f 6f 44 24 30    	movdqa xmm0,XMMWORD PTR [rsp+0x30]
    7523:	0f 11 45 10          	movups XMMWORD PTR [rbp+0x10],xmm0
    7527:	eb cb                	jmp    74f4 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x194>
    7529:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	if (*__first == 'L')
    7530:	80 f9 4c             	cmp    cl,0x4c
    7533:	74 8b                	je     74c0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x160>
	    __string_view __str(__first, __last - __first);
    7535:	4d 89 fe             	mov    r14,r15
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    7538:	be 7d 00 00 00       	mov    esi,0x7d
    753d:	4c 89 ef             	mov    rdi,r13
    7540:	88 4c 24 08          	mov    BYTE PTR [rsp+0x8],cl
    7544:	4d 29 ee             	sub    r14,r13
    7547:	4c 89 f2             	mov    rdx,r14
    754a:	e8 d1 bc ff ff       	call   3220 <memchr@plt>
    754f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [rsp+0x8]
    7554:	48 85 c0             	test   rax,rax
    7557:	48 89 c3             	mov    rbx,rax
    755a:	0f 84 00 03 00 00    	je     7860 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x500>
	    __ret = __p - this->_M_str;
    7560:	48 89 c2             	mov    rdx,rax
    7563:	4c 29 ea             	sub    rdx,r13
	    if (__end != __str.npos)
    7566:	48 83 fa ff          	cmp    rdx,0xffffffffffffffff
    756a:	0f 84 f0 02 00 00    	je     7860 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x500>
      if (__pos < this->_M_len)
    7570:	48 85 d2             	test   rdx,rdx
    7573:	74 24                	je     7599 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x239>
    7575:	be 7b 00 00 00       	mov    esi,0x7b
    757a:	4c 89 ef             	mov    rdi,r13
    757d:	88 4c 24 08          	mov    BYTE PTR [rsp+0x8],cl
    7581:	e8 9a bc ff ff       	call   3220 <memchr@plt>
	  if (__p)
    7586:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [rsp+0x8]
    758b:	48 85 c0             	test   rax,rax
    758e:	74 09                	je     7599 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x239>
	    __ret = __p - this->_M_str;
    7590:	4c 29 e8             	sub    rax,r13
	    if (__str.find('{') != __str.npos)
    7593:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
    7597:	75 71                	jne    760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	  const auto __chrono_specs = __first++; // Skip leading '%'
    7599:	4d 8d 7d 01          	lea    r15,[r13+0x1]
	  if (*__chrono_specs != '%')
    759d:	80 f9 25             	cmp    cl,0x25
    75a0:	75 68                	jne    760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	  while (__first != __last)
    75a2:	49 39 df             	cmp    r15,rbx
    75a5:	74 63                	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
	  int __needed = 0;
    75a7:	45 31 c0             	xor    r8d,r8d
	  _CharT __mod{};
    75aa:	31 d2                	xor    edx,edx
	      switch (__c)
    75ac:	4c 8d 35 65 e0 00 00 	lea    r14,[rip+0xe065]        # 15618 <CSWTCH.1110+0x538>
    75b3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    75ba:	00 00 00 00 
    75be:	66 90                	xchg   ax,ax
	      _CharT __c = *__first++;
    75c0:	41 0f b6 07          	movzx  eax,BYTE PTR [r15]
    75c4:	49 8d 7f 01          	lea    rdi,[r15+0x1]
	      switch (__c)
    75c8:	3c 7a                	cmp    al,0x7a
    75ca:	7f 3e                	jg     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
    75cc:	3c 50                	cmp    al,0x50
    75ce:	0f 8e dc 00 00 00    	jle    76b0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x350>
    75d4:	83 e8 51             	sub    eax,0x51
    75d7:	3c 29                	cmp    al,0x29
    75d9:	77 2f                	ja     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
    75db:	0f b6 c0             	movzx  eax,al
    75de:	49 63 04 86          	movsxd rax,DWORD PTR [r14+rax*4]
    75e2:	4c 01 f0             	add    rax,r14
    75e5:	ff e0                	jmp    rax
    75e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    75ee:	00 00 
		  __needed = _TimeOfDay;
    75f0:	41 b8 10 00 00 00    	mov    r8d,0x10
    75f6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    75fd:	00 00 00 
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7600:	80 fa 45             	cmp    dl,0x45
    7603:	74 05                	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		    || (__mod == 'O' && !(__allowed_mods & _Mod_O)))
    7605:	80 fa 4f             	cmp    dl,0x4f
    7608:	75 26                	jne    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    760a:	e8 41 bb ff ff       	call   3150 <abort@plt>
    760f:	90                   	nop
	      switch (__c)
    7610:	3c 42                	cmp    al,0x42
    7612:	0f 84 40 01 00 00    	je     7758 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3f8>
    7618:	3c 43                	cmp    al,0x43
    761a:	0f 85 18 01 00 00    	jne    7738 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3d8>
		  __needed = _Year;
    7620:	41 b8 01 00 00 00    	mov    r8d,0x1
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7626:	80 fa 45             	cmp    dl,0x45
    7629:	75 da                	jne    7605 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a5>
    762b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if ((__parts & __needed) != __needed)
    7630:	44 89 e0             	mov    eax,r12d
    7633:	44 89 44 24 08       	mov    DWORD PTR [rsp+0x8],r8d
    7638:	f7 d0                	not    eax
    763a:	44 85 c0             	test   eax,r8d
    763d:	75 cb                	jne    760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
      if (__pos < this->_M_len)
    763f:	48 89 da             	mov    rdx,rbx
    7642:	48 29 fa             	sub    rdx,rdi
    7645:	0f 84 b5 00 00 00    	je     7700 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3a0>
    764b:	be 25 00 00 00       	mov    esi,0x25
    7650:	48 89 3c 24          	mov    QWORD PTR [rsp],rdi
    7654:	e8 c7 bb ff ff       	call   3220 <memchr@plt>
	  if (__p)
    7659:	48 85 c0             	test   rax,rax
    765c:	0f 84 9e 00 00 00    	je     7700 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3a0>
	      if (__pos == 0)
    7662:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    7666:	44 8b 44 24 08       	mov    r8d,DWORD PTR [rsp+0x8]
    766b:	48 29 f8             	sub    rax,rdi
    766e:	74 38                	je     76a8 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x348>
		  if (__pos == __string_view::npos)
    7670:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
    7674:	0f 84 86 00 00 00    	je     7700 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x3a0>
		    __first += __pos + 1;
    767a:	4c 8d 7c 07 01       	lea    r15,[rdi+rax*1+0x1]
	      __mod = _CharT();
    767f:	31 d2                	xor    edx,edx
	  while (__first != __last)
    7681:	49 39 df             	cmp    r15,rbx
    7684:	0f 85 36 ff ff ff    	jne    75c0 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x260>
    768a:	e9 7b ff ff ff       	jmp    760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
    768f:	90                   	nop
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7690:	80 fa 45             	cmp    dl,0x45
    7693:	0f 84 71 ff ff ff    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _TimeOfDay;
    7699:	41 b8 10 00 00 00    	mov    r8d,0x10
    769f:	eb 8f                	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    76a1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		++__first;
    76a8:	49 83 c7 02          	add    r15,0x2
	      __mod = _CharT();
    76ac:	31 d2                	xor    edx,edx
    76ae:	eb d1                	jmp    7681 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x321>
	      switch (__c)
    76b0:	0f 84 54 ff ff ff    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
    76b6:	3c 43                	cmp    al,0x43
    76b8:	0f 8e 52 ff ff ff    	jle    7610 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2b0>
    76be:	8d 48 bc             	lea    ecx,[rax-0x44]
    76c1:	be 01 00 00 00       	mov    esi,0x1
    76c6:	48 d3 e6             	shl    rsi,cl
    76c9:	40 f6 c6 0d          	test   sil,0xd
    76cd:	0f 85 5d 01 00 00    	jne    7830 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x4d0>
    76d3:	f7 c6 30 02 00 00    	test   esi,0x230
    76d9:	75 b5                	jne    7690 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x330>
    76db:	f7 c6 02 08 00 00    	test   esi,0x802
    76e1:	0f 84 23 ff ff ff    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  if (__mod) [[unlikely]]
    76e7:	84 d2                	test   dl,dl
    76e9:	0f 85 11 ff ff ff    	jne    7600 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
	      _CharT __c = *__first++;
    76ef:	49 89 ff             	mov    r15,rdi
		  __mod = __c;
    76f2:	89 c2                	mov    edx,eax
    76f4:	eb 8b                	jmp    7681 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x321>
    76f6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    76fd:	00 00 00 
	  _M_spec = __spec;
    7700:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
		 = __string_view(__chrono_specs, __first - __chrono_specs);
    7706:	48 89 d8             	mov    rax,rbx
	  _M_spec._M_chrono_specs
    7709:	4c 89 6d 18          	mov    QWORD PTR [rbp+0x18],r13
		 = __string_view(__chrono_specs, __first - __chrono_specs);
    770d:	4c 29 e8             	sub    rax,r13
    7710:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	  _M_spec = __spec;
    7714:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
	  return __first;
    7718:	e9 d7 fd ff ff       	jmp    74f4 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x194>
    771d:	0f 1f 00             	nop    DWORD PTR [rax]
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7720:	80 fa 45             	cmp    dl,0x45
    7723:	0f 84 e1 fe ff ff    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Date;
    7729:	41 b8 0f 00 00 00    	mov    r8d,0xf
    772f:	e9 fc fe ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    7734:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      switch (__c)
    7738:	3c 25                	cmp    al,0x25
    773a:	0f 84 c0 fe ff ff    	je     7600 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7740:	3c 41                	cmp    al,0x41
    7742:	0f 85 c2 fe ff ff    	jne    760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Weekday;
    7748:	41 b8 08 00 00 00    	mov    r8d,0x8
    774e:	e9 ad fe ff ff       	jmp    7600 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7753:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      switch (__c)
    7758:	41 b8 02 00 00 00    	mov    r8d,0x2
    775e:	e9 9d fe ff ff       	jmp    7600 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7763:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7768:	80 fa 45             	cmp    dl,0x45
    776b:	0f 84 99 fe ff ff    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Day;
    7771:	41 b8 04 00 00 00    	mov    r8d,0x4
    7777:	e9 b4 fe ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    777c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    7780:	80 fa 45             	cmp    dl,0x45
    7783:	0f 84 81 fe ff ff    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Weekday;
    7789:	41 b8 08 00 00 00    	mov    r8d,0x8
    778f:	e9 9c fe ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    7794:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _Duration;
    7798:	41 b8 80 00 00 00    	mov    r8d,0x80
    779e:	e9 5d fe ff ff       	jmp    7600 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    77a3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		  __needed = _TimeZone;
    77a8:	41 b8 20 00 00 00    	mov    r8d,0x20
		  break;
    77ae:	e9 4d fe ff ff       	jmp    7600 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    77b3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		  __needed = _TimeOfDay;
    77b8:	41 b8 10 00 00 00    	mov    r8d,0x10
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    77be:	80 fa 45             	cmp    dl,0x45
    77c1:	0f 85 3e fe ff ff    	jne    7605 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a5>
    77c7:	e9 64 fe ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    77cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _DateTime;
    77d0:	41 b8 1f 00 00 00    	mov    r8d,0x1f
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    77d6:	80 fa 45             	cmp    dl,0x45
    77d9:	0f 85 26 fe ff ff    	jne    7605 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a5>
    77df:	e9 4c fe ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    77e4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    77e8:	80 fa 45             	cmp    dl,0x45
    77eb:	0f 84 19 fe ff ff    	je     760a <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2aa>
		  __needed = _Month;
    77f1:	41 b8 02 00 00 00    	mov    r8d,0x2
    77f7:	e9 34 fe ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    77fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _Date;
    7800:	8b 44 24 0c          	mov    eax,DWORD PTR [rsp+0xc]
    7804:	85 c0                	test   eax,eax
    7806:	b8 0f 00 00 00       	mov    eax,0xf
    780b:	44 0f 44 c0          	cmove  r8d,eax
    780f:	e9 ec fd ff ff       	jmp    7600 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    7814:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _Date;
    7818:	41 b8 0f 00 00 00    	mov    r8d,0xf
	      if ((__mod == 'E' && !(__allowed_mods & _Mod_E))
    781e:	80 fa 45             	cmp    dl,0x45
    7821:	0f 85 de fd ff ff    	jne    7605 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a5>
    7827:	e9 04 fe ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    782c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		  __needed = _Date;
    7830:	41 b8 0f 00 00 00    	mov    r8d,0xf
    7836:	e9 c5 fd ff ff       	jmp    7600 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2a0>
    783b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		  __needed = _Year;
    7840:	41 b8 01 00 00 00    	mov    r8d,0x1
    7846:	e9 e5 fd ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    784b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      switch (__c)
    7850:	41 b8 20 00 00 00    	mov    r8d,0x20
    7856:	e9 d5 fd ff ff       	jmp    7630 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x2d0>
    785b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    if (__end != __str.npos)
    7860:	4c 89 f2             	mov    rdx,r14
	  auto __last = __pc.end();
    7863:	4c 89 fb             	mov    rbx,r15
    7866:	e9 0a fd ff ff       	jmp    7575 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)+0x215>
    786b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000007870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
    basic_string<_CharT, _Traits, _Alloc>::
    7870:	41 57                	push   r15
    7872:	41 56                	push   r14
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    7874:	4c 8d 77 10          	lea    r14,[rdi+0x10]
    7878:	41 55                	push   r13
    787a:	41 54                	push   r12
    787c:	49 89 cc             	mov    r12,rcx
    787f:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
    7883:	55                   	push   rbp
    7884:	48 89 f5             	mov    rbp,rsi
    7887:	53                   	push   rbx
    7888:	48 89 fb             	mov    rbx,rdi
    788b:	48 83 ec 28          	sub    rsp,0x28
      { return _M_string_length; }
    788f:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
    7893:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
      const size_type __how_much = length() - __pos - __len1;
    7898:	48 89 c6             	mov    rsi,rax
    789b:	48 29 ce             	sub    rsi,rcx
      size_type __new_capacity = length() + __len2 - __len1;
    789e:	4c 89 c1             	mov    rcx,r8
    78a1:	48 29 d1             	sub    rcx,rdx
      const size_type __how_much = length() - __pos - __len1;
    78a4:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
      size_type __new_capacity = length() + __len2 - __len1;
    78a9:	4c 8d 3c 01          	lea    r15,[rcx+rax*1]
	if (_M_data() == _M_local_data())
    78ad:	4c 3b 37             	cmp    r14,QWORD PTR [rdi]
    78b0:	74 2e                	je     78e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x70>
	return _M_is_local() ? size_type(_S_local_capacity)
    78b2:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
      if (__capacity > max_size())
    78b6:	4d 85 ff             	test   r15,r15
    78b9:	0f 88 79 01 00 00    	js     7a38 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x1c8>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    78bf:	4c 39 f8             	cmp    rax,r15
    78c2:	73 3c                	jae    7900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x90>
    78c4:	48 01 c0             	add    rax,rax
    78c7:	49 39 c7             	cmp    r15,rax
    78ca:	73 34                	jae    7900 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x90>
	  if (__capacity > max_size())
    78cc:	48 85 c0             	test   rax,rax
    78cf:	0f 89 03 01 00 00    	jns    79d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x168>
    78d5:	e8 06 b8 ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
    78da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      if (__capacity > max_size())
    78e0:	4d 85 ff             	test   r15,r15
    78e3:	0f 88 4f 01 00 00    	js     7a38 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x1c8>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    78e9:	49 8d 47 f0          	lea    rax,[r15-0x10]
    78ed:	48 83 f8 0d          	cmp    rax,0xd
    78f1:	0f 86 31 01 00 00    	jbe    7a28 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x1b8>
    78f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    78fe:	00 00 
	if (__builtin_expect(__n > this->_M_max_size(), false))
    7900:	4c 89 ff             	mov    rdi,r15
    7903:	48 83 c7 01          	add    rdi,0x1
    7907:	78 cc                	js     78d5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x65>
    7909:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    790e:	e8 cd b8 ff ff       	call   31e0 <operator new(unsigned long)@plt>
      if (__pos)
    7913:	48 85 ed             	test   rbp,rbp
    7916:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
    791b:	49 89 c5             	mov    r13,rax
    791e:	74 22                	je     7942 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xd2>
      { return _M_dataplus._M_p; }
    7920:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
	if (__n == 1)
    7923:	48 83 fd 01          	cmp    rbp,0x1
    7927:	0f 84 bb 00 00 00    	je     79e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x178>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    792d:	48 89 ea             	mov    rdx,rbp
    7930:	48 89 c7             	mov    rdi,rax
    7933:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
    7938:	e8 73 b8 ff ff       	call   31b0 <memcpy@plt>
    793d:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
      if (__s && __len2)
    7942:	4d 85 e4             	test   r12,r12
    7945:	74 29                	je     7970 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x100>
    7947:	4d 85 c0             	test   r8,r8
    794a:	74 24                	je     7970 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x100>
	this->_S_copy(__r + __pos, __s, __len2);
    794c:	49 8d 7c 2d 00       	lea    rdi,[r13+rbp*1+0x0]
    7951:	49 83 f8 01          	cmp    r8,0x1
    7955:	0f 84 9d 00 00 00    	je     79f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x188>
    795b:	4c 89 c2             	mov    rdx,r8
    795e:	4c 89 e6             	mov    rsi,r12
    7961:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
    7966:	e8 45 b8 ff ff       	call   31b0 <memcpy@plt>
    796b:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
      if (__how_much)
    7970:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
      { return _M_dataplus._M_p; }
    7975:	4c 8b 23             	mov    r12,QWORD PTR [rbx]
    7978:	48 85 c0             	test   rax,rax
    797b:	75 33                	jne    79b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x140>
	if (_M_data() == _M_local_data())
    797d:	4d 39 e6             	cmp    r14,r12
    7980:	74 10                	je     7992 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x122>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7982:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7986:	4c 89 e7             	mov    rdi,r12
    7989:	48 8d 70 01          	lea    rsi,[rax+0x1]
    798d:	e8 6e b8 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
    7992:	4c 89 2b             	mov    QWORD PTR [rbx],r13
      { _M_allocated_capacity = __capacity; }
    7995:	4c 89 7b 10          	mov    QWORD PTR [rbx+0x10],r15
    }
    7999:	48 83 c4 28          	add    rsp,0x28
    799d:	5b                   	pop    rbx
    799e:	5d                   	pop    rbp
    799f:	41 5c                	pop    r12
    79a1:	41 5d                	pop    r13
    79a3:	41 5e                	pop    r14
    79a5:	41 5f                	pop    r15
    79a7:	c3                   	ret
    79a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    79af:	00 
		      _M_data() + __pos + __len1, __how_much);
    79b0:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
	this->_S_copy(__r + __pos + __len2,
    79b5:	4a 8d 7c 05 00       	lea    rdi,[rbp+r8*1+0x0]
    79ba:	4c 01 ef             	add    rdi,r13
		      _M_data() + __pos + __len1, __how_much);
    79bd:	4c 01 e6             	add    rsi,r12
	if (__n == 1)
    79c0:	48 83 f8 01          	cmp    rax,0x1
    79c4:	74 52                	je     7a18 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x1a8>
    79c6:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    79cb:	e8 e0 b7 ff ff       	call   31b0 <memcpy@plt>
      }
    79d0:	eb ab                	jmp    797d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x10d>
    79d2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    79d8:	48 8d 78 01          	lea    rdi,[rax+0x1]
	  __capacity = 2 * __old_capacity;
    79dc:	49 89 c7             	mov    r15,rax
    79df:	e9 25 ff ff ff       	jmp    7909 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x99>
    79e4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	__c1 = __c2;
    79e8:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    79eb:	41 88 45 00          	mov    BYTE PTR [r13+0x0],al
      }
    79ef:	e9 4e ff ff ff       	jmp    7942 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xd2>
    79f4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	__c1 = __c2;
    79f8:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
      { return _M_dataplus._M_p; }
    79fd:	4c 8b 23             	mov    r12,QWORD PTR [rbx]
    7a00:	88 07                	mov    BYTE PTR [rdi],al
      if (__how_much)
    7a02:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    7a07:	48 85 c0             	test   rax,rax
    7a0a:	0f 84 6d ff ff ff    	je     797d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x10d>
    7a10:	eb 9e                	jmp    79b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x140>
    7a12:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    7a18:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
    7a1b:	88 07                	mov    BYTE PTR [rdi],al
      }
    7a1d:	e9 5b ff ff ff       	jmp    797d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x10d>
    7a22:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  __capacity = 2 * __old_capacity;
    7a28:	41 bf 1e 00 00 00    	mov    r15d,0x1e
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    7a2e:	bf 1f 00 00 00       	mov    edi,0x1f
    7a33:	e9 d1 fe ff ff       	jmp    7909 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x99>
	std::__throw_length_error(__N("basic_string::_M_create"));
    7a38:	48 8d 3d d9 d6 00 00 	lea    rdi,[rip+0xd6d9]        # 15118 <CSWTCH.1110+0x38>
    7a3f:	e8 ec b6 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    7a44:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    7a4b:	00 00 00 
    7a4e:	66 90                	xchg   ax,ax

0000000000007a50 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()>:
      : _M_current(__i) { }
    7a50:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
	if (__s.empty()) [[unlikely]]
    7a54:	4c 8b 47 18          	mov    r8,QWORD PTR [rdi+0x18]
    7a58:	49 29 c8             	sub    r8,rcx
    7a5b:	0f 84 af 00 00 00    	je     7b10 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0xc0>
	if (this->max_size() - (this->size() - __n1) < __n2)
    7a61:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    7a68:	ff ff 7f 
      _M_overflow() override
    7a6b:	55                   	push   rbp
    7a6c:	53                   	push   rbx
    7a6d:	48 89 fb             	mov    rbx,rdi
    7a70:	48 83 ec 08          	sub    rsp,0x8
      { return _M_string_length; }
    7a74:	48 8b b7 28 01 00 00 	mov    rsi,QWORD PTR [rdi+0x128]
	if (this->max_size() - (this->size() - __n1) < __n2)
    7a7b:	48 29 f0             	sub    rax,rsi
    7a7e:	4c 39 c0             	cmp    rax,r8
    7a81:	0f 82 8a 00 00 00    	jb     7b11 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0xc1>
      { return _M_dataplus._M_p; }
    7a87:	48 8b bf 20 01 00 00 	mov    rdi,QWORD PTR [rdi+0x120]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    7a8e:	48 8d 83 30 01 00 00 	lea    rax,[rbx+0x130]
      const size_type __len = __n + this->size();
    7a95:	49 8d 2c 30          	lea    rbp,[r8+rsi*1]
	if (_M_data() == _M_local_data())
    7a99:	48 39 c7             	cmp    rdi,rax
    7a9c:	74 62                	je     7b00 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0xb0>
	return _M_is_local() ? size_type(_S_local_capacity)
    7a9e:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
      if (__len <= this->capacity())
    7aa5:	48 39 e8             	cmp    rax,rbp
    7aa8:	72 16                	jb     7ac0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0x70>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    7aaa:	48 01 f7             	add    rdi,rsi
	if (__n == 1)
    7aad:	49 83 f8 01          	cmp    r8,0x1
    7ab1:	74 3d                	je     7af0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0xa0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    7ab3:	4c 89 c2             	mov    rdx,r8
    7ab6:	48 89 ce             	mov    rsi,rcx
    7ab9:	e8 f2 b6 ff ff       	call   31b0 <memcpy@plt>
      }
    7abe:	eb 0e                	jmp    7ace <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0x7e>
	  _M_seq.append(__s.data(), __s.size());
    7ac0:	48 8d bb 20 01 00 00 	lea    rdi,[rbx+0x120]
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    7ac7:	31 d2                	xor    edx,edx
    7ac9:	e8 a2 fd ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
	__c1 = __c2;
    7ace:	48 8b 83 20 01 00 00 	mov    rax,QWORD PTR [rbx+0x120]
      { _M_string_length = __length; }
    7ad5:	48 89 ab 28 01 00 00 	mov    QWORD PTR [rbx+0x128],rbp
    7adc:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
      { _M_next = _M_span.begin(); }
    7ae0:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    7ae4:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
      }
    7ae8:	48 83 c4 08          	add    rsp,0x8
    7aec:	5b                   	pop    rbx
    7aed:	5d                   	pop    rbp
    7aee:	c3                   	ret
    7aef:	90                   	nop
    7af0:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    7af3:	88 07                	mov    BYTE PTR [rdi],al
      }
    7af5:	eb d7                	jmp    7ace <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0x7e>
    7af7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    7afe:	00 00 
	return _M_is_local() ? size_type(_S_local_capacity)
    7b00:	b8 0f 00 00 00       	mov    eax,0xf
    7b05:	eb 9e                	jmp    7aa5 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow()+0x55>
    7b07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    7b0e:	00 00 
    7b10:	c3                   	ret
	  __throw_length_error(__N(__s));
    7b11:	48 8d 3d a3 d6 00 00 	lea    rdi,[rip+0xd6a3]        # 151bb <CSWTCH.1110+0xdb>
    7b18:	e8 13 b6 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    7b1d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000007b20 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)>:
      _M_reserve(size_t __n) override
    7b20:	41 57                	push   r15
    7b22:	41 56                	push   r14
    7b24:	4c 8d b7 30 01 00 00 	lea    r14,[rdi+0x130]
    7b2b:	41 55                	push   r13
    7b2d:	41 54                	push   r12
    7b2f:	55                   	push   rbp
    7b30:	48 89 f5             	mov    rbp,rsi
    7b33:	53                   	push   rbx
    7b34:	48 89 fb             	mov    rbx,rdi
    7b37:	48 83 ec 18          	sub    rsp,0x18
    7b3b:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
    { return __lhs.base() - __rhs.base(); }
    7b3f:	4c 8b 47 18          	mov    r8,QWORD PTR [rdi+0x18]
	    if (this->_M_used().size()) [[unlikely]]
    7b43:	49 39 c8             	cmp    r8,rcx
    7b46:	0f 85 4c 01 00 00    	jne    7c98 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x178>
      { return _M_string_length; }
    7b4c:	4c 8b ab 28 01 00 00 	mov    r13,QWORD PTR [rbx+0x128]
      { return _M_dataplus._M_p; }
    7b53:	4c 8b a3 20 01 00 00 	mov    r12,QWORD PTR [rbx+0x120]
	      _M_seq.__resize_and_overwrite(__sz + __n,
    7b5a:	4c 01 ed             	add    rbp,r13
	if (_M_data() == _M_local_data())
    7b5d:	4d 39 f4             	cmp    r12,r14
    7b60:	0f 84 ea 00 00 00    	je     7c50 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x130>
	return _M_is_local() ? size_type(_S_local_capacity)
    7b66:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
      if (__res <= __capacity)
    7b6d:	48 39 e8             	cmp    rax,rbp
    7b70:	72 3e                	jb     7bb0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x90>
      { _M_string_length = __length; }
    7b72:	48 89 ab 28 01 00 00 	mov    QWORD PTR [rbx+0x128],rbp
	__c1 = __c2;
    7b79:	41 c6 04 2c 00       	mov    BYTE PTR [r12+rbp*1],0x0
      { return _M_dataplus._M_p; }
    7b7e:	48 8b 83 20 01 00 00 	mov    rax,QWORD PTR [rbx+0x120]
      { return _M_string_length; }
    7b85:	48 8b 93 28 01 00 00 	mov    rdx,QWORD PTR [rbx+0x128]
	_M_span = __s;
    7b8c:	48 89 43 08          	mov    QWORD PTR [rbx+0x8],rax
      { return __normal_iterator(_M_current + __n); }
    7b90:	4c 01 e8             	add    rax,r13
    7b93:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
      }
    7b97:	48 89 d8             	mov    rax,rbx
	_M_span = __s;
    7b9a:	48 89 53 10          	mov    QWORD PTR [rbx+0x10],rdx
      }
    7b9e:	48 83 c4 18          	add    rsp,0x18
    7ba2:	5b                   	pop    rbx
    7ba3:	5d                   	pop    rbp
    7ba4:	41 5c                	pop    r12
    7ba6:	41 5d                	pop    r13
    7ba8:	41 5e                	pop    r14
    7baa:	41 5f                	pop    r15
    7bac:	c3                   	ret
    7bad:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__capacity > max_size())
    7bb0:	48 85 ed             	test   rbp,rbp
    7bb3:	0f 88 6e 01 00 00    	js     7d27 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x207>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    7bb9:	4c 8d 3c 00          	lea    r15,[rax+rax*1]
    7bbd:	4c 39 fd             	cmp    rbp,r15
    7bc0:	72 7e                	jb     7c40 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x120>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    7bc2:	48 89 ef             	mov    rdi,rbp
    7bc5:	49 89 ef             	mov    r15,rbp
    7bc8:	48 83 c7 01          	add    rdi,0x1
    7bcc:	78 7b                	js     7c49 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x129>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    7bce:	e8 0d b6 ff ff       	call   31e0 <operator new(unsigned long)@plt>
      { return _M_dataplus._M_p; }
    7bd3:	48 8b 8b 20 01 00 00 	mov    rcx,QWORD PTR [rbx+0x120]
    7bda:	49 89 c4             	mov    r12,rax
      this->_S_copy(__tmp, _M_data(), length() + 1);
    7bdd:	48 8b 83 28 01 00 00 	mov    rax,QWORD PTR [rbx+0x128]
    7be4:	48 8d 50 01          	lea    rdx,[rax+0x1]
	if (__n == 1)
    7be8:	48 85 c0             	test   rax,rax
    7beb:	0f 84 8f 00 00 00    	je     7c80 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x160>
	if (__n == 0)
    7bf1:	48 85 d2             	test   rdx,rdx
    7bf4:	75 2a                	jne    7c20 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x100>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    7bf6:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    7bfd:	48 89 cf             	mov    rdi,rcx
    7c00:	48 8d 70 01          	lea    rsi,[rax+0x1]
    7c04:	e8 f7 b5 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
    7c09:	4c 89 a3 20 01 00 00 	mov    QWORD PTR [rbx+0x120],r12
      { _M_allocated_capacity = __capacity; }
    7c10:	4c 89 bb 30 01 00 00 	mov    QWORD PTR [rbx+0x130],r15
    7c17:	e9 56 ff ff ff       	jmp    7b72 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x52>
    7c1c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    7c20:	48 89 ce             	mov    rsi,rcx
    7c23:	4c 89 e7             	mov    rdi,r12
    7c26:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    7c2b:	e8 80 b5 ff ff       	call   31b0 <memcpy@plt>
	if (_M_data() == _M_local_data())
    7c30:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    7c35:	49 39 ce             	cmp    r14,rcx
    7c38:	75 bc                	jne    7bf6 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xd6>
    7c3a:	eb cd                	jmp    7c09 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xe9>
    7c3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    7c40:	49 8d 7f 01          	lea    rdi,[r15+0x1]
	  if (__capacity > max_size())
    7c44:	4d 85 ff             	test   r15,r15
    7c47:	79 85                	jns    7bce <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xae>
	    std::__throw_bad_alloc();
    7c49:	e8 92 b4 ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
    7c4e:	66 90                	xchg   ax,ax
      if (__res <= __capacity)
    7c50:	48 83 fd 0f          	cmp    rbp,0xf
    7c54:	0f 86 18 ff ff ff    	jbe    7b72 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x52>
      if (__capacity > max_size())
    7c5a:	48 85 ed             	test   rbp,rbp
    7c5d:	0f 88 c4 00 00 00    	js     7d27 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x207>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    7c63:	48 83 fd 1d          	cmp    rbp,0x1d
    7c67:	0f 87 55 ff ff ff    	ja     7bc2 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xa2>
    7c6d:	bf 1f 00 00 00       	mov    edi,0x1f
	  __capacity = 2 * __old_capacity;
    7c72:	41 bf 1e 00 00 00    	mov    r15d,0x1e
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    7c78:	e9 51 ff ff ff       	jmp    7bce <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xae>
    7c7d:	0f 1f 00             	nop    DWORD PTR [rax]
	__c1 = __c2;
    7c80:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    7c83:	41 88 04 24          	mov    BYTE PTR [r12],al
    7c87:	49 39 ce             	cmp    r14,rcx
    7c8a:	0f 85 66 ff ff ff    	jne    7bf6 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xd6>
    7c90:	e9 74 ff ff ff       	jmp    7c09 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0xe9>
    7c95:	0f 1f 00             	nop    DWORD PTR [rax]
      { return _M_string_length; }
    7c98:	48 8b b7 28 01 00 00 	mov    rsi,QWORD PTR [rdi+0x128]
    { return __lhs.base() - __rhs.base(); }
    7c9f:	49 29 c8             	sub    r8,rcx
	if (this->max_size() - (this->size() - __n1) < __n2)
    7ca2:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    7ca9:	ff ff 7f 
    7cac:	48 29 f0             	sub    rax,rsi
    7caf:	4c 39 c0             	cmp    rax,r8
    7cb2:	72 7f                	jb     7d33 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x213>
      { return _M_dataplus._M_p; }
    7cb4:	48 8b bf 20 01 00 00 	mov    rdi,QWORD PTR [rdi+0x120]
      const size_type __len = __n + this->size();
    7cbb:	4e 8d 24 06          	lea    r12,[rsi+r8*1]
	if (_M_data() == _M_local_data())
    7cbf:	4c 39 f7             	cmp    rdi,r14
    7cc2:	74 5c                	je     7d20 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x200>
	return _M_is_local() ? size_type(_S_local_capacity)
    7cc4:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
      if (__len <= this->capacity())
    7ccb:	4c 39 e0             	cmp    rax,r12
    7cce:	72 40                	jb     7d10 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1f0>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    7cd0:	48 01 f7             	add    rdi,rsi
	if (__n == 1)
    7cd3:	49 83 f8 01          	cmp    r8,0x1
    7cd7:	74 2f                	je     7d08 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1e8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    7cd9:	4c 89 c2             	mov    rdx,r8
    7cdc:	48 89 ce             	mov    rsi,rcx
    7cdf:	e8 cc b4 ff ff       	call   31b0 <memcpy@plt>
	__c1 = __c2;
    7ce4:	48 8b 83 20 01 00 00 	mov    rax,QWORD PTR [rbx+0x120]
      { _M_string_length = __length; }
    7ceb:	4c 89 a3 28 01 00 00 	mov    QWORD PTR [rbx+0x128],r12
    7cf2:	42 c6 04 20 00       	mov    BYTE PTR [rax+r12*1],0x0
      { _M_next = _M_span.begin(); }
    7cf7:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
    7cfb:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
    7cff:	e9 48 fe ff ff       	jmp    7b4c <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x2c>
    7d04:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    7d08:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    7d0b:	88 07                	mov    BYTE PTR [rdi],al
      }
    7d0d:	eb d5                	jmp    7ce4 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1c4>
    7d0f:	90                   	nop
	  _M_seq.append(__s.data(), __s.size());
    7d10:	48 8d bb 20 01 00 00 	lea    rdi,[rbx+0x120]
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    7d17:	31 d2                	xor    edx,edx
    7d19:	e8 52 fb ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    7d1e:	eb c4                	jmp    7ce4 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1c4>
	return _M_is_local() ? size_type(_S_local_capacity)
    7d20:	b8 0f 00 00 00       	mov    eax,0xf
    7d25:	eb a4                	jmp    7ccb <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_reserve(unsigned long)+0x1ab>
	std::__throw_length_error(__N("basic_string::_M_create"));
    7d27:	48 8d 3d ea d3 00 00 	lea    rdi,[rip+0xd3ea]        # 15118 <CSWTCH.1110+0x38>
    7d2e:	e8 fd b3 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
	  __throw_length_error(__N(__s));
    7d33:	48 8d 3d 81 d4 00 00 	lea    rdi,[rip+0xd481]        # 151bb <CSWTCH.1110+0xdb>
    7d3a:	e8 f1 b3 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    7d3f:	90                   	nop

0000000000007d40 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)>:
      _M_bump(size_t __n) override
    7d40:	41 55                	push   r13
    7d42:	41 54                	push   r12
    7d44:	55                   	push   rbp
    7d45:	53                   	push   rbx
    7d46:	48 89 fb             	mov    rbx,rdi
    7d49:	48 83 ec 08          	sub    rsp,0x8
    7d4d:	48 8b 6f 18          	mov    rbp,QWORD PTR [rdi+0x18]
      { return _M_string_length; }
    7d51:	4c 8b a7 28 01 00 00 	mov    r12,QWORD PTR [rdi+0x128]
    7d58:	48 2b 6f 08          	sub    rbp,QWORD PTR [rdi+0x8]
	    _M_seq.resize(__s.size() + __n);
    7d5c:	48 01 f5             	add    rbp,rsi
      if (__size < __n)
    7d5f:	49 39 ec             	cmp    r12,rbp
    7d62:	72 3c                	jb     7da0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x60>
      else if (__n < __size)
    7d64:	4c 39 e5             	cmp    rbp,r12
    7d67:	73 12                	jae    7d7b <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x3b>
	__c1 = __c2;
    7d69:	48 8b 83 20 01 00 00 	mov    rax,QWORD PTR [rbx+0x120]
      { _M_string_length = __length; }
    7d70:	48 89 ab 28 01 00 00 	mov    QWORD PTR [rbx+0x128],rbp
    7d77:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
	    this->_M_reset(this->_M_buf);
    7d7b:	48 8d 43 20          	lea    rax,[rbx+0x20]
	_M_span = __s;
    7d7f:	48 c7 43 10 00 01 00 	mov    QWORD PTR [rbx+0x10],0x100
    7d86:	00 
    7d87:	48 89 43 08          	mov    QWORD PTR [rbx+0x8],rax
	_M_next = __s.begin() + __pos;
    7d8b:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
      }
    7d8f:	48 83 c4 08          	add    rsp,0x8
    7d93:	5b                   	pop    rbx
    7d94:	5d                   	pop    rbp
    7d95:	41 5c                	pop    r12
    7d97:	41 5d                	pop    r13
    7d99:	c3                   	ret
    7d9a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	if (this->max_size() - (this->size() - __n1) < __n2)
    7da0:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    7da7:	ff ff 7f 
	this->append(__n - __size, __c);
    7daa:	49 89 ed             	mov    r13,rbp
    7dad:	4d 29 e5             	sub    r13,r12
    7db0:	4c 29 e0             	sub    rax,r12
    7db3:	4c 39 e8             	cmp    rax,r13
    7db6:	72 6f                	jb     7e27 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0xe7>
      { return _M_dataplus._M_p; }
    7db8:	48 8b bf 20 01 00 00 	mov    rdi,QWORD PTR [rdi+0x120]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    7dbf:	48 8d 83 30 01 00 00 	lea    rax,[rbx+0x130]
	if (_M_data() == _M_local_data())
    7dc6:	48 39 c7             	cmp    rdi,rax
    7dc9:	74 55                	je     7e20 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0xe0>
	return _M_is_local() ? size_type(_S_local_capacity)
    7dcb:	48 8b 83 30 01 00 00 	mov    rax,QWORD PTR [rbx+0x130]
      if (__new_size <= this->capacity())
    7dd2:	48 39 e8             	cmp    rax,rbp
    7dd5:	72 29                	jb     7e00 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0xc0>
	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    7dd7:	4c 01 e7             	add    rdi,r12
	if (__n == 1)
    7dda:	49 83 fd 01          	cmp    r13,0x1
    7dde:	74 10                	je     7df0 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0xb0>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    7de0:	4c 89 ea             	mov    rdx,r13
    7de3:	31 f6                	xor    esi,esi
    7de5:	e8 56 b3 ff ff       	call   3140 <memset@plt>
    7dea:	e9 7a ff ff ff       	jmp    7d69 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x29>
    7def:	90                   	nop
	__c1 = __c2;
    7df0:	c6 07 00             	mov    BYTE PTR [rdi],0x0
      }
    7df3:	e9 71 ff ff ff       	jmp    7d69 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x29>
    7df8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    7dff:	00 
	    _M_seq.resize(__s.size() + __n);
    7e00:	48 8d bb 20 01 00 00 	lea    rdi,[rbx+0x120]
	this->_M_mutate(__pos1, __n1, 0, __n2);
    7e07:	4d 89 e8             	mov    r8,r13
    7e0a:	31 c9                	xor    ecx,ecx
    7e0c:	31 d2                	xor    edx,edx
    7e0e:	4c 89 e6             	mov    rsi,r12
    7e11:	e8 5a fa ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
    7e16:	48 8b bb 20 01 00 00 	mov    rdi,QWORD PTR [rbx+0x120]
    7e1d:	eb b8                	jmp    7dd7 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x97>
    7e1f:	90                   	nop
	return _M_is_local() ? size_type(_S_local_capacity)
    7e20:	b8 0f 00 00 00       	mov    eax,0xf
    7e25:	eb ab                	jmp    7dd2 <std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_bump(unsigned long)+0x92>
	  __throw_length_error(__N(__s));
    7e27:	48 8d 3d 2a d3 00 00 	lea    rdi,[rip+0xd32a]        # 15158 <CSWTCH.1110+0x78>
    7e2e:	e8 fd b2 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    7e33:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    7e3a:	00 00 00 
    7e3d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000007e40 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>:
      parse(basic_format_parse_context<_CharT>& __pc)
    7e40:	41 55                	push   r13
    7e42:	41 54                	push   r12
    7e44:	49 89 fc             	mov    r12,rdi
    7e47:	55                   	push   rbp
    7e48:	53                   	push   rbx
    7e49:	48 83 ec 18          	sub    rsp,0x18
      constexpr const_iterator end() const noexcept { return _M_end; }
    7e4d:	4c 8b 6e 08          	mov    r13,QWORD PTR [rsi+0x8]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    7e51:	48 8b 1e             	mov    rbx,QWORD PTR [rsi]
	_Spec<_CharT> __spec{};
    7e54:	48 c7 44 24 04 00 00 	mov    QWORD PTR [rsp+0x4],0x0
    7e5b:	00 00 
    7e5d:	c7 44 24 0c 20 00 00 	mov    DWORD PTR [rsp+0xc],0x20
    7e64:	00 
	  if (__first == __last || *__first == '}')
    7e65:	49 39 dd             	cmp    r13,rbx
    7e68:	0f 84 c9 00 00 00    	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7e6e:	80 3b 7d             	cmp    BYTE PTR [rbx],0x7d
    7e71:	0f 84 c0 00 00 00    	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7e77:	48 89 f5             	mov    rbp,rsi
	__first = __spec._M_parse_fill_and_align(__first, __last);
    7e7a:	48 8d 7c 24 04       	lea    rdi,[rsp+0x4]
    7e7f:	48 89 de             	mov    rsi,rbx
    7e82:	4c 89 ea             	mov    rdx,r13
    7e85:	e8 46 f0 ff ff       	call   6ed0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
    7e8a:	48 89 c3             	mov    rbx,rax
	  if (__first == __last || *__first == '}')
    7e8d:	4c 39 e8             	cmp    rax,r13
    7e90:	0f 84 a1 00 00 00    	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    7e96:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    7e99:	3c 7d                	cmp    al,0x7d
    7e9b:	0f 84 96 00 00 00    	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
      _S_sign(_CharT __c) noexcept
    7ea1:	8d 50 e0             	lea    edx,[rax-0x20]
    7ea4:	80 fa 0d             	cmp    dl,0xd
    7ea7:	0f 87 c3 00 00 00    	ja     7f70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x130>
    7ead:	0f b6 d2             	movzx  edx,dl
    7eb0:	48 8d 0d 29 d2 00 00 	lea    rcx,[rip+0xd229]        # 150e0 <CSWTCH.1110>
    7eb7:	8b 14 91             	mov    edx,DWORD PTR [rcx+rdx*4]
	if (_Sign __sign = _S_sign(*__first))
    7eba:	85 d2                	test   edx,edx
    7ebc:	0f 85 6e 01 00 00    	jne    8030 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x1f0>
	if (*__first == '#')
    7ec2:	3c 23                	cmp    al,0x23
    7ec4:	0f 84 7e 02 00 00    	je     8148 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x308>
	if (__first[0] != '.')
    7eca:	3c 2e                	cmp    al,0x2e
    7ecc:	0f 85 8e 01 00 00    	jne    8060 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x220>
	iterator __next = ++__first;
    7ed2:	48 83 c3 01          	add    rbx,0x1
	bool __arg_id = false;
    7ed6:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	if (__next != __last)
    7edb:	49 39 dd             	cmp    r13,rbx
    7ede:	0f 84 aa 01 00 00    	je     808e <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x24e>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
    7ee4:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
    7ee9:	48 8d 54 24 0a       	lea    rdx,[rsp+0xa]
    7eee:	49 89 e8             	mov    r8,rbp
    7ef1:	4c 89 ee             	mov    rsi,r13
    7ef4:	48 89 df             	mov    rdi,rbx
    7ef7:	e8 f4 e5 ff ff       	call   64f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next == __first)
    7efc:	48 39 c3             	cmp    rbx,rax
    7eff:	0f 84 89 01 00 00    	je     808e <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x24e>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
    7f05:	0f b6 4c 24 03       	movzx  ecx,BYTE PTR [rsp+0x3]
    7f0a:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
    7f0f:	8d 4c 09 02          	lea    ecx,[rcx+rcx*1+0x2]
    7f13:	83 e2 f9             	and    edx,0xfffffff9
    7f16:	83 e1 06             	and    ecx,0x6
    7f19:	09 ca                	or     edx,ecx
    7f1b:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	  if (__first == __last || *__first == '}')
    7f1f:	49 39 c5             	cmp    r13,rax
    7f22:	0f 84 29 01 00 00    	je     8051 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x211>
    7f28:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    7f2b:	80 fa 7d             	cmp    dl,0x7d
    7f2e:	0f 85 cf 00 00 00    	jne    8003 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x1c3>
	  return __first;
    7f34:	48 89 c3             	mov    rbx,rax
	  _M_spec = __spec;
    7f37:	48 8b 44 24 04       	mov    rax,QWORD PTR [rsp+0x4]
    7f3c:	49 89 04 24          	mov    QWORD PTR [r12],rax
    7f40:	8b 44 24 0c          	mov    eax,DWORD PTR [rsp+0xc]
    7f44:	41 89 44 24 08       	mov    DWORD PTR [r12+0x8],eax
      }
    7f49:	48 83 c4 18          	add    rsp,0x18
    7f4d:	48 89 d8             	mov    rax,rbx
    7f50:	5b                   	pop    rbx
    7f51:	5d                   	pop    rbp
    7f52:	41 5c                	pop    r12
    7f54:	41 5d                	pop    r13
    7f56:	c3                   	ret
	  if (__first == __last || *__first == '}')
    7f57:	0f b6 43 01          	movzx  eax,BYTE PTR [rbx+0x1]
    7f5b:	3c 7d                	cmp    al,0x7d
    7f5d:	0f 84 55 02 00 00    	je     81b8 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x378>
	if (*__first == '#')
    7f63:	3c 23                	cmp    al,0x23
    7f65:	0f 84 e0 01 00 00    	je     814b <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x30b>
    7f6b:	48 89 d3             	mov    rbx,rdx
    7f6e:	66 90                	xchg   ax,ax
	if (*__first == '0')
    7f70:	3c 30                	cmp    al,0x30
    7f72:	0f 85 52 ff ff ff    	jne    7eca <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x8a>
	    ++__first;
    7f78:	48 8d 43 01          	lea    rax,[rbx+0x1]
	    _M_zero_fill = true;
    7f7c:	80 4c 24 04 40       	or     BYTE PTR [rsp+0x4],0x40
	  if (__first == __last || *__first == '}')
    7f81:	49 39 c5             	cmp    r13,rax
    7f84:	0f 84 c7 00 00 00    	je     8051 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x211>
    7f8a:	0f b6 53 01          	movzx  edx,BYTE PTR [rbx+0x1]
	  return __first;
    7f8e:	48 89 c3             	mov    rbx,rax
	  if (__first == __last || *__first == '}')
    7f91:	80 fa 7d             	cmp    dl,0x7d
    7f94:	74 a1                	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
	if (__first[0] != '.')
    7f96:	80 fa 2e             	cmp    dl,0x2e
    7f99:	0f 84 33 ff ff ff    	je     7ed2 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x92>
	bool __arg_id = false;
    7f9f:	c6 44 24 02 00       	mov    BYTE PTR [rsp+0x2],0x0
	if (*__first == '0')
    7fa4:	80 fa 30             	cmp    dl,0x30
    7fa7:	0f 84 e1 00 00 00    	je     808e <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x24e>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    7fad:	48 8d 4c 24 02       	lea    rcx,[rsp+0x2]
    7fb2:	48 8d 54 24 08       	lea    rdx,[rsp+0x8]
    7fb7:	49 89 e8             	mov    r8,rbp
    7fba:	4c 89 ee             	mov    rsi,r13
    7fbd:	48 89 df             	mov    rdi,rbx
    7fc0:	e8 2b e5 ff ff       	call   64f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next != __first)
    7fc5:	48 39 c3             	cmp    rbx,rax
    7fc8:	74 1f                	je     7fe9 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x1a9>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    7fca:	0f b6 4c 24 02       	movzx  ecx,BYTE PTR [rsp+0x2]
    7fcf:	8d 51 01             	lea    edx,[rcx+0x1]
    7fd2:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [rsp+0x4]
    7fd7:	83 e2 03             	and    edx,0x3
    7fda:	c1 e2 07             	shl    edx,0x7
    7fdd:	66 81 e1 7f fe       	and    cx,0xfe7f
    7fe2:	09 ca                	or     edx,ecx
    7fe4:	66 89 54 24 04       	mov    WORD PTR [rsp+0x4],dx
	  if (__first == __last || *__first == '}')
    7fe9:	49 39 c5             	cmp    r13,rax
    7fec:	74 63                	je     8051 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x211>
    7fee:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    7ff1:	80 fa 7d             	cmp    dl,0x7d
    7ff4:	0f 84 3a ff ff ff    	je     7f34 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf4>
	if (__first[0] != '.')
    7ffa:	80 fa 2e             	cmp    dl,0x2e
    7ffd:	0f 84 ad 01 00 00    	je     81b0 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x370>
	if (*__first == 'L')
    8003:	80 fa 4c             	cmp    dl,0x4c
    8006:	0f 84 64 01 00 00    	je     8170 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x330>
	switch (*__first)
    800c:	83 ea 41             	sub    edx,0x41
    800f:	80 fa 26             	cmp    dl,0x26
    8012:	77 6c                	ja     8080 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
    8014:	48 8d 0d a5 d6 00 00 	lea    rcx,[rip+0xd6a5]        # 156c0 <CSWTCH.1110+0x5e0>
    801b:	0f b6 d2             	movzx  edx,dl
    801e:	48 63 14 91          	movsxd rdx,DWORD PTR [rcx+rdx*4]
    8022:	48 01 ca             	add    rdx,rcx
    8025:	ff e2                	jmp    rdx
    8027:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    802e:	00 00 
	    _M_sign = __sign;
    8030:	0f b6 44 24 04       	movzx  eax,BYTE PTR [rsp+0x4]
    8035:	83 e2 03             	and    edx,0x3
    8038:	c1 e2 02             	shl    edx,0x2
    803b:	83 e0 f3             	and    eax,0xfffffff3
    803e:	09 d0                	or     eax,edx
	    return __first + 1;
    8040:	48 8d 53 01          	lea    rdx,[rbx+0x1]
	    _M_sign = __sign;
    8044:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
	  if (__first == __last || *__first == '}')
    8048:	49 39 d5             	cmp    r13,rdx
    804b:	0f 85 06 ff ff ff    	jne    7f57 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x117>
	  return __first;
    8051:	4c 89 eb             	mov    rbx,r13
    8054:	e9 de fe ff ff       	jmp    7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    8059:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	bool __arg_id = false;
    8060:	c6 44 24 02 00       	mov    BYTE PTR [rsp+0x2],0x0
    8065:	e9 43 ff ff ff       	jmp    7fad <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
	switch (*__first)
    806a:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_a;
    806d:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    8072:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_a;
    8076:	83 e2 87             	and    edx,0xffffff87
    8079:	83 ca 08             	or     edx,0x8
    807c:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	  if (__first == __last || *__first == '}')
    8080:	49 39 c5             	cmp    r13,rax
    8083:	74 cc                	je     8051 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x211>
    8085:	80 38 7d             	cmp    BYTE PTR [rax],0x7d
    8088:	0f 84 a6 fe ff ff    	je     7f34 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf4>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    808e:	e8 bd b0 ff ff       	call   3150 <abort@plt>
	switch (*__first)
    8093:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_g;
    8096:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    809b:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_g;
    809f:	83 e2 87             	and    edx,0xffffff87
    80a2:	83 ca 38             	or     edx,0x38
    80a5:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    80a9:	eb d5                	jmp    8080 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    80ab:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_f;
    80ae:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    80b3:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_f;
    80b7:	83 e2 87             	and    edx,0xffffff87
    80ba:	83 ca 28             	or     edx,0x28
    80bd:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    80c1:	eb bd                	jmp    8080 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    80c3:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_e;
    80c6:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    80cb:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_e;
    80cf:	83 e2 87             	and    edx,0xffffff87
    80d2:	83 ca 18             	or     edx,0x18
    80d5:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    80d9:	eb a5                	jmp    8080 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    80db:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_G;
    80de:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    80e3:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_G;
    80e7:	83 e2 87             	and    edx,0xffffff87
    80ea:	83 ca 40             	or     edx,0x40
    80ed:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    80f1:	eb 8d                	jmp    8080 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    80f3:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_F;
    80f6:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    80fb:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_F;
    80ff:	83 e2 87             	and    edx,0xffffff87
    8102:	83 ca 30             	or     edx,0x30
    8105:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    8109:	e9 72 ff ff ff       	jmp    8080 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    810e:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_E;
    8111:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    8116:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_E;
    811a:	83 e2 87             	and    edx,0xffffff87
    811d:	83 ca 20             	or     edx,0x20
    8120:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    8124:	e9 57 ff ff ff       	jmp    8080 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
	switch (*__first)
    8129:	48 89 d8             	mov    rax,rbx
	    __spec._M_type = _Pres_A;
    812c:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
	    ++__first;
    8131:	48 83 c0 01          	add    rax,0x1
	    __spec._M_type = _Pres_A;
    8135:	83 e2 87             	and    edx,0xffffff87
    8138:	83 ca 10             	or     edx,0x10
    813b:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	    break;
    813f:	e9 3c ff ff ff       	jmp    8080 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x240>
    8144:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    8148:	48 89 da             	mov    rdx,rbx
	    ++__first;
    814b:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
	    _M_alt = true;
    814f:	80 4c 24 04 10       	or     BYTE PTR [rsp+0x4],0x10
	  if (__first == __last || *__first == '}')
    8154:	49 39 dd             	cmp    r13,rbx
    8157:	0f 84 da fd ff ff    	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    815d:	0f b6 42 01          	movzx  eax,BYTE PTR [rdx+0x1]
    8161:	3c 7d                	cmp    al,0x7d
    8163:	0f 84 ce fd ff ff    	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    8169:	e9 02 fe ff ff       	jmp    7f70 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x130>
    816e:	66 90                	xchg   ax,ax
	    ++__first;
    8170:	48 8d 58 01          	lea    rbx,[rax+0x1]
	    _M_localized = true;
    8174:	80 4c 24 04 20       	or     BYTE PTR [rsp+0x4],0x20
	  if (__first == __last || *__first == '}')
    8179:	49 39 dd             	cmp    r13,rbx
    817c:	0f 84 b5 fd ff ff    	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
    8182:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
    8186:	3c 7d                	cmp    al,0x7d
    8188:	0f 84 a9 fd ff ff    	je     7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>
	switch (*__first)
    818e:	83 e8 41             	sub    eax,0x41
    8191:	3c 26                	cmp    al,0x26
    8193:	77 13                	ja     81a8 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x368>
    8195:	48 8d 15 c0 d5 00 00 	lea    rdx,[rip+0xd5c0]        # 1575c <CSWTCH.1110+0x67c>
    819c:	0f b6 c0             	movzx  eax,al
    819f:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    81a3:	48 01 d0             	add    rax,rdx
    81a6:	ff e0                	jmp    rax
    81a8:	48 89 d8             	mov    rax,rbx
    81ab:	e9 d5 fe ff ff       	jmp    8085 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x245>
	    __first = __spec._M_parse_width(__first, __last, __pc);
    81b0:	48 89 c3             	mov    rbx,rax
    81b3:	e9 1a fd ff ff       	jmp    7ed2 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0x92>
	  return __first;
    81b8:	48 89 d3             	mov    rbx,rdx
    81bb:	e9 77 fd ff ff       	jmp    7f37 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)+0xf7>

00000000000081c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>:
      push_back(_CharT __c)
    81c0:	41 57                	push   r15
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    81c2:	4c 8d 7f 10          	lea    r15,[rdi+0x10]
      push_back(_CharT __c)
    81c6:	89 f1                	mov    ecx,esi
    81c8:	41 56                	push   r14
    81ca:	41 55                	push   r13
    81cc:	41 54                	push   r12
    81ce:	55                   	push   rbp
    81cf:	53                   	push   rbx
    81d0:	48 89 fb             	mov    rbx,rdi
    81d3:	48 83 ec 18          	sub    rsp,0x18
      { return _M_string_length; }
    81d7:	48 8b 6f 08          	mov    rbp,QWORD PTR [rdi+0x8]
      { return _M_dataplus._M_p; }
    81db:	4c 8b 27             	mov    r12,QWORD PTR [rdi]
	if (__size + 1 > this->capacity())
    81de:	4c 8d 6d 01          	lea    r13,[rbp+0x1]
	if (_M_data() == _M_local_data())
    81e2:	4d 39 e7             	cmp    r15,r12
    81e5:	0f 84 95 00 00 00    	je     8280 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0xc0>
	return _M_is_local() ? size_type(_S_local_capacity)
    81eb:	4c 8b 77 10          	mov    r14,QWORD PTR [rdi+0x10]
	if (__size + 1 > this->capacity())
    81ef:	4d 39 ee             	cmp    r14,r13
    81f2:	72 24                	jb     8218 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x58>
	__c1 = __c2;
    81f4:	41 88 0c 2c          	mov    BYTE PTR [r12+rbp*1],cl
    81f8:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_string_length = __length; }
    81fb:	4c 89 6b 08          	mov    QWORD PTR [rbx+0x8],r13
    81ff:	c6 44 28 01 00       	mov    BYTE PTR [rax+rbp*1+0x1],0x0
      }
    8204:	48 83 c4 18          	add    rsp,0x18
    8208:	5b                   	pop    rbx
    8209:	5d                   	pop    rbp
    820a:	41 5c                	pop    r12
    820c:	41 5d                	pop    r13
    820e:	41 5e                	pop    r14
    8210:	41 5f                	pop    r15
    8212:	c3                   	ret
    8213:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      if (__capacity > max_size())
    8218:	4d 85 ed             	test   r13,r13
    821b:	0f 88 d1 00 00 00    	js     82f2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x132>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    8221:	4d 01 f6             	add    r14,r14
    8224:	4d 39 f5             	cmp    r13,r14
    8227:	0f 82 b3 00 00 00    	jb     82e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x120>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    822d:	48 89 ef             	mov    rdi,rbp
    8230:	4d 89 ee             	mov    r14,r13
    8233:	48 83 c7 02          	add    rdi,0x2
    8237:	0f 88 b0 00 00 00    	js     82ed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x12d>
    823d:	89 0c 24             	mov    DWORD PTR [rsp],ecx
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    8240:	e8 9b af ff ff       	call   31e0 <operator new(unsigned long)@plt>
      if (__pos)
    8245:	48 85 ed             	test   rbp,rbp
      { return _M_dataplus._M_p; }
    8248:	4c 8b 03             	mov    r8,QWORD PTR [rbx]
    824b:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
    824e:	49 89 c4             	mov    r12,rax
    8251:	75 53                	jne    82a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0xe6>
	if (_M_data() == _M_local_data())
    8253:	4d 39 c7             	cmp    r15,r8
    8256:	74 16                	je     826e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0xae>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    8258:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    825c:	4c 89 c7             	mov    rdi,r8
    825f:	89 0c 24             	mov    DWORD PTR [rsp],ecx
    8262:	48 8d 70 01          	lea    rsi,[rax+0x1]
    8266:	e8 95 af ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    826b:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
      { _M_dataplus._M_p = __p; }
    826e:	4c 89 23             	mov    QWORD PTR [rbx],r12
      { _M_allocated_capacity = __capacity; }
    8271:	4c 89 73 10          	mov    QWORD PTR [rbx+0x10],r14
    }
    8275:	e9 7a ff ff ff       	jmp    81f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x34>
    827a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	if (__size + 1 > this->capacity())
    8280:	49 83 fd 10          	cmp    r13,0x10
    8284:	0f 85 6a ff ff ff    	jne    81f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x34>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    828a:	bf 1f 00 00 00       	mov    edi,0x1f
    828f:	89 34 24             	mov    DWORD PTR [rsp],esi
	  __capacity = 2 * __old_capacity;
    8292:	41 be 1e 00 00 00    	mov    r14d,0x1e
    8298:	e8 43 af ff ff       	call   31e0 <operator new(unsigned long)@plt>
      { return _M_dataplus._M_p; }
    829d:	4c 8b 03             	mov    r8,QWORD PTR [rbx]
    82a0:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
    82a3:	49 89 c4             	mov    r12,rax
	if (__n == 1)
    82a6:	48 83 fd 01          	cmp    rbp,0x1
    82aa:	74 24                	je     82d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x110>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    82ac:	4c 89 c6             	mov    rsi,r8
    82af:	48 89 ea             	mov    rdx,rbp
    82b2:	4c 89 e7             	mov    rdi,r12
    82b5:	89 4c 24 0c          	mov    DWORD PTR [rsp+0xc],ecx
    82b9:	4c 89 04 24          	mov    QWORD PTR [rsp],r8
    82bd:	e8 ee ae ff ff       	call   31b0 <memcpy@plt>
    82c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [rsp+0xc]
    82c6:	4c 8b 04 24          	mov    r8,QWORD PTR [rsp]
      }
    82ca:	eb 87                	jmp    8253 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x93>
    82cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	__c1 = __c2;
    82d0:	41 0f b6 00          	movzx  eax,BYTE PTR [r8]
    82d4:	41 88 04 24          	mov    BYTE PTR [r12],al
      }
    82d8:	e9 76 ff ff ff       	jmp    8253 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x93>
    82dd:	0f 1f 00             	nop    DWORD PTR [rax]
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    82e0:	49 8d 7e 01          	lea    rdi,[r14+0x1]
	  if (__capacity > max_size())
    82e4:	4d 85 f6             	test   r14,r14
    82e7:	0f 89 50 ff ff ff    	jns    823d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x7d>
	    std::__throw_bad_alloc();
    82ed:	e8 ee ad ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
	std::__throw_length_error(__N("basic_string::_M_create"));
    82f2:	48 8d 3d 1f ce 00 00 	lea    rdi,[rip+0xce1f]        # 15118 <CSWTCH.1110+0x38>
    82f9:	e8 32 ae ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    82fe:	66 90                	xchg   ax,ax

0000000000008300 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)>:
      parse(basic_format_parse_context<_CharT>& __pc)
    8300:	41 55                	push   r13
    8302:	41 54                	push   r12
    8304:	49 89 fc             	mov    r12,rdi
    8307:	55                   	push   rbp
    8308:	53                   	push   rbx
    8309:	48 83 ec 18          	sub    rsp,0x18
      constexpr const_iterator begin() const noexcept { return _M_begin; }
    830d:	48 8b 06             	mov    rax,QWORD PTR [rsi]
      constexpr const_iterator end() const noexcept { return _M_end; }
    8310:	4c 8b 6e 08          	mov    r13,QWORD PTR [rsi+0x8]
	_Spec<_CharT> __spec{};
    8314:	48 c7 44 24 04 00 00 	mov    QWORD PTR [rsp+0x4],0x0
    831b:	00 00 
    831d:	c7 44 24 0c 20 00 00 	mov    DWORD PTR [rsp+0xc],0x20
    8324:	00 
	  if (__first == __last || *__first == '}')
    8325:	4c 39 e8             	cmp    rax,r13
    8328:	0f 84 32 01 00 00    	je     8460 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x160>
    832e:	80 38 7d             	cmp    BYTE PTR [rax],0x7d
    8331:	0f 84 df 00 00 00    	je     8416 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    8337:	48 89 f3             	mov    rbx,rsi
	__first = __spec._M_parse_fill_and_align(__first, __last);
    833a:	48 8d 7c 24 04       	lea    rdi,[rsp+0x4]
    833f:	4c 89 ea             	mov    rdx,r13
    8342:	48 89 c6             	mov    rsi,rax
    8345:	e8 86 eb ff ff       	call   6ed0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
    834a:	48 89 c5             	mov    rbp,rax
	  if (__first == __last || *__first == '}')
    834d:	4c 39 e8             	cmp    rax,r13
    8350:	0f 84 0a 01 00 00    	je     8460 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x160>
    8356:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    8359:	3c 7d                	cmp    al,0x7d
    835b:	0f 84 d7 00 00 00    	je     8438 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x138>
	bool __arg_id = false;
    8361:	c6 44 24 02 00       	mov    BYTE PTR [rsp+0x2],0x0
	if (*__first == '0')
    8366:	3c 30                	cmp    al,0x30
    8368:	0f 84 ff 00 00 00    	je     846d <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    836e:	48 8d 4c 24 02       	lea    rcx,[rsp+0x2]
    8373:	48 8d 54 24 08       	lea    rdx,[rsp+0x8]
    8378:	49 89 d8             	mov    r8,rbx
    837b:	4c 89 ee             	mov    rsi,r13
    837e:	48 89 ef             	mov    rdi,rbp
    8381:	e8 6a e1 ff ff       	call   64f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next != __first)
    8386:	48 39 c5             	cmp    rbp,rax
    8389:	74 1f                	je     83aa <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0xaa>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    838b:	0f b6 4c 24 02       	movzx  ecx,BYTE PTR [rsp+0x2]
    8390:	8d 51 01             	lea    edx,[rcx+0x1]
    8393:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [rsp+0x4]
    8398:	83 e2 03             	and    edx,0x3
    839b:	c1 e2 07             	shl    edx,0x7
    839e:	66 81 e1 7f fe       	and    cx,0xfe7f
    83a3:	09 ca                	or     edx,ecx
    83a5:	66 89 54 24 04       	mov    WORD PTR [rsp+0x4],dx
	  if (__first == __last || *__first == '}')
    83aa:	49 39 c5             	cmp    r13,rax
    83ad:	74 67                	je     8416 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    83af:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    83b2:	80 fa 7d             	cmp    dl,0x7d
    83b5:	74 5f                	je     8416 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
	if (__first[0] != '.')
    83b7:	80 fa 2e             	cmp    dl,0x2e
    83ba:	0f 85 a8 00 00 00    	jne    8468 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x168>
	iterator __next = ++__first;
    83c0:	48 8d 68 01          	lea    rbp,[rax+0x1]
	bool __arg_id = false;
    83c4:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	if (__next != __last)
    83c9:	49 39 ed             	cmp    r13,rbp
    83cc:	0f 84 9b 00 00 00    	je     846d <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
	  __next = _S_parse_width_or_precision(__first, __last, _M_prec,
    83d2:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
    83d7:	48 8d 54 24 0a       	lea    rdx,[rsp+0xa]
    83dc:	49 89 d8             	mov    r8,rbx
    83df:	4c 89 ee             	mov    rsi,r13
    83e2:	48 89 ef             	mov    rdi,rbp
    83e5:	e8 06 e1 ff ff       	call   64f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next == __first)
    83ea:	48 39 c5             	cmp    rbp,rax
    83ed:	74 7e                	je     846d <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
    83ef:	0f b6 4c 24 03       	movzx  ecx,BYTE PTR [rsp+0x3]
    83f4:	0f b6 54 24 05       	movzx  edx,BYTE PTR [rsp+0x5]
    83f9:	8d 4c 09 02          	lea    ecx,[rcx+rcx*1+0x2]
    83fd:	83 e2 f9             	and    edx,0xfffffff9
    8400:	83 e1 06             	and    ecx,0x6
    8403:	09 ca                	or     edx,ecx
    8405:	88 54 24 05          	mov    BYTE PTR [rsp+0x5],dl
	  if (__first == __last || *__first == '}')
    8409:	49 39 c5             	cmp    r13,rax
    840c:	74 08                	je     8416 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    840e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    8411:	80 fa 7d             	cmp    dl,0x7d
    8414:	75 52                	jne    8468 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x168>
	  _M_spec = __spec;
    8416:	48 8b 54 24 04       	mov    rdx,QWORD PTR [rsp+0x4]
    841b:	49 89 14 24          	mov    QWORD PTR [r12],rdx
    841f:	8b 54 24 0c          	mov    edx,DWORD PTR [rsp+0xc]
    8423:	41 89 54 24 08       	mov    DWORD PTR [r12+0x8],edx
      }
    8428:	48 83 c4 18          	add    rsp,0x18
    842c:	5b                   	pop    rbx
    842d:	5d                   	pop    rbp
    842e:	41 5c                	pop    r12
    8430:	41 5d                	pop    r13
    8432:	c3                   	ret
    8433:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  return __first;
    8438:	48 89 e8             	mov    rax,rbp
    843b:	eb d9                	jmp    8416 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    843d:	0f 1f 00             	nop    DWORD PTR [rax]
	  ++__first;
    8440:	48 8d 50 01          	lea    rdx,[rax+0x1]
	  if (__first == __last || *__first == '}')
    8444:	4c 39 ea             	cmp    rdx,r13
    8447:	74 17                	je     8460 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x160>
    8449:	80 78 01 7d          	cmp    BYTE PTR [rax+0x1],0x7d
    844d:	75 1e                	jne    846d <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x16d>
    844f:	49 89 d5             	mov    r13,rdx
    8452:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    8459:	00 00 00 00 
    845d:	0f 1f 00             	nop    DWORD PTR [rax]
	  return __first;
    8460:	4c 89 e8             	mov    rax,r13
    8463:	eb b1                	jmp    8416 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x116>
    8465:	0f 1f 00             	nop    DWORD PTR [rax]
	if (*__first == 's')
    8468:	80 fa 73             	cmp    dl,0x73
    846b:	74 d3                	je     8440 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)+0x140>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    846d:	e8 de ac ff ff       	call   3150 <abort@plt>
    8472:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8479:	00 00 00 
    847c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000008480 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>:
	_M_R_T(const _Tp& __t, typename _FormatContext::iterator __out,
    8480:	41 57                	push   r15
    8482:	66 0f ef d2          	pxor   xmm2,xmm2
    8486:	48 8d 0d 33 34 01 00 	lea    rcx,[rip+0x13433]        # 1b8c0 <vtable for std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >+0x10>
    848d:	49 89 d7             	mov    r15,rdx
    8490:	41 56                	push   r14
    8492:	66 48 0f 6e c9       	movq   xmm1,rcx
    8497:	41 55                	push   r13
    8499:	41 54                	push   r12
    849b:	55                   	push   rbp
    849c:	53                   	push   rbx
    849d:	48 81 ec 88 01 00 00 	sub    rsp,0x188
    84a4:	f2 0f 10 06          	movsd  xmm0,QWORD PTR [rsi]
    84a8:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    84ad:	44 89 44 24 04       	mov    DWORD PTR [rsp+0x4],r8d
    84b2:	66 0f 2f c2          	comisd xmm0,xmm2
    84b6:	66 48 0f 6e e0       	movq   xmm4,rax
    84bb:	66 0f 6c cc          	punpcklqdq xmm1,xmm4
#if __cpp_lib_three_way_comparison
    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      requires three_way_comparable<common_type_t<_Rep1, _Rep2>>
      constexpr auto
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    84bf:	0f 8a 7b 01 00 00    	jp     8640 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1c0>
    84c5:	74 06                	je     84cd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4d>
    84c7:	0f 86 73 01 00 00    	jbe    8640 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1c0>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    84cd:	f2 0f 10 1d 23 04 01 	movsd  xmm3,QWORD PTR [rip+0x10423]        # 188f8 <std::__unicode::__v15_1_0::__width_edges+0x478>
    84d4:	00 
    84d5:	66 0f 28 d0          	movapd xmm2,xmm0
      : _M_span(__span), _M_next(__span.begin())
    84d9:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    84de:	45 31 c0             	xor    r8d,r8d
    84e1:	48 8d 44 24 10       	lea    rax,[rsp+0x10]
    84e6:	48 8d 4c 24 20       	lea    rcx,[rsp+0x20]
    84eb:	be 09 00 00 00       	mov    esi,0x9
      : _M_span(__span), _M_next(__span.begin())
    84f0:	48 c7 44 24 50 00 01 	mov    QWORD PTR [rsp+0x50],0x100
    84f7:	00 00 
    84f9:	f2 0f 5e d3          	divsd  xmm2,xmm3
    84fd:	48 8d 7c 24 40       	lea    rdi,[rsp+0x40]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    8502:	48 8d 9c 24 70 01 00 	lea    rbx,[rsp+0x170]
    8509:	00 
      { _M_string_length = __length; }
    850a:	48 c7 84 24 68 01 00 	mov    QWORD PTR [rsp+0x168],0x0
    8511:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    8516:	48 89 9c 24 60 01 00 	mov    QWORD PTR [rsp+0x160],rbx
    851d:	00 
	__c1 = __c2;
    851e:	c6 84 24 70 01 00 00 	mov    BYTE PTR [rsp+0x170],0x0
    8525:	00 
    8526:	48 c7 44 24 20 51 00 	mov    QWORD PTR [rsp+0x20],0x51
    852d:	00 00 
    852f:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
      { }
    8534:	0f 29 4c 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm1
	    return _ToDur(static_cast<__to_rep>(
    8539:	f2 48 0f 2c d2       	cvttsd2si rdx,xmm2
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    853e:	66 0f ef d2          	pxor   xmm2,xmm2
    8542:	f2 48 0f 2a d2       	cvtsi2sd xmm2,rdx
    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
    8547:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    854c:	48 8d 15 7d cc 00 00 	lea    rdx,[rip+0xcc7d]        # 151d0 <CSWTCH.1110+0xf0>
    8553:	f2 0f 59 d3          	mulsd  xmm2,xmm3
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    8557:	f2 0f 5c c2          	subsd  xmm0,xmm2
    855b:	f2 0f 11 44 24 08    	movsd  QWORD PTR [rsp+0x8],xmm0
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    8561:	f2 0f 5e 05 97 03 01 	divsd  xmm0,QWORD PTR [rip+0x10397]        # 18900 <std::__unicode::__v15_1_0::__width_edges+0x480>
    8568:	00 
	    return _ToDur(static_cast<__to_rep>(
    8569:	f2 4c 0f 2c e8       	cvttsd2si r13,xmm0
    856e:	e8 4d dd ff ff       	call   62c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
      : _M_current(__i) { }
    8573:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    { return __lhs.base() - __rhs.base(); }
    8578:	4c 8b 44 24 58       	mov    r8,QWORD PTR [rsp+0x58]
      { return _M_string_length; }
    857d:	48 8b b4 24 68 01 00 	mov    rsi,QWORD PTR [rsp+0x168]
    8584:	00 
    8585:	48 89 f1             	mov    rcx,rsi
	if (this->_M_used().size() != 0)
    8588:	4c 39 c0             	cmp    rax,r8
    858b:	0f 85 bf 00 00 00    	jne    8650 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1d0>
      { return _M_dataplus._M_p; }
    8591:	48 8b 94 24 60 01 00 	mov    rdx,QWORD PTR [rsp+0x160]
    8598:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    8599:	4c 8d 64 24 30       	lea    r12,[rsp+0x30]
    859e:	4c 89 64 24 20       	mov    QWORD PTR [rsp+0x20],r12
	if (_M_data() == _M_local_data())
    85a3:	48 39 da             	cmp    rdx,rbx
    85a6:	0f 84 cc 02 00 00    	je     8878 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3f8>
      { _M_allocated_capacity = __capacity; }
    85ac:	48 8b 84 24 70 01 00 	mov    rax,QWORD PTR [rsp+0x170]
    85b3:	00 
      { _M_dataplus._M_p = __p; }
    85b4:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
      { return _M_string_length; }
    85b9:	48 89 f1             	mov    rcx,rsi
      { _M_allocated_capacity = __capacity; }
    85bc:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
			 "9999999999999999") + 2 * (__n & 0x7f),
    85c1:	4b 8d 44 2d 00       	lea    rax,[r13+r13*1+0x0]
	};
    85c6:	48 8d 35 6b ce 00 00 	lea    rsi,[rip+0xce6b]        # 15438 <CSWTCH.1110+0x358>
      { _M_string_length = __length; }
    85cd:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
			 "9999999999999999") + 2 * (__n & 0x7f),
    85d2:	25 fe 00 00 00       	and    eax,0xfe
	};
    85d7:	48 01 f0             	add    rax,rsi
	  __s[__s.size() - 2] = __sv[0];
    85da:	0f b6 30             	movzx  esi,BYTE PTR [rax]
    85dd:	40 88 74 0a fe       	mov    BYTE PTR [rdx+rcx*1-0x2],sil
	  __s[__s.size() - 1] = __sv[1];
    85e2:	0f b6 48 01          	movzx  ecx,BYTE PTR [rax+0x1]
    85e6:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
    85eb:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
    85f0:	88 4c 02 ff          	mov    BYTE PTR [rdx+rax*1-0x1],cl
      { return _M_string_length; }
    85f4:	48 8b 6c 24 28       	mov    rbp,QWORD PTR [rsp+0x28]
	  if (__str.size())
    85f9:	48 85 ed             	test   rbp,rbp
    85fc:	0f 85 c6 01 00 00    	jne    87c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x348>
	  if (__secs)
    8602:	80 7c 24 04 00       	cmp    BYTE PTR [rsp+0x4],0x0
    8607:	0f 85 e3 00 00 00    	jne    86f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x270>
      { return _M_dataplus._M_p; }
    860d:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
	if (_M_data() == _M_local_data())
    8612:	4c 39 e7             	cmp    rdi,r12
    8615:	74 0e                	je     8625 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    8617:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    861c:	48 8d 70 01          	lea    rsi,[rax+0x1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    8620:	e8 db ab ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    8625:	48 81 c4 88 01 00 00 	add    rsp,0x188
    862c:	4c 89 f8             	mov    rax,r15
    862f:	5b                   	pop    rbx
    8630:	5d                   	pop    rbp
    8631:	41 5c                	pop    r12
    8633:	41 5d                	pop    r13
    8635:	41 5e                	pop    r14
    8637:	41 5f                	pop    r15
    8639:	c3                   	ret
    863a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    8640:	66 0f 57 05 48 02 01 	xorpd  xmm0,XMMWORD PTR [rip+0x10248]        # 18890 <std::__unicode::__v15_1_0::__width_edges+0x410>
    8647:	00 
    8648:	e9 80 fe ff ff       	jmp    84cd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4d>
    864d:	0f 1f 00             	nop    DWORD PTR [rax]
	if (this->max_size() - (this->size() - __n1) < __n2)
    8650:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffffffff
    8657:	ff ff 7f 
    865a:	49 29 c0             	sub    r8,rax
    865d:	48 29 f2             	sub    rdx,rsi
    8660:	4c 39 c2             	cmp    rdx,r8
    8663:	0f 82 bb 02 00 00    	jb     8924 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4a4>
      { return _M_dataplus._M_p; }
    8669:	48 8b bc 24 60 01 00 	mov    rdi,QWORD PTR [rsp+0x160]
    8670:	00 
      const size_type __len = __n + this->size();
    8671:	4e 8d 24 06          	lea    r12,[rsi+r8*1]
	if (_M_data() == _M_local_data())
    8675:	48 39 df             	cmp    rdi,rbx
    8678:	0f 84 6a 02 00 00    	je     88e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x468>
	return _M_is_local() ? size_type(_S_local_capacity)
    867e:	48 8b 94 24 70 01 00 	mov    rdx,QWORD PTR [rsp+0x170]
    8685:	00 
      if (__len <= this->capacity())
    8686:	4c 39 e2             	cmp    rdx,r12
    8689:	0f 82 c1 01 00 00    	jb     8850 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3d0>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    868f:	48 01 f7             	add    rdi,rsi
	if (__n == 1)
    8692:	49 83 f8 01          	cmp    r8,0x1
    8696:	0f 84 5c 02 00 00    	je     88f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x478>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    869c:	4c 89 c2             	mov    rdx,r8
    869f:	48 89 c6             	mov    rsi,rax
    86a2:	e8 09 ab ff ff       	call   31b0 <memcpy@plt>
	__c1 = __c2;
    86a7:	48 8b 84 24 60 01 00 	mov    rax,QWORD PTR [rsp+0x160]
    86ae:	00 
      { _M_string_length = __length; }
    86af:	4c 89 a4 24 68 01 00 	mov    QWORD PTR [rsp+0x168],r12
    86b6:	00 
    86b7:	42 c6 04 20 00       	mov    BYTE PTR [rax+r12*1],0x0
      { _M_next = _M_span.begin(); }
    86bc:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    86c1:	4c 8d 64 24 30       	lea    r12,[rsp+0x30]
      { return _M_dataplus._M_p; }
    86c6:	48 8b 94 24 60 01 00 	mov    rdx,QWORD PTR [rsp+0x160]
    86cd:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    86ce:	4c 89 64 24 20       	mov    QWORD PTR [rsp+0x20],r12
    86d3:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
	if (_M_data() == _M_local_data())
    86d8:	48 39 da             	cmp    rdx,rbx
    86db:	0f 84 8f 01 00 00    	je     8870 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3f0>
    86e1:	48 8b b4 24 68 01 00 	mov    rsi,QWORD PTR [rsp+0x168]
    86e8:	00 
    86e9:	e9 be fe ff ff       	jmp    85ac <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x12c>
    86ee:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    86f0:	49 8b 47 18          	mov    rax,QWORD PTR [r15+0x18]
    86f4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    86f8:	49 89 57 18          	mov    QWORD PTR [r15+0x18],rdx
	*_M_next++ = __c;
    86fc:	c6 00 3a             	mov    BYTE PTR [rax],0x3a
    { return __lhs.base() - __rhs.base(); }
    86ff:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
	{ return this->_M_extent_value; }
    8703:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    8707:	48 89 f8             	mov    rax,rdi
    870a:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    870e:	48 39 d8             	cmp    rax,rbx
    8711:	0f 84 f1 01 00 00    	je     8908 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x488>
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    8717:	45 0f b6 ed          	movzx  r13d,r13b
    871b:	66 0f ef c0          	pxor   xmm0,xmm0
	  __count = this->size() - __offset;
    871f:	48 29 c3             	sub    rbx,rax
      { return this->_M_len; }
    8722:	bd 02 00 00 00       	mov    ebp,0x2
    8727:	f2 49 0f 2a c5       	cvtsi2sd xmm0,r13
    872c:	f2 0f 59 05 cc 01 01 	mulsd  xmm0,QWORD PTR [rip+0x101cc]        # 18900 <std::__unicode::__v15_1_0::__width_edges+0x480>
    8733:	00 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    8734:	f2 0f 10 4c 24 08    	movsd  xmm1,QWORD PTR [rsp+0x8]
	};
    873a:	48 8d 0d f7 cc 00 00 	lea    rcx,[rip+0xccf7]        # 15438 <CSWTCH.1110+0x358>
    8741:	f2 0f 5c c8          	subsd  xmm1,xmm0
	    return _ToDur(static_cast<__to_rep>(__d.count()));
    8745:	f2 48 0f 2c d1       	cvttsd2si rdx,xmm1
			 "9999999999999999") + 2 * (__n & 0x7f),
    874a:	4c 8d 2c 12          	lea    r13,[rdx+rdx*1]
    874e:	41 81 e5 fe 00 00 00 	and    r13d,0xfe
	};
    8755:	49 01 cd             	add    r13,rcx
	while (__to.size() <= __s.size())
    8758:	48 83 fb 02          	cmp    rbx,0x2
    875c:	77 52                	ja     87b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x330>
    875e:	48 39 dd             	cmp    rbp,rbx
    8761:	48 89 da             	mov    rdx,rbx
    8764:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    8768:	48 85 d2             	test   rdx,rdx
    876b:	74 08                	je     8775 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2f5>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    876d:	4c 89 ee             	mov    rsi,r13
    8770:	e8 3b aa ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8775:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    8778:	49 01 5f 18          	add    QWORD PTR [r15+0x18],rbx
    877c:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    877f:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
    8782:	48 29 dd             	sub    rbp,rbx
    8785:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8787:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    878b:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    878f:	48 89 f8             	mov    rax,rdi
    8792:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8796:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8799:	48 39 dd             	cmp    rbp,rbx
    879c:	73 c0                	jae    875e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2de>
	if (__s.size())
    879e:	48 85 ed             	test   rbp,rbp
    87a1:	0f 84 66 fe ff ff    	je     860d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x18d>
    87a7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    87ae:	00 00 
    87b0:	48 89 ea             	mov    rdx,rbp
    87b3:	4c 89 ee             	mov    rsi,r13
    87b6:	e8 f5 a9 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    87bb:	49 01 6f 18          	add    QWORD PTR [r15+0x18],rbp
    87bf:	e9 49 fe ff ff       	jmp    860d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x18d>
    87c4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    { return __lhs.base() - __rhs.base(); }
    87c8:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    87cc:	4d 8b 77 10          	mov    r14,QWORD PTR [r15+0x10]
      { return _M_dataplus._M_p; }
    87d0:	48 8b 5c 24 20       	mov    rbx,QWORD PTR [rsp+0x20]
    87d5:	48 89 f8             	mov    rax,rdi
    87d8:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    87dc:	49 29 c6             	sub    r14,rax
	while (__to.size() <= __s.size())
    87df:	4c 39 f5             	cmp    rbp,r14
    87e2:	72 55                	jb     8839 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3b9>
    87e4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    87eb:	00 00 00 00 
    87ef:	90                   	nop
    87f0:	4c 39 f5             	cmp    rbp,r14
    87f3:	4c 89 f2             	mov    rdx,r14
    87f6:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    87fa:	48 85 d2             	test   rdx,rdx
    87fd:	74 08                	je     8807 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x387>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    87ff:	48 89 de             	mov    rsi,rbx
    8802:	e8 a9 a9 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8807:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    880a:	4d 01 77 18          	add    QWORD PTR [r15+0x18],r14
    880e:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    8811:	4c 01 f3             	add    rbx,r14
	this->_M_len -= __n;
    8814:	4c 29 f5             	sub    rbp,r14
    8817:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8819:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    881d:	4d 8b 77 10          	mov    r14,QWORD PTR [r15+0x10]
    8821:	48 89 f8             	mov    rax,rdi
    8824:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8828:	49 29 c6             	sub    r14,rax
	while (__to.size() <= __s.size())
    882b:	4c 39 f5             	cmp    rbp,r14
    882e:	73 c0                	jae    87f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x370>
	if (__s.size())
    8830:	48 85 ed             	test   rbp,rbp
    8833:	0f 84 c9 fd ff ff    	je     8602 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x182>
    8839:	48 89 ea             	mov    rdx,rbp
    883c:	48 89 de             	mov    rsi,rbx
    883f:	e8 6c a9 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    8844:	49 01 6f 18          	add    QWORD PTR [r15+0x18],rbp
    8848:	e9 b5 fd ff ff       	jmp    8602 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x182>
    884d:	0f 1f 00             	nop    DWORD PTR [rax]
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    8850:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
    8857:	00 
    8858:	48 89 c1             	mov    rcx,rax
    885b:	31 d2                	xor    edx,edx
    885d:	e8 0e f0 ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    8862:	e9 40 fe ff ff       	jmp    86a7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x227>
    8867:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    886e:	00 00 
	    if (_M_string_length > _S_local_capacity)
    8870:	48 8b 8c 24 68 01 00 	mov    rcx,QWORD PTR [rsp+0x168]
    8877:	00 
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    8878:	48 8d 41 01          	lea    rax,[rcx+0x1]
    887c:	4c 89 e7             	mov    rdi,r12
    887f:	48 89 da             	mov    rdx,rbx
    8882:	83 f8 08             	cmp    eax,0x8
    8885:	73 39                	jae    88c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x440>
    8887:	31 f6                	xor    esi,esi
    8889:	a8 04                	test   al,0x4
    888b:	74 09                	je     8896 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x416>
    888d:	8b 32                	mov    esi,DWORD PTR [rdx]
    888f:	89 37                	mov    DWORD PTR [rdi],esi
    8891:	be 04 00 00 00       	mov    esi,0x4
    8896:	a8 02                	test   al,0x2
    8898:	74 0e                	je     88a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x428>
    889a:	44 0f b7 04 32       	movzx  r8d,WORD PTR [rdx+rsi*1]
    889f:	66 44 89 04 37       	mov    WORD PTR [rdi+rsi*1],r8w
    88a4:	48 83 c6 02          	add    rsi,0x2
    88a8:	a8 01                	test   al,0x1
    88aa:	74 07                	je     88b3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x433>
    88ac:	0f b6 04 32          	movzx  eax,BYTE PTR [rdx+rsi*1]
    88b0:	88 04 37             	mov    BYTE PTR [rdi+rsi*1],al
    88b3:	4c 89 e2             	mov    rdx,r12
    88b6:	e9 06 fd ff ff       	jmp    85c1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x141>
    88bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    88c0:	89 c7                	mov    edi,eax
    88c2:	31 d2                	xor    edx,edx
    88c4:	83 e7 f8             	and    edi,0xfffffff8
    88c7:	89 d6                	mov    esi,edx
    88c9:	83 c2 08             	add    edx,0x8
    88cc:	4c 8b 04 33          	mov    r8,QWORD PTR [rbx+rsi*1]
    88d0:	4d 89 04 34          	mov    QWORD PTR [r12+rsi*1],r8
    88d4:	39 fa                	cmp    edx,edi
    88d6:	72 ef                	jb     88c7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x447>
    88d8:	49 8d 3c 14          	lea    rdi,[r12+rdx*1]
    88dc:	48 01 da             	add    rdx,rbx
    88df:	eb a6                	jmp    8887 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x407>
    88e1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	return _M_is_local() ? size_type(_S_local_capacity)
    88e8:	ba 0f 00 00 00       	mov    edx,0xf
    88ed:	e9 94 fd ff ff       	jmp    8686 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x206>
    88f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	__c1 = __c2;
    88f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    88fb:	88 07                	mov    BYTE PTR [rdi],al
      }
    88fd:	e9 a5 fd ff ff       	jmp    86a7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x227>
    8902:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  _M_overflow();
    8908:	49 8b 07             	mov    rax,QWORD PTR [r15]
    890b:	4c 89 ff             	mov    rdi,r15
    890e:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8910:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
	{ return this->_M_extent_value; }
    8914:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    8918:	48 89 f8             	mov    rax,rdi
    891b:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
      }
    891f:	e9 f3 fd ff ff       	jmp    8717 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x297>
	  __throw_length_error(__N(__s));
    8924:	48 8d 3d 90 c8 00 00 	lea    rdi,[rip+0xc890]        # 151bb <CSWTCH.1110+0xdb>
    892b:	e8 00 a8 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>

0000000000008930 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>:
	_M_x(const _Tp& __t, typename _FormatContext::iterator __out,
    8930:	41 57                	push   r15
    8932:	41 56                	push   r14
    8934:	41 55                	push   r13
    8936:	41 54                	push   r12
    8938:	49 89 f4             	mov    r12,rsi
    893b:	55                   	push   rbp
    893c:	48 89 d5             	mov    rbp,rdx
    893f:	53                   	push   rbx
    8940:	44 89 c3             	mov    ebx,r8d
    8943:	48 83 ec 78          	sub    rsp,0x78
	  if (!_M_spec._M_localized)
    8947:	f6 07 20             	test   BYTE PTR [rdi],0x20
    894a:	0f 85 68 01 00 00    	jne    8ab8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x188>
	    return std::locale::classic();
    8950:	e8 4b a9 ff ff       	call   32a0 <std::locale::classic()@plt>
    8955:	4c 8d 6c 24 18       	lea    r13,[rsp+0x18]
    895a:	48 89 c6             	mov    rsi,rax
    895d:	4c 89 ef             	mov    rdi,r13
    8960:	e8 2b a8 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    8965:	48 8d 3d 94 38 01 00 	lea    rdi,[rip+0x13894]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    896c:	e8 af a7 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    8971:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    8976:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    897a:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    897e:	0f 83 4e 02 00 00    	jae    8bd2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a2>
    8984:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    8988:	48 85 ff             	test   rdi,rdi
    898b:	0f 84 41 02 00 00    	je     8bd2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a2>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    8991:	31 c9                	xor    ecx,ecx
    8993:	48 8d 15 16 32 01 00 	lea    rdx,[rip+0x13216]        # 1bbb0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    899a:	48 8d 35 8f 31 01 00 	lea    rsi,[rip+0x1318f]        # 1bb30 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    89a1:	e8 8a a8 ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    89a6:	48 85 c0             	test   rax,rax
    89a9:	0f 84 23 02 00 00    	je     8bd2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a2>
	__date[0] = _M_data->_M_date_format;
    89af:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
	  const _CharT* __rep = __date_reps[__mod];
    89b3:	0f b6 db             	movzx  ebx,bl
    89b6:	f3 0f 6f 40 10       	movdqu xmm0,XMMWORD PTR [rax+0x10]
    89bb:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    89c0:	4c 8b 7c dc 20       	mov    r15,QWORD PTR [rsp+rbx*8+0x20]
	  if (!*__rep)
    89c5:	41 80 3f 00          	cmp    BYTE PTR [r15],0x0
    89c9:	0f 84 14 02 00 00    	je     8be3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2b3>
	: allocator_type(__a), _M_p(__dat) { }
    89cf:	48 8d 44 24 50       	lea    rax,[rsp+0x50]
    89d4:	4c 8d 74 24 60       	lea    r14,[rsp+0x60]
	return __builtin_strlen(__s);
    89d9:	4c 89 ff             	mov    rdi,r15
      { _M_string_length = __length; }
    89dc:	48 c7 44 24 58 03 00 	mov    QWORD PTR [rsp+0x58],0x3
    89e3:	00 00 
	: allocator_type(__a), _M_p(__dat) { }
    89e5:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    89e9:	4c 89 74 24 50       	mov    QWORD PTR [rsp+0x50],r14
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    89ee:	c7 44 24 60 7b 3a 7d 	mov    DWORD PTR [rsp+0x60],0x7d3a7b
    89f5:	00 
	return __builtin_strlen(__s);
    89f6:	e8 f5 a6 ff ff       	call   30f0 <strlen@plt>
    89fb:	48 89 c3             	mov    rbx,rax
	if (this->max_size() - (this->size() - __n1) < __n2)
    89fe:	48 b8 fd ff ff ff ff 	movabs rax,0x7ffffffffffffffd
    8a05:	ff ff 7f 
    8a08:	48 39 c3             	cmp    rbx,rax
    8a0b:	0f 84 c6 01 00 00    	je     8bd7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a7>
      const size_type __new_size = __old_size + __len2 - __len1;
    8a11:	4c 8d 53 03          	lea    r10,[rbx+0x3]
      if (__new_size <= this->capacity())
    8a15:	49 83 fa 0f          	cmp    r10,0xf
    8a19:	0f 87 41 01 00 00    	ja     8b60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x230>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    8a1f:	4d 39 f7             	cmp    r15,r14
    8a22:	0f 83 f0 00 00 00    	jae    8b18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1e8>
    8a28:	4c 89 f0             	mov    rax,r14
	      if (__how_much && __len1 != __len2)
    8a2b:	48 85 db             	test   rbx,rbx
    8a2e:	0f 85 ac 00 00 00    	jne    8ae0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1b0>
      { _M_string_length = __length; }
    8a34:	4c 89 54 24 58       	mov    QWORD PTR [rsp+0x58],r10
	__c1 = __c2;
    8a39:	48 8d 4c 24 30       	lea    rcx,[rsp+0x30]
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    8a3e:	48 89 ef             	mov    rdi,rbp
    8a41:	45 31 c0             	xor    r8d,r8d
    8a44:	c6 44 18 03 00       	mov    BYTE PTR [rax+rbx*1+0x3],0x0
				 std::make_format_args<_FormatContext>(__t));
    8a49:	48 8d 05 80 30 00 00 	lea    rax,[rip+0x3080]        # bad0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    8a50:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
    8a55:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    8a5a:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    8a5f:	48 89 4c 24 48       	mov    QWORD PTR [rsp+0x48],rcx
    8a64:	48 8d 4c 24 40       	lea    rcx,[rsp+0x40]
    8a69:	48 89 c6             	mov    rsi,rax
    8a6c:	4c 89 64 24 30       	mov    QWORD PTR [rsp+0x30],r12
    8a71:	48 c7 44 24 40 d1 00 	mov    QWORD PTR [rsp+0x40],0xd1
    8a78:	00 00 
    8a7a:	e8 41 d8 ff ff       	call   62c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
      { return _M_dataplus._M_p; }
    8a7f:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
    8a84:	48 89 c3             	mov    rbx,rax
	if (_M_data() == _M_local_data())
    8a87:	4c 39 f7             	cmp    rdi,r14
    8a8a:	74 0e                	je     8a9a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x16a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    8a8c:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
    8a91:	48 8d 70 01          	lea    rsi,[rax+0x1]
    8a95:	e8 66 a7 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    8a9a:	4c 89 ef             	mov    rdi,r13
    8a9d:	e8 1e a8 ff ff       	call   32c0 <std::locale::~locale()@plt>
    8aa2:	48 83 c4 78          	add    rsp,0x78
    8aa6:	48 89 d8             	mov    rax,rbx
    8aa9:	5b                   	pop    rbx
    8aaa:	5d                   	pop    rbp
    8aab:	41 5c                	pop    r12
    8aad:	41 5d                	pop    r13
    8aaf:	41 5e                	pop    r14
    8ab1:	41 5f                	pop    r15
    8ab3:	c3                   	ret
    8ab4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (!_M_hasval)
    8ab8:	80 79 20 00          	cmp    BYTE PTR [rcx+0x20],0x0
    8abc:	4c 8d 71 18          	lea    r14,[rcx+0x18]
    8ac0:	0f 84 ca 00 00 00    	je     8b90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x260>
      std::locale locale() { return _M_loc.value(); }
    8ac6:	4c 8d 6c 24 18       	lea    r13,[rsp+0x18]
    8acb:	4c 89 f6             	mov    rsi,r14
    8ace:	4c 89 ef             	mov    rdi,r13
    8ad1:	e8 ba a6 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    8ad6:	e9 8a fe ff ff       	jmp    8965 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x35>
    8adb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    8ae0:	c6 44 1c 62 7d       	mov    BYTE PTR [rsp+rbx*1+0x62],0x7d
	if (__n == 1)
    8ae5:	48 83 fb 01          	cmp    rbx,0x1
    8ae9:	0f 84 d1 00 00 00    	je     8bc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x290>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    8aef:	48 8d 7c 24 62       	lea    rdi,[rsp+0x62]
    8af4:	48 89 da             	mov    rdx,rbx
    8af7:	4c 89 fe             	mov    rsi,r15
    8afa:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
    8afe:	e8 ad a6 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
    8b03:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
      }
    8b08:	4c 8b 14 24          	mov    r10,QWORD PTR [rsp]
    8b0c:	e9 23 ff ff ff       	jmp    8a34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x104>
    8b11:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
    8b18:	48 8d 44 24 63       	lea    rax,[rsp+0x63]
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    8b1d:	4c 39 f8             	cmp    rax,r15
    8b20:	0f 82 02 ff ff ff    	jb     8a28 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf8>
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
    8b26:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    8b2a:	48 8d 74 24 62       	lea    rsi,[rsp+0x62]
    8b2f:	49 89 d8             	mov    r8,rbx
    8b32:	4c 89 f9             	mov    rcx,r15
    8b35:	41 b9 01 00 00 00    	mov    r9d,0x1
    8b3b:	31 d2                	xor    edx,edx
    8b3d:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    8b42:	e8 69 a7 ff ff       	call   32b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>
      { return _M_dataplus._M_p; }
    8b47:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
    8b4c:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    8b51:	e9 de fe ff ff       	jmp    8a34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x104>
    8b56:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8b5d:	00 00 00 
	this->_M_mutate(__pos, __len1, __s, __len2);
    8b60:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    8b64:	49 89 d8             	mov    r8,rbx
    8b67:	4c 89 f9             	mov    rcx,r15
    8b6a:	31 d2                	xor    edx,edx
    8b6c:	be 02 00 00 00       	mov    esi,0x2
    8b71:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    8b76:	e8 f5 ec ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    8b7b:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
    8b80:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    8b85:	e9 aa fe ff ff       	jmp    8a34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x104>
    8b8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
    8b90:	4c 89 f7             	mov    rdi,r14
    8b93:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
    8b97:	4c 8d 6c 24 18       	lea    r13,[rsp+0x18]
    8b9c:	e8 cf a7 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    8ba1:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
      std::locale locale() { return _M_loc.value(); }
    8ba5:	4c 89 f6             	mov    rsi,r14
    8ba8:	4c 89 ef             	mov    rdi,r13
	  _M_hasval = true;
    8bab:	c6 41 20 01          	mov    BYTE PTR [rcx+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
    8baf:	e8 dc a5 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    8bb4:	e9 ac fd ff ff       	jmp    8965 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x35>
    8bb9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	__c1 = __c2;
    8bc0:	41 0f b6 07          	movzx  eax,BYTE PTR [r15]
    8bc4:	88 44 24 62          	mov    BYTE PTR [rsp+0x62],al
    8bc8:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
      }
    8bcd:	e9 62 fe ff ff       	jmp    8a34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x104>
      __throw_bad_cast();
    8bd2:	e8 89 a6 ff ff       	call   3260 <std::__throw_bad_cast()@plt>
	  __throw_length_error(__N(__s));
    8bd7:	48 8d 3d 97 c5 00 00 	lea    rdi,[rip+0xc597]        # 15175 <CSWTCH.1110+0x95>
    8bde:	e8 4d a5 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    8be3:	e8 68 a5 ff ff       	call   3150 <abort@plt>
    8be8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    8bef:	00 

0000000000008bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>:
    __write(_Out __out, basic_string_view<_CharT> __str)
    8bf0:	41 55                	push   r13
    8bf2:	41 54                	push   r12
    8bf4:	55                   	push   rbp
    8bf5:	48 89 fd             	mov    rbp,rdi
    8bf8:	53                   	push   rbx
    8bf9:	48 83 ec 08          	sub    rsp,0x8
	  if (__str.size())
    8bfd:	48 85 f6             	test   rsi,rsi
    8c00:	75 0e                	jne    8c10 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x20>
    }
    8c02:	48 83 c4 08          	add    rsp,0x8
    8c06:	48 89 e8             	mov    rax,rbp
    8c09:	5b                   	pop    rbx
    8c0a:	5d                   	pop    rbp
    8c0b:	41 5c                	pop    r12
    8c0d:	41 5d                	pop    r13
    8c0f:	c3                   	ret
    8c10:	48 8b 7f 18          	mov    rdi,QWORD PTR [rdi+0x18]
	  __count = this->size() - __offset;
    8c14:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    8c18:	49 89 f4             	mov    r12,rsi
    8c1b:	49 89 d5             	mov    r13,rdx
    8c1e:	48 89 f8             	mov    rax,rdi
    8c21:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    8c25:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8c28:	48 39 de             	cmp    rsi,rbx
    8c2b:	72 49                	jb     8c76 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x86>
    8c2d:	0f 1f 00             	nop    DWORD PTR [rax]
    8c30:	4c 39 e3             	cmp    rbx,r12
    8c33:	4c 89 e2             	mov    rdx,r12
    8c36:	48 0f 46 d3          	cmovbe rdx,rbx
	if (__n == 0)
    8c3a:	48 85 d2             	test   rdx,rdx
    8c3d:	74 08                	je     8c47 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x57>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    8c3f:	4c 89 ee             	mov    rsi,r13
    8c42:	e8 69 a5 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8c47:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
      { _M_current += __n; return *this; }
    8c4b:	48 01 5d 18          	add    QWORD PTR [rbp+0x18],rbx
    8c4f:	48 89 ef             	mov    rdi,rbp
	this->_M_str += __n;
    8c52:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
    8c55:	49 29 dc             	sub    r12,rbx
    8c58:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8c5a:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    8c5e:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    8c62:	48 89 f8             	mov    rax,rdi
    8c65:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    8c69:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8c6c:	49 39 dc             	cmp    r12,rbx
    8c6f:	73 bf                	jae    8c30 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x40>
	if (__s.size())
    8c71:	4d 85 e4             	test   r12,r12
    8c74:	74 8c                	je     8c02 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)+0x12>
    8c76:	4c 89 e2             	mov    rdx,r12
    8c79:	4c 89 ee             	mov    rsi,r13
    8c7c:	e8 2f a5 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    8c81:	4c 01 65 18          	add    QWORD PTR [rbp+0x18],r12
    }
    8c85:	48 83 c4 08          	add    rsp,0x8
    8c89:	48 89 e8             	mov    rax,rbp
    8c8c:	5b                   	pop    rbx
    8c8d:	5d                   	pop    rbp
    8c8e:	41 5c                	pop    r12
    8c90:	41 5d                	pop    r13
    8c92:	c3                   	ret
    8c93:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8c9a:	00 00 00 
    8c9d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000008ca0 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	_M_locale(_FormatContext& __fc) const
    8ca0:	41 54                	push   r12
    8ca2:	53                   	push   rbx
    8ca3:	48 89 fb             	mov    rbx,rdi
    8ca6:	48 83 ec 18          	sub    rsp,0x18
	  if (!_M_spec._M_localized)
    8caa:	f6 06 20             	test   BYTE PTR [rsi],0x20
    8cad:	75 21                	jne    8cd0 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x30>
	    return std::locale::classic();
    8caf:	e8 ec a5 ff ff       	call   32a0 <std::locale::classic()@plt>
    8cb4:	48 89 df             	mov    rdi,rbx
    8cb7:	48 89 c6             	mov    rsi,rax
    8cba:	e8 d1 a4 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	}
    8cbf:	48 83 c4 18          	add    rsp,0x18
    8cc3:	48 89 d8             	mov    rax,rbx
    8cc6:	5b                   	pop    rbx
    8cc7:	41 5c                	pop    r12
    8cc9:	c3                   	ret
    8cca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      if (!_M_hasval)
    8cd0:	80 7a 20 00          	cmp    BYTE PTR [rdx+0x20],0x0
    8cd4:	4c 8d 62 18          	lea    r12,[rdx+0x18]
    8cd8:	74 16                	je     8cf0 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50>
      std::locale locale() { return _M_loc.value(); }
    8cda:	4c 89 e6             	mov    rsi,r12
    8cdd:	48 89 df             	mov    rdi,rbx
    8ce0:	e8 ab a4 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    8ce5:	48 83 c4 18          	add    rsp,0x18
    8ce9:	48 89 d8             	mov    rax,rbx
    8cec:	5b                   	pop    rbx
    8ced:	41 5c                	pop    r12
    8cef:	c3                   	ret
    8cf0:	4c 89 e7             	mov    rdi,r12
    8cf3:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    8cf8:	e8 73 a6 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    8cfd:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
      std::locale locale() { return _M_loc.value(); }
    8d02:	4c 89 e6             	mov    rsi,r12
    8d05:	48 89 df             	mov    rdi,rbx
	  _M_hasval = true;
    8d08:	c6 42 20 01          	mov    BYTE PTR [rdx+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
    8d0c:	e8 7f a4 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    8d11:	eb d2                	jmp    8ce5 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x45>
    8d13:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8d1a:	00 00 00 
    8d1d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000008d20 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>:
    __write_padded(_Out __out, basic_string_view<_CharT> __str,
    8d20:	41 57                	push   r15
    8d22:	49 89 ff             	mov    r15,rdi
    8d25:	41 56                	push   r14
    8d27:	4d 89 c6             	mov    r14,r8
    8d2a:	41 55                	push   r13
    8d2c:	41 54                	push   r12
    8d2e:	55                   	push   rbp
    8d2f:	53                   	push   rbx
    8d30:	48 89 fb             	mov    rbx,rdi
    8d33:	48 81 ec d8 00 00 00 	sub    rsp,0xd8
    8d3a:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    8d3f:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
      __padding_chars[0] = _CharT();
    8d44:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
      if (__align == _Align_centre)
    8d49:	83 f9 03             	cmp    ecx,0x3
    8d4c:	0f 84 4e 02 00 00    	je     8fa0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x280>
      else if (__align == _Align_right)
    8d52:	83 f9 02             	cmp    ecx,0x2
    8d55:	0f 84 05 01 00 00    	je     8e60 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x140>
	if (!__is_single_code_unit<_CharT>(__fill_char)) [[unlikely]]
    8d5b:	41 83 f9 7e          	cmp    r9d,0x7e
    8d5f:	0f 87 c7 03 00 00    	ja     912c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x40c>
      if (__max < __buflen)
    8d65:	49 83 f8 1f          	cmp    r8,0x1f
    8d69:	0f 86 51 02 00 00    	jbe    8fc0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2a0>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    8d6f:	66 41 0f 6e c1       	movd   xmm0,r9d
    8d74:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
	  __r = __nfill;
    8d79:	4d 89 c5             	mov    r13,r8
      : _M_len{__len}, _M_str{__str}
    8d7c:	41 be 20 00 00 00    	mov    r14d,0x20
    8d82:	66 0f 60 c0          	punpcklbw xmm0,xmm0
    8d86:	66 0f 61 c0          	punpcklwd xmm0,xmm0
    8d8a:	48 89 c5             	mov    rbp,rax
    8d8d:	66 0f 70 c0 00       	pshufd xmm0,xmm0,0x0
    8d92:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
    8d97:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
	  if (__str.size())
    8d9c:	48 85 c0             	test   rax,rax
    8d9f:	0f 85 ab 02 00 00    	jne    9050 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x330>
	while (__n > __padding.size())
    8da5:	4d 39 ee             	cmp    r14,r13
    8da8:	0f 83 98 0c 00 00    	jae    9a46 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd26>
	  if (__str.size())
    8dae:	4d 85 f6             	test   r14,r14
    8db1:	0f 84 e6 06 00 00    	je     949d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x77d>
    8db7:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    8dbc:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    { return __lhs.base() - __rhs.base(); }
    8dc1:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    8dc5:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
      { return this->_M_len; }
    8dc9:	4d 89 f4             	mov    r12,r14
	while (__to.size() <= __s.size())
    8dcc:	48 8b 6c 24 08       	mov    rbp,QWORD PTR [rsp+0x8]
    8dd1:	48 89 f8             	mov    rax,rdi
    8dd4:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8dd8:	48 29 c3             	sub    rbx,rax
    8ddb:	49 39 de             	cmp    r14,rbx
    8dde:	0f 82 34 02 00 00    	jb     9018 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2f8>
    8de4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    8deb:	00 00 00 00 
    8def:	90                   	nop
    8df0:	4c 39 e3             	cmp    rbx,r12
    8df3:	4c 89 e2             	mov    rdx,r12
    8df6:	48 0f 46 d3          	cmovbe rdx,rbx
	if (__n == 0)
    8dfa:	48 85 d2             	test   rdx,rdx
    8dfd:	74 08                	je     8e07 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    8dff:	48 89 ee             	mov    rsi,rbp
    8e02:	e8 a9 a3 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8e07:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    8e0a:	49 01 5f 18          	add    QWORD PTR [r15+0x18],rbx
    8e0e:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    8e11:	48 01 dd             	add    rbp,rbx
	this->_M_len -= __n;
    8e14:	49 29 dc             	sub    r12,rbx
    8e17:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8e19:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    8e1d:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    8e21:	48 89 f8             	mov    rax,rdi
    8e24:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    8e28:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8e2b:	49 39 dc             	cmp    r12,rbx
    8e2e:	73 c0                	jae    8df0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd0>
	if (__s.size())
    8e30:	4d 85 e4             	test   r12,r12
    8e33:	0f 85 df 01 00 00    	jne    9018 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2f8>
	    __n -= __padding.size();
    8e39:	4d 29 f5             	sub    r13,r14
	while (__n > __padding.size())
    8e3c:	4d 39 ee             	cmp    r14,r13
    8e3f:	72 80                	jb     8dc1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa1>
	if (__n != 0)
    8e41:	4d 85 ed             	test   r13,r13
    8e44:	0f 85 a7 01 00 00    	jne    8ff1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2d1>
      return __out;
    8e4a:	4c 89 f8             	mov    rax,r15
    }
    8e4d:	48 81 c4 d8 00 00 00 	add    rsp,0xd8
    8e54:	5b                   	pop    rbx
    8e55:	5d                   	pop    rbp
    8e56:	41 5c                	pop    r12
    8e58:	41 5d                	pop    r13
    8e5a:	41 5e                	pop    r14
    8e5c:	41 5f                	pop    r15
    8e5e:	c3                   	ret
    8e5f:	90                   	nop
	  __l = __nfill;
    8e60:	4d 89 c4             	mov    r12,r8
	  __r = 0;
    8e63:	45 31 ed             	xor    r13d,r13d
	if (!__is_single_code_unit<_CharT>(__fill_char)) [[unlikely]]
    8e66:	41 83 f9 7e          	cmp    r9d,0x7e
    8e6a:	0f 87 c2 02 00 00    	ja     9132 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x412>
      if (__max < __buflen)
    8e70:	49 83 fe 1f          	cmp    r14,0x1f
    8e74:	77 1a                	ja     8e90 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x170>
	if (__n == 0)
    8e76:	4d 85 f6             	test   r14,r14
    8e79:	75 1b                	jne    8e96 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x176>
	if (__n == 0)
    8e7b:	4d 85 e4             	test   r12,r12
    8e7e:	0f 84 04 06 00 00    	je     9488 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x768>
    __write(_Out __out, basic_string_view<_CharT> __str)
    8e84:	eb fe                	jmp    8e84 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x164>
    8e86:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8e8d:	00 00 00 
	__max = __buflen;
    8e90:	41 be 20 00 00 00    	mov    r14d,0x20
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    8e96:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    8e9b:	44 89 f2             	mov    edx,r14d
    8e9e:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    8ea3:	41 83 fe 08          	cmp    r14d,0x8
    8ea7:	0f 83 4b 02 00 00    	jae    90f8 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x3d8>
    8ead:	83 e2 07             	and    edx,0x7
    8eb0:	74 0f                	je     8ec1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x1a1>
    8eb2:	31 c9                	xor    ecx,ecx
    8eb4:	89 ce                	mov    esi,ecx
    8eb6:	83 c1 01             	add    ecx,0x1
    8eb9:	44 88 0c 30          	mov    BYTE PTR [rax+rsi*1],r9b
    8ebd:	39 d1                	cmp    ecx,edx
    8ebf:	72 f3                	jb     8eb4 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x194>
	if (__n == 0)
    8ec1:	4d 85 e4             	test   r12,r12
    8ec4:	0f 84 ae 00 00 00    	je     8f78 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x258>
	while (__n > __padding.size())
    8eca:	4d 39 e6             	cmp    r14,r12
    8ecd:	0f 83 fd 01 00 00    	jae    90d0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x3b0>
	  if (__str.size())
    8ed3:	4d 85 f6             	test   r14,r14
    8ed6:	74 ac                	je     8e84 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x164>
    8ed8:	4c 89 7c 24 28       	mov    QWORD PTR [rsp+0x28],r15
    8edd:	4c 89 6c 24 20       	mov    QWORD PTR [rsp+0x20],r13
    8ee2:	49 89 dd             	mov    r13,rbx
    8ee5:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
    8ee9:	49 8b 5d 10          	mov    rbx,QWORD PTR [r13+0x10]
      { return this->_M_len; }
    8eed:	4d 89 f7             	mov    r15,r14
	while (__to.size() <= __s.size())
    8ef0:	48 8b 6c 24 08       	mov    rbp,QWORD PTR [rsp+0x8]
    8ef5:	48 89 f8             	mov    rax,rdi
    8ef8:	49 2b 45 08          	sub    rax,QWORD PTR [r13+0x8]
    8efc:	48 29 c3             	sub    rbx,rax
    8eff:	49 39 de             	cmp    r14,rbx
    8f02:	0f 82 28 01 00 00    	jb     9030 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x310>
    8f08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    8f0f:	00 
    8f10:	49 39 df             	cmp    r15,rbx
    8f13:	48 89 da             	mov    rdx,rbx
    8f16:	49 0f 46 d7          	cmovbe rdx,r15
	if (__n == 0)
    8f1a:	48 85 d2             	test   rdx,rdx
    8f1d:	74 08                	je     8f27 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x207>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    8f1f:	48 89 ee             	mov    rsi,rbp
    8f22:	e8 89 a2 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    8f27:	49 8b 45 00          	mov    rax,QWORD PTR [r13+0x0]
      { _M_current += __n; return *this; }
    8f2b:	49 01 5d 18          	add    QWORD PTR [r13+0x18],rbx
    8f2f:	4c 89 ef             	mov    rdi,r13
	this->_M_str += __n;
    8f32:	48 01 dd             	add    rbp,rbx
	this->_M_len -= __n;
    8f35:	49 29 df             	sub    r15,rbx
    8f38:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    8f3a:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
    8f3e:	49 8b 5d 10          	mov    rbx,QWORD PTR [r13+0x10]
    8f42:	48 89 f8             	mov    rax,rdi
    8f45:	49 2b 45 08          	sub    rax,QWORD PTR [r13+0x8]
    8f49:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    8f4c:	49 39 df             	cmp    r15,rbx
    8f4f:	73 bf                	jae    8f10 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x1f0>
	if (__s.size())
    8f51:	4d 85 ff             	test   r15,r15
    8f54:	0f 85 d6 00 00 00    	jne    9030 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x310>
	    __n -= __padding.size();
    8f5a:	4d 29 f4             	sub    r12,r14
	while (__n > __padding.size())
    8f5d:	4d 39 e6             	cmp    r14,r12
    8f60:	72 83                	jb     8ee5 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x1c5>
	if (__n != 0)
    8f62:	4c 89 eb             	mov    rbx,r13
    8f65:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    8f6a:	4c 8b 6c 24 20       	mov    r13,QWORD PTR [rsp+0x20]
    8f6f:	4d 85 e4             	test   r12,r12
    8f72:	0f 85 58 01 00 00    	jne    90d0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x3b0>
    8f78:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    8f7d:	48 89 c5             	mov    rbp,rax
	  if (__str.size())
    8f80:	48 85 c0             	test   rax,rax
    8f83:	0f 85 c7 00 00 00    	jne    9050 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x330>
	if (__n == 0)
    8f89:	4d 85 ed             	test   r13,r13
    8f8c:	0f 85 13 fe ff ff    	jne    8da5 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x85>
    8f92:	e9 b3 fe ff ff       	jmp    8e4a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
    8f97:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    8f9e:	00 00 
	  __l = __nfill / 2;
    8fa0:	4d 89 c4             	mov    r12,r8
	  __r = __l + (__nfill & 1);
    8fa3:	41 83 e0 01          	and    r8d,0x1
	  __l = __nfill / 2;
    8fa7:	49 d1 ec             	shr    r12,1
	  __r = __l + (__nfill & 1);
    8faa:	4f 8d 34 20          	lea    r14,[r8+r12*1]
    8fae:	4d 89 f5             	mov    r13,r14
    8fb1:	e9 b0 fe ff ff       	jmp    8e66 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x146>
    8fb6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    8fbd:	00 00 00 
	if (__n == 0)
    8fc0:	4d 85 c0             	test   r8,r8
    8fc3:	0f 84 6e 04 00 00    	je     9437 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x717>
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    8fc9:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    8fce:	4c 89 c2             	mov    rdx,r8
    8fd1:	44 89 ce             	mov    esi,r9d
	  __r = __nfill;
    8fd4:	4d 89 f5             	mov    r13,r14
    8fd7:	48 89 c7             	mov    rdi,rax
    8fda:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    8fdf:	e8 5c a1 ff ff       	call   3140 <memset@plt>
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
    8fe4:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    8fe9:	48 89 c5             	mov    rbp,rax
	  if (__str.size())
    8fec:	48 85 c0             	test   rax,rax
    8fef:	75 5f                	jne    9050 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x330>
    8ff1:	4d 39 ee             	cmp    r14,r13
    8ff4:	4c 89 e8             	mov    rax,r13
    8ff7:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
	  __o = __format::__write(std::move(__o), __padding.substr(0, __n));
    8ffc:	4c 89 ff             	mov    rdi,r15
    8fff:	49 0f 46 c6          	cmovbe rax,r14
    9003:	48 89 c6             	mov    rsi,rax
    9006:	e8 e5 fb ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    900b:	49 89 c7             	mov    r15,rax
    900e:	e9 37 fe ff ff       	jmp    8e4a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
    9013:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    9018:	4c 89 e2             	mov    rdx,r12
    901b:	48 89 ee             	mov    rsi,rbp
    901e:	e8 8d a1 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    9023:	4d 01 67 18          	add    QWORD PTR [r15+0x18],r12
    9027:	e9 0d fe ff ff       	jmp    8e39 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x119>
    902c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9030:	4c 89 fa             	mov    rdx,r15
    9033:	48 89 ee             	mov    rsi,rbp
    9036:	e8 75 a1 ff ff       	call   31b0 <memcpy@plt>
    903b:	4d 01 7d 18          	add    QWORD PTR [r13+0x18],r15
    903f:	e9 16 ff ff ff       	jmp    8f5a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x23a>
	  if (__str.size())
    9044:	48 8b 6c 24 10       	mov    rbp,QWORD PTR [rsp+0x10]
    9049:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    { return __lhs.base() - __rhs.base(); }
    9050:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    9054:	4d 8b 67 10          	mov    r12,QWORD PTR [r15+0x10]
    9058:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
    905d:	48 89 f8             	mov    rax,rdi
    9060:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    9064:	49 29 c4             	sub    r12,rax
	while (__to.size() <= __s.size())
    9067:	4c 39 64 24 10       	cmp    QWORD PTR [rsp+0x10],r12
    906c:	72 4b                	jb     90b9 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x399>
    906e:	66 90                	xchg   ax,ax
    9070:	4c 39 e5             	cmp    rbp,r12
    9073:	4c 89 e2             	mov    rdx,r12
    9076:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    907a:	48 85 d2             	test   rdx,rdx
    907d:	74 08                	je     9087 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x367>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    907f:	48 89 de             	mov    rsi,rbx
    9082:	e8 29 a1 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    9087:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    908a:	4d 01 67 18          	add    QWORD PTR [r15+0x18],r12
    908e:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    9091:	4c 01 e3             	add    rbx,r12
	this->_M_len -= __n;
    9094:	4c 29 e5             	sub    rbp,r12
    9097:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    9099:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    909d:	4d 8b 67 10          	mov    r12,QWORD PTR [r15+0x10]
    90a1:	48 89 f8             	mov    rax,rdi
    90a4:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    90a8:	49 29 c4             	sub    r12,rax
	while (__to.size() <= __s.size())
    90ab:	4c 39 e5             	cmp    rbp,r12
    90ae:	73 c0                	jae    9070 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x350>
	if (__s.size())
    90b0:	48 85 ed             	test   rbp,rbp
    90b3:	0f 84 d0 fe ff ff    	je     8f89 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x269>
    90b9:	48 89 ea             	mov    rdx,rbp
    90bc:	48 89 de             	mov    rsi,rbx
    90bf:	e8 ec a0 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    90c4:	49 01 6f 18          	add    QWORD PTR [r15+0x18],rbp
    90c8:	e9 bc fe ff ff       	jmp    8f89 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x269>
    90cd:	0f 1f 00             	nop    DWORD PTR [rax]
    90d0:	4d 39 e6             	cmp    r14,r12
    90d3:	4c 89 e0             	mov    rax,r12
    90d6:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
	  __o = __format::__write(std::move(__o), __padding.substr(0, __n));
    90db:	48 89 df             	mov    rdi,rbx
    90de:	49 0f 46 c6          	cmovbe rax,r14
    90e2:	48 89 c6             	mov    rsi,rax
    90e5:	e8 06 fb ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    90ea:	49 89 c7             	mov    r15,rax
    90ed:	e9 86 fe ff ff       	jmp    8f78 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x258>
    90f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    90f8:	48 b8 01 01 01 01 01 	movabs rax,0x101010101010101
    90ff:	01 01 01 
    9102:	41 0f b6 c9          	movzx  ecx,r9b
    9106:	44 89 f6             	mov    esi,r14d
    9109:	48 0f af c8          	imul   rcx,rax
    910d:	83 e6 f8             	and    esi,0xfffffff8
    9110:	31 c0                	xor    eax,eax
    9112:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    9117:	89 c7                	mov    edi,eax
    9119:	83 c0 08             	add    eax,0x8
    911c:	49 89 0c 3a          	mov    QWORD PTR [r10+rdi*1],rcx
    9120:	39 f0                	cmp    eax,esi
    9122:	72 ee                	jb     9112 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x3f2>
    9124:	4c 01 d0             	add    rax,r10
    9127:	e9 81 fd ff ff       	jmp    8ead <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x18d>
	  __r = __nfill;
    912c:	4d 89 c5             	mov    r13,r8
	  __l = 0;
    912f:	45 31 e4             	xor    r12d,r12d
	    const char32_t __arr[1]{ __fill_char };
    9132:	44 89 4c 24 5c       	mov    DWORD PTR [rsp+0x5c],r9d
    if (__c < 0xD800) [[likely]]
    9137:	41 81 f9 ff d7 00 00 	cmp    r9d,0xd7ff
    913e:	0f 87 af 07 00 00    	ja     98f3 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xbd3>
  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      return _Nd - std::__countl_zero(__x);
    9144:	41 0f bd c1          	bsr    eax,r9d
    9148:	8d 70 01             	lea    esi,[rax+0x1]
	  }
	else
	  {
	    static_assert(sizeof(_ToFmt) == 1);
	    int __bits = std::bit_width((uint32_t)__c);
	    if (__bits <= 7) [[likely]]
    914b:	83 f8 06             	cmp    eax,0x6
    914e:	0f 85 ed 09 00 00    	jne    9b41 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe21>
	      {
		_M_buf[0] = __c;
    9154:	44 89 ca             	mov    edx,r9d
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
		_M_buf_last = 1;
    9157:	bf 01 00 00 00       	mov    edi,0x1
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
    915c:	31 c0                	xor    eax,eax
    915e:	31 f6                	xor    esi,esi
    9160:	31 c9                	xor    ecx,ecx
	_Alloc_hider(pointer __dat, const _Alloc& __a)
    9162:	0f b6 c0             	movzx  eax,al
    9165:	40 0f b6 f6          	movzx  esi,sil
    9169:	0f b6 c9             	movzx  ecx,cl
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
    916c:	45 31 c9             	xor    r9d,r9d
    916f:	c1 e0 08             	shl    eax,0x8
	: allocator_type(__a), _M_p(__dat) { }
    9172:	4c 8d 94 24 90 00 00 	lea    r10,[rsp+0x90]
    9179:	00 
	size_type __len = 0;
    917a:	31 ed                	xor    ebp,ebp
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
    917c:	45 31 db             	xor    r11d,r11d
    917f:	09 f0                	or     eax,esi
    9181:	48 8d 74 24 5c       	lea    rsi,[rsp+0x5c]
    9186:	4c 8d 74 24 60       	lea    r14,[rsp+0x60]
	: allocator_type(__a), _M_p(__dat) { }
    918b:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
    9190:	c1 e0 08             	shl    eax,0x8
    9193:	66 48 0f 6e c6       	movq   xmm0,rsi
    9198:	4c 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],r10
    919f:	00 
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
    91a0:	45 31 d2             	xor    r10d,r10d
    91a3:	09 c8                	or     eax,ecx
    91a5:	0f b6 ca             	movzx  ecx,dl
    91a8:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    91ac:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
    91b3:	00 00 00 00 00 
    91b8:	c1 e0 08             	shl    eax,0x8
    91bb:	c6 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],0x0
    91c2:	00 
    91c3:	4c 8d 84 24 8f 00 00 	lea    r8,[rsp+0x8f]
    91ca:	00 
    91cb:	09 c8                	or     eax,ecx
    91cd:	40 88 bc 24 b9 00 00 	mov    BYTE PTR [rsp+0xb9],dil
    91d4:	00 
    91d5:	89 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],eax
    91dc:	c6 84 24 ba 00 00 00 	mov    BYTE PTR [rsp+0xba],0x1
    91e3:	01 
    91e4:	4c 89 74 24 08       	mov    QWORD PTR [rsp+0x8],r14
    91e9:	4c 89 b4 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],r14
    91f0:	00 
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
    91f1:	0f 11 84 24 a8 00 00 	movups XMMWORD PTR [rsp+0xa8],xmm0
    91f8:	00 
    91f9:	eb 36                	jmp    9231 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x511>
    91fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	else if (_M_buf_index + 1 < _M_buf_last)
    9200:	0f 8d da 00 00 00    	jge    92e0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5c0>
    9206:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
    920d:	00 
	  ++_M_buf_index;
    920e:	41 83 c3 01          	add    r11d,0x1
    9212:	41 b9 01 00 00 00    	mov    r9d,0x1
    9218:	48 89 ce             	mov    rsi,rcx
	while (__beg != __end && __len < __capacity)
    921b:	48 83 fd 0f          	cmp    rbp,0xf
    921f:	0f 84 07 03 00 00    	je     952c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x80c>
      operator*() const { return _M_buf[_M_buf_index]; }
    9225:	41 0f b6 c3          	movzx  eax,r11b
    9229:	0f b6 94 04 a0 00 00 	movzx  edx,BYTE PTR [rsp+rax*1+0xa0]
    9230:	00 
	    _M_local_buf[__len++] = *__beg;
    9231:	48 83 c5 01          	add    rbp,0x1
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    9235:	41 8d 43 01          	lea    eax,[r11+0x1]
    9239:	41 88 14 28          	mov    BYTE PTR [r8+rbp*1],dl
    923d:	0f b6 c0             	movzx  eax,al
    9240:	40 0f b6 d7          	movzx  edx,dil
    9244:	39 d0                	cmp    eax,edx
    9246:	75 b8                	jne    9200 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x4e0>
    9248:	4c 39 f6             	cmp    rsi,r14
    924b:	0f 84 8f 00 00 00    	je     92e0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5c0>
	++__i;
    9251:	48 8d 56 04          	lea    rdx,[rsi+0x4]
	    if (_M_curr() == _M_last)
    9255:	4c 39 f2             	cmp    rdx,r14
    9258:	0f 84 9f 00 00 00    	je     92fd <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5dd>
	char32_t __c = *_M_curr()++;
    925e:	48 8d 46 08          	lea    rax,[rsi+0x8]
    9262:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    9269:	00 
    926a:	8b 46 04             	mov    eax,DWORD PTR [rsi+0x4]
    if (__c < 0xD800) [[likely]]
    926d:	3d ff d7 00 00       	cmp    eax,0xd7ff
    9272:	0f 87 28 02 00 00    	ja     94a0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x780>
      if (__x == 0)
    9278:	85 c0                	test   eax,eax
    927a:	0f 84 c6 06 00 00    	je     9946 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc26>
      return _Nd - std::__countl_zero(__x);
    9280:	0f bd c8             	bsr    ecx,eax
    9283:	8d 71 01             	lea    esi,[rcx+0x1]
	    if (__bits <= 7) [[likely]]
    9286:	83 fe 07             	cmp    esi,0x7
    9289:	0f 8f 5e 08 00 00    	jg     9aed <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xdcd>
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
    928f:	31 ff                	xor    edi,edi
		_M_buf[0] = __c;
    9291:	88 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],al
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
    9298:	c6 84 24 a1 00 00 00 	mov    BYTE PTR [rsp+0xa1],0x0
    929f:	00 
    92a0:	66 89 bc 24 a2 00 00 	mov    WORD PTR [rsp+0xa2],di
    92a7:	00 
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    92a8:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    92af:	00 
	while (__beg != __end && __len < __capacity)
    92b0:	48 83 fd 0f          	cmp    rbp,0xf
    92b4:	0f 84 e8 05 00 00    	je     98a2 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb82>
	    _M_local_buf[__len++] = *__beg;
    92ba:	48 83 c5 01          	add    rbp,0x1
    92be:	48 89 d6             	mov    rsi,rdx
		_M_buf_last = 1;
    92c1:	bf 01 00 00 00       	mov    edi,0x1
    92c6:	45 31 db             	xor    r11d,r11d
    92c9:	41 88 04 28          	mov    BYTE PTR [r8+rbp*1],al
    92cd:	41 ba 01 00 00 00    	mov    r10d,0x1
    92d3:	41 b9 01 00 00 00    	mov    r9d,0x1
    92d9:	e9 6a ff ff ff       	jmp    9248 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x528>
    92de:	66 90                	xchg   ax,ax
	while (__beg != __end && __len < __capacity)
    92e0:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
    92e7:	00 
    92e8:	48 89 ce             	mov    rsi,rcx
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    92eb:	4c 39 f1             	cmp    rcx,r14
    92ee:	0f 85 27 ff ff ff    	jne    921b <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x4fb>
    92f4:	45 84 db             	test   r11b,r11b
    92f7:	0f 85 1e ff ff ff    	jne    921b <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x4fb>
    92fd:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
      { _M_string_length = __length; }
    9302:	48 89 ac 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rbp
    9309:	00 
	    while (__l-- > 0)
    930a:	4d 8d 7c 24 ff       	lea    r15,[r12-0x1]
	__c1 = __c2;
    930f:	c6 04 2a 00          	mov    BYTE PTR [rdx+rbp*1],0x0
      { return _M_dataplus._M_p; }
    9313:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    931a:	00 
      { return _M_string_length; }
    931b:	4c 8b b4 24 88 00 00 	mov    r14,QWORD PTR [rsp+0x88]
    9322:	00 
      { return _M_dataplus._M_p; }
    9323:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    9328:	4d 85 e4             	test   r12,r12
    932b:	74 0f                	je     933c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x61c>
	  if (__str.size())
    932d:	4d 85 f6             	test   r14,r14
    9330:	0f 85 b3 04 00 00    	jne    97e9 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xac9>
	    while (__l-- > 0)
    9336:	49 83 ef 01          	sub    r15,0x1
    933a:	73 fa                	jae    9336 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x616>
	    __out = __format::__write(std::move(__out), __str);
    933c:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    9341:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    9346:	48 89 df             	mov    rdi,rbx
	    while (__r-- > 0)
    9349:	4d 8d 7d ff          	lea    r15,[r13-0x1]
	    __out = __format::__write(std::move(__out), __str);
    934d:	e8 9e f8 ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    9352:	48 89 c3             	mov    rbx,rax
	    while (__r-- > 0)
    9355:	4d 85 ed             	test   r13,r13
    9358:	74 0b                	je     9365 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x645>
	  if (__str.size())
    935a:	4d 85 f6             	test   r14,r14
    935d:	75 5c                	jne    93bb <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x69b>
	    while (__r-- > 0)
    935f:	49 83 ef 01          	sub    r15,0x1
    9363:	73 fa                	jae    935f <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x63f>
    9365:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
    936c:	00 
	if (_M_data() == _M_local_data())
    936d:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
	    return __out;
    9372:	48 89 d8             	mov    rax,rbx
    9375:	48 39 cf             	cmp    rdi,rcx
    9378:	0f 84 cf fa ff ff    	je     8e4d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12d>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    937e:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    9385:	00 
    9386:	48 89 5c 24 08       	mov    QWORD PTR [rsp+0x8],rbx
    938b:	48 8d 70 01          	lea    rsi,[rax+0x1]
    938f:	e8 6c 9e ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    9394:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    9399:	e9 af fa ff ff       	jmp    8e4d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12d>
	while (__to.size() <= __s.size())
    939e:	4c 8b 6c 24 08       	mov    r13,QWORD PTR [rsp+0x8]
      { return this->_M_len; }
    93a3:	4d 89 f4             	mov    r12,r14
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    93a6:	4c 89 e2             	mov    rdx,r12
    93a9:	4c 89 ee             	mov    rsi,r13
    93ac:	e8 ff 9d ff ff       	call   31b0 <memcpy@plt>
    93b1:	4c 01 63 18          	add    QWORD PTR [rbx+0x18],r12
	    while (__r-- > 0)
    93b5:	49 83 ef 01          	sub    r15,0x1
    93b9:	72 aa                	jb     9365 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x645>
    93bb:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    93bf:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    { return __lhs.base() - __rhs.base(); }
    93c3:	48 89 fa             	mov    rdx,rdi
    93c6:	48 2b 53 08          	sub    rdx,QWORD PTR [rbx+0x8]
    93ca:	48 29 d0             	sub    rax,rdx
    93cd:	48 89 c5             	mov    rbp,rax
	while (__to.size() <= __s.size())
    93d0:	49 39 c6             	cmp    r14,rax
    93d3:	72 c9                	jb     939e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x67e>
    93d5:	4c 8b 6c 24 08       	mov    r13,QWORD PTR [rsp+0x8]
    93da:	4d 89 f4             	mov    r12,r14
    93dd:	0f 1f 00             	nop    DWORD PTR [rax]
    93e0:	4c 39 e5             	cmp    rbp,r12
    93e3:	4c 89 e2             	mov    rdx,r12
    93e6:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    93ea:	48 85 d2             	test   rdx,rdx
    93ed:	74 08                	je     93f7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x6d7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    93ef:	4c 89 ee             	mov    rsi,r13
    93f2:	e8 b9 9d ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    93f7:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_current += __n; return *this; }
    93fa:	48 01 6b 18          	add    QWORD PTR [rbx+0x18],rbp
    93fe:	48 89 df             	mov    rdi,rbx
	this->_M_str += __n;
    9401:	49 01 ed             	add    r13,rbp
	this->_M_len -= __n;
    9404:	49 29 ec             	sub    r12,rbp
    9407:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    9409:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    940d:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    9411:	48 89 fa             	mov    rdx,rdi
    9414:	48 89 c5             	mov    rbp,rax
    9417:	48 2b 53 08          	sub    rdx,QWORD PTR [rbx+0x8]
    941b:	48 29 d5             	sub    rbp,rdx
	while (__to.size() <= __s.size())
    941e:	49 39 ec             	cmp    r12,rbp
    9421:	73 bd                	jae    93e0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x6c0>
	if (__s.size())
    9423:	4d 85 e4             	test   r12,r12
    9426:	0f 85 7a ff ff ff    	jne    93a6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x686>
	    while (__r-- > 0)
    942c:	49 83 ef 01          	sub    r15,0x1
    9430:	73 91                	jae    93c3 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x6a3>
    9432:	e9 2e ff ff ff       	jmp    9365 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x645>
    9437:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    943c:	48 89 c5             	mov    rbp,rax
	  if (__str.size())
    943f:	48 85 c0             	test   rax,rax
    9442:	0f 84 02 fa ff ff    	je     8e4a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
    9448:	48 8b 7f 18          	mov    rdi,QWORD PTR [rdi+0x18]
    944c:	4d 8b 67 10          	mov    r12,QWORD PTR [r15+0x10]
	  __r = __nfill;
    9450:	45 31 ed             	xor    r13d,r13d
    9453:	48 8b 5c 24 18       	mov    rbx,QWORD PTR [rsp+0x18]
    9458:	48 89 f8             	mov    rax,rdi
    945b:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    945f:	49 29 c4             	sub    r12,rax
	while (__to.size() <= __s.size())
    9462:	4c 39 64 24 10       	cmp    QWORD PTR [rsp+0x10],r12
    9467:	0f 83 03 fc ff ff    	jae    9070 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x350>
    946d:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
    9472:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
    9477:	48 89 da             	mov    rdx,rbx
    947a:	e8 31 9d ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    947f:	49 01 5f 18          	add    QWORD PTR [r15+0x18],rbx
      auto __pad = [&__padding] (size_t __n, _Out& __o) {
    9483:	e9 c2 f9 ff ff       	jmp    8e4a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
	  if (__str.size())
    9488:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
    948e:	0f 85 b0 fb ff ff    	jne    9044 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x324>
	if (__n == 0)
    9494:	4d 85 ed             	test   r13,r13
    9497:	0f 84 ad f9 ff ff    	je     8e4a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x12a>
    __write(_Out __out, basic_string_view<_CharT> __str)
    949d:	eb fe                	jmp    949d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x77d>
    949f:	90                   	nop
    return 0xDFFF < __c && __c <= 0x10FFFF;
    94a0:	8d 88 00 20 ff ff    	lea    ecx,[rax-0xe000]
	if (!__is_scalar_value(__c)) [[unlikely]]
    94a6:	81 f9 ff 1f 10 00    	cmp    ecx,0x101fff
    94ac:	0f 87 34 05 00 00    	ja     99e6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xcc6>
    94b2:	0f bd c8             	bsr    ecx,eax
		_M_buf[0] = 0xC0 | (__c >> 6);
		_M_buf[1] = 0x80 | (__c & 0x3F);
		_M_buf[2] = _M_buf[3] = 0;
		_M_buf_last = 2;
	      }
	    else if (__bits <= 16)
    94b5:	83 f9 0f             	cmp    ecx,0xf
    94b8:	0f 84 2d 05 00 00    	je     99eb <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xccb>
	      }
	    else
	      {
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    94be:	89 c7                	mov    edi,eax
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    94c0:	89 c1                	mov    ecx,eax
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    94c2:	89 c6                	mov    esi,eax
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    94c4:	83 e0 3f             	and    eax,0x3f
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    94c7:	c1 ef 06             	shr    edi,0x6
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    94ca:	c1 e0 08             	shl    eax,0x8
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    94cd:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    94d4:	00 
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    94d5:	c1 ee 0c             	shr    esi,0xc
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    94d8:	83 e7 3f             	and    edi,0x3f
    94db:	c1 e9 12             	shr    ecx,0x12
    94de:	09 f8                	or     eax,edi
    94e0:	83 e6 3f             	and    esi,0x3f
    94e3:	0f b6 c9             	movzx  ecx,cl
    94e6:	c1 e0 08             	shl    eax,0x8
    94e9:	09 f0                	or     eax,esi
    94eb:	c1 e0 08             	shl    eax,0x8
    94ee:	09 c8                	or     eax,ecx
    94f0:	8b 0d 0e bb 00 00    	mov    ecx,DWORD PTR [rip+0xbb0e]        # 15004 <_IO_stdin_used+0x4>
    94f6:	09 c8                	or     eax,ecx
    94f8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],eax
    94ff:	48 83 fd 0f          	cmp    rbp,0xf
    9503:	0f 84 91 05 00 00    	je     9a9a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd7a>
	    _M_local_buf[__len++] = *__beg;
    9509:	0f b6 84 24 a0 00 00 	movzx  eax,BYTE PTR [rsp+0xa0]
    9510:	00 
    9511:	48 83 c5 01          	add    rbp,0x1
		_M_buf[3] = 0x80 | (__c & 0x3F);
		_M_buf_last = 4;
    9515:	bf 04 00 00 00       	mov    edi,0x4
    951a:	41 88 04 28          	mov    BYTE PTR [r8+rbp*1],al
	  __c = _S_error();
    951e:	45 31 db             	xor    r11d,r11d
    9521:	41 ba 01 00 00 00    	mov    r10d,0x1
    9527:	e9 da fc ff ff       	jmp    9206 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x4e6>
    952c:	45 84 c9             	test   r9b,r9b
    952f:	0f 84 b1 03 00 00    	je     98e6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xbc6>
    9535:	44 88 9c 24 b8 00 00 	mov    BYTE PTR [rsp+0xb8],r11b
    953c:	00 
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    953d:	45 84 db             	test   r11b,r11b
    9540:	0f 94 c0             	sete   al
    9543:	45 84 d2             	test   r10b,r10b
    9546:	0f 85 73 03 00 00    	jne    98bf <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb9f>
    954c:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    9551:	48 39 f1             	cmp    rcx,rsi
    9554:	75 08                	jne    955e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x83e>
    9556:	84 c0                	test   al,al
    9558:	0f 85 80 05 00 00    	jne    9ade <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xdbe>
    955e:	41 be 0f 00 00 00    	mov    r14d,0xf
    9564:	41 bf 0f 00 00 00    	mov    r15d,0xf
    956a:	4c 89 64 24 30       	mov    QWORD PTR [rsp+0x30],r12
    956f:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    9574:	4c 89 6c 24 38       	mov    QWORD PTR [rsp+0x38],r13
    9579:	4d 89 fc             	mov    r12,r15
    957c:	4d 89 f5             	mov    r13,r14
    957f:	45 89 de             	mov    r14d,r11d
    9582:	48 89 5c 24 40       	mov    QWORD PTR [rsp+0x40],rbx
    9587:	48 89 cb             	mov    rbx,rcx
    958a:	eb 25                	jmp    95b1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x891>
    958c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9590:	48 8b 9c 24 b0 00 00 	mov    rbx,QWORD PTR [rsp+0xb0]
    9597:	00 
	else if (_M_buf_index + 1 < _M_buf_last)
    9598:	0f 8d da 00 00 00    	jge    9678 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x958>
	  ++_M_buf_index;
    959e:	41 83 c6 01          	add    r14d,0x1
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    95a2:	49 83 c7 01          	add    r15,0x1
	  ++_M_buf_index;
    95a6:	44 88 b4 24 b8 00 00 	mov    BYTE PTR [rsp+0xb8],r14b
    95ad:	00 
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    95ae:	4d 89 c5             	mov    r13,r8
		__capacity = __len + 1;
    95b1:	4d 8d 45 01          	lea    r8,[r13+0x1]
	    if (__len == __capacity)
    95b5:	4d 39 fc             	cmp    r12,r15
    95b8:	0f 84 02 01 00 00    	je     96c0 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x9a0>
      { return _M_dataplus._M_p; }
    95be:	48 8b ac 24 80 00 00 	mov    rbp,QWORD PTR [rsp+0x80]
    95c5:	00 
      operator*() const { return _M_buf[_M_buf_index]; }
    95c6:	41 0f b6 c6          	movzx  eax,r14b
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
    95ca:	0f b6 94 24 b9 00 00 	movzx  edx,BYTE PTR [rsp+0xb9]
    95d1:	00 
	__c1 = __c2;
    95d2:	0f b6 84 04 a0 00 00 	movzx  eax,BYTE PTR [rsp+rax*1+0xa0]
    95d9:	00 
    95da:	42 88 44 2d 00       	mov    BYTE PTR [rbp+r13*1+0x0],al
    95df:	41 0f b6 c6          	movzx  eax,r14b
    95e3:	83 c0 01             	add    eax,0x1
    95e6:	39 d0                	cmp    eax,edx
    95e8:	75 a6                	jne    9590 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x870>
    95ea:	4c 39 d3             	cmp    rbx,r10
    95ed:	0f 84 7e 01 00 00    	je     9771 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa51>
    95f3:	48 8d 53 04          	lea    rdx,[rbx+0x4]
	    if (_M_curr() == _M_last)
    95f7:	4c 39 d2             	cmp    rdx,r10
    95fa:	0f 84 9b 00 00 00    	je     969b <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x97b>
	char32_t __c = *_M_curr()++;
    9600:	48 8d 43 08          	lea    rax,[rbx+0x8]
    9604:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    960b:	00 
    960c:	8b 43 04             	mov    eax,DWORD PTR [rbx+0x4]
    if (__c < 0xD800) [[likely]]
    960f:	3d ff d7 00 00       	cmp    eax,0xd7ff
    9614:	0f 87 33 03 00 00    	ja     994d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc2d>
	_M_buf_index = 0;
    961a:	c6 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],0x0
    9621:	00 
      if (__x == 0)
    9622:	85 c0                	test   eax,eax
    9624:	0f 84 b5 02 00 00    	je     98df <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xbbf>
      return _Nd - std::__countl_zero(__x);
    962a:	0f bd c8             	bsr    ecx,eax
    962d:	83 c1 01             	add    ecx,0x1
	    if (__bits <= 7) [[likely]]
    9630:	83 f9 07             	cmp    ecx,0x7
    9633:	0f 8f 6b 04 00 00    	jg     9aa4 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd84>
		_M_buf[1] = _M_buf[2] = _M_buf[3] = 0;
    9639:	31 c9                	xor    ecx,ecx
    963b:	c6 84 24 a1 00 00 00 	mov    BYTE PTR [rsp+0xa1],0x0
    9642:	00 
    9643:	66 89 8c 24 a2 00 00 	mov    WORD PTR [rsp+0xa2],cx
    964a:	00 
		_M_buf[0] = __c;
    964b:	88 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],al
    9652:	b8 01 00 00 00       	mov    eax,0x1
		_M_buf_last = 1;
    9657:	88 84 24 b9 00 00 00 	mov    BYTE PTR [rsp+0xb9],al
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    965e:	49 83 c7 01          	add    r15,0x1
    9662:	48 89 d3             	mov    rbx,rdx
    9665:	45 31 f6             	xor    r14d,r14d
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    9668:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    966f:	00 
      operator==(_Utf_iterator __lhs, _Utf_iterator __rhs)
    9670:	e9 39 ff ff ff       	jmp    95ae <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x88e>
    9675:	0f 1f 00             	nop    DWORD PTR [rax]
    9678:	44 0f b6 b4 24 b8 00 	movzx  r14d,BYTE PTR [rsp+0xb8]
    967f:	00 00 
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    9681:	4c 39 d3             	cmp    rbx,r10
    9684:	0f 94 c0             	sete   al
    9687:	45 84 f6             	test   r14b,r14b
    968a:	0f 94 c2             	sete   dl
    968d:	49 83 c7 01          	add    r15,0x1
    9691:	21 d0                	and    eax,edx
    9693:	84 c0                	test   al,al
    9695:	0f 84 13 ff ff ff    	je     95ae <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x88e>
    969b:	4c 8b 64 24 30       	mov    r12,QWORD PTR [rsp+0x30]
    96a0:	4c 8b 6c 24 38       	mov    r13,QWORD PTR [rsp+0x38]
    96a5:	4c 89 c5             	mov    rbp,r8
    96a8:	48 8b 5c 24 40       	mov    rbx,QWORD PTR [rsp+0x40]
    96ad:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    96b4:	00 
    96b5:	e9 48 fc ff ff       	jmp    9302 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5e2>
    96ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      if (__capacity > max_size())
    96c0:	4d 85 c0             	test   r8,r8
    96c3:	0f 88 b5 04 00 00    	js     9b7e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe5e>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    96c9:	4d 39 c4             	cmp    r12,r8
    96cc:	0f 82 b5 00 00 00    	jb     9787 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa67>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    96d2:	bf 01 00 00 00       	mov    edi,0x1
    96d7:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
		__capacity = __len + 1;
    96dc:	45 31 e4             	xor    r12d,r12d
    96df:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    96e4:	e8 f7 9a ff ff       	call   31e0 <operator new(unsigned long)@plt>
    96e9:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    96ee:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
    96f3:	4c 8b 9c 24 80 00 00 	mov    r11,QWORD PTR [rsp+0x80]
    96fa:	00 
    96fb:	48 89 c5             	mov    rbp,rax
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    96fe:	4c 89 de             	mov    rsi,r11
    9701:	4c 89 ea             	mov    rdx,r13
    9704:	48 89 ef             	mov    rdi,rbp
    9707:	4c 89 44 24 48       	mov    QWORD PTR [rsp+0x48],r8
    970c:	4c 89 54 24 28       	mov    QWORD PTR [rsp+0x28],r10
    9711:	4c 89 5c 24 08       	mov    QWORD PTR [rsp+0x8],r11
    9716:	e8 95 9a ff ff       	call   31b0 <memcpy@plt>
    971b:	4c 8b 44 24 48       	mov    r8,QWORD PTR [rsp+0x48]
    9720:	4c 8b 54 24 28       	mov    r10,QWORD PTR [rsp+0x28]
    9725:	4c 8b 5c 24 08       	mov    r11,QWORD PTR [rsp+0x8]
	if (_M_data() == _M_local_data())
    972a:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    972f:	49 39 c3             	cmp    r11,rax
    9732:	74 28                	je     975c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa3c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    9734:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    973b:	00 
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    973c:	4c 89 df             	mov    rdi,r11
    973f:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
    9744:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    9749:	48 8d 70 01          	lea    rsi,[rax+0x1]
    974d:	e8 ae 9a ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    9752:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
    9757:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
      { _M_dataplus._M_p = __p; }
    975c:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
    9763:	00 
      { _M_allocated_capacity = __capacity; }
    9764:	4c 89 a4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r12
    976b:	00 
    976c:	e9 55 fe ff ff       	jmp    95c6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x8a6>
    9771:	44 0f b6 b4 24 b8 00 	movzx  r14d,BYTE PTR [rsp+0xb8]
    9778:	00 00 
    977a:	48 8b 9c 24 b0 00 00 	mov    rbx,QWORD PTR [rsp+0xb0]
    9781:	00 
    9782:	e9 fa fe ff ff       	jmp    9681 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x961>
    9787:	4d 01 e4             	add    r12,r12
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    978a:	4d 39 e0             	cmp    r8,r12
    978d:	73 48                	jae    97d7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xab7>
	  if (__capacity > max_size())
    978f:	4d 85 e4             	test   r12,r12
    9792:	0f 88 34 01 00 00    	js     98cc <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xbac>
      return _S_allocate(_M_get_allocator(), __capacity + 1);
    9798:	4b 8d 7c 00 ff       	lea    rdi,[r8+r8*1-0x1]
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    979d:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
    97a2:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    97a7:	e8 34 9a ff ff       	call   31e0 <operator new(unsigned long)@plt>
	if (__n == 1)
    97ac:	49 83 ff 01          	cmp    r15,0x1
    97b0:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
      { return _M_dataplus._M_p; }
    97b5:	4c 8b 9c 24 80 00 00 	mov    r11,QWORD PTR [rsp+0x80]
    97bc:	00 
	if (__n == 1)
    97bd:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
    97c2:	48 89 c5             	mov    rbp,rax
    97c5:	0f 85 06 01 00 00    	jne    98d1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xbb1>
	__c1 = __c2;
    97cb:	41 0f b6 03          	movzx  eax,BYTE PTR [r11]
    97cf:	88 45 00             	mov    BYTE PTR [rbp+0x0],al
      }
    97d2:	e9 53 ff ff ff       	jmp    972a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa0a>
	if (__builtin_expect(__n > this->_M_max_size(), false))
    97d7:	4c 89 ef             	mov    rdi,r13
    97da:	48 83 c7 02          	add    rdi,0x2
    97de:	0f 88 e8 00 00 00    	js     98cc <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xbac>
    97e4:	4d 89 c4             	mov    r12,r8
    97e7:	eb b4                	jmp    979d <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa7d>
    97e9:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    97ed:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    97f1:	4c 89 6c 24 28       	mov    QWORD PTR [rsp+0x28],r13
    97f6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    97fd:	00 00 00 
    { return __lhs.base() - __rhs.base(); }
    9800:	48 89 fa             	mov    rdx,rdi
    9803:	48 2b 53 08          	sub    rdx,QWORD PTR [rbx+0x8]
    9807:	48 29 d0             	sub    rax,rdx
    980a:	48 89 c5             	mov    rbp,rax
	while (__to.size() <= __s.size())
    980d:	49 39 c6             	cmp    r14,rax
    9810:	72 66                	jb     9878 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb58>
    9812:	4c 8b 64 24 08       	mov    r12,QWORD PTR [rsp+0x8]
      { return this->_M_len; }
    9817:	4d 89 f5             	mov    r13,r14
    981a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    9820:	4c 39 ed             	cmp    rbp,r13
    9823:	4c 89 ea             	mov    rdx,r13
    9826:	48 0f 46 d5          	cmovbe rdx,rbp
	if (__n == 0)
    982a:	48 85 d2             	test   rdx,rdx
    982d:	74 08                	je     9837 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb17>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    982f:	4c 89 e6             	mov    rsi,r12
    9832:	e8 79 99 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    9837:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      { _M_current += __n; return *this; }
    983a:	48 01 6b 18          	add    QWORD PTR [rbx+0x18],rbp
    983e:	48 89 df             	mov    rdi,rbx
	this->_M_str += __n;
    9841:	49 01 ec             	add    r12,rbp
	this->_M_len -= __n;
    9844:	49 29 ed             	sub    r13,rbp
    9847:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    9849:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    984d:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    9851:	48 89 fa             	mov    rdx,rdi
    9854:	48 89 c5             	mov    rbp,rax
    9857:	48 2b 53 08          	sub    rdx,QWORD PTR [rbx+0x8]
    985b:	48 29 d5             	sub    rbp,rdx
	while (__to.size() <= __s.size())
    985e:	49 39 ed             	cmp    r13,rbp
    9861:	73 bd                	jae    9820 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb00>
	if (__s.size())
    9863:	4d 85 ed             	test   r13,r13
    9866:	75 18                	jne    9880 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb60>
	    while (__l-- > 0)
    9868:	49 83 ef 01          	sub    r15,0x1
    986c:	73 92                	jae    9800 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xae0>
    986e:	4c 8b 6c 24 28       	mov    r13,QWORD PTR [rsp+0x28]
    9873:	e9 c4 fa ff ff       	jmp    933c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x61c>
	while (__to.size() <= __s.size())
    9878:	4c 8b 64 24 08       	mov    r12,QWORD PTR [rsp+0x8]
      { return this->_M_len; }
    987d:	4d 89 f5             	mov    r13,r14
    9880:	4c 89 ea             	mov    rdx,r13
    9883:	4c 89 e6             	mov    rsi,r12
    9886:	e8 25 99 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    988b:	4c 01 6b 18          	add    QWORD PTR [rbx+0x18],r13
	    while (__l-- > 0)
    988f:	49 83 ef 01          	sub    r15,0x1
    9893:	72 d9                	jb     986e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb4e>
    9895:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
    9899:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    989d:	e9 5e ff ff ff       	jmp    9800 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xae0>
		_M_buf_last = 1;
    98a2:	bf 01 00 00 00       	mov    edi,0x1
    98a7:	c6 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],0x0
    98ae:	00 
    98af:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
    98b6:	00 
	while (__beg != __end && __len < __capacity)
    98b7:	45 31 db             	xor    r11d,r11d
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    98ba:	b8 01 00 00 00       	mov    eax,0x1
    98bf:	40 88 bc 24 b9 00 00 	mov    BYTE PTR [rsp+0xb9],dil
    98c6:	00 
    98c7:	e9 80 fc ff ff       	jmp    954c <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x82c>
	    std::__throw_bad_alloc();
    98cc:	e8 0f 98 ff ff       	call   30e0 <std::__throw_bad_alloc()@plt>
	if (__n == 0)
    98d1:	4d 85 ff             	test   r15,r15
    98d4:	0f 84 50 fe ff ff    	je     972a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xa0a>
    98da:	e9 1f fe ff ff       	jmp    96fe <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x9de>
    98df:	31 c0                	xor    eax,eax
    98e1:	e9 53 fd ff ff       	jmp    9639 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x919>
    98e6:	b8 01 00 00 00       	mov    eax,0x1
    98eb:	45 31 db             	xor    r11d,r11d
    98ee:	e9 50 fc ff ff       	jmp    9543 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x823>
    return 0xDFFF < __c && __c <= 0x10FFFF;
    98f3:	41 8d 81 00 20 ff ff 	lea    eax,[r9-0xe000]
	if (!__is_scalar_value(__c)) [[unlikely]]
    98fa:	3d ff 1f 10 00       	cmp    eax,0x101fff
    98ff:	0f 87 b1 00 00 00    	ja     99b6 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc96>
    9905:	41 0f bd c1          	bsr    eax,r9d
	    else if (__bits <= 16)
    9909:	83 f8 0f             	cmp    eax,0xf
    990c:	0f 84 aa 00 00 00    	je     99bc <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc9c>
		_M_buf[0] = 0xC0 | (__c >> 6);
    9912:	44 89 ce             	mov    esi,r9d
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9915:	44 89 c9             	mov    ecx,r9d
		_M_buf[3] = 0x80 | (__c & 0x3F);
    9918:	44 89 c8             	mov    eax,r9d
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    991b:	44 89 ca             	mov    edx,r9d
		_M_buf[0] = 0xC0 | (__c >> 6);
    991e:	c1 ee 06             	shr    esi,0x6
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9921:	c1 e9 0c             	shr    ecx,0xc
		_M_buf[3] = 0x80 | (__c & 0x3F);
    9924:	83 e0 3f             	and    eax,0x3f
		_M_buf_last = 4;
    9927:	bf 04 00 00 00       	mov    edi,0x4
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    992c:	83 e6 3f             	and    esi,0x3f
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    992f:	c1 ea 12             	shr    edx,0x12
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9932:	83 e1 3f             	and    ecx,0x3f
		_M_buf[3] = 0x80 | (__c & 0x3F);
    9935:	83 c8 80             	or     eax,0xffffff80
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    9938:	83 ce 80             	or     esi,0xffffff80
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    993b:	83 ca f0             	or     edx,0xfffffff0
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    993e:	83 c9 80             	or     ecx,0xffffff80
	      }
	  }
      }
    9941:	e9 1c f8 ff ff       	jmp    9162 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x442>
    9946:	31 c0                	xor    eax,eax
    9948:	e9 42 f9 ff ff       	jmp    928f <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x56f>
    return 0xDFFF < __c && __c <= 0x10FFFF;
    994d:	8d 88 00 20 ff ff    	lea    ecx,[rax-0xe000]
	_M_buf_index = 0;
    9953:	c6 84 24 b8 00 00 00 	mov    BYTE PTR [rsp+0xb8],0x0
    995a:	00 
	if (!__is_scalar_value(__c)) [[unlikely]]
    995b:	81 f9 ff 1f 10 00    	cmp    ecx,0x101fff
    9961:	0f 87 ee 00 00 00    	ja     9a55 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd35>
    9967:	0f bd c8             	bsr    ecx,eax
	    else if (__bits <= 16)
    996a:	83 f9 0f             	cmp    ecx,0xf
    996d:	0f 84 e7 00 00 00    	je     9a5a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd3a>
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    9973:	89 c7                	mov    edi,eax
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    9975:	89 c1                	mov    ecx,eax
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9977:	89 c6                	mov    esi,eax
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    9979:	83 e0 3f             	and    eax,0x3f
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    997c:	c1 ef 06             	shr    edi,0x6
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    997f:	c1 e0 08             	shl    eax,0x8
		_M_buf[1] = 0x80 | ((__c >> 12) & 0x3F);
    9982:	c1 ee 0c             	shr    esi,0xc
		_M_buf[0] = 0xF0 | ((__c >> 18) & 0x07);
    9985:	83 e7 3f             	and    edi,0x3f
    9988:	c1 e9 12             	shr    ecx,0x12
    998b:	09 f8                	or     eax,edi
    998d:	83 e6 3f             	and    esi,0x3f
    9990:	0f b6 c9             	movzx  ecx,cl
    9993:	c1 e0 08             	shl    eax,0x8
    9996:	09 f0                	or     eax,esi
    9998:	c1 e0 08             	shl    eax,0x8
    999b:	09 c8                	or     eax,ecx
    999d:	8b 0d 61 b6 00 00    	mov    ecx,DWORD PTR [rip+0xb661]        # 15004 <_IO_stdin_used+0x4>
    99a3:	09 c8                	or     eax,ecx
    99a5:	89 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],eax
      }
    99ac:	b8 04 00 00 00       	mov    eax,0x4
    99b1:	e9 a1 fc ff ff       	jmp    9657 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x937>
	  __c = _S_error();
    99b6:	41 b9 fd ff 00 00    	mov    r9d,0xfffd
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    99bc:	44 89 c9             	mov    ecx,r9d
		_M_buf[0] = 0xE0 | (__c >> 12);
    99bf:	44 89 ca             	mov    edx,r9d
		_M_buf[2] = 0x80 | (__c & 0x3F);
    99c2:	44 89 ce             	mov    esi,r9d
		_M_buf_last = 3;
    99c5:	bf 03 00 00 00       	mov    edi,0x3
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    99ca:	c1 e9 06             	shr    ecx,0x6
		_M_buf[0] = 0xE0 | (__c >> 12);
    99cd:	c1 ea 0c             	shr    edx,0xc
		_M_buf[2] = 0x80 | (__c & 0x3F);
    99d0:	83 e6 3f             	and    esi,0x3f
		_M_buf[3] = 0;
    99d3:	31 c0                	xor    eax,eax
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    99d5:	83 e1 3f             	and    ecx,0x3f
		_M_buf[0] = 0xE0 | (__c >> 12);
    99d8:	83 ca e0             	or     edx,0xffffffe0
		_M_buf[2] = 0x80 | (__c & 0x3F);
    99db:	83 ce 80             	or     esi,0xffffff80
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    99de:	83 c9 80             	or     ecx,0xffffff80
    99e1:	e9 7c f7 ff ff       	jmp    9162 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x442>
	  __c = _S_error();
    99e6:	b8 fd ff 00 00       	mov    eax,0xfffd
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    99eb:	89 c1                	mov    ecx,eax
		_M_buf[0] = 0xE0 | (__c >> 12);
    99ed:	89 c6                	mov    esi,eax
		_M_buf[2] = 0x80 | (__c & 0x3F);
    99ef:	83 e0 3f             	and    eax,0x3f
		_M_buf[3] = 0;
    99f2:	c6 84 24 a3 00 00 00 	mov    BYTE PTR [rsp+0xa3],0x0
    99f9:	00 
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    99fa:	c1 e9 06             	shr    ecx,0x6
		_M_buf[0] = 0xE0 | (__c >> 12);
    99fd:	c1 ee 0c             	shr    esi,0xc
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9a00:	83 c8 80             	or     eax,0xffffff80
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    9a03:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    9a0a:	00 
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9a0b:	83 e1 3f             	and    ecx,0x3f
		_M_buf[0] = 0xE0 | (__c >> 12);
    9a0e:	83 ce e0             	or     esi,0xffffffe0
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9a11:	88 84 24 a2 00 00 00 	mov    BYTE PTR [rsp+0xa2],al
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9a18:	83 c9 80             	or     ecx,0xffffff80
		_M_buf[0] = 0xE0 | (__c >> 12);
    9a1b:	40 88 b4 24 a0 00 00 	mov    BYTE PTR [rsp+0xa0],sil
    9a22:	00 
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9a23:	88 8c 24 a1 00 00 00 	mov    BYTE PTR [rsp+0xa1],cl
    9a2a:	48 83 fd 0f          	cmp    rbp,0xf
    9a2e:	0f 84 36 01 00 00    	je     9b6a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe4a>
	    _M_local_buf[__len++] = *__beg;
    9a34:	48 83 c5 01          	add    rbp,0x1
		_M_buf_last = 3;
    9a38:	bf 03 00 00 00       	mov    edi,0x3
    9a3d:	41 88 34 28          	mov    BYTE PTR [r8+rbp*1],sil
      operator++()
    9a41:	e9 d8 fa ff ff       	jmp    951e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x7fe>
    9a46:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
    9a4b:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    9a50:	e9 9c f5 ff ff       	jmp    8ff1 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x2d1>
	  __c = _S_error();
    9a55:	b8 fd ff 00 00       	mov    eax,0xfffd
		_M_buf[0] = 0xE0 | (__c >> 12);
    9a5a:	89 c1                	mov    ecx,eax
		_M_buf[3] = 0;
    9a5c:	c6 84 24 a3 00 00 00 	mov    BYTE PTR [rsp+0xa3],0x0
    9a63:	00 
		_M_buf[0] = 0xE0 | (__c >> 12);
    9a64:	c1 e9 0c             	shr    ecx,0xc
    9a67:	83 c9 e0             	or     ecx,0xffffffe0
    9a6a:	88 8c 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],cl
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9a71:	89 c1                	mov    ecx,eax
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9a73:	83 e0 3f             	and    eax,0x3f
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9a76:	c1 e9 06             	shr    ecx,0x6
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9a79:	83 c8 80             	or     eax,0xffffff80
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9a7c:	83 e1 3f             	and    ecx,0x3f
		_M_buf[2] = 0x80 | (__c & 0x3F);
    9a7f:	88 84 24 a2 00 00 00 	mov    BYTE PTR [rsp+0xa2],al
    9a86:	b8 03 00 00 00       	mov    eax,0x3
		_M_buf[1] = 0x80 | ((__c >> 6) & 0x3F);
    9a8b:	83 c9 80             	or     ecx,0xffffff80
    9a8e:	88 8c 24 a1 00 00 00 	mov    BYTE PTR [rsp+0xa1],cl
    9a95:	e9 bd fb ff ff       	jmp    9657 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x937>
		_M_buf_last = 4;
    9a9a:	bf 04 00 00 00       	mov    edi,0x4
    9a9f:	e9 03 fe ff ff       	jmp    98a7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb87>
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9aa4:	89 c6                	mov    esi,eax
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    9aa6:	89 c7                	mov    edi,eax
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9aa8:	83 e6 3f             	and    esi,0x3f
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    9aab:	c1 ef 06             	shr    edi,0x6
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9aae:	83 ce 80             	or     esi,0xffffff80
	    else if (__bits <= 11)
    9ab1:	83 f9 0b             	cmp    ecx,0xb
    9ab4:	7f a4                	jg     9a5a <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xd3a>
		_M_buf[0] = 0xC0 | (__c >> 6);
    9ab6:	89 f8                	mov    eax,edi
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9ab8:	40 88 b4 24 a1 00 00 	mov    BYTE PTR [rsp+0xa1],sil
    9abf:	00 
		_M_buf[0] = 0xC0 | (__c >> 6);
    9ac0:	83 c8 c0             	or     eax,0xffffffc0
    9ac3:	88 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],al
		_M_buf[2] = _M_buf[3] = 0;
    9aca:	31 c0                	xor    eax,eax
    9acc:	66 89 84 24 a2 00 00 	mov    WORD PTR [rsp+0xa2],ax
    9ad3:	00 
    9ad4:	b8 02 00 00 00       	mov    eax,0x2
    9ad9:	e9 79 fb ff ff       	jmp    9657 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x937>
		   && __lhs._M_buf_index == __rhs._M_buf_index;
    9ade:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
    9ae3:	bd 0f 00 00 00       	mov    ebp,0xf
    9ae8:	e9 15 f8 ff ff       	jmp    9302 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x5e2>
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9aed:	89 c7                	mov    edi,eax
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    9aef:	89 c1                	mov    ecx,eax
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9af1:	83 e7 3f             	and    edi,0x3f
		_M_buf[2] = 0x80 | ((__c >> 6) & 0x3F);
    9af4:	c1 e9 06             	shr    ecx,0x6
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9af7:	83 cf 80             	or     edi,0xffffff80
	    else if (__bits <= 11)
    9afa:	83 fe 0b             	cmp    esi,0xb
    9afd:	0f 8f e8 fe ff ff    	jg     99eb <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xccb>
		_M_buf[0] = 0xC0 | (__c >> 6);
    9b03:	89 c8                	mov    eax,ecx
		_M_buf[2] = _M_buf[3] = 0;
    9b05:	31 f6                	xor    esi,esi
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9b07:	40 88 bc 24 a1 00 00 	mov    BYTE PTR [rsp+0xa1],dil
    9b0e:	00 
		_M_buf[0] = 0xC0 | (__c >> 6);
    9b0f:	83 c8 c0             	or     eax,0xffffffc0
		_M_buf[2] = _M_buf[3] = 0;
    9b12:	66 89 b4 24 a2 00 00 	mov    WORD PTR [rsp+0xa2],si
    9b19:	00 
		_M_buf[0] = 0xC0 | (__c >> 6);
    9b1a:	88 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],al
	  constexpr ~_Guard() { _M_this->_M_curr() = std::move(_M_orig); }
    9b21:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
    9b28:	00 
	while (__beg != __end && __len < __capacity)
    9b29:	48 83 fd 0f          	cmp    rbp,0xf
    9b2d:	74 45                	je     9b74 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xe54>
	    _M_local_buf[__len++] = *__beg;
    9b2f:	48 83 c5 01          	add    rbp,0x1
		_M_buf_last = 2;
    9b33:	bf 02 00 00 00       	mov    edi,0x2
    9b38:	41 88 04 28          	mov    BYTE PTR [r8+rbp*1],al
      operator++()
    9b3c:	e9 dd f9 ff ff       	jmp    951e <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x7fe>
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9b41:	44 89 c9             	mov    ecx,r9d
		_M_buf[0] = 0xC0 | (__c >> 6);
    9b44:	44 89 ca             	mov    edx,r9d
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9b47:	83 e1 3f             	and    ecx,0x3f
		_M_buf[0] = 0xC0 | (__c >> 6);
    9b4a:	c1 ea 06             	shr    edx,0x6
		_M_buf[1] = 0x80 | (__c & 0x3F);
    9b4d:	83 c9 80             	or     ecx,0xffffff80
	    else if (__bits <= 11)
    9b50:	83 fe 0b             	cmp    esi,0xb
    9b53:	0f 8f 63 fe ff ff    	jg     99bc <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xc9c>
		_M_buf[0] = 0xC0 | (__c >> 6);
    9b59:	83 ca c0             	or     edx,0xffffffc0
		_M_buf_last = 2;
    9b5c:	bf 02 00 00 00       	mov    edi,0x2
		_M_buf[2] = _M_buf[3] = 0;
    9b61:	31 c0                	xor    eax,eax
    9b63:	31 f6                	xor    esi,esi
    9b65:	e9 f8 f5 ff ff       	jmp    9162 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0x442>
		_M_buf_last = 3;
    9b6a:	bf 03 00 00 00       	mov    edi,0x3
    9b6f:	e9 33 fd ff ff       	jmp    98a7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb87>
		_M_buf_last = 2;
    9b74:	bf 02 00 00 00       	mov    edi,0x2
    9b79:	e9 29 fd ff ff       	jmp    98a7 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)+0xb87>
	std::__throw_length_error(__N("basic_string::_M_create"));
    9b7e:	48 8d 3d 93 b5 00 00 	lea    rdi,[rip+0xb593]        # 15118 <CSWTCH.1110+0x38>
    9b85:	e8 a6 95 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
    9b8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000009b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>:
    __write_padded_as_spec(basic_string_view<type_identity_t<_CharT>> __str,
    9b90:	41 55                	push   r13
    9b92:	49 89 d2             	mov    r10,rdx
    9b95:	49 89 f5             	mov    r13,rsi
    9b98:	4c 89 c2             	mov    rdx,r8
    9b9b:	41 54                	push   r12
    9b9d:	49 89 fc             	mov    r12,rdi
    9ba0:	48 89 cf             	mov    rdi,rcx
    9ba3:	44 89 ce             	mov    esi,r9d
    9ba6:	55                   	push   rbp
    9ba7:	53                   	push   rbx
    9ba8:	48 83 ec 48          	sub    rsp,0x48
	  if (_M_width_kind == _WP_value)
    9bac:	41 0f b7 08          	movzx  ecx,WORD PTR [r8]
    9bb0:	66 81 e1 80 01       	and    cx,0x180
    9bb5:	66 81 f9 80 00       	cmp    cx,0x80
    9bba:	74 24                	je     9be0 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x50>
	  else if (_M_width_kind == _WP_from_arg)
    9bbc:	66 81 f9 00 01       	cmp    cx,0x100
    9bc1:	0f 84 d9 00 00 00    	je     9ca0 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x110>
      iterator out() { return std::move(_M_out); }
    9bc7:	48 8b 6f 10          	mov    rbp,QWORD PTR [rdi+0x10]
	  if (__str.size())
    9bcb:	4d 85 e4             	test   r12,r12
    9bce:	75 50                	jne    9c20 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x90>
    }
    9bd0:	48 83 c4 48          	add    rsp,0x48
    9bd4:	48 89 e8             	mov    rax,rbp
    9bd7:	5b                   	pop    rbx
    9bd8:	5d                   	pop    rbp
    9bd9:	41 5c                	pop    r12
    9bdb:	41 5d                	pop    r13
    9bdd:	c3                   	ret
    9bde:	66 90                	xchg   ax,ax
	    __width = _M_width;
    9be0:	45 0f b7 40 04       	movzx  r8d,WORD PTR [r8+0x4]
      if (__width <= __estimated_width)
    9be5:	4d 39 c2             	cmp    r10,r8
    9be8:	73 dd                	jae    9bc7 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x37>
      if (__spec._M_align)
    9bea:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    9bed:	48 8b 7f 10          	mov    rdi,QWORD PTR [rdi+0x10]
	__align = __spec._M_align;
    9bf1:	41 89 c9             	mov    r9d,ecx
    9bf4:	41 83 e1 03          	and    r9d,0x3
    9bf8:	83 e1 03             	and    ecx,0x3
    9bfb:	41 0f 45 f1          	cmovne esi,r9d
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    9bff:	44 8b 4a 08          	mov    r9d,DWORD PTR [rdx+0x8]
    }
    9c03:	48 83 c4 48          	add    rsp,0x48
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    9c07:	4c 89 ea             	mov    rdx,r13
    }
    9c0a:	5b                   	pop    rbx
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    9c0b:	4d 29 d0             	sub    r8,r10
    }
    9c0e:	5d                   	pop    rbp
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    9c0f:	89 f1                	mov    ecx,esi
    9c11:	4c 89 e6             	mov    rsi,r12
    }
    9c14:	41 5c                	pop    r12
    9c16:	41 5d                	pop    r13
      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
    9c18:	e9 03 f1 ff ff       	jmp    8d20 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
    9c1d:	0f 1f 00             	nop    DWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    9c20:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    9c24:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    9c28:	48 89 f8             	mov    rax,rdi
    9c2b:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    9c2f:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    9c32:	49 39 dc             	cmp    r12,rbx
    9c35:	72 53                	jb     9c8a <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0xfa>
    9c37:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    9c3e:	00 00 
    9c40:	49 39 dc             	cmp    r12,rbx
    9c43:	48 89 da             	mov    rdx,rbx
    9c46:	49 0f 46 d4          	cmovbe rdx,r12
    9c4a:	48 85 d2             	test   rdx,rdx
    9c4d:	74 08                	je     9c57 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0xc7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    9c4f:	4c 89 ee             	mov    rsi,r13
    9c52:	e8 59 95 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    9c57:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
      { _M_current += __n; return *this; }
    9c5b:	48 01 5d 18          	add    QWORD PTR [rbp+0x18],rbx
    9c5f:	48 89 ef             	mov    rdi,rbp
	this->_M_str += __n;
    9c62:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
    9c65:	49 29 dc             	sub    r12,rbx
    9c68:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    9c6a:	48 8b 7d 18          	mov    rdi,QWORD PTR [rbp+0x18]
    9c6e:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
    9c72:	48 89 f8             	mov    rax,rdi
    9c75:	48 2b 45 08          	sub    rax,QWORD PTR [rbp+0x8]
    9c79:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    9c7c:	49 39 dc             	cmp    r12,rbx
    9c7f:	73 bf                	jae    9c40 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0xb0>
	if (__s.size())
    9c81:	4d 85 e4             	test   r12,r12
    9c84:	0f 84 46 ff ff ff    	je     9bd0 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x40>
    9c8a:	4c 89 e2             	mov    rdx,r12
    9c8d:	4c 89 ee             	mov    rsi,r13
    9c90:	e8 1b 95 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    9c95:	4c 01 65 18          	add    QWORD PTR [rbp+0x18],r12
	return __format::__write(__fc.out(), __str);
    9c99:	e9 32 ff ff ff       	jmp    9bd0 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x40>
    9c9e:	66 90                	xchg   ax,ax
	if (__i < _M_packed_size)
    9ca0:	0f b6 0f             	movzx  ecx,BYTE PTR [rdi]
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    9ca3:	45 0f b7 48 04       	movzx  r9d,WORD PTR [r8+0x4]
	if (__i < _M_packed_size)
    9ca8:	41 89 c8             	mov    r8d,ecx
    9cab:	83 e1 0f             	and    ecx,0xf
    9cae:	41 83 e0 0f          	and    r8d,0xf
    9cb2:	49 39 c9             	cmp    r9,rcx
    9cb5:	73 59                	jae    9d10 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x180>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    9cb7:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
    9cba:	4b 8d 0c 89          	lea    rcx,[r9+r9*4]
	    __arg._M_val = _M_values[__i];
    9cbe:	49 c1 e1 04          	shl    r9,0x4
    9cc2:	4c 03 4f 08          	add    r9,QWORD PTR [rdi+0x8]
    9cc6:	66 41 0f 6f 01       	movdqa xmm0,XMMWORD PTR [r9]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    9ccb:	49 c1 e8 04          	shr    r8,0x4
    9ccf:	49 d3 e8             	shr    r8,cl
	    __arg._M_val = _M_values[__i];
    9cd2:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    9cd6:	4c 89 c1             	mov    rcx,r8
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    9cd9:	83 e1 1f             	and    ecx,0x1f
    __int_from_arg(const basic_format_arg<_Context>& __arg)
    9cdc:	88 4c 24 10          	mov    BYTE PTR [rsp+0x10],cl
    9ce0:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
	  switch (__type)
    9ce5:	4c 8d 05 0c bb 00 00 	lea    r8,[rip+0xbb0c]        # 157f8 <CSWTCH.1110+0x718>
    9cec:	0f b6 c9             	movzx  ecx,cl
    9cef:	49 63 0c 88          	movsxd rcx,DWORD PTR [r8+rcx*4]
    9cf3:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    9cf8:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
    9cfe:	4c 01 c1             	add    rcx,r8
    9d01:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
    9d06:	ff e1                	jmp    rcx
    9d08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    9d0f:	00 
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    9d10:	45 84 c0             	test   r8b,r8b
    9d13:	75 0c                	jne    9d21 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x191>
    9d15:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
    9d18:	48 c1 e9 04          	shr    rcx,0x4
    9d1c:	49 39 c9             	cmp    r9,rcx
    9d1f:	72 4f                	jb     9d70 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x1e0>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    9d21:	e8 2a 94 ff ff       	call   3150 <abort@plt>
    9d26:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    9d2d:	00 00 00 
	      if (__arg >= 0)
    9d30:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
    9d35:	4d 85 c0             	test   r8,r8
    9d38:	0f 89 a7 fe ff ff    	jns    9be5 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x55>
    9d3e:	eb e1                	jmp    9d21 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x191>
	      return __arg;
    9d40:	44 8b 44 24 20       	mov    r8d,DWORD PTR [rsp+0x20]
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
    9d45:	e9 9b fe ff ff       	jmp    9be5 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x55>
	      if (__arg >= 0)
    9d4a:	4c 63 44 24 20       	movsxd r8,DWORD PTR [rsp+0x20]
    9d4f:	45 85 c0             	test   r8d,r8d
    9d52:	0f 89 8d fe ff ff    	jns    9be5 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x55>
    9d58:	eb c7                	jmp    9d21 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x191>
    9d5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __arg;
    9d60:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
    9d65:	e9 7b fe ff ff       	jmp    9be5 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x55>
    9d6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  __arg = _M_args[__i];
    9d70:	49 c1 e1 05          	shl    r9,0x5
    9d74:	4c 03 4f 08          	add    r9,QWORD PTR [rdi+0x8]
    9d78:	f3 41 0f 6f 01       	movdqu xmm0,XMMWORD PTR [r9]
    9d7d:	41 0f b6 49 10       	movzx  ecx,BYTE PTR [r9+0x10]
    9d82:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
    9d86:	e9 51 ff ff ff       	jmp    9cdc <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)+0x14c>
    9d8b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000009d90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>:
	_M_format_to_ostream(const _Tp& __t, _FormatContext& __fc,
    9d90:	41 57                	push   r15
    9d92:	41 89 cf             	mov    r15d,ecx
    9d95:	41 56                	push   r14
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9d97:	4c 8d 35 02 1d 01 00 	lea    r14,[rip+0x11d02]        # 1baa0 <vtable for std::basic_ios<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    9d9e:	41 55                	push   r13
    9da0:	4c 8d 2d 31 1e 01 00 	lea    r13,[rip+0x11e31]        # 1bbd8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
    9da7:	41 54                	push   r12
    9da9:	66 49 0f 6e dd       	movq   xmm3,r13
    9dae:	55                   	push   rbp
    9daf:	53                   	push   rbx
    9db0:	48 81 ec a8 03 00 00 	sub    rsp,0x3a8
      basic_ios()
    9db7:	f3 0f 7e 15 e1 1f 01 	movq   xmm2,QWORD PTR [rip+0x11fe1]        # 1bda0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x260>
    9dbe:	00 
    9dbf:	f3 0f 7e 0d d9 1f 01 	movq   xmm1,QWORD PTR [rip+0x11fd9]        # 1bda0 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x260>
    9dc6:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9dc7:	48 8d 84 24 10 01 00 	lea    rax,[rsp+0x110]
    9dce:	00 
    9dcf:	48 89 7c 24 38       	mov    QWORD PTR [rsp+0x38],rdi
    9dd4:	48 8d ac 24 a0 00 00 	lea    rbp,[rsp+0xa0]
    9ddb:	00 
    9ddc:	48 89 c7             	mov    rdi,rax
    9ddf:	66 0f 6c d3          	punpcklqdq xmm2,xmm3
    9de3:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    9de8:	0f 16 0d b9 1f 01 00 	movhps xmm1,QWORD PTR [rip+0x11fb9]        # 1bda8 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x2f8>
    9def:	0f 29 54 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm2
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    9df4:	4c 8d a4 24 00 01 00 	lea    r12,[rsp+0x100]
    9dfb:	00 
    9dfc:	0f 29 4c 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm1
    9e01:	48 89 74 24 48       	mov    QWORD PTR [rsp+0x48],rsi
    9e06:	48 89 54 24 40       	mov    QWORD PTR [rsp+0x40],rdx
    9e0b:	48 89 6c 24 30       	mov    QWORD PTR [rsp+0x30],rbp
    9e10:	e8 9b 92 ff ff       	call   30b0 <std::ios_base::ios_base()@plt>
      { this->init(0); }
    9e15:	48 8b 1d 7c 1d 01 00 	mov    rbx,QWORD PTR [rip+0x11d7c]        # 1bb98 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x8>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9e1c:	31 d2                	xor    edx,edx
    9e1e:	31 f6                	xor    esi,esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9e20:	66 0f ef c0          	pxor   xmm0,xmm0
    9e24:	48 8b 0d 75 1d 01 00 	mov    rcx,QWORD PTR [rip+0x11d75]        # 1bba0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9e2b:	66 89 94 24 f0 01 00 	mov    WORD PTR [rsp+0x1f0],dx
    9e32:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9e33:	0f 11 84 24 f8 01 00 	movups XMMWORD PTR [rsp+0x1f8],xmm0
    9e3a:	00 
    9e3b:	0f 11 84 24 08 02 00 	movups XMMWORD PTR [rsp+0x208],xmm0
    9e42:	00 
    9e43:	48 03 6b e8          	add    rbp,QWORD PTR [rbx-0x18]
    9e47:	4c 89 b4 24 10 01 00 	mov    QWORD PTR [rsp+0x110],r14
    9e4e:	00 
    9e4f:	48 89 ef             	mov    rdi,rbp
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9e52:	48 c7 84 24 e8 01 00 	mov    QWORD PTR [rsp+0x1e8],0x0
    9e59:	00 00 00 00 00 
    9e5e:	48 89 9c 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rbx
    9e65:	00 
    9e66:	48 89 4d 00          	mov    QWORD PTR [rbp+0x0],rcx
    9e6a:	e8 21 94 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
      : __ostream_type(), _M_stringbuf(ios_base::out)
    9e6f:	48 8d 0d 0a 1d 01 00 	lea    rcx,[rip+0x11d0a]        # 1bb80 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    9e76:	66 0f 6f 4c 24 10    	movdqa xmm1,XMMWORD PTR [rsp+0x10]
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    9e7c:	66 0f ef c0          	pxor   xmm0,xmm0
    9e80:	48 89 8c 24 10 01 00 	mov    QWORD PTR [rsp+0x110],rcx
    9e87:	00 
      _M_buf_locale(locale())
    9e88:	48 8d 8c 24 e0 00 00 	lea    rcx,[rsp+0xe0]
    9e8f:	00 
    9e90:	48 89 cf             	mov    rdi,rcx
    9e93:	48 89 4c 24 50       	mov    QWORD PTR [rsp+0x50],rcx
    9e98:	0f 29 8c 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm1
    9e9f:	00 
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    9ea0:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    9ea7:	00 
    9ea8:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    9eaf:	00 
    9eb0:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    9eb7:	00 
      _M_buf_locale(locale())
    9eb8:	e8 b3 94 ff ff       	call   3370 <std::locale::locale()@plt>
      { this->init(&_M_stringbuf); }
    9ebd:	48 8d 8c 24 a8 00 00 	lea    rcx,[rsp+0xa8]
    9ec4:	00 
    9ec5:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
      : __streambuf_type(), _M_mode(__mode), _M_string()
    9eca:	4c 89 ac 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],r13
    9ed1:	00 
      { this->init(&_M_stringbuf); }
    9ed2:	48 89 ce             	mov    rsi,rcx
      : __streambuf_type(), _M_mode(__mode), _M_string()
    9ed5:	c7 84 24 e8 00 00 00 	mov    DWORD PTR [rsp+0xe8],0x10
    9edc:	10 00 00 00 
    9ee0:	4c 89 a4 24 f0 00 00 	mov    QWORD PTR [rsp+0xf0],r12
    9ee7:	00 
      { _M_string_length = __length; }
    9ee8:	48 c7 84 24 f8 00 00 	mov    QWORD PTR [rsp+0xf8],0x0
    9eef:	00 00 00 00 00 
	__c1 = __c2;
    9ef4:	c6 84 24 00 01 00 00 	mov    BYTE PTR [rsp+0x100],0x0
    9efb:	00 
      { this->init(&_M_stringbuf); }
    9efc:	48 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],rcx
    9f01:	e8 8a 93 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
	  if (!_M_spec._M_localized)
    9f06:	48 8b 44 24 38       	mov    rax,QWORD PTR [rsp+0x38]
    9f0b:	f6 00 20             	test   BYTE PTR [rax],0x20
    9f0e:	0f 85 1c 05 00 00    	jne    a430 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6a0>
	    return std::locale::classic();
    9f14:	e8 87 93 ff ff       	call   32a0 <std::locale::classic()@plt>
    9f19:	48 8d ac 24 80 00 00 	lea    rbp,[rsp+0x80]
    9f20:	00 
    9f21:	48 89 c6             	mov    rsi,rax
    9f24:	48 89 ef             	mov    rdi,rbp
    9f27:	e8 64 92 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __os.imbue(_M_locale(__fc));
    9f2c:	48 8d 84 24 20 02 00 	lea    rax,[rsp+0x220]
    9f33:	00 
    9f34:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    9f39:	48 89 ea             	mov    rdx,rbp
    9f3c:	48 89 c7             	mov    rdi,rax
    9f3f:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    9f43:	e8 48 91 ff ff       	call   3090 <std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@plt>
    9f48:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    9f4c:	e8 6f 93 ff ff       	call   32c0 <std::locale::~locale()@plt>
    9f51:	48 89 ef             	mov    rdi,rbp
    9f54:	e8 67 93 ff ff       	call   32c0 <std::locale::~locale()@plt>
		    if (__is_neg) [[unlikely]]
    9f59:	45 84 ff             	test   r15b,r15b
    9f5c:	0f 85 3e 06 00 00    	jne    a5a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x810>
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9f62:	4c 8d bc 24 90 02 00 	lea    r15,[rsp+0x290]
    9f69:	00 
    9f6a:	4c 89 ff             	mov    rdi,r15
    9f6d:	e8 3e 91 ff ff       	call   30b0 <std::ios_base::ios_base()@plt>
    9f72:	48 8b 15 27 1c 01 00 	mov    rdx,QWORD PTR [rip+0x11c27]        # 1bba0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9f79:	31 c0                	xor    eax,eax
    9f7b:	31 f6                	xor    esi,esi
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9f7d:	66 0f ef c0          	pxor   xmm0,xmm0
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9f81:	66 89 84 24 70 03 00 	mov    WORD PTR [rsp+0x370],ax
    9f88:	00 
    9f89:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
    9f8d:	0f 11 84 24 78 03 00 	movups XMMWORD PTR [rsp+0x378],xmm0
    9f94:	00 
    9f95:	0f 11 84 24 88 03 00 	movups XMMWORD PTR [rsp+0x388],xmm0
    9f9c:	00 
    9f9d:	48 03 43 e8          	add    rax,QWORD PTR [rbx-0x18]
    9fa1:	4c 89 b4 24 90 02 00 	mov    QWORD PTR [rsp+0x290],r14
    9fa8:	00 
    9fa9:	48 89 c7             	mov    rdi,rax
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
    9fac:	48 c7 84 24 68 03 00 	mov    QWORD PTR [rsp+0x368],0x0
    9fb3:	00 00 00 00 00 
    9fb8:	48 89 9c 24 20 02 00 	mov    QWORD PTR [rsp+0x220],rbx
    9fbf:	00 
    9fc0:	48 89 10             	mov    QWORD PTR [rax],rdx
    9fc3:	e8 c8 92 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
      : __ostream_type(), _M_stringbuf(ios_base::out)
    9fc8:	48 8d 0d b1 1b 01 00 	lea    rcx,[rip+0x11bb1]        # 1bb80 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    9fcf:	66 0f 6f 64 24 10    	movdqa xmm4,XMMWORD PTR [rsp+0x10]
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    9fd5:	66 0f ef c0          	pxor   xmm0,xmm0
    9fd9:	48 89 8c 24 90 02 00 	mov    QWORD PTR [rsp+0x290],rcx
    9fe0:	00 
      _M_buf_locale(locale())
    9fe1:	48 8d 8c 24 60 02 00 	lea    rcx,[rsp+0x260]
    9fe8:	00 
    9fe9:	48 89 cf             	mov    rdi,rcx
    9fec:	48 89 4c 24 58       	mov    QWORD PTR [rsp+0x58],rcx
    9ff1:	0f 29 a4 24 20 02 00 	movaps XMMWORD PTR [rsp+0x220],xmm4
    9ff8:	00 
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
    9ff9:	0f 29 84 24 30 02 00 	movaps XMMWORD PTR [rsp+0x230],xmm0
    a000:	00 
    a001:	0f 29 84 24 40 02 00 	movaps XMMWORD PTR [rsp+0x240],xmm0
    a008:	00 
    a009:	0f 29 84 24 50 02 00 	movaps XMMWORD PTR [rsp+0x250],xmm0
    a010:	00 
      _M_buf_locale(locale())
    a011:	e8 5a 93 ff ff       	call   3370 <std::locale::locale()@plt>
      { this->init(&_M_stringbuf); }
    a016:	48 8d 94 24 28 02 00 	lea    rdx,[rsp+0x228]
    a01d:	00 
    a01e:	4c 89 ff             	mov    rdi,r15
      : __streambuf_type(), _M_mode(__mode), _M_string()
    a021:	4c 89 ac 24 28 02 00 	mov    QWORD PTR [rsp+0x228],r13
    a028:	00 
      { this->init(&_M_stringbuf); }
    a029:	48 89 d6             	mov    rsi,rdx
    a02c:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a031:	4c 8d ac 24 80 02 00 	lea    r13,[rsp+0x280]
    a038:	00 
      : __streambuf_type(), _M_mode(__mode), _M_string()
    a039:	c7 84 24 68 02 00 00 	mov    DWORD PTR [rsp+0x268],0x10
    a040:	10 00 00 00 
    a044:	4c 89 ac 24 70 02 00 	mov    QWORD PTR [rsp+0x270],r13
    a04b:	00 
      { _M_string_length = __length; }
    a04c:	48 c7 84 24 78 02 00 	mov    QWORD PTR [rsp+0x278],0x0
    a053:	00 00 00 00 00 
    a058:	c6 84 24 80 02 00 00 	mov    BYTE PTR [rsp+0x280],0x0
    a05f:	00 
      { this->init(&_M_stringbuf); }
    a060:	e8 2b 92 ff ff       	call   3290 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
      __s.flags(__os.flags());
    a065:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    a06c:	00 
    a06d:	48 8b 74 24 30       	mov    rsi,QWORD PTR [rsp+0x30]
     *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),
     *  the global C++ locale.
    */
    locale
    getloc() const
    { return _M_ios_locale; }
    a072:	48 89 ef             	mov    rdi,rbp
    a075:	48 03 70 e8          	add    rsi,QWORD PTR [rax-0x18]
      _M_flags = __fmtfl;
    a079:	8b 46 18             	mov    eax,DWORD PTR [rsi+0x18]
    { return _M_ios_locale; }
    a07c:	48 81 c6 d0 00 00 00 	add    rsi,0xd0
      _M_flags = __fmtfl;
    a083:	89 84 24 a8 02 00 00 	mov    DWORD PTR [rsp+0x2a8],eax
    { return _M_ios_locale; }
    a08a:	e8 01 91 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      __s.imbue(__os.getloc());
    a08f:	48 89 ea             	mov    rdx,rbp
    a092:	4c 89 fe             	mov    rsi,r15
    a095:	48 8d 7c 24 78       	lea    rdi,[rsp+0x78]
    a09a:	48 89 7c 24 68       	mov    QWORD PTR [rsp+0x68],rdi
    a09f:	e8 ec 8f ff ff       	call   3090 <std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)@plt>
    a0a4:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    a0a9:	e8 12 92 ff ff       	call   32c0 <std::locale::~locale()@plt>
    a0ae:	48 89 ef             	mov    rdi,rbp
    a0b1:	e8 0a 92 ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_insert(__f); }
    a0b6:	48 8b 54 24 48       	mov    rdx,QWORD PTR [rsp+0x48]
    a0bb:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
      __s.precision(__os.precision());
    a0bf:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    a0c6:	00 
    a0c7:	f2 0f 10 02          	movsd  xmm0,QWORD PTR [rdx]
    { return _M_precision; }
    a0cb:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
      _M_precision = __prec;
    a0cf:	48 8b 84 04 a8 00 00 	mov    rax,QWORD PTR [rsp+rax*1+0xa8]
    a0d6:	00 
    a0d7:	48 89 84 24 98 02 00 	mov    QWORD PTR [rsp+0x298],rax
    a0de:	00 
    a0df:	e8 2c 92 ff ff       	call   3310 <std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)@plt>
    a0e4:	48 8b 84 24 20 02 00 	mov    rax,QWORD PTR [rsp+0x220]
    a0eb:	00 
      { return _M_streambuf; }
    a0ec:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    a0f0:	48 8b bc 04 08 03 00 	mov    rdi,QWORD PTR [rsp+rax*1+0x308]
    a0f7:	00 

      ///  Write character to streambuf.  Calls streambuf.sputc().
      ostreambuf_iterator&
      operator=(_CharT __c)
      {
	if (!_M_failed &&
    a0f8:	48 85 ff             	test   rdi,rdi
    a0fb:	0f 85 17 03 00 00    	jne    a418 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x688>
      pptr() const { return _M_out_cur; }
    a101:	48 8b 84 24 50 02 00 	mov    rax,QWORD PTR [rsp+0x250]
    a108:	00 
      { return _M_dataplus._M_p; }
    a109:	48 8b 94 24 70 02 00 	mov    rdx,QWORD PTR [rsp+0x270]
    a110:	00 
	if (char_type* __pptr = this->pptr())
    a111:	48 85 c0             	test   rax,rax
    a114:	0f 84 96 03 00 00    	je     a4b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x720>
      egptr() const { return _M_in_end; }
    a11a:	48 8b 8c 24 40 02 00 	mov    rcx,QWORD PTR [rsp+0x240]
    a121:	00 
	    if (!__egptr || __pptr > __egptr)
    a122:	48 85 c9             	test   rcx,rcx
    a125:	0f 84 35 03 00 00    	je     a460 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6d0>
    a12b:	48 39 c1             	cmp    rcx,rax
    a12e:	0f 82 2c 03 00 00    	jb     a460 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6d0>
	    _M_string._M_set_length(_M_high_mark() - this->pbase());
    a134:	48 2b 8c 24 48 02 00 	sub    rcx,QWORD PTR [rsp+0x248]
    a13b:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a13c:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
    a143:	00 
      { _M_string_length = __length; }
    a144:	48 89 8c 24 78 02 00 	mov    QWORD PTR [rsp+0x278],rcx
    a14b:	00 
    a14c:	c6 04 0a 00          	mov    BYTE PTR [rdx+rcx*1],0x0
      { return _M_dataplus._M_p; }
    a150:	48 8b 94 24 70 02 00 	mov    rdx,QWORD PTR [rsp+0x270]
    a157:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a158:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
    a15f:	00 
	if (_M_data() == _M_local_data())
    a160:	4c 39 ea             	cmp    rdx,r13
    a163:	0f 84 67 03 00 00    	je     a4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x740>
      { _M_allocated_capacity = __capacity; }
    a169:	48 8b 84 24 80 02 00 	mov    rax,QWORD PTR [rsp+0x280]
    a170:	00 
      { _M_dataplus._M_p = __p; }
    a171:	48 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rdx
    a178:	00 
      { _M_allocated_capacity = __capacity; }
    a179:	48 89 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rax
    a180:	00 
      { return _M_string_length; }
    a181:	48 8b 84 24 78 02 00 	mov    rax,QWORD PTR [rsp+0x278]
    a188:	00 
	_M_sync(_M_string.data(), 0, 0);
    a189:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    a18e:	31 c9                	xor    ecx,ecx
    a190:	31 d2                	xor    edx,edx
    a192:	4c 89 ee             	mov    rsi,r13
      { _M_string_length = __length; }
    a195:	48 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rax
    a19c:	00 
      { _M_dataplus._M_p = __p; }
    a19d:	4c 89 ac 24 70 02 00 	mov    QWORD PTR [rsp+0x270],r13
    a1a4:	00 
      { _M_string_length = __length; }
    a1a5:	48 c7 84 24 78 02 00 	mov    QWORD PTR [rsp+0x278],0x0
    a1ac:	00 00 00 00 00 
    a1b1:	c6 84 24 80 02 00 00 	mov    BYTE PTR [rsp+0x280],0x0
    a1b8:	00 
    a1b9:	e8 b2 90 ff ff       	call   3270 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>
    operator<<(basic_ostream<_CharT, _Traits>& __os,
	       const basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 586. string inserter not a formatted function
      return __ostream_insert(__os, __str.data(), __str.size());
    a1be:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    a1c3:	48 8b 94 24 88 00 00 	mov    rdx,QWORD PTR [rsp+0x88]
    a1ca:	00 
    a1cb:	48 8b b4 24 80 00 00 	mov    rsi,QWORD PTR [rsp+0x80]
    a1d2:	00 
    a1d3:	e8 68 90 ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
      { return _M_dataplus._M_p; }
    a1d8:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
    a1df:	00 
	if (_M_data() == _M_local_data())
    a1e0:	48 39 ef             	cmp    rdi,rbp
    a1e3:	74 11                	je     a1f6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x466>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    a1e5:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    a1ec:	00 
    a1ed:	48 8d 70 01          	lea    rsi,[rax+0x1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    a1f1:	e8 0a 90 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    a1f6:	66 0f 6f 6c 24 20    	movdqa xmm5,XMMWORD PTR [rsp+0x20]
      { return _M_dataplus._M_p; }
    a1fc:	48 8b bc 24 70 02 00 	mov    rdi,QWORD PTR [rsp+0x270]
    a203:	00 
    a204:	48 8d 05 75 19 01 00 	lea    rax,[rip+0x11975]        # 1bb80 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    a20b:	48 89 84 24 90 02 00 	mov    QWORD PTR [rsp+0x290],rax
    a212:	00 
    a213:	0f 29 ac 24 20 02 00 	movaps XMMWORD PTR [rsp+0x220],xmm5
    a21a:	00 
	if (_M_data() == _M_local_data())
    a21b:	4c 39 ef             	cmp    rdi,r13
    a21e:	74 11                	je     a231 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4a1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    a220:	48 8b 84 24 80 02 00 	mov    rax,QWORD PTR [rsp+0x280]
    a227:	00 
    a228:	48 8d 70 01          	lea    rsi,[rax+0x1]
    a22c:	e8 cf 8f ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    a231:	48 8b 7c 24 58       	mov    rdi,QWORD PTR [rsp+0x58]
    a236:	48 8d 05 83 18 01 00 	lea    rax,[rip+0x11883]        # 1bac0 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    a23d:	48 89 84 24 28 02 00 	mov    QWORD PTR [rsp+0x228],rax
    a244:	00 
    a245:	e8 76 90 ff ff       	call   32c0 <std::locale::~locale()@plt>
      ~basic_ostream() { }
    a24a:	48 8b 43 e8          	mov    rax,QWORD PTR [rbx-0x18]
    a24e:	48 8b 0d 4b 19 01 00 	mov    rcx,QWORD PTR [rip+0x1194b]        # 1bba0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
      ~basic_ios() { }
    a255:	4c 89 ff             	mov    rdi,r15
    a258:	48 89 9c 24 20 02 00 	mov    QWORD PTR [rsp+0x220],rbx
    a25f:	00 
    a260:	48 89 8c 04 20 02 00 	mov    QWORD PTR [rsp+rax*1+0x220],rcx
    a267:	00 
    a268:	4c 89 b4 24 90 02 00 	mov    QWORD PTR [rsp+0x290],r14
    a26f:	00 
    a270:	e8 5b 8e ff ff       	call   30d0 <std::ios_base::~ios_base()@plt>
      pptr() const { return _M_out_cur; }
    a275:	48 8b 8c 24 d0 00 00 	mov    rcx,QWORD PTR [rsp+0xd0]
    a27c:	00 
      { return _M_dataplus._M_p; }
    a27d:	48 8b 94 24 f0 00 00 	mov    rdx,QWORD PTR [rsp+0xf0]
    a284:	00 
	if (char_type* __pptr = this->pptr())
    a285:	48 85 c9             	test   rcx,rcx
    a288:	0f 84 9a 02 00 00    	je     a528 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x798>
      egptr() const { return _M_in_end; }
    a28e:	48 8b 84 24 c0 00 00 	mov    rax,QWORD PTR [rsp+0xc0]
    a295:	00 
	    if (!__egptr || __pptr > __egptr)
    a296:	48 85 c0             	test   rax,rax
    a299:	0f 84 b9 01 00 00    	je     a458 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6c8>
    a29f:	48 39 c8             	cmp    rax,rcx
    a2a2:	0f 82 b0 01 00 00    	jb     a458 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6c8>
	    _M_string._M_set_length(_M_high_mark() - this->pbase());
    a2a8:	48 2b 84 24 c8 00 00 	sub    rax,QWORD PTR [rsp+0xc8]
    a2af:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a2b0:	4c 8d ac 24 30 02 00 	lea    r13,[rsp+0x230]
    a2b7:	00 
      { _M_string_length = __length; }
    a2b8:	48 89 84 24 f8 00 00 	mov    QWORD PTR [rsp+0xf8],rax
    a2bf:	00 
    a2c0:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
    a2c4:	48 8b 94 24 f0 00 00 	mov    rdx,QWORD PTR [rsp+0xf0]
    a2cb:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a2cc:	4c 89 ac 24 20 02 00 	mov    QWORD PTR [rsp+0x220],r13
    a2d3:	00 
	if (_M_data() == _M_local_data())
    a2d4:	4c 39 e2             	cmp    rdx,r12
    a2d7:	0f 84 73 02 00 00    	je     a550 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x7c0>
      { _M_allocated_capacity = __capacity; }
    a2dd:	48 8b 84 24 00 01 00 	mov    rax,QWORD PTR [rsp+0x100]
    a2e4:	00 
      { _M_dataplus._M_p = __p; }
    a2e5:	48 89 94 24 20 02 00 	mov    QWORD PTR [rsp+0x220],rdx
    a2ec:	00 
      { _M_allocated_capacity = __capacity; }
    a2ed:	48 89 84 24 30 02 00 	mov    QWORD PTR [rsp+0x230],rax
    a2f4:	00 
      { return _M_string_length; }
    a2f5:	48 8b 84 24 f8 00 00 	mov    rax,QWORD PTR [rsp+0xf8]
    a2fc:	00 
	_M_sync(_M_string.data(), 0, 0);
    a2fd:	48 8b 7c 24 60       	mov    rdi,QWORD PTR [rsp+0x60]
    a302:	31 c9                	xor    ecx,ecx
    a304:	31 d2                	xor    edx,edx
    a306:	4c 89 e6             	mov    rsi,r12
      { _M_string_length = __length; }
    a309:	48 89 84 24 28 02 00 	mov    QWORD PTR [rsp+0x228],rax
    a310:	00 
      { _M_dataplus._M_p = __p; }
    a311:	4c 89 a4 24 f0 00 00 	mov    QWORD PTR [rsp+0xf0],r12
    a318:	00 
      { _M_string_length = __length; }
    a319:	48 c7 84 24 f8 00 00 	mov    QWORD PTR [rsp+0xf8],0x0
    a320:	00 00 00 00 00 
    a325:	c6 84 24 00 01 00 00 	mov    BYTE PTR [rsp+0x100],0x0
    a32c:	00 
    a32d:	e8 3e 8f ff ff       	call   3270 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>
	      return __format::__write_padded_as_spec(__str, __str.size(),
    a332:	4c 8b 44 24 38       	mov    r8,QWORD PTR [rsp+0x38]
    a337:	48 8b 4c 24 40       	mov    rcx,QWORD PTR [rsp+0x40]
    a33c:	41 b9 01 00 00 00    	mov    r9d,0x1
    a342:	48 8b bc 24 20 02 00 	mov    rdi,QWORD PTR [rsp+0x220]
    a349:	00 
      { return _M_string_length; }
    a34a:	48 8b 94 24 28 02 00 	mov    rdx,QWORD PTR [rsp+0x228]
    a351:	00 
    a352:	48 89 fe             	mov    rsi,rdi
    a355:	48 89 d7             	mov    rdi,rdx
    a358:	e8 33 f8 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
      { return _M_dataplus._M_p; }
    a35d:	48 8b bc 24 20 02 00 	mov    rdi,QWORD PTR [rsp+0x220]
    a364:	00 
    a365:	48 89 c5             	mov    rbp,rax
	if (_M_data() == _M_local_data())
    a368:	4c 39 ef             	cmp    rdi,r13
    a36b:	74 11                	je     a37e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x5ee>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    a36d:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    a374:	00 
    a375:	48 8d 70 01          	lea    rsi,[rax+0x1]
    a379:	e8 82 8e ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    a37e:	66 0f 6f 74 24 20    	movdqa xmm6,XMMWORD PTR [rsp+0x20]
      { return _M_dataplus._M_p; }
    a384:	48 8b bc 24 f0 00 00 	mov    rdi,QWORD PTR [rsp+0xf0]
    a38b:	00 
    a38c:	48 8d 05 ed 17 01 00 	lea    rax,[rip+0x117ed]        # 1bb80 <vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x40>
    a393:	48 89 84 24 10 01 00 	mov    QWORD PTR [rsp+0x110],rax
    a39a:	00 
    a39b:	0f 29 b4 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm6
    a3a2:	00 
	if (_M_data() == _M_local_data())
    a3a3:	4c 39 e7             	cmp    rdi,r12
    a3a6:	74 11                	je     a3b9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x629>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    a3a8:	48 8b 84 24 00 01 00 	mov    rax,QWORD PTR [rsp+0x100]
    a3af:	00 
    a3b0:	48 8d 70 01          	lea    rsi,[rax+0x1]
    a3b4:	e8 47 8e ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { }
    a3b9:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
    a3be:	48 8d 05 fb 16 01 00 	lea    rax,[rip+0x116fb]        # 1bac0 <vtable for std::basic_streambuf<char, std::char_traits<char> >@GLIBCXX_3.4+0x10>
    a3c5:	48 89 84 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],rax
    a3cc:	00 
    a3cd:	e8 ee 8e ff ff       	call   32c0 <std::locale::~locale()@plt>
    a3d2:	48 8b 43 e8          	mov    rax,QWORD PTR [rbx-0x18]
    a3d6:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
    a3db:	48 89 9c 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rbx
    a3e2:	00 
    a3e3:	48 8b 1d b6 17 01 00 	mov    rbx,QWORD PTR [rip+0x117b6]        # 1bba0 <VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >@GLIBCXX_3.4.21+0x10>
    a3ea:	48 89 9c 04 a0 00 00 	mov    QWORD PTR [rsp+rax*1+0xa0],rbx
    a3f1:	00 
    a3f2:	4c 89 b4 24 10 01 00 	mov    QWORD PTR [rsp+0x110],r14
    a3f9:	00 
    a3fa:	e8 d1 8c ff ff       	call   30d0 <std::ios_base::~ios_base()@plt>
	}
    a3ff:	48 81 c4 a8 03 00 00 	add    rsp,0x3a8
    a406:	48 89 e8             	mov    rax,rbp
    a409:	5b                   	pop    rbx
    a40a:	5d                   	pop    rbp
    a40b:	41 5c                	pop    r12
    a40d:	41 5d                	pop    r13
    a40f:	41 5e                	pop    r14
    a411:	41 5f                	pop    r15
    a413:	c3                   	ret
    a414:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      pptr() const { return _M_out_cur; }
    a418:	48 8b 47 28          	mov    rax,QWORD PTR [rdi+0x28]
	if (__builtin_expect(this->pptr() < this->epptr(), true))
    a41c:	48 3b 47 30          	cmp    rax,QWORD PTR [rdi+0x30]
    a420:	73 4e                	jae    a470 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6e0>
	    *this->pptr() = __c;
    a422:	c6 00 73             	mov    BYTE PTR [rax],0x73
       *  @param  __n  The delta by which to move.
       *
       *  This just advances the write position without returning any data.
      */
      void
      pbump(int __n) { _M_out_cur += __n; }
    a425:	48 83 47 28 01       	add    QWORD PTR [rdi+0x28],0x1
    a42a:	e9 d2 fc ff ff       	jmp    a101 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x371>
    a42f:	90                   	nop
      if (!_M_hasval)
    a430:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    a435:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    a439:	48 8d 70 18          	lea    rsi,[rax+0x18]
    a43d:	74 41                	je     a480 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6f0>
      std::locale locale() { return _M_loc.value(); }
    a43f:	48 8d ac 24 80 00 00 	lea    rbp,[rsp+0x80]
    a446:	00 
    a447:	48 89 ef             	mov    rdi,rbp
    a44a:	e8 41 8d ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    a44f:	e9 d8 fa ff ff       	jmp    9f2c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x19c>
    a454:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      return __pptr;  // Underlying sequence is [pbase, pptr).
    a458:	48 89 c8             	mov    rax,rcx
    a45b:	e9 48 fe ff ff       	jmp    a2a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x518>
    a460:	48 89 c1             	mov    rcx,rax
    a463:	e9 cc fc ff ff       	jmp    a134 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3a4>
    a468:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    a46f:	00 
	  __ret = this->overflow(traits_type::to_int_type(__c));
    a470:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    a473:	be 73 00 00 00       	mov    esi,0x73
    a478:	ff 50 68             	call   QWORD PTR [rax+0x68]
    a47b:	e9 81 fc ff ff       	jmp    a101 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x371>
    a480:	48 89 f7             	mov    rdi,rsi
    a483:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
    a487:	48 8d ac 24 80 00 00 	lea    rbp,[rsp+0x80]
    a48e:	00 
    a48f:	e8 dc 8e ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    a494:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    a499:	48 8b 34 24          	mov    rsi,QWORD PTR [rsp]
      std::locale locale() { return _M_loc.value(); }
    a49d:	48 89 ef             	mov    rdi,rbp
	  _M_hasval = true;
    a4a0:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
    a4a4:	e8 e7 8c ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    a4a9:	e9 7e fa ff ff       	jmp    9f2c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x19c>
    a4ae:	66 90                	xchg   ax,ax
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a4b0:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
    a4b7:	00 
    a4b8:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
    a4bf:	00 
	if (_M_data() == _M_local_data())
    a4c0:	4c 39 ea             	cmp    rdx,r13
    a4c3:	0f 85 a0 fc ff ff    	jne    a169 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3d9>
    a4c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	    if (_M_string_length > _S_local_capacity)
    a4d0:	48 8b 84 24 78 02 00 	mov    rax,QWORD PTR [rsp+0x278]
    a4d7:	00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a4d8:	48 89 ef             	mov    rdi,rbp
    a4db:	4c 89 e9             	mov    rcx,r13
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    a4de:	48 8d 50 01          	lea    rdx,[rax+0x1]
    a4e2:	83 fa 08             	cmp    edx,0x8
    a4e5:	0f 83 12 01 00 00    	jae    a5fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x86d>
    a4eb:	31 f6                	xor    esi,esi
    a4ed:	f6 c2 04             	test   dl,0x4
    a4f0:	74 09                	je     a4fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x76b>
    a4f2:	8b 31                	mov    esi,DWORD PTR [rcx]
    a4f4:	89 37                	mov    DWORD PTR [rdi],esi
    a4f6:	be 04 00 00 00       	mov    esi,0x4
    a4fb:	f6 c2 02             	test   dl,0x2
    a4fe:	74 0e                	je     a50e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x77e>
    a500:	44 0f b7 04 31       	movzx  r8d,WORD PTR [rcx+rsi*1]
    a505:	66 44 89 04 37       	mov    WORD PTR [rdi+rsi*1],r8w
    a50a:	48 83 c6 02          	add    rsi,0x2
    a50e:	83 e2 01             	and    edx,0x1
    a511:	0f 84 72 fc ff ff    	je     a189 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3f9>
    a517:	0f b6 14 31          	movzx  edx,BYTE PTR [rcx+rsi*1]
    a51b:	88 14 37             	mov    BYTE PTR [rdi+rsi*1],dl
    a51e:	e9 66 fc ff ff       	jmp    a189 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3f9>
    a523:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a528:	4c 8d ac 24 30 02 00 	lea    r13,[rsp+0x230]
    a52f:	00 
    a530:	4c 89 ac 24 20 02 00 	mov    QWORD PTR [rsp+0x220],r13
    a537:	00 
	if (_M_data() == _M_local_data())
    a538:	4c 39 e2             	cmp    rdx,r12
    a53b:	0f 85 9c fd ff ff    	jne    a2dd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x54d>
    a541:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    a548:	00 00 00 00 
    a54c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	    if (_M_string_length > _S_local_capacity)
    a550:	48 8b 84 24 f8 00 00 	mov    rax,QWORD PTR [rsp+0xf8]
    a557:	00 
    a558:	4c 89 ef             	mov    rdi,r13
    a55b:	4c 89 e1             	mov    rcx,r12
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    a55e:	48 8d 50 01          	lea    rdx,[rax+0x1]
    a562:	83 fa 08             	cmp    edx,0x8
    a565:	73 70                	jae    a5d7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x847>
    a567:	31 f6                	xor    esi,esi
    a569:	f6 c2 04             	test   dl,0x4
    a56c:	74 09                	je     a577 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x7e7>
    a56e:	8b 31                	mov    esi,DWORD PTR [rcx]
    a570:	89 37                	mov    DWORD PTR [rdi],esi
    a572:	be 04 00 00 00       	mov    esi,0x4
    a577:	f6 c2 02             	test   dl,0x2
    a57a:	74 0e                	je     a58a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x7fa>
    a57c:	44 0f b7 04 31       	movzx  r8d,WORD PTR [rcx+rsi*1]
    a581:	66 44 89 04 37       	mov    WORD PTR [rdi+rsi*1],r8w
    a586:	48 83 c6 02          	add    rsi,0x2
    a58a:	83 e2 01             	and    edx,0x1
    a58d:	0f 84 6a fd ff ff    	je     a2fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x56d>
    a593:	0f b6 14 31          	movzx  edx,BYTE PTR [rcx+rsi*1]
    a597:	88 14 37             	mov    BYTE PTR [rdi+rsi*1],dl
    a59a:	e9 5e fd ff ff       	jmp    a2fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x56d>
    a59f:	90                   	nop
      if (__out.width() != 0)
    a5a0:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    a5a7:	00 
    a5a8:	c6 84 24 20 02 00 00 	mov    BYTE PTR [rsp+0x220],0x2d
    a5af:	2d 
    { return _M_width; }
    a5b0:	48 8b 40 e8          	mov    rax,QWORD PTR [rax-0x18]
    a5b4:	48 83 bc 04 b0 00 00 	cmp    QWORD PTR [rsp+rax*1+0xb0],0x0
    a5bb:	00 00 
    a5bd:	74 65                	je     a624 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x894>
	return __ostream_insert(__out, &__c, 1);
    a5bf:	48 8b 34 24          	mov    rsi,QWORD PTR [rsp]
    a5c3:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    a5c8:	ba 01 00 00 00       	mov    edx,0x1
    a5cd:	e8 6e 8c ff ff       	call   3240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    a5d2:	e9 8b f9 ff ff       	jmp    9f62 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1d2>
    a5d7:	89 d7                	mov    edi,edx
    a5d9:	31 c9                	xor    ecx,ecx
    a5db:	83 e7 f8             	and    edi,0xfffffff8
    a5de:	89 ce                	mov    esi,ecx
    a5e0:	83 c1 08             	add    ecx,0x8
    a5e3:	4d 8b 04 34          	mov    r8,QWORD PTR [r12+rsi*1]
    a5e7:	4d 89 44 35 00       	mov    QWORD PTR [r13+rsi*1+0x0],r8
    a5ec:	39 f9                	cmp    ecx,edi
    a5ee:	72 ee                	jb     a5de <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x84e>
    a5f0:	49 8d 7c 0d 00       	lea    rdi,[r13+rcx*1+0x0]
    a5f5:	4c 01 e1             	add    rcx,r12
    a5f8:	e9 6a ff ff ff       	jmp    a567 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x7d7>
    a5fd:	89 d7                	mov    edi,edx
    a5ff:	31 c9                	xor    ecx,ecx
    a601:	83 e7 f8             	and    edi,0xfffffff8
    a604:	89 ce                	mov    esi,ecx
    a606:	83 c1 08             	add    ecx,0x8
    a609:	4d 8b 44 35 00       	mov    r8,QWORD PTR [r13+rsi*1+0x0]
    a60e:	4c 89 44 35 00       	mov    QWORD PTR [rbp+rsi*1+0x0],r8
    a613:	39 f9                	cmp    ecx,edi
    a615:	72 ed                	jb     a604 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x874>
    a617:	48 8d 7c 0d 00       	lea    rdi,[rbp+rcx*1+0x0]
    a61c:	4c 01 e9             	add    rcx,r13
    a61f:	e9 c7 fe ff ff       	jmp    a4eb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x75b>
      __out.put(__c);
    a624:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    a629:	be 2d 00 00 00       	mov    esi,0x2d
    a62e:	e8 fd 89 ff ff       	call   3030 <std::basic_ostream<char, std::char_traits<char> >::put(char)@plt>
      return __out;
    a633:	e9 2a f9 ff ff       	jmp    9f62 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1d2>
    a638:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    a63f:	00 

000000000000a640 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>:
	_M_format(const _Tp& __t, _FormatContext& __fc,
    a640:	41 57                	push   r15
    a642:	48 89 f8             	mov    rax,rdi
    a645:	41 56                	push   r14
    a647:	41 55                	push   r13
    a649:	41 54                	push   r12
    a64b:	55                   	push   rbp
    a64c:	53                   	push   rbx
    a64d:	48 81 ec 58 02 00 00 	sub    rsp,0x258
      { return this->_M_str; }
    a654:	48 8b 68 18          	mov    rbp,QWORD PTR [rax+0x18]
      { return this->_M_str + this->_M_len; }
    a658:	4c 8b 60 10          	mov    r12,QWORD PTR [rax+0x10]
    a65c:	f3 0f 7e 05 24 14 01 	movq   xmm0,QWORD PTR [rip+0x11424]        # 1ba88 <vtable for std::__format::_Iter_sink<char, std::ostream_iterator<char, char, std::char_traits<char> > >+0x28>
    a663:	00 
    a664:	48 89 7c 24 10       	mov    QWORD PTR [rsp+0x10],rdi
    a669:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
    a670:	00 
    a671:	66 48 0f 6e df       	movq   xmm3,rdi
    a676:	49 01 ec             	add    r12,rbp
    a679:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    a67e:	88 0c 24             	mov    BYTE PTR [rsp],cl
    a681:	66 0f 6c c3          	punpcklqdq xmm0,xmm3
	  if (__first == __last)
    a685:	49 39 ec             	cmp    r12,rbp
    a688:	0f 84 da 0f 00 00    	je     b668 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1028>
	      if (_M_spec._M_width_kind == __format::_WP_none)
    a68e:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    a693:	48 8d 9c 24 40 02 00 	lea    rbx,[rsp+0x240]
    a69a:	00 
      : _M_span(__span), _M_next(__span.begin())
    a69b:	48 c7 84 24 20 01 00 	mov    QWORD PTR [rsp+0x120],0x100
    a6a2:	00 00 01 00 00 
    a6a7:	48 89 bc 24 28 01 00 	mov    QWORD PTR [rsp+0x128],rdi
    a6ae:	00 
    a6af:	48 89 9c 24 30 02 00 	mov    QWORD PTR [rsp+0x230],rbx
    a6b6:	00 
      { _M_string_length = __length; }
    a6b7:	48 c7 84 24 38 02 00 	mov    QWORD PTR [rsp+0x238],0x0
    a6be:	00 00 00 00 00 
	__c1 = __c2;
    a6c3:	c6 84 24 40 02 00 00 	mov    BYTE PTR [rsp+0x240],0x0
    a6ca:	00 
      { }
    a6cb:	0f 29 84 24 10 01 00 	movaps XMMWORD PTR [rsp+0x110],xmm0
    a6d2:	00 
    a6d3:	66 f7 00 80 01       	test   WORD PTR [rax],0x180
    a6d8:	0f 84 1a 02 00 00    	je     a8f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2b8>
	  bool __write_direct = false;
    a6de:	c6 44 24 5f 00       	mov    BYTE PTR [rsp+0x5f],0x0
    a6e3:	4c 8d 94 24 10 01 00 	lea    r10,[rsp+0x110]
    a6ea:	00 
		__out = __sink.out();
    a6eb:	4d 89 d7             	mov    r15,r10
	      switch (__c)
    a6ee:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
	  ++__first; // Skip leading '%' at start of chrono-specs.
    a6f3:	48 83 c5 01          	add    rbp,0x1
	  _CharT __mod{};
    a6f7:	45 31 ed             	xor    r13d,r13d
	      switch (__c)
    a6fa:	4d 89 fe             	mov    r14,r15
    a6fd:	48 89 5c 24 50       	mov    QWORD PTR [rsp+0x50],rbx
    a702:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    a709:	00 00 00 00 
    a70d:	0f 1f 00             	nop    DWORD PTR [rax]
	      _CharT __c = *__first++;
    a710:	44 0f b6 7d 00       	movzx  r15d,BYTE PTR [rbp+0x0]
    a715:	48 8d 5d 01          	lea    rbx,[rbp+0x1]
	      switch (__c)
    a719:	41 80 ff 6a          	cmp    r15b,0x6a
    a71d:	0f 8f 3d 05 00 00    	jg     ac60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x620>
    a723:	41 80 ff 58          	cmp    r15b,0x58
    a727:	0f 8f c3 08 00 00    	jg     aff0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x9b0>
    a72d:	41 8d 47 db          	lea    eax,[r15-0x25]
    a731:	3c 33                	cmp    al,0x33
    a733:	0f 87 ab 00 00 00    	ja     a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    a739:	48 8d 0d 0c b1 00 00 	lea    rcx,[rip+0xb10c]        # 1584c <CSWTCH.1110+0x76c>
    a740:	0f b6 c0             	movzx  eax,al
    a743:	48 63 04 81          	movsxd rax,DWORD PTR [rcx+rax*4]
    a747:	48 01 c8             	add    rax,rcx
    a74a:	ff e0                	jmp    rax
    a74c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (__is_neg)
    a750:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a754:	0f 85 96 10 00 00    	jne    b7f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x11b0>
	_S_hms(const _Tp& __t)
    a75a:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    a75f:	66 0f ef c9          	pxor   xmm1,xmm1
    a763:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    a767:	66 0f 2f c1          	comisd xmm0,xmm1
    a76b:	7a 04                	jp     a771 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x131>
    a76d:	74 0a                	je     a779 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x139>
    a76f:	77 08                	ja     a779 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x139>
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    a771:	66 0f 57 05 17 e1 00 	xorpd  xmm0,XMMWORD PTR [rip+0xe117]        # 18890 <std::__unicode::__v15_1_0::__width_edges+0x410>
    a778:	00 
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a779:	f2 0f 5e 05 77 e1 00 	divsd  xmm0,QWORD PTR [rip+0xe177]        # 188f8 <std::__unicode::__v15_1_0::__width_edges+0x478>
    a780:	00 
	    return _ToDur(static_cast<__to_rep>(
    a781:	f2 48 0f 2c d0       	cvttsd2si rdx,xmm0
	  if (__mod) [[unlikely]]
    a786:	41 80 fd 4f          	cmp    r13b,0x4f
    a78a:	0f 84 27 11 00 00    	je     b8b7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1277>
	  if (__conv == _CharT('I'))
    a790:	41 80 ff 49          	cmp    r15b,0x49
    a794:	0f 84 86 10 00 00    	je     b820 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x11e0>
			 "9999999999999999") + 2 * (__n & 0x7f),
    a79a:	48 8d 04 12          	lea    rax,[rdx+rdx*1]
    a79e:	25 fe 00 00 00       	and    eax,0xfe
	};
    a7a3:	48 8d 15 8e ac 00 00 	lea    rdx,[rip+0xac8e]        # 15438 <CSWTCH.1110+0x358>
	  return __format::__write(std::move(__out), _S_two_digits(__i));
    a7aa:	4c 89 f7             	mov    rdi,r14
    a7ad:	48 c7 44 24 40 02 00 	mov    QWORD PTR [rsp+0x40],0x2
    a7b4:	00 00 
	};
    a7b6:	48 01 d0             	add    rax,rdx
    a7b9:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    a7be:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    a7c3:	48 8b 54 24 48       	mov    rdx,QWORD PTR [rsp+0x48]
	  return __format::__write(std::move(__out), _S_two_digits(__i));
    a7c8:	48 89 c6             	mov    rsi,rax
    a7cb:	e8 20 e4 ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    a7d0:	49 89 c6             	mov    r14,rax
    a7d3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    a7da:	00 00 00 00 
    a7de:	66 90                	xchg   ax,ax
		  break;
    a7e0:	c6 04 24 00          	mov    BYTE PTR [rsp],0x0
      if (__pos < this->_M_len)
    a7e4:	4d 89 e7             	mov    r15,r12
    a7e7:	49 29 df             	sub    r15,rbx
    a7ea:	0f 84 b0 00 00 00    	je     a8a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x260>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    a7f0:	4c 89 fa             	mov    rdx,r15
    a7f3:	be 25 00 00 00       	mov    esi,0x25
    a7f8:	48 89 df             	mov    rdi,rbx
    a7fb:	e8 20 8a ff ff       	call   3220 <memchr@plt>
	  if (__p)
    a800:	48 85 c0             	test   rax,rax
    a803:	0f 84 d7 07 00 00    	je     afe0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x9a0>
	      if (__pos == 0)
    a809:	48 29 d8             	sub    rax,rbx
    a80c:	0f 84 3e 04 00 00    	je     ac50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x610>
		  if (__pos == __str.npos)
    a812:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
    a816:	0f 84 c4 07 00 00    	je     afe0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x9a0>
		      __first += __pos + 1;
    a81c:	48 8d 6c 03 01       	lea    rbp,[rbx+rax*1+0x1]
    a821:	49 89 c7             	mov    r15,rax
    { return __lhs.base() - __rhs.base(); }
    a824:	49 8b 7e 18          	mov    rdi,QWORD PTR [r14+0x18]
    a828:	4d 8b 6e 10          	mov    r13,QWORD PTR [r14+0x10]
    a82c:	48 89 f8             	mov    rax,rdi
    a82f:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
    a833:	49 29 c5             	sub    r13,rax
	while (__to.size() <= __s.size())
    a836:	4d 39 ef             	cmp    r15,r13
    a839:	0f 82 e9 09 00 00    	jb     b228 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xbe8>
    a83f:	90                   	nop
    a840:	4d 39 ef             	cmp    r15,r13
    a843:	4c 89 ea             	mov    rdx,r13
    a846:	49 0f 46 d7          	cmovbe rdx,r15
	if (__n == 0)
    a84a:	48 85 d2             	test   rdx,rdx
    a84d:	74 08                	je     a857 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x217>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    a84f:	48 89 de             	mov    rsi,rbx
    a852:	e8 59 89 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    a857:	49 8b 06             	mov    rax,QWORD PTR [r14]
      { _M_current += __n; return *this; }
    a85a:	4d 01 6e 18          	add    QWORD PTR [r14+0x18],r13
    a85e:	4c 89 f7             	mov    rdi,r14
	this->_M_str += __n;
    a861:	4c 01 eb             	add    rbx,r13
	this->_M_len -= __n;
    a864:	4d 29 ef             	sub    r15,r13
    a867:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    a869:	49 8b 7e 18          	mov    rdi,QWORD PTR [r14+0x18]
    a86d:	4d 8b 6e 10          	mov    r13,QWORD PTR [r14+0x10]
    a871:	48 89 f8             	mov    rax,rdi
    a874:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
    a878:	49 29 c5             	sub    r13,rax
	while (__to.size() <= __s.size())
    a87b:	4d 39 ef             	cmp    r15,r13
    a87e:	73 c0                	jae    a840 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x200>
	if (__s.size())
    a880:	4d 85 ff             	test   r15,r15
    a883:	0f 85 9f 09 00 00    	jne    b228 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xbe8>
    a889:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      __mod = _CharT();
    a890:	45 31 ed             	xor    r13d,r13d
	  while (__first != __last);
    a893:	4c 39 e5             	cmp    rbp,r12
    a896:	0f 85 74 fe ff ff    	jne    a710 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xd0>
    a89c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	    if (__write_direct)
    a8a0:	80 7c 24 5f 00       	cmp    BYTE PTR [rsp+0x5f],0x0
    a8a5:	48 8b 5c 24 50       	mov    rbx,QWORD PTR [rsp+0x50]
	      return __out;
    a8aa:	4c 89 f5             	mov    rbp,r14
	    if (__write_direct)
    a8ad:	0f 84 8d 09 00 00    	je     b240 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xc00>
      { return _M_dataplus._M_p; }
    a8b3:	48 8b bc 24 30 02 00 	mov    rdi,QWORD PTR [rsp+0x230]
    a8ba:	00 
    class _Seq_sink final : public _Buf_sink<typename _Seq::value_type>
    a8bb:	48 8d 05 fe 0f 01 00 	lea    rax,[rip+0x10ffe]        # 1b8c0 <vtable for std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >+0x10>
    a8c2:	48 89 84 24 10 01 00 	mov    QWORD PTR [rsp+0x110],rax
    a8c9:	00 
	if (_M_data() == _M_local_data())
    a8ca:	48 39 df             	cmp    rdi,rbx
    a8cd:	74 11                	je     a8e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    a8cf:	48 8b 84 24 40 02 00 	mov    rax,QWORD PTR [rsp+0x240]
    a8d6:	00 
    a8d7:	48 8d 70 01          	lea    rsi,[rax+0x1]
    a8db:	e8 20 89 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    a8e0:	48 81 c4 58 02 00 00 	add    rsp,0x258
    a8e7:	48 89 e8             	mov    rax,rbp
    a8ea:	5b                   	pop    rbx
    a8eb:	5d                   	pop    rbp
    a8ec:	41 5c                	pop    r12
    a8ee:	41 5d                	pop    r13
    a8f0:	41 5e                	pop    r14
    a8f2:	41 5f                	pop    r15
    a8f4:	c3                   	ret
    a8f5:	0f 1f 00             	nop    DWORD PTR [rax]
      iterator out() { return std::move(_M_out); }
    a8f8:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
		  __write_direct = true;
    a8fd:	c6 44 24 5f 01       	mov    BYTE PTR [rsp+0x5f],0x1
    a902:	4c 8b 78 10          	mov    r15,QWORD PTR [rax+0x10]
    a906:	e9 e3 fd ff ff       	jmp    a6ee <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xae>
    a90b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		  __out = _M_R_T(__t, __print_sign(), __fc, __c == 'T');
    a910:	45 31 c0             	xor    r8d,r8d
    a913:	41 80 ff 54          	cmp    r15b,0x54
    a917:	41 0f 94 c0          	sete   r8b
	      if (__is_neg)
    a91b:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a91f:	0f 85 8b 0e 00 00    	jne    b7b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1170>
		  __out = _M_R_T(__t, __print_sign(), __fc, __c == 'T');
    a925:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    a92a:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    a92f:	4c 89 f2             	mov    rdx,r14
    a932:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    a937:	e8 44 db ff ff       	call   8480 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
		  break;
    a93c:	c6 04 24 00          	mov    BYTE PTR [rsp],0x0
		  __out = _M_R_T(__t, __print_sign(), __fc, __c == 'T');
    a940:	49 89 c6             	mov    r14,rax
		  break;
    a943:	e9 9c fe ff ff       	jmp    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
	      if (__is_neg)
    a948:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    a94c:	0f 85 2e 0e 00 00    	jne    b780 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1140>
	_S_hms(const _Tp& __t)
    a952:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    a957:	66 0f ef c9          	pxor   xmm1,xmm1
    a95b:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    a95f:	66 0f 2f c1          	comisd xmm0,xmm1
    a963:	0f 8a a7 00 00 00    	jp     aa10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3d0>
    a969:	74 06                	je     a971 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x331>
    a96b:	0f 86 9f 00 00 00    	jbe    aa10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3d0>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a971:	f2 0f 10 15 7f df 00 	movsd  xmm2,QWORD PTR [rip+0xdf7f]        # 188f8 <std::__unicode::__v15_1_0::__width_edges+0x478>
    a978:	00 
    a979:	66 0f 28 c8          	movapd xmm1,xmm0
    a97d:	f2 0f 5e ca          	divsd  xmm1,xmm2
	    return _ToDur(static_cast<__to_rep>(
    a981:	f2 48 0f 2c c1       	cvttsd2si rax,xmm1
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    a986:	66 0f ef c9          	pxor   xmm1,xmm1
    a98a:	f2 48 0f 2a c8       	cvtsi2sd xmm1,rax
    a98f:	f2 0f 59 ca          	mulsd  xmm1,xmm2
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a993:	f2 0f 10 15 65 df 00 	movsd  xmm2,QWORD PTR [rip+0xdf65]        # 18900 <std::__unicode::__v15_1_0::__width_edges+0x480>
    a99a:	00 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    a99b:	f2 0f 5c c1          	subsd  xmm0,xmm1
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    a99f:	66 0f 28 c8          	movapd xmm1,xmm0
    a9a3:	f2 0f 5e ca          	divsd  xmm1,xmm2
	    return _ToDur(static_cast<__to_rep>(
    a9a7:	f2 48 0f 2c c1       	cvttsd2si rax,xmm1
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    a9ac:	66 0f ef c9          	pxor   xmm1,xmm1
    a9b0:	0f b6 c0             	movzx  eax,al
    a9b3:	f2 48 0f 2a c8       	cvtsi2sd xmm1,rax
    a9b8:	f2 0f 59 ca          	mulsd  xmm1,xmm2
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    a9bc:	f2 0f 5c c1          	subsd  xmm0,xmm1
	    return _ToDur(static_cast<__to_rep>(__d.count()));
    a9c0:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
	  if (__mod) [[unlikely]] // %OS
    a9c5:	41 80 fd 4f          	cmp    r13b,0x4f
    a9c9:	0f 84 5e 0f 00 00    	je     b92d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x12ed>
			 "9999999999999999") + 2 * (__n & 0x7f),
    a9cf:	48 01 c0             	add    rax,rax
	};
    a9d2:	48 8d 15 5f aa 00 00 	lea    rdx,[rip+0xaa5f]        # 15438 <CSWTCH.1110+0x358>
	    __out = __format::__write(std::move(__out),
    a9d9:	4c 89 f7             	mov    rdi,r14
    a9dc:	48 c7 44 24 20 02 00 	mov    QWORD PTR [rsp+0x20],0x2
    a9e3:	00 00 
			 "9999999999999999") + 2 * (__n & 0x7f),
    a9e5:	25 fe 00 00 00       	and    eax,0xfe
	};
    a9ea:	48 01 d0             	add    rax,rdx
    a9ed:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
    a9f2:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    a9f7:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
	    __out = __format::__write(std::move(__out),
    a9fc:	48 89 c6             	mov    rsi,rax
    a9ff:	e8 ec e1 ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    aa04:	49 89 c6             	mov    r14,rax
	  return __out;
    aa07:	e9 d4 fd ff ff       	jmp    a7e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a0>
    aa0c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    aa10:	66 0f 57 05 78 de 00 	xorpd  xmm0,XMMWORD PTR [rip+0xde78]        # 18890 <std::__unicode::__v15_1_0::__width_edges+0x410>
    aa17:	00 
    aa18:	e9 54 ff ff ff       	jmp    a971 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x331>
		  __out = _M_X(__t, __print_sign(), __fc, __mod == 'E');
    aa1d:	41 80 fd 45          	cmp    r13b,0x45
    aa21:	41 0f 94 c5          	sete   r13b
	      if (__is_neg)
    aa25:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    aa29:	0f 85 21 0d 00 00    	jne    b750 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1110>
	  auto __t = _S_floor_seconds(__tt);
    aa2f:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    aa34:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
	  if (!_M_spec._M_localized)
    aa38:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
	  auto __t = _S_floor_seconds(__tt);
    aa3d:	f2 0f 11 84 24 90 00 	movsd  QWORD PTR [rsp+0x90],xmm0
    aa44:	00 00 
	  if (!_M_spec._M_localized)
    aa46:	f6 00 20             	test   BYTE PTR [rax],0x20
    aa49:	0f 85 c1 09 00 00    	jne    b410 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xdd0>
	    return std::locale::classic();
    aa4f:	e8 4c 88 ff ff       	call   32a0 <std::locale::classic()@plt>
    aa54:	48 89 c6             	mov    rsi,rax
    aa57:	48 8d 84 24 98 00 00 	lea    rax,[rsp+0x98]
    aa5e:	00 
    aa5f:	48 89 c7             	mov    rdi,rax
    aa62:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    aa66:	e8 25 87 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    aa6b:	48 8d 3d 8e 17 01 00 	lea    rdi,[rip+0x1178e]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    aa72:	e8 a9 86 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    aa77:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
    aa7e:	00 
    aa7f:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    aa83:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    aa87:	0f 83 38 10 00 00    	jae    bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
    aa8d:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    aa91:	48 85 ff             	test   rdi,rdi
    aa94:	0f 84 2b 10 00 00    	je     bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    aa9a:	31 c9                	xor    ecx,ecx
    aa9c:	48 8d 15 0d 11 01 00 	lea    rdx,[rip+0x1110d]        # 1bbb0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    aaa3:	48 8d 35 86 10 01 00 	lea    rsi,[rip+0x11086]        # 1bb30 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    aaaa:	e8 81 87 ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    aaaf:	48 85 c0             	test   rax,rax
    aab2:	0f 84 0d 10 00 00    	je     bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
	__time[0] = _M_data->_M_time_format;
    aab8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
	  const _CharT* __rep = __time_reps[__mod];
    aabc:	41 83 e5 01          	and    r13d,0x1
    aac0:	f3 0f 6f 40 20       	movdqu xmm0,XMMWORD PTR [rax+0x20]
    aac5:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    aacc:	00 
    aacd:	4a 8b 8c ec a0 00 00 	mov    rcx,QWORD PTR [rsp+r13*8+0xa0]
    aad4:	00 
	  if (!*__rep)
    aad5:	80 39 00             	cmp    BYTE PTR [rcx],0x0
    aad8:	0f 85 62 08 00 00    	jne    b340 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xd00>
	    return _M_R_T(__t, std::move(__out), __ctx, true);
    aade:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    aae3:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    aae8:	4c 89 f2             	mov    rdx,r14
    aaeb:	48 8d b4 24 90 00 00 	lea    rsi,[rsp+0x90]
    aaf2:	00 
    aaf3:	41 b8 01 00 00 00    	mov    r8d,0x1
    aaf9:	e8 82 d9 ff ff       	call   8480 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_R_T<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
    aafe:	49 89 c6             	mov    r14,rax
	}
    ab01:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    ab05:	e8 b6 87 ff ff       	call   32c0 <std::locale::~locale()@plt>
    ab0a:	e9 d1 fc ff ff       	jmp    a7e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a0>
      { return __normal_iterator(_M_current++); }
    ab0f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    ab13:	48 8d 50 01          	lea    rdx,[rax+0x1]
    ab17:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    ab1b:	c6 00 25             	mov    BYTE PTR [rax],0x25
    { return __lhs.base() - __rhs.base(); }
    ab1e:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    ab22:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    ab26:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    ab2a:	0f 85 b4 fc ff ff    	jne    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
	  _M_overflow();
    ab30:	49 8b 06             	mov    rax,QWORD PTR [r14]
    ab33:	4c 89 f7             	mov    rdi,r14
    ab36:	ff 10                	call   QWORD PTR [rax]
      }
    ab38:	e9 a7 fc ff ff       	jmp    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
	{ return __r; }
    ab3d:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
	      if (__is_neg)
    ab42:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    ab46:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
    ab4a:	0f 85 30 0b 00 00    	jne    b680 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1040>
	_M_set(_Tp __v) noexcept
    ab50:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x81
    ab57:	00 81 00 00 00 
			     std::make_format_args(__args...));
    ab5c:	f2 0f 11 84 24 d0 00 	movsd  QWORD PTR [rsp+0xd0],xmm0
    ab63:	00 00 
      basic_format_args<_Context>::
    ab65:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    ab6c:	00 
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    ab6d:	4c 89 f7             	mov    rdi,r14
    ab70:	45 31 c0             	xor    r8d,r8d
    ab73:	be 02 00 00 00       	mov    esi,0x2
    ab78:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    ab7f:	00 
    ab80:	48 8d 15 90 a6 00 00 	lea    rdx,[rip+0xa690]        # 15217 <CSWTCH.1110+0x137>
    ab87:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    ab8e:	00 
    ab8f:	e8 2c b7 ff ff       	call   62c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
    ab94:	49 89 c6             	mov    r14,rax
    ab97:	e9 44 fc ff ff       	jmp    a7e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a0>
    ab9c:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    aba0:	0f 85 1a 0b 00 00    	jne    b6c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1080>
	_S_hms(const _Tp& __t)
    aba6:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    abab:	66 0f ef c9          	pxor   xmm1,xmm1
    abaf:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    abb3:	66 0f 2f c1          	comisd xmm0,xmm1
    abb7:	0f 8a 83 00 00 00    	jp     ac40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x600>
    abbd:	74 02                	je     abc1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x581>
    abbf:	76 7f                	jbe    ac40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x600>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    abc1:	f2 0f 10 15 2f dd 00 	movsd  xmm2,QWORD PTR [rip+0xdd2f]        # 188f8 <std::__unicode::__v15_1_0::__width_edges+0x478>
    abc8:	00 
    abc9:	66 0f 28 c8          	movapd xmm1,xmm0
    abcd:	f2 0f 5e ca          	divsd  xmm1,xmm2
	    return _ToDur(static_cast<__to_rep>(
    abd1:	f2 48 0f 2c c1       	cvttsd2si rax,xmm1
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    abd6:	66 0f ef c9          	pxor   xmm1,xmm1
    abda:	f2 48 0f 2a c8       	cvtsi2sd xmm1,rax
    abdf:	f2 0f 59 ca          	mulsd  xmm1,xmm2
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    abe3:	f2 0f 5c c1          	subsd  xmm0,xmm1
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    abe7:	f2 0f 5e 05 11 dd 00 	divsd  xmm0,QWORD PTR [rip+0xdd11]        # 18900 <std::__unicode::__v15_1_0::__width_edges+0x480>
    abee:	00 
	    return _ToDur(static_cast<__to_rep>(
    abef:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
	  if (__mod) [[unlikely]] // %OM
    abf4:	41 80 fd 4f          	cmp    r13b,0x4f
    abf8:	0f 84 8f 0d 00 00    	je     b98d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x134d>
			 "9999999999999999") + 2 * (__n & 0x7f),
    abfe:	48 01 c0             	add    rax,rax
	};
    ac01:	48 8d 15 30 a8 00 00 	lea    rdx,[rip+0xa830]        # 15438 <CSWTCH.1110+0x358>
	  return __format::__write(std::move(__out), _S_two_digits(__i));
    ac08:	4c 89 f7             	mov    rdi,r14
    ac0b:	48 c7 44 24 30 02 00 	mov    QWORD PTR [rsp+0x30],0x2
    ac12:	00 00 
			 "9999999999999999") + 2 * (__n & 0x7f),
    ac14:	25 fe 00 00 00       	and    eax,0xfe
	};
    ac19:	48 01 d0             	add    rax,rdx
    ac1c:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
    ac21:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    ac26:	48 8b 54 24 38       	mov    rdx,QWORD PTR [rsp+0x38]
	  return __format::__write(std::move(__out), _S_two_digits(__i));
    ac2b:	48 89 c6             	mov    rsi,rax
    ac2e:	e8 bd df ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    ac33:	49 89 c6             	mov    r14,rax
    ac36:	e9 a5 fb ff ff       	jmp    a7e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a0>
    ac3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    ac40:	66 0f 57 05 48 dc 00 	xorpd  xmm0,XMMWORD PTR [rip+0xdc48]        # 18890 <std::__unicode::__v15_1_0::__width_edges+0x410>
    ac47:	00 
    ac48:	e9 74 ff ff ff       	jmp    abc1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x581>
    ac4d:	0f 1f 00             	nop    DWORD PTR [rax]
		++__first;
    ac50:	48 83 c5 02          	add    rbp,0x2
    ac54:	e9 37 fc ff ff       	jmp    a890 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x250>
    ac59:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      switch (__c)
    ac60:	41 83 ef 6d          	sub    r15d,0x6d
    ac64:	41 80 ff 10          	cmp    r15b,0x10
    ac68:	0f 87 76 fb ff ff    	ja     a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    ac6e:	48 8d 35 a7 ac 00 00 	lea    rsi,[rip+0xaca7]        # 1591c <CSWTCH.1110+0x83c>
    ac75:	45 0f b6 ff          	movzx  r15d,r15b
    ac79:	4a 63 04 be          	movsxd rax,DWORD PTR [rsi+r15*4]
    ac7d:	48 01 f0             	add    rax,rsi
    ac80:	ff e0                	jmp    rax
    ac82:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
		  __out = _M_x(__t, std::move(__out), __fc, __mod == 'E');
    ac88:	45 31 c0             	xor    r8d,r8d
    ac8b:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    ac90:	41 80 fd 45          	cmp    r13b,0x45
    ac94:	4c 89 f2             	mov    rdx,r14
    ac97:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    ac9c:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    aca1:	41 0f 94 c0          	sete   r8b
    aca5:	e8 86 dc ff ff       	call   8930 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_x<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
    acaa:	49 89 c6             	mov    r14,rax
		  break;
    acad:	e9 32 fb ff ff       	jmp    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    acb2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
      { return __normal_iterator(_M_current++); }
    acb8:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    acbc:	48 8d 50 01          	lea    rdx,[rax+0x1]
    acc0:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    acc4:	c6 00 09             	mov    BYTE PTR [rax],0x9
    { return __lhs.base() - __rhs.base(); }
    acc7:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    accb:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    accf:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    acd3:	0f 85 0b fb ff ff    	jne    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    acd9:	e9 52 fe ff ff       	jmp    ab30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4f0>
    acde:	66 90                	xchg   ax,ax
	      if (__is_neg)
    ace0:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    ace4:	0f 85 36 0a 00 00    	jne    b720 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x10e0>
	  auto __t = _S_floor_seconds(__tt);
    acea:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    acef:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
	  if (!_M_spec._M_localized)
    acf3:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
	  auto __t = _S_floor_seconds(__tt);
    acf8:	f2 0f 11 84 24 88 00 	movsd  QWORD PTR [rsp+0x88],xmm0
    acff:	00 00 
	  if (!_M_spec._M_localized)
    ad01:	f6 00 20             	test   BYTE PTR [rax],0x20
    ad04:	0f 85 36 07 00 00    	jne    b440 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe00>
	    return std::locale::classic();
    ad0a:	e8 91 85 ff ff       	call   32a0 <std::locale::classic()@plt>
    ad0f:	4c 8d ac 24 a0 00 00 	lea    r13,[rsp+0xa0]
    ad16:	00 
    ad17:	48 89 c6             	mov    rsi,rax
    ad1a:	4c 89 ef             	mov    rdi,r13
    ad1d:	e8 6e 84 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    ad22:	48 8d 3d d7 14 01 00 	lea    rdi,[rip+0x114d7]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    ad29:	e8 f2 83 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    ad2e:	48 8b 94 24 a0 00 00 	mov    rdx,QWORD PTR [rsp+0xa0]
    ad35:	00 
    ad36:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    ad3a:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    ad3e:	0f 83 81 0d 00 00    	jae    bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
    ad44:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    ad48:	48 85 ff             	test   rdi,rdi
    ad4b:	0f 84 74 0d 00 00    	je     bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    ad51:	31 c9                	xor    ecx,ecx
    ad53:	48 8d 15 56 0e 01 00 	lea    rdx,[rip+0x10e56]        # 1bbb0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    ad5a:	48 8d 35 cf 0d 01 00 	lea    rsi,[rip+0x10dcf]        # 1bb30 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    ad61:	e8 ca 84 ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    ad66:	48 85 c0             	test   rax,rax
    ad69:	0f 84 56 0d 00 00    	je     bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
	__ampm_format[0] = _M_data->_M_am_pm_format;
    ad6f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
	: allocator_type(__a), _M_p(__dat) { }
    ad73:	4c 8d bc 24 e0 00 00 	lea    r15,[rsp+0xe0]
    ad7a:	00 
    ad7b:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
    ad7f:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    ad86:	00 
    ad87:	4c 89 bc 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r15
    ad8e:	00 
    ad8f:	48 89 04 24          	mov    QWORD PTR [rsp],rax
	return __builtin_strlen(__s);
    ad93:	48 89 cf             	mov    rdi,rcx
    ad96:	48 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],rcx
      { _M_string_length = __length; }
    ad9b:	48 c7 84 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],0x3
    ada2:	00 03 00 00 00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    ada7:	c7 84 24 e0 00 00 00 	mov    DWORD PTR [rsp+0xe0],0x7d3a7b
    adae:	7b 3a 7d 00 
	return __builtin_strlen(__s);
    adb2:	e8 39 83 ff ff       	call   30f0 <strlen@plt>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
    adb7:	48 8b 4c 24 60       	mov    rcx,QWORD PTR [rsp+0x60]
    adbc:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    adc0:	31 d2                	xor    edx,edx
    adc2:	49 89 c0             	mov    r8,rax
    adc5:	be 02 00 00 00       	mov    esi,0x2
    adca:	e8 91 98 ff ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
				 std::make_format_args<_FormatContext>(__t));
    adcf:	48 8d 84 24 88 00 00 	lea    rax,[rsp+0x88]
    add6:	00 
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    add7:	4c 89 f7             	mov    rdi,r14
    adda:	45 31 c0             	xor    r8d,r8d
    addd:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
    ade4:	00 
    ade5:	48 8d 05 e4 0c 00 00 	lea    rax,[rip+0xce4]        # bad0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    adec:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    adf3:	00 
    adf4:	48 8b 94 24 d0 00 00 	mov    rdx,QWORD PTR [rsp+0xd0]
    adfb:	00 
    adfc:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    ae03:	00 
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    ae04:	48 8b 84 24 d8 00 00 	mov    rax,QWORD PTR [rsp+0xd8]
    ae0b:	00 
    ae0c:	48 89 8c 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rcx
    ae13:	00 
    ae14:	48 8d 8c 24 b0 00 00 	lea    rcx,[rsp+0xb0]
    ae1b:	00 
    ae1c:	48 c7 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],0xd1
    ae23:	00 d1 00 00 00 
    ae28:	48 89 c6             	mov    rsi,rax
    ae2b:	e8 90 b4 ff ff       	call   62c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
      { return _M_dataplus._M_p; }
    ae30:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    ae37:	00 
    ae38:	49 89 c6             	mov    r14,rax
	if (_M_data() == _M_local_data())
    ae3b:	4c 39 ff             	cmp    rdi,r15
    ae3e:	74 11                	je     ae51 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x811>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    ae40:	48 8b 84 24 e0 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    ae47:	00 
    ae48:	48 8d 70 01          	lea    rsi,[rax+0x1]
    ae4c:	e8 af 83 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    ae51:	4c 89 ef             	mov    rdi,r13
    ae54:	e8 67 84 ff ff       	call   32c0 <std::locale::~locale()@plt>
		  break;
    ae59:	c6 04 24 00          	mov    BYTE PTR [rsp],0x0
    ae5d:	e9 82 f9 ff ff       	jmp    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    ae62:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	return __format::__write(std::move(__out), __s);
    ae68:	4c 89 f7             	mov    rdi,r14
    ae6b:	be 01 00 00 00       	mov    esi,0x1
    ae70:	48 8d 15 a3 a3 00 00 	lea    rdx,[rip+0xa3a3]        # 1521a <CSWTCH.1110+0x13a>
    ae77:	e8 74 dd ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    ae7c:	49 89 c6             	mov    r14,rax
		  break;
    ae7f:	e9 60 f9 ff ff       	jmp    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    ae84:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	_S_hms(const _Tp& __t)
    ae88:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    ae8d:	66 0f ef c9          	pxor   xmm1,xmm1
    ae91:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    ae95:	66 0f 2f c1          	comisd xmm0,xmm1
    ae99:	0f 8a 31 01 00 00    	jp     afd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x990>
    ae9f:	74 06                	je     aea7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x867>
    aea1:	0f 86 29 01 00 00    	jbe    afd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x990>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    aea7:	f2 0f 5e 05 49 da 00 	divsd  xmm0,QWORD PTR [rip+0xda49]        # 188f8 <std::__unicode::__v15_1_0::__width_edges+0x478>
    aeae:	00 
	    return _ToDur(static_cast<__to_rep>(
    aeaf:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
    aeb4:	48 89 44 24 60       	mov    QWORD PTR [rsp+0x60],rax
	  if (!_M_spec._M_localized)
    aeb9:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    aebe:	f6 00 20             	test   BYTE PTR [rax],0x20
    aec1:	0f 85 49 04 00 00    	jne    b310 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xcd0>
	    return std::locale::classic();
    aec7:	e8 d4 83 ff ff       	call   32a0 <std::locale::classic()@plt>
    aecc:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
    aed3:	00 
    aed4:	48 89 c6             	mov    rsi,rax
    aed7:	4c 89 ef             	mov    rdi,r13
    aeda:	e8 b1 82 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    aedf:	48 8d 3d 1a 13 01 00 	lea    rdi,[rip+0x1131a]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    aee6:	e8 35 82 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    aeeb:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    aef2:	00 
    aef3:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    aef7:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    aefb:	0f 83 c4 0b 00 00    	jae    bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
    af01:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    af05:	48 85 ff             	test   rdi,rdi
    af08:	0f 84 b7 0b 00 00    	je     bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    af0e:	31 c9                	xor    ecx,ecx
    af10:	48 8d 15 99 0c 01 00 	lea    rdx,[rip+0x10c99]        # 1bbb0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    af17:	48 8d 35 12 0c 01 00 	lea    rsi,[rip+0x10c12]        # 1bb30 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    af1e:	e8 0d 83 ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    af23:	48 85 c0             	test   rax,rax
    af26:	0f 84 99 0b 00 00    	je     bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
	__ampm[0] = _M_data->_M_am;
    af2c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    af30:	4c 89 f7             	mov    rdi,r14
    af33:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    af3a:	00 
    af3b:	be 02 00 00 00       	mov    esi,0x2
    af40:	48 8d 15 d0 a2 00 00 	lea    rdx,[rip+0xa2d0]        # 15217 <CSWTCH.1110+0x137>
    af47:	f3 0f 6f 40 40       	movdqu xmm0,XMMWORD PTR [rax+0x40]
	    _M_set(static_cast<_Td>(__v));
    af4c:	31 c0                	xor    eax,eax
    af4e:	48 83 7c 24 60 0b    	cmp    QWORD PTR [rsp+0x60],0xb
    af54:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0xa1
    af5b:	00 a1 00 00 00 
    af60:	0f 9f c0             	setg   al
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    af63:	45 31 c0             	xor    r8d,r8d
    af66:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    af6d:	00 
			     std::make_format_args(__args...));
    af6e:	48 8b 84 c4 b0 00 00 	mov    rax,QWORD PTR [rsp+rax*8+0xb0]
    af75:	00 
    af76:	48 89 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],rax
    af7d:	00 
      basic_format_args<_Context>::
    af7e:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    af85:	00 
    af86:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    af8d:	00 
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    af8e:	e8 2d b3 ff ff       	call   62c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
	}
    af93:	4c 89 ef             	mov    rdi,r13
    af96:	49 89 c6             	mov    r14,rax
    af99:	e8 22 83 ff ff       	call   32c0 <std::locale::~locale()@plt>
		  break;
    af9e:	e9 41 f8 ff ff       	jmp    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    afa3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      { return __normal_iterator(_M_current++); }
    afa8:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    afac:	48 8d 50 01          	lea    rdx,[rax+0x1]
    afb0:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    afb4:	c6 00 0a             	mov    BYTE PTR [rax],0xa
    { return __lhs.base() - __rhs.base(); }
    afb7:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    afbb:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    afbf:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    afc3:	0f 85 1b f8 ff ff    	jne    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    afc9:	e9 62 fb ff ff       	jmp    ab30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4f0>
    afce:	66 90                	xchg   ax,ax
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    afd0:	66 0f 57 05 b8 d8 00 	xorpd  xmm0,XMMWORD PTR [rip+0xd8b8]        # 18890 <std::__unicode::__v15_1_0::__width_edges+0x410>
    afd7:	00 
    afd8:	e9 ca fe ff ff       	jmp    aea7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x867>
    afdd:	0f 1f 00             	nop    DWORD PTR [rax]
		  if (__pos == __str.npos)
    afe0:	4c 89 e5             	mov    rbp,r12
    afe3:	e9 3c f8 ff ff       	jmp    a824 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1e4>
    afe8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    afef:	00 
	      switch (__c)
    aff0:	41 8d 4f a7          	lea    ecx,[r15-0x59]
    aff4:	b8 01 00 00 00       	mov    eax,0x1
    aff9:	48 d3 e0             	shl    rax,cl
    affc:	a9 03 db 00 00       	test   eax,0xdb03
    b001:	0f 85 62 0a 00 00    	jne    ba69 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1429>
    b007:	41 80 ff 6a          	cmp    r15b,0x6a
    b00b:	0f 84 d8 01 00 00    	je     b1e9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xba9>
    b011:	41 80 ff 63          	cmp    r15b,0x63
    b015:	0f 85 c9 f7 ff ff    	jne    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
    b01b:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
		  __out = _M_c(__t, std::move(__out), __fc, __mod == 'E');
    b020:	41 80 fd 45          	cmp    r13b,0x45
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    b024:	4c 8d ac 24 e0 00 00 	lea    r13,[rsp+0xe0]
    b02b:	00 
      { _M_string_length = __length; }
    b02c:	48 c7 84 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],0x0
    b033:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    b038:	4c 89 ac 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r13
    b03f:	00 
    b040:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
	  if (!_M_spec._M_localized)
    b044:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
		  __out = _M_c(__t, std::move(__out), __fc, __mod == 'E');
    b049:	0f 94 44 24 60       	sete   BYTE PTR [rsp+0x60]
	__c1 = __c2;
    b04e:	c6 84 24 e0 00 00 00 	mov    BYTE PTR [rsp+0xe0],0x0
    b055:	00 
	  auto __t = _S_floor_seconds(__tt);
    b056:	f2 0f 11 44 24 70    	movsd  QWORD PTR [rsp+0x70],xmm0
	  if (!_M_spec._M_localized)
    b05c:	f6 00 20             	test   BYTE PTR [rax],0x20
    b05f:	0f 85 0b 04 00 00    	jne    b470 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe30>
	    return std::locale::classic();
    b065:	e8 36 82 ff ff       	call   32a0 <std::locale::classic()@plt>
    b06a:	48 89 c6             	mov    rsi,rax
    b06d:	48 8d 44 24 78       	lea    rax,[rsp+0x78]
    b072:	48 89 c7             	mov    rdi,rax
    b075:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
    b07a:	e8 11 81 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    b07f:	48 8d 3d 7a 11 01 00 	lea    rdi,[rip+0x1117a]        # 1c200 <std::__timepunct<char>::id@GLIBCXX_3.4>
    b086:	e8 95 80 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    b08b:	48 8b 54 24 78       	mov    rdx,QWORD PTR [rsp+0x78]
    b090:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
    b094:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
    b098:	0f 83 27 0a 00 00    	jae    bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
    b09e:	48 8b 3c c1          	mov    rdi,QWORD PTR [rcx+rax*8]
    b0a2:	48 85 ff             	test   rdi,rdi
    b0a5:	0f 84 1a 0a 00 00    	je     bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
      return dynamic_cast<const _Facet*>(__facets[__i]);
    b0ab:	31 c9                	xor    ecx,ecx
    b0ad:	48 8d 15 fc 0a 01 00 	lea    rdx,[rip+0x10afc]        # 1bbb0 <typeinfo for std::__timepunct<char>@GLIBCXX_3.4>
    b0b4:	48 8d 35 75 0a 01 00 	lea    rsi,[rip+0x10a75]        # 1bb30 <typeinfo for std::locale::facet@GLIBCXX_3.4>
    b0bb:	e8 70 81 ff ff       	call   3230 <__dynamic_cast@plt>
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    b0c0:	48 85 c0             	test   rax,rax
    b0c3:	0f 84 fc 09 00 00    	je     bac5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1485>
	__dt[0] = _M_data->_M_date_time_format;
    b0c9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
      { return _M_string_length; }
    b0cd:	48 8b 94 24 d8 00 00 	mov    rdx,QWORD PTR [rsp+0xd8]
    b0d4:	00 
    b0d5:	f3 0f 6f 40 30       	movdqu xmm0,XMMWORD PTR [rax+0x30]
	  if (*__formats[__mod]) [[likely]]
    b0da:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
    b0df:	83 e0 01             	and    eax,0x1
    b0e2:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    b0e9:	00 
    b0ea:	4c 8b bc c4 a0 00 00 	mov    r15,QWORD PTR [rsp+rax*8+0xa0]
    b0f1:	00 
    b0f2:	41 80 3f 00          	cmp    BYTE PTR [r15],0x0
    b0f6:	0f 84 f5 08 00 00    	je     b9f1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x13b1>
	return _M_replace(size_type(0), this->size(), __s,
    b0fc:	4c 8d 8c 24 d0 00 00 	lea    r9,[rsp+0xd0]
    b103:	00 
    b104:	41 b8 04 00 00 00    	mov    r8d,0x4
    b10a:	48 8d 0d c9 a0 00 00 	lea    rcx,[rip+0xa0c9]        # 151da <CSWTCH.1110+0xfa>
    b111:	31 f6                	xor    esi,esi
    b113:	4c 89 cf             	mov    rdi,r9
    b116:	4c 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],r9
    b11b:	e8 40 95 ff ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
	return __builtin_strlen(__s);
    b120:	4c 89 ff             	mov    rdi,r15
    b123:	e8 c8 7f ff ff       	call   30f0 <strlen@plt>
      { return _M_string_length; }
    b128:	48 8b 8c 24 d8 00 00 	mov    rcx,QWORD PTR [rsp+0xd8]
    b12f:	00 
	if (__pos > this->size())
    b130:	4c 8b 4c 24 60       	mov    r9,QWORD PTR [rsp+0x60]
    b135:	49 89 c0             	mov    r8,rax
    b138:	48 83 f9 02          	cmp    rcx,0x2
    b13c:	0f 86 69 09 00 00    	jbe    baab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x146b>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
    b142:	4c 89 f9             	mov    rcx,r15
    b145:	31 d2                	xor    edx,edx
    b147:	be 03 00 00 00       	mov    esi,0x3
    b14c:	4c 89 cf             	mov    rdi,r9
    b14f:	e8 0c 95 ff ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
				 std::make_format_args<_FormatContext>(__t));
    b154:	48 8d 44 24 70       	lea    rax,[rsp+0x70]
      return __format::__do_vformat_to(std::move(__out), __fmt, __args, &__loc);
    b159:	4c 8b 7c 24 68       	mov    r15,QWORD PTR [rsp+0x68]
    b15e:	4c 89 f7             	mov    rdi,r14
    b161:	48 8b 94 24 d0 00 00 	mov    rdx,QWORD PTR [rsp+0xd0]
    b168:	00 
    b169:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
    b170:	00 
    b171:	48 8d 05 58 09 00 00 	lea    rax,[rip+0x958]        # bad0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    b178:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    b17f:	00 
    b180:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    b187:	00 
    b188:	4d 89 f8             	mov    r8,r15
    b18b:	48 8b 84 24 d8 00 00 	mov    rax,QWORD PTR [rsp+0xd8]
    b192:	00 
    b193:	48 89 8c 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rcx
    b19a:	00 
    b19b:	48 8d 8c 24 b0 00 00 	lea    rcx,[rsp+0xb0]
    b1a2:	00 
    b1a3:	48 c7 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],0xd1
    b1aa:	00 d1 00 00 00 
    b1af:	48 89 c6             	mov    rsi,rax
    b1b2:	e8 09 b1 ff ff       	call   62c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
	}
    b1b7:	4c 89 ff             	mov    rdi,r15
    b1ba:	49 89 c6             	mov    r14,rax
    b1bd:	e8 fe 80 ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_dataplus._M_p; }
    b1c2:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    b1c9:	00 
	if (_M_data() == _M_local_data())
    b1ca:	4c 39 ef             	cmp    rdi,r13
    b1cd:	0f 84 11 f6 ff ff    	je     a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    b1d3:	48 8b 84 24 e0 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    b1da:	00 
    b1db:	48 8d 70 01          	lea    rsi,[rax+0x1]
    b1df:	e8 1c 80 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
		  break;
    b1e4:	e9 fb f5 ff ff       	jmp    a7e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a4>
	      if (__is_neg)
    b1e9:	80 3c 24 00          	cmp    BYTE PTR [rsp],0x0
    b1ed:	0f 85 fd 04 00 00    	jne    b6f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x10b0>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    b1f3:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    b1f8:	48 c7 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],0x41
    b1ff:	00 41 00 00 00 
    b204:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
    b208:	f2 0f 5e 05 f8 d6 00 	divsd  xmm0,QWORD PTR [rip+0xd6f8]        # 18908 <std::__unicode::__v15_1_0::__width_edges+0x488>
    b20f:	00 
	    return _ToDur(static_cast<__to_rep>(
    b210:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
	      unsigned __d = chrono::duration_cast<chrono::days>(__t).count();
    b215:	89 84 24 d0 00 00 00 	mov    DWORD PTR [rsp+0xd0],eax
      basic_format_args<_Context>::
    b21c:	e9 44 f9 ff ff       	jmp    ab65 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x525>
    b221:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    b228:	4c 89 fa             	mov    rdx,r15
    b22b:	48 89 de             	mov    rsi,rbx
    b22e:	e8 7d 7f ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    b233:	4d 01 7e 18          	add    QWORD PTR [r14+0x18],r15
    b237:	e9 54 f6 ff ff       	jmp    a890 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x250>
    b23c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      { return _M_string_length; }
    b240:	48 8b bc 24 38 02 00 	mov    rdi,QWORD PTR [rsp+0x238]
    b247:	00 
      : _M_current(__i) { }
    b248:	48 8b 8c 24 18 01 00 	mov    rcx,QWORD PTR [rsp+0x118]
    b24f:	00 
    { return __lhs.base() - __rhs.base(); }
    b250:	48 8b 94 24 28 01 00 	mov    rdx,QWORD PTR [rsp+0x128]
    b257:	00 
    b258:	48 89 fe             	mov    rsi,rdi
	if (this->_M_used().size() != 0)
    b25b:	48 39 d1             	cmp    rcx,rdx
    b25e:	0f 85 47 02 00 00    	jne    b4ab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe6b>
      { return _M_dataplus._M_p; }
    b264:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    b26b:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    b26c:	4c 8d a4 24 e0 00 00 	lea    r12,[rsp+0xe0]
    b273:	00 
    b274:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
    b27b:	00 
	if (_M_data() == _M_local_data())
    b27c:	48 39 d8             	cmp    rax,rbx
    b27f:	0f 84 eb 05 00 00    	je     b870 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1230>
      { _M_allocated_capacity = __capacity; }
    b285:	48 8b 94 24 40 02 00 	mov    rdx,QWORD PTR [rsp+0x240]
    b28c:	00 
      { _M_dataplus._M_p = __p; }
    b28d:	48 89 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],rax
    b294:	00 
      { return _M_string_length; }
    b295:	48 89 fe             	mov    rsi,rdi
      { _M_allocated_capacity = __capacity; }
    b298:	48 89 94 24 e0 00 00 	mov    QWORD PTR [rsp+0xe0],rdx
    b29f:	00 
	  return __format::__write_padded_as_spec(__str, __str.size(),
    b2a0:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
    b2a5:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    b2aa:	48 89 f7             	mov    rdi,rsi
    b2ad:	48 89 f2             	mov    rdx,rsi
      { _M_string_length = __length; }
    b2b0:	48 89 b4 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],rsi
    b2b7:	00 
    b2b8:	48 89 c6             	mov    rsi,rax
    b2bb:	41 b9 01 00 00 00    	mov    r9d,0x1
      { _M_dataplus._M_p = __p; }
    b2c1:	48 89 9c 24 30 02 00 	mov    QWORD PTR [rsp+0x230],rbx
    b2c8:	00 
      { _M_string_length = __length; }
    b2c9:	48 c7 84 24 38 02 00 	mov    QWORD PTR [rsp+0x238],0x0
    b2d0:	00 00 00 00 00 
	__c1 = __c2;
    b2d5:	c6 84 24 40 02 00 00 	mov    BYTE PTR [rsp+0x240],0x0
    b2dc:	00 
    b2dd:	e8 ae e8 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
      { return _M_dataplus._M_p; }
    b2e2:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    b2e9:	00 
    b2ea:	48 89 c5             	mov    rbp,rax
	if (_M_data() == _M_local_data())
    b2ed:	4c 39 e7             	cmp    rdi,r12
    b2f0:	0f 84 bd f5 ff ff    	je     a8b3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x273>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    b2f6:	48 8b 84 24 e0 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    b2fd:	00 
    b2fe:	48 8d 70 01          	lea    rsi,[rax+0x1]
    b302:	e8 f9 7e ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dispose(); }
    b307:	e9 a7 f5 ff ff       	jmp    a8b3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x273>
    b30c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (!_M_hasval)
    b310:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b315:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    b319:	4c 8d 78 18          	lea    r15,[rax+0x18]
    b31d:	0f 84 00 03 00 00    	je     b623 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xfe3>
      std::locale locale() { return _M_loc.value(); }
    b323:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
    b32a:	00 
    b32b:	4c 89 fe             	mov    rsi,r15
    b32e:	4c 89 ef             	mov    rdi,r13
    b331:	e8 5a 7e ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    b336:	e9 a4 fb ff ff       	jmp    aedf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x89f>
    b33b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	: allocator_type(__a), _M_p(__dat) { }
    b340:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
    b347:	00 
	return __builtin_strlen(__s);
    b348:	48 89 cf             	mov    rdi,rcx
    b34b:	48 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],rcx
    b350:	4c 8d ac 24 e0 00 00 	lea    r13,[rsp+0xe0]
    b357:	00 
    b358:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
    b35d:	4c 89 ac 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r13
    b364:	00 
      { _M_string_length = __length; }
    b365:	48 c7 84 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],0x3
    b36c:	00 03 00 00 00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    b371:	c7 84 24 e0 00 00 00 	mov    DWORD PTR [rsp+0xe0],0x7d3a7b
    b378:	7b 3a 7d 00 
	return __builtin_strlen(__s);
    b37c:	e8 6f 7d ff ff       	call   30f0 <strlen@plt>
	if (this->max_size() - (this->size() - __n1) < __n2)
    b381:	48 8b 4c 24 60       	mov    rcx,QWORD PTR [rsp+0x60]
    b386:	49 89 c0             	mov    r8,rax
    b389:	48 b8 fd ff ff ff ff 	movabs rax,0x7ffffffffffffffd
    b390:	ff ff 7f 
    b393:	49 39 c0             	cmp    r8,rax
    b396:	0f 84 c1 06 00 00    	je     ba5d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x141d>
      const size_type __new_size = __old_size + __len2 - __len1;
    b39c:	4d 8d 78 03          	lea    r15,[r8+0x3]
      if (__new_size <= this->capacity())
    b3a0:	49 83 ff 0f          	cmp    r15,0xf
    b3a4:	0f 87 a7 01 00 00    	ja     b551 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf11>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    b3aa:	4c 39 e9             	cmp    rcx,r13
    b3ad:	72 11                	jb     b3c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xd80>
    b3af:	48 8d 84 24 e3 00 00 	lea    rax,[rsp+0xe3]
    b3b6:	00 
    b3b7:	48 39 c8             	cmp    rax,rcx
    b3ba:	0f 83 ae 06 00 00    	jae    ba6e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x142e>
    b3c0:	4c 89 e8             	mov    rax,r13
	      if (__how_much && __len1 != __len2)
    b3c3:	4d 85 c0             	test   r8,r8
    b3c6:	0f 84 a8 01 00 00    	je     b574 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf34>
	__c1 = __c2;
    b3cc:	42 c6 84 04 e2 00 00 	mov    BYTE PTR [rsp+r8*1+0xe2],0x7d
    b3d3:	00 7d 
	if (__n == 1)
    b3d5:	49 83 f8 01          	cmp    r8,0x1
    b3d9:	0f 84 68 04 00 00    	je     b847 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1207>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    b3df:	4c 89 c2             	mov    rdx,r8
    b3e2:	48 8d bc 24 e2 00 00 	lea    rdi,[rsp+0xe2]
    b3e9:	00 
    b3ea:	48 89 ce             	mov    rsi,rcx
    b3ed:	4c 89 44 24 60       	mov    QWORD PTR [rsp+0x60],r8
    b3f2:	e8 b9 7d ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
    b3f7:	48 8b 84 24 d0 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    b3fe:	00 
      }
    b3ff:	4c 8b 44 24 60       	mov    r8,QWORD PTR [rsp+0x60]
    b404:	e9 6b 01 00 00       	jmp    b574 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf34>
    b409:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      if (!_M_hasval)
    b410:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b415:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    b419:	4c 8d 78 18          	lea    r15,[rax+0x18]
    b41d:	0f 84 2c 02 00 00    	je     b64f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x100f>
      std::locale locale() { return _M_loc.value(); }
    b423:	48 8d 84 24 98 00 00 	lea    rax,[rsp+0x98]
    b42a:	00 
    b42b:	4c 89 fe             	mov    rsi,r15
    b42e:	48 89 c7             	mov    rdi,rax
    b431:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    b435:	e8 56 7d ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    b43a:	e9 2c f6 ff ff       	jmp    aa6b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x42b>
    b43f:	90                   	nop
      if (!_M_hasval)
    b440:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b445:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    b449:	4c 8d 78 18          	lea    r15,[rax+0x18]
    b44d:	0f 84 e6 01 00 00    	je     b639 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xff9>
      std::locale locale() { return _M_loc.value(); }
    b453:	4c 8d ac 24 a0 00 00 	lea    r13,[rsp+0xa0]
    b45a:	00 
    b45b:	4c 89 fe             	mov    rsi,r15
    b45e:	4c 89 ef             	mov    rdi,r13
    b461:	e8 2a 7d ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    b466:	e9 b7 f8 ff ff       	jmp    ad22 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6e2>
    b46b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      if (!_M_hasval)
    b470:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b475:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    b479:	4c 8d 78 18          	lea    r15,[rax+0x18]
    b47d:	0f 84 8a 01 00 00    	je     b60d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xfcd>
      std::locale locale() { return _M_loc.value(); }
    b483:	48 8d 44 24 78       	lea    rax,[rsp+0x78]
    b488:	4c 89 fe             	mov    rsi,r15
    b48b:	48 89 c7             	mov    rdi,rax
    b48e:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
    b493:	e8 f8 7c ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
    b498:	e9 e2 fb ff ff       	jmp    b07f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xa3f>
    b49d:	0f 1f 00             	nop    DWORD PTR [rax]
	      switch (__c)
    b4a0:	45 89 fd             	mov    r13d,r15d
    b4a3:	48 89 dd             	mov    rbp,rbx
    b4a6:	e9 e8 f3 ff ff       	jmp    a893 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x253>
	if (this->max_size() - (this->size() - __n1) < __n2)
    b4ab:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    b4b2:	ff ff 7f 
    b4b5:	48 29 ca             	sub    rdx,rcx
    b4b8:	48 29 f8             	sub    rax,rdi
    b4bb:	48 39 d0             	cmp    rax,rdx
    b4be:	0f 82 db 05 00 00    	jb     ba9f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x145f>
      { return _M_dataplus._M_p; }
    b4c4:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    b4cb:	00 
      const size_type __len = __n + this->size();
    b4cc:	48 8d 2c 3a          	lea    rbp,[rdx+rdi*1]
	if (_M_data() == _M_local_data())
    b4d0:	48 39 d8             	cmp    rax,rbx
    b4d3:	0f 84 7a 05 00 00    	je     ba53 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1413>
	return _M_is_local() ? size_type(_S_local_capacity)
    b4d9:	48 8b b4 24 40 02 00 	mov    rsi,QWORD PTR [rsp+0x240]
    b4e0:	00 
      if (__len <= this->capacity())
    b4e1:	48 39 ee             	cmp    rsi,rbp
    b4e4:	0f 82 28 05 00 00    	jb     ba12 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x13d2>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    b4ea:	48 01 c7             	add    rdi,rax
	if (__n == 1)
    b4ed:	48 83 fa 01          	cmp    rdx,0x1
    b4f1:	0f 84 67 03 00 00    	je     b85e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x121e>
    b4f7:	48 89 ce             	mov    rsi,rcx
    b4fa:	e8 b1 7c ff ff       	call   31b0 <memcpy@plt>
	__c1 = __c2;
    b4ff:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    b506:	00 
      { _M_string_length = __length; }
    b507:	48 89 ac 24 38 02 00 	mov    QWORD PTR [rsp+0x238],rbp
    b50e:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    b50f:	4c 8d a4 24 e0 00 00 	lea    r12,[rsp+0xe0]
    b516:	00 
    b517:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
      { _M_next = _M_span.begin(); }
    b51b:	48 8b 84 24 18 01 00 	mov    rax,QWORD PTR [rsp+0x118]
    b522:	00 
    b523:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
    b52a:	00 
    b52b:	48 89 84 24 28 01 00 	mov    QWORD PTR [rsp+0x128],rax
    b532:	00 
      { return _M_dataplus._M_p; }
    b533:	48 8b 84 24 30 02 00 	mov    rax,QWORD PTR [rsp+0x230]
    b53a:	00 
	if (_M_data() == _M_local_data())
    b53b:	48 39 d8             	cmp    rax,rbx
    b53e:	0f 84 24 03 00 00    	je     b868 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1228>
    b544:	48 8b bc 24 38 02 00 	mov    rdi,QWORD PTR [rsp+0x238]
    b54b:	00 
    b54c:	e9 34 fd ff ff       	jmp    b285 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xc45>
	this->_M_mutate(__pos, __len1, __s, __len2);
    b551:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    b556:	31 d2                	xor    edx,edx
    b558:	be 02 00 00 00       	mov    esi,0x2
    b55d:	4c 89 44 24 60       	mov    QWORD PTR [rsp+0x60],r8
    b562:	e8 09 c3 ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
    b567:	48 8b 84 24 d0 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    b56e:	00 
    b56f:	4c 8b 44 24 60       	mov    r8,QWORD PTR [rsp+0x60]
      { _M_string_length = __length; }
    b574:	4c 89 bc 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],r15
    b57b:	00 
    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    b57c:	4c 89 f7             	mov    rdi,r14
    b57f:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    b586:	00 
    b587:	42 c6 44 00 03 00    	mov    BYTE PTR [rax+r8*1+0x3],0x0
    b58d:	45 31 c0             	xor    r8d,r8d
				 std::make_format_args<_FormatContext>(__t));
    b590:	48 8d 84 24 90 00 00 	lea    rax,[rsp+0x90]
    b597:	00 
    b598:	48 8b 94 24 d0 00 00 	mov    rdx,QWORD PTR [rsp+0xd0]
    b59f:	00 
    b5a0:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
    b5a7:	00 
    b5a8:	48 8d 05 21 05 00 00 	lea    rax,[rip+0x521]        # bad0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>
    b5af:	48 89 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],rax
    b5b6:	00 
    b5b7:	48 8b 84 24 d8 00 00 	mov    rax,QWORD PTR [rsp+0xd8]
    b5be:	00 
    b5bf:	48 89 8c 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rcx
    b5c6:	00 
    b5c7:	48 8d 8c 24 b0 00 00 	lea    rcx,[rsp+0xb0]
    b5ce:	00 
    b5cf:	48 c7 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],0xd1
    b5d6:	00 d1 00 00 00 
    b5db:	48 89 c6             	mov    rsi,rax
    b5de:	e8 dd ac ff ff       	call   62c0 <std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*)>
      { return _M_dataplus._M_p; }
    b5e3:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    b5ea:	00 
    b5eb:	49 89 c6             	mov    r14,rax
	if (_M_data() == _M_local_data())
    b5ee:	4c 39 ef             	cmp    rdi,r13
    b5f1:	0f 84 0a f5 ff ff    	je     ab01 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4c1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    b5f7:	48 8b 84 24 e0 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    b5fe:	00 
    b5ff:	48 8d 70 01          	lea    rsi,[rax+0x1]
    b603:	e8 f8 7b ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { _M_dispose(); }
    b608:	e9 f4 f4 ff ff       	jmp    ab01 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x4c1>
    b60d:	4c 89 ff             	mov    rdi,r15
    b610:	e8 5b 7d ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    b615:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b61a:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
    b61e:	e9 60 fe ff ff       	jmp    b483 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe43>
    b623:	4c 89 ff             	mov    rdi,r15
    b626:	e8 45 7d ff ff       	call   3370 <std::locale::locale()@plt>
    b62b:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b630:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
    b634:	e9 ea fc ff ff       	jmp    b323 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xce3>
    b639:	4c 89 ff             	mov    rdi,r15
    b63c:	e8 2f 7d ff ff       	call   3370 <std::locale::locale()@plt>
    b641:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b646:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
    b64a:	e9 04 fe ff ff       	jmp    b453 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xe13>
    b64f:	4c 89 ff             	mov    rdi,r15
    b652:	e8 19 7d ff ff       	call   3370 <std::locale::locale()@plt>
    b657:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    b65c:	c6 40 20 01          	mov    BYTE PTR [rax+0x20],0x1
    b660:	e9 be fd ff ff       	jmp    b423 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xde3>
    b665:	0f 1f 00             	nop    DWORD PTR [rax]
	    return _M_format_to_ostream(__t, __fc, __is_neg);
    b668:	0f b6 c9             	movzx  ecx,cl
    b66b:	48 89 c7             	mov    rdi,rax
    b66e:	e8 1d e7 ff ff       	call   9d90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format_to_ostream<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
    b673:	48 89 c5             	mov    rbp,rax
    b676:	e9 65 f2 ff ff       	jmp    a8e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2a0>
    b67b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      { return __normal_iterator(_M_current++); }
    b680:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b684:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b688:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b68c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b68f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b693:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b697:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b69b:	0f 85 af f4 ff ff    	jne    ab50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x510>
	  _M_overflow();
    b6a1:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b6a4:	f2 0f 11 04 24       	movsd  QWORD PTR [rsp],xmm0
    b6a9:	4c 89 f7             	mov    rdi,r14
    b6ac:	ff 10                	call   QWORD PTR [rax]
    b6ae:	f2 0f 10 04 24       	movsd  xmm0,QWORD PTR [rsp]
      }
    b6b3:	e9 98 f4 ff ff       	jmp    ab50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x510>
    b6b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    b6bf:	00 
      { return __normal_iterator(_M_current++); }
    b6c0:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b6c4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b6c8:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b6cc:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b6cf:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b6d3:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b6d7:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b6db:	0f 85 c5 f4 ff ff    	jne    aba6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x566>
	  _M_overflow();
    b6e1:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b6e4:	4c 89 f7             	mov    rdi,r14
    b6e7:	ff 10                	call   QWORD PTR [rax]
      }
    b6e9:	e9 b8 f4 ff ff       	jmp    aba6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x566>
    b6ee:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b6f0:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b6f4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b6f8:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b6fc:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b6ff:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b703:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b707:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b70b:	0f 85 e2 fa ff ff    	jne    b1f3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xbb3>
	  _M_overflow();
    b711:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b714:	4c 89 f7             	mov    rdi,r14
    b717:	ff 10                	call   QWORD PTR [rax]
      }
    b719:	e9 d5 fa ff ff       	jmp    b1f3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xbb3>
    b71e:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b720:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b724:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b728:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b72c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b72f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b733:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b737:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b73b:	0f 85 a9 f5 ff ff    	jne    acea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6aa>
	  _M_overflow();
    b741:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b744:	4c 89 f7             	mov    rdi,r14
    b747:	ff 10                	call   QWORD PTR [rax]
      }
    b749:	e9 9c f5 ff ff       	jmp    acea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x6aa>
    b74e:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b750:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b754:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b758:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b75c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b75f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b763:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b767:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b76b:	0f 85 be f2 ff ff    	jne    aa2f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3ef>
	  _M_overflow();
    b771:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b774:	4c 89 f7             	mov    rdi,r14
    b777:	ff 10                	call   QWORD PTR [rax]
      }
    b779:	e9 b1 f2 ff ff       	jmp    aa2f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x3ef>
    b77e:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b780:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b784:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b788:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b78c:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b78f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b793:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b797:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b79b:	0f 85 b1 f1 ff ff    	jne    a952 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x312>
	  _M_overflow();
    b7a1:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b7a4:	4c 89 f7             	mov    rdi,r14
    b7a7:	ff 10                	call   QWORD PTR [rax]
      }
    b7a9:	e9 a4 f1 ff ff       	jmp    a952 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x312>
    b7ae:	66 90                	xchg   ax,ax
      { return __normal_iterator(_M_current++); }
    b7b0:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b7b4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b7b8:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b7bc:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b7bf:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b7c3:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b7c7:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b7cb:	0f 85 54 f1 ff ff    	jne    a925 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2e5>
	  _M_overflow();
    b7d1:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b7d4:	44 89 04 24          	mov    DWORD PTR [rsp],r8d
    b7d8:	4c 89 f7             	mov    rdi,r14
    b7db:	ff 10                	call   QWORD PTR [rax]
    b7dd:	44 8b 04 24          	mov    r8d,DWORD PTR [rsp]
      }
    b7e1:	e9 3f f1 ff ff       	jmp    a925 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x2e5>
    b7e6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    b7ed:	00 00 00 
      { return __normal_iterator(_M_current++); }
    b7f0:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b7f4:	48 8d 50 01          	lea    rdx,[rax+0x1]
    b7f8:	49 89 56 18          	mov    QWORD PTR [r14+0x18],rdx
	*_M_next++ = __c;
    b7fc:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
    { return __lhs.base() - __rhs.base(); }
    b7ff:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    b803:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    b807:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    b80b:	0f 85 49 ef ff ff    	jne    a75a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x11a>
	  _M_overflow();
    b811:	49 8b 06             	mov    rax,QWORD PTR [r14]
    b814:	4c 89 f7             	mov    rdi,r14
    b817:	ff 10                	call   QWORD PTR [rax]
      }
    b819:	e9 3c ef ff ff       	jmp    a75a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x11a>
    b81e:	66 90                	xchg   ax,ax
    b820:	b8 18 00 00 00       	mov    eax,0x18
	      if (__i == 0)
    b825:	85 d2                	test   edx,edx
    b827:	0f 84 76 ef ff ff    	je     a7a3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x163>
	      else if (__i > 12)
    b82d:	83 fa 0c             	cmp    edx,0xc
    b830:	0f 8e 64 ef ff ff    	jle    a79a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x15a>
			 "9999999999999999") + 2 * (__n & 0x7f),
    b836:	8d 84 12 e8 00 00 00 	lea    eax,[rdx+rdx*1+0xe8]
    b83d:	25 fe 00 00 00       	and    eax,0xfe
    b842:	e9 5c ef ff ff       	jmp    a7a3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x163>
    b847:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    b84a:	88 84 24 e2 00 00 00 	mov    BYTE PTR [rsp+0xe2],al
      { return _M_dataplus._M_p; }
    b851:	48 8b 84 24 d0 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    b858:	00 
      }
    b859:	e9 16 fd ff ff       	jmp    b574 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf34>
	__c1 = __c2;
    b85e:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
    b861:	88 07                	mov    BYTE PTR [rdi],al
      }
    b863:	e9 97 fc ff ff       	jmp    b4ff <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xebf>
	    if (_M_string_length > _S_local_capacity)
    b868:	48 8b b4 24 38 02 00 	mov    rsi,QWORD PTR [rsp+0x238]
    b86f:	00 
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    b870:	48 8d 46 01          	lea    rax,[rsi+0x1]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    b874:	4c 89 e7             	mov    rdi,r12
    b877:	48 89 da             	mov    rdx,rbx
    b87a:	83 f8 08             	cmp    eax,0x8
    b87d:	0f 83 ac 01 00 00    	jae    ba2f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x13ef>
    b883:	31 c9                	xor    ecx,ecx
    b885:	a8 04                	test   al,0x4
    b887:	74 09                	je     b892 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1252>
    b889:	8b 0a                	mov    ecx,DWORD PTR [rdx]
    b88b:	89 0f                	mov    DWORD PTR [rdi],ecx
    b88d:	b9 04 00 00 00       	mov    ecx,0x4
    b892:	a8 02                	test   al,0x2
    b894:	74 0e                	je     b8a4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1264>
    b896:	44 0f b7 04 0a       	movzx  r8d,WORD PTR [rdx+rcx*1]
    b89b:	66 44 89 04 0f       	mov    WORD PTR [rdi+rcx*1],r8w
    b8a0:	48 83 c1 02          	add    rcx,0x2
    b8a4:	a8 01                	test   al,0x1
    b8a6:	74 07                	je     b8af <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x126f>
    b8a8:	0f b6 04 0a          	movzx  eax,BYTE PTR [rdx+rcx*1]
    b8ac:	88 04 0f             	mov    BYTE PTR [rdi+rcx*1],al
    b8af:	4c 89 e0             	mov    rax,r12
    b8b2:	e9 e9 f9 ff ff       	jmp    b2a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xc60>
	      struct tm __tm{};
    b8b7:	66 0f ef c0          	pxor   xmm0,xmm0
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b8bb:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    b8c0:	4c 8d ac 24 c0 00 00 	lea    r13,[rsp+0xc0]
    b8c7:	00 
	      struct tm __tm{};
    b8c8:	48 c7 84 24 00 01 00 	mov    QWORD PTR [rsp+0x100],0x0
    b8cf:	00 00 00 00 00 
    b8d4:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    b8db:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b8dc:	4c 89 ef             	mov    rdi,r13
	      __tm.tm_hour = __i;
    b8df:	89 94 24 d8 00 00 00 	mov    DWORD PTR [rsp+0xd8],edx
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b8e6:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
	      struct tm __tm{};
    b8eb:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    b8f2:	00 
    b8f3:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    b8fa:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b8fb:	e8 a0 d3 ff ff       	call   8ca0 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    b900:	41 0f be cf          	movsx  ecx,r15b
    b904:	48 8d 94 24 d0 00 00 	lea    rdx,[rsp+0xd0]
    b90b:	00 
    b90c:	41 b8 4f 00 00 00    	mov    r8d,0x4f
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b912:	4c 89 f7             	mov    rdi,r14
    b915:	4c 89 ee             	mov    rsi,r13
    b918:	e8 63 86 ff ff       	call   3f80 <std::__format::_Sink_iter<char> std::__format::__formatter_chrono<char>::_M_locale_fmt<std::__format::_Sink_iter<char> >(std::__format::_Sink_iter<char>, std::locale const&, tm const&, char, char) const [clone .isra.0]>
    b91d:	4c 89 ef             	mov    rdi,r13
    b920:	49 89 c6             	mov    r14,rax
    b923:	e8 98 79 ff ff       	call   32c0 <std::locale::~locale()@plt>
    b928:	e9 b3 ee ff ff       	jmp    a7e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1a0>
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b92d:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    b932:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
	      struct tm __tm{};
    b937:	66 0f ef c0          	pxor   xmm0,xmm0
	      __tm.tm_sec = (int)__hms.seconds().count();
    b93b:	0f b6 c0             	movzx  eax,al
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b93e:	4c 8d ac 24 c0 00 00 	lea    r13,[rsp+0xc0]
    b945:	00 
	      __tm.tm_sec = (int)__hms.seconds().count();
    b946:	89 84 24 d0 00 00 00 	mov    DWORD PTR [rsp+0xd0],eax
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b94d:	4c 89 ef             	mov    rdi,r13
	      struct tm __tm{};
    b950:	0f 11 84 24 d4 00 00 	movups XMMWORD PTR [rsp+0xd4],xmm0
    b957:	00 
    b958:	c7 84 24 04 01 00 00 	mov    DWORD PTR [rsp+0x104],0x0
    b95f:	00 00 00 00 
    b963:	0f 11 84 24 e4 00 00 	movups XMMWORD PTR [rsp+0xe4],xmm0
    b96a:	00 
    b96b:	0f 11 84 24 f4 00 00 	movups XMMWORD PTR [rsp+0xf4],xmm0
    b972:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b973:	e8 28 d3 ff ff       	call   8ca0 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    b978:	41 b8 4f 00 00 00    	mov    r8d,0x4f
    b97e:	b9 53 00 00 00       	mov    ecx,0x53
    b983:	48 8d 94 24 d0 00 00 	lea    rdx,[rsp+0xd0]
    b98a:	00 
    b98b:	eb 85                	jmp    b912 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x12d2>
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b98d:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    b992:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
	      struct tm __tm{};
    b997:	66 0f ef c0          	pxor   xmm0,xmm0
	      __tm.tm_min = __i;
    b99b:	0f b6 c0             	movzx  eax,al
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b99e:	4c 8d ac 24 c0 00 00 	lea    r13,[rsp+0xc0]
    b9a5:	00 
	      struct tm __tm{};
    b9a6:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    b9ad:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b9ae:	4c 89 ef             	mov    rdi,r13
	      __tm.tm_min = __i;
    b9b1:	89 84 24 d4 00 00 00 	mov    DWORD PTR [rsp+0xd4],eax
	      struct tm __tm{};
    b9b8:	48 c7 84 24 00 01 00 	mov    QWORD PTR [rsp+0x100],0x0
    b9bf:	00 00 00 00 00 
    b9c4:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    b9cb:	00 
    b9cc:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    b9d3:	00 
	      return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
    b9d4:	e8 c7 d2 ff ff       	call   8ca0 <std::locale std::__format::__formatter_chrono<char>::_M_locale<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    b9d9:	41 b8 4f 00 00 00    	mov    r8d,0x4f
    b9df:	b9 4d 00 00 00       	mov    ecx,0x4d
    b9e4:	48 8d 94 24 d0 00 00 	lea    rdx,[rsp+0xd0]
    b9eb:	00 
    b9ec:	e9 21 ff ff ff       	jmp    b912 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x12d2>
	return _M_replace(size_type(0), this->size(), __s,
    b9f1:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
    b9f8:	00 
    b9f9:	41 b8 12 00 00 00    	mov    r8d,0x12
    b9ff:	48 8d 0d ef 97 00 00 	lea    rcx,[rip+0x97ef]        # 151f5 <CSWTCH.1110+0x115>
    ba06:	31 f6                	xor    esi,esi
    ba08:	e8 53 8c ff ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  traits_type::length(__s));
    ba0d:	e9 42 f7 ff ff       	jmp    b154 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xb14>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    ba12:	48 8d 84 24 30 02 00 	lea    rax,[rsp+0x230]
    ba19:	00 
    ba1a:	49 89 d0             	mov    r8,rdx
    ba1d:	48 89 fe             	mov    rsi,rdi
    ba20:	31 d2                	xor    edx,edx
    ba22:	48 89 c7             	mov    rdi,rax
    ba25:	e8 46 be ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
    ba2a:	e9 d0 fa ff ff       	jmp    b4ff <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xebf>
    ba2f:	89 c7                	mov    edi,eax
    ba31:	31 d2                	xor    edx,edx
    ba33:	83 e7 f8             	and    edi,0xfffffff8
    ba36:	89 d1                	mov    ecx,edx
    ba38:	83 c2 08             	add    edx,0x8
    ba3b:	4c 8b 04 0b          	mov    r8,QWORD PTR [rbx+rcx*1]
    ba3f:	4d 89 04 0c          	mov    QWORD PTR [r12+rcx*1],r8
    ba43:	39 fa                	cmp    edx,edi
    ba45:	72 ef                	jb     ba36 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x13f6>
    ba47:	49 8d 3c 14          	lea    rdi,[r12+rdx*1]
    ba4b:	48 01 da             	add    rdx,rbx
    ba4e:	e9 30 fe ff ff       	jmp    b883 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0x1243>
	return _M_is_local() ? size_type(_S_local_capacity)
    ba53:	be 0f 00 00 00       	mov    esi,0xf
    ba58:	e9 84 fa ff ff       	jmp    b4e1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xea1>
	  __throw_length_error(__N(__s));
    ba5d:	48 8d 3d 11 97 00 00 	lea    rdi,[rip+0x9711]        # 15175 <CSWTCH.1110+0x95>
    ba64:	e8 c7 76 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    ba69:	e8 e2 76 ff ff       	call   3150 <abort@plt>
	    _M_replace_cold(__p, __len1, __s, __len2, __how_much);
    ba6e:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    ba73:	41 b9 01 00 00 00    	mov    r9d,0x1
    ba79:	31 d2                	xor    edx,edx
    ba7b:	4c 89 44 24 60       	mov    QWORD PTR [rsp+0x60],r8
    ba80:	48 8d b4 24 e2 00 00 	lea    rsi,[rsp+0xe2]
    ba87:	00 
    ba88:	e8 23 78 ff ff       	call   32b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>
      { return _M_dataplus._M_p; }
    ba8d:	48 8b 84 24 d0 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    ba94:	00 
    ba95:	4c 8b 44 24 60       	mov    r8,QWORD PTR [rsp+0x60]
    ba9a:	e9 d5 fa ff ff       	jmp    b574 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const+0xf34>
	  __throw_length_error(__N(__s));
    ba9f:	48 8d 3d 15 97 00 00 	lea    rdi,[rip+0x9715]        # 151bb <CSWTCH.1110+0xdb>
    baa6:	e8 85 76 ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    baab:	ba 03 00 00 00       	mov    edx,0x3
    bab0:	48 8d 35 28 97 00 00 	lea    rsi,[rip+0x9728]        # 151df <CSWTCH.1110+0xff>
    bab7:	48 8d 3d 0a 99 00 00 	lea    rdi,[rip+0x990a]        # 153c8 <CSWTCH.1110+0x2e8>
    babe:	31 c0                	xor    eax,eax
    bac0:	e8 1b 78 ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
      __throw_bad_cast();
    bac5:	e8 96 77 ff ff       	call   3260 <std::__throw_bad_cast()@plt>
    baca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000000bad0 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)>:
	  _S_format(basic_format_parse_context<_CharT>& __parse_ctx,
    bad0:	41 55                	push   r13
    bad2:	41 54                	push   r12
    bad4:	49 89 d4             	mov    r12,rdx
    {
      constexpr typename basic_format_parse_context<_CharT>::iterator
      parse(basic_format_parse_context<_CharT>& __pc)
      {
	using namespace __format;
	auto __it = _M_f._M_parse(__pc, _Duration|_TimeOfDay);
    bad7:	ba 90 00 00 00       	mov    edx,0x90
    badc:	55                   	push   rbp
    badd:	48 89 fd             	mov    rbp,rdi
    bae0:	53                   	push   rbx
    bae1:	48 89 f3             	mov    rbx,rsi
    bae4:	48 89 fe             	mov    rsi,rdi
    bae7:	48 83 ec 38          	sub    rsp,0x38
    baeb:	4c 8d 6c 24 10       	lea    r13,[rsp+0x10]
    struct _Spec
    baf0:	c7 44 24 18 20 00 00 	mov    DWORD PTR [rsp+0x18],0x20
    baf7:	00 
      : _M_len{0}, _M_str{nullptr}
    baf8:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
    baff:	00 00 
    bb01:	4c 89 ef             	mov    rdi,r13
    bb04:	48 c7 44 24 28 00 00 	mov    QWORD PTR [rsp+0x28],0x0
    bb0b:	00 00 
    bb0d:	e8 4e b8 ff ff       	call   7360 <std::basic_format_parse_context<char>::iterator std::__format::__formatter_chrono<char>::_M_parse<std::basic_format_parse_context<char> >(std::basic_format_parse_context<char>&, std::__format::_ChronoParts)>
      advance_to(const_iterator __it) noexcept
    bb12:	f2 41 0f 10 04 24    	movsd  xmm0,QWORD PTR [r12]
    bb18:	66 0f ef c9          	pxor   xmm1,xmm1
      { _M_begin = __it; }
    bb1c:	48 89 45 00          	mov    QWORD PTR [rbp+0x0],rax
      operator<=>(const duration<_Rep1, _Period1>& __lhs,
    bb20:	66 0f 2f c1          	comisd xmm0,xmm1
    bb24:	7a 04                	jp     bb2a <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)+0x5a>
    bb26:	74 02                	je     bb2a <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)+0x5a>
    bb28:	76 26                	jbe    bb50 <void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle::_S_format<std::chrono::duration<double, std::ratio<1l, 1l> > const>(std::basic_format_parse_context<char>&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, void const*)+0x80>
		    return _M_f._M_format(__ud, __fc, true);
		  }
		else
		  return _M_f._M_format(-__d, __fc, true);
	      }
	  return _M_f._M_format(__d, __fc, false);
    bb2a:	48 89 da             	mov    rdx,rbx
    bb2d:	4c 89 e6             	mov    rsi,r12
    bb30:	4c 89 ef             	mov    rdi,r13
    bb33:	31 c9                	xor    ecx,ecx
    bb35:	e8 06 eb ff ff       	call   a640 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
    bb3a:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	  }
    bb3e:	48 83 c4 38          	add    rsp,0x38
    bb42:	5b                   	pop    rbx
    bb43:	5d                   	pop    rbp
    bb44:	41 5c                	pop    r12
    bb46:	41 5d                	pop    r13
    bb48:	c3                   	ret
    bb49:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  return _M_f._M_format(-__d, __fc, true);
    bb50:	48 8d 74 24 08       	lea    rsi,[rsp+0x8]
    bb55:	48 89 da             	mov    rdx,rbx
    bb58:	4c 89 ef             	mov    rdi,r13
    bb5b:	b9 01 00 00 00       	mov    ecx,0x1
	{ return duration<typename common_type<rep>::type, period>(-__r); }
    bb60:	66 0f 57 05 28 cd 00 	xorpd  xmm0,XMMWORD PTR [rip+0xcd28]        # 18890 <std::__unicode::__v15_1_0::__width_edges+0x410>
    bb67:	00 
    bb68:	f2 0f 11 44 24 08    	movsd  QWORD PTR [rsp+0x8],xmm0
    bb6e:	e8 cd ea ff ff       	call   a640 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_chrono<char>::_M_format<std::chrono::duration<double, std::ratio<1l, 1l> >, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::chrono::duration<double, std::ratio<1l, 1l> > const&, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, bool) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
    bb73:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	  }
    bb77:	48 83 c4 38          	add    rsp,0x38
    bb7b:	5b                   	pop    rbx
    bb7c:	5d                   	pop    rbp
    bb7d:	41 5c                	pop    r12
    bb7f:	41 5d                	pop    r13
    bb81:	c3                   	ret
    bb82:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    bb89:	00 00 00 
    bb8c:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    bb93:	00 00 00 
    bb96:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    bb9d:	00 00 00 

000000000000bba0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)>:
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
    bba0:	41 55                	push   r13
    bba2:	41 89 f2             	mov    r10d,esi
    bba5:	4c 89 c6             	mov    rsi,r8
    bba8:	41 54                	push   r12
    bbaa:	55                   	push   rbp
    bbab:	48 89 fd             	mov    rbp,rdi
    bbae:	48 89 d7             	mov    rdi,rdx
    bbb1:	53                   	push   rbx
		   const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
    bbb2:	48 0f be 02          	movsx  rax,BYTE PTR [rdx]
	     && static_cast<signed char>(__gbeg[__idx]) > 0
    bbb6:	8d 50 ff             	lea    edx,[rax-0x1]
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    bbb9:	80 fa 7d             	cmp    dl,0x7d
    bbbc:	0f 87 5e 01 00 00    	ja     bd20 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x180>
      while (__last - __first > __gbeg[__idx]
    bbc2:	4c 89 ca             	mov    rdx,r9
    bbc5:	4c 29 c2             	sub    rdx,r8
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    bbc8:	48 39 c2             	cmp    rdx,rax
    bbcb:	0f 8e 4f 01 00 00    	jle    bd20 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x180>
	{
	  __last -= __gbeg[__idx];
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
    bbd1:	4c 8d 59 ff          	lea    r11,[rcx-0x1]
      size_t __idx = 0;
    bbd5:	45 31 c0             	xor    r8d,r8d
      size_t __ctr = 0;
    bbd8:	31 c9                	xor    ecx,ecx
    bbda:	eb 23                	jmp    bbff <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x5f>
    bbdc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
    bbe0:	49 83 c0 01          	add    r8,0x1
      while (__last - __first > __gbeg[__idx]
    bbe4:	4a 8d 1c 07          	lea    rbx,[rdi+r8*1]
    bbe8:	48 0f be 03          	movsx  rax,BYTE PTR [rbx]
	     && static_cast<signed char>(__gbeg[__idx]) > 0
    bbec:	8d 50 ff             	lea    edx,[rax-0x1]
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    bbef:	80 fa 7d             	cmp    dl,0x7d
    bbf2:	77 27                	ja     bc1b <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x7b>
      while (__last - __first > __gbeg[__idx]
    bbf4:	4c 89 ca             	mov    rdx,r9
    bbf7:	48 29 f2             	sub    rdx,rsi
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    bbfa:	48 39 c2             	cmp    rdx,rax
    bbfd:	7e 1c                	jle    bc1b <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x7b>
	  __last -= __gbeg[__idx];
    bbff:	49 29 c1             	sub    r9,rax
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
    bc02:	4d 39 d8             	cmp    r8,r11
    bc05:	72 d9                	jb     bbe0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x40>
      while (__last - __first > __gbeg[__idx]
    bc07:	4a 8d 1c 07          	lea    rbx,[rdi+r8*1]
	  __idx < __gsize - 1 ? ++__idx : ++__ctr;
    bc0b:	48 83 c1 01          	add    rcx,0x1
      while (__last - __first > __gbeg[__idx]
    bc0f:	48 0f be 03          	movsx  rax,BYTE PTR [rbx]
	     && static_cast<signed char>(__gbeg[__idx]) > 0
    bc13:	8d 50 ff             	lea    edx,[rax-0x1]
	     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    bc16:	80 fa 7d             	cmp    dl,0x7d
    bc19:	76 d9                	jbe    bbf4 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x54>
	}

      while (__first != __last)
	*__s++ = *__first++;

      while (__ctr--)
    bc1b:	4c 8d 61 ff          	lea    r12,[rcx-0x1]
	  *__s++ = __sep;	  
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
	    *__s++ = *__first++;
	}

      while (__idx--)
    bc1f:	4d 8d 58 ff          	lea    r11,[r8-0x1]
      while (__first != __last)
    bc23:	4c 39 ce             	cmp    rsi,r9
    bc26:	0f 84 17 01 00 00    	je     bd43 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x1a3>
    bc2c:	4d 89 cd             	mov    r13,r9
      size_t __idx = 0;
    bc2f:	31 c0                	xor    eax,eax
    bc31:	49 29 f5             	sub    r13,rsi
    bc34:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    bc3b:	00 00 00 00 
    bc3f:	90                   	nop
	*__s++ = *__first++;
    bc40:	0f b6 14 06          	movzx  edx,BYTE PTR [rsi+rax*1]
    bc44:	88 54 05 00          	mov    BYTE PTR [rbp+rax*1+0x0],dl
      while (__first != __last)
    bc48:	48 83 c0 01          	add    rax,0x1
    bc4c:	4c 39 e8             	cmp    rax,r13
    bc4f:	75 ef                	jne    bc40 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xa0>
    bc51:	48 89 ea             	mov    rdx,rbp
    bc54:	48 29 f2             	sub    rdx,rsi
    bc57:	4c 01 ca             	add    rdx,r9
      while (__ctr--)
    bc5a:	48 85 c9             	test   rcx,rcx
    bc5d:	74 41                	je     bca0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x100>
    bc5f:	90                   	nop
	  *__s++ = __sep;	  
    bc60:	44 88 12             	mov    BYTE PTR [rdx],r10b
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    bc63:	0f b6 33             	movzx  esi,BYTE PTR [rbx]
	  *__s++ = __sep;	  
    bc66:	48 8d 6a 01          	lea    rbp,[rdx+0x1]
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    bc6a:	40 84 f6             	test   sil,sil
    bc6d:	0f 8e a5 00 00 00    	jle    bd18 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x178>
    bc73:	31 c0                	xor    eax,eax
    bc75:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    bc7c:	00 00 00 00 
	    *__s++ = *__first++;
    bc80:	41 0f b6 0c 01       	movzx  ecx,BYTE PTR [r9+rax*1]
    bc85:	88 4c 02 01          	mov    BYTE PTR [rdx+rax*1+0x1],cl
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    bc89:	48 83 c0 01          	add    rax,0x1
    bc8d:	48 39 f0             	cmp    rax,rsi
    bc90:	75 ee                	jne    bc80 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xe0>
    bc92:	48 8d 54 05 00       	lea    rdx,[rbp+rax*1+0x0]
    bc97:	49 01 c1             	add    r9,rax
      while (__ctr--)
    bc9a:	49 83 ec 01          	sub    r12,0x1
    bc9e:	73 c0                	jae    bc60 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xc0>
      while (__idx--)
    bca0:	4d 85 c0             	test   r8,r8
    bca3:	74 5d                	je     bd02 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x162>
    bca5:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    bcac:	00 00 00 00 
	{
	  *__s++ = __sep;	  
    bcb0:	44 88 12             	mov    BYTE PTR [rdx],r10b
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    bcb3:	42 0f b6 34 1f       	movzx  esi,BYTE PTR [rdi+r11*1]
	  *__s++ = __sep;	  
    bcb8:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    bcbc:	40 84 f6             	test   sil,sil
    bcbf:	7e 4f                	jle    bd10 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x170>
    bcc1:	44 8d 46 ff          	lea    r8d,[rsi-0x1]
    bcc5:	31 c0                	xor    eax,eax
    bcc7:	45 0f b6 c0          	movzx  r8d,r8b
    bccb:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    bcd2:	00 00 00 00 
    bcd6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    bcdd:	00 00 00 
	    *__s++ = *__first++;
    bce0:	41 0f b6 0c 01       	movzx  ecx,BYTE PTR [r9+rax*1]
    bce5:	88 4c 02 01          	mov    BYTE PTR [rdx+rax*1+0x1],cl
	  for (char __i = __gbeg[__idx]; __i > 0; --__i)
    bce9:	48 83 c0 01          	add    rax,0x1
    bced:	48 39 c6             	cmp    rsi,rax
    bcf0:	75 ee                	jne    bce0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x140>
    bcf2:	4a 8d 54 03 01       	lea    rdx,[rbx+r8*1+0x1]
    bcf7:	4f 8d 4c 01 01       	lea    r9,[r9+r8*1+0x1]
      while (__idx--)
    bcfc:	49 83 eb 01          	sub    r11,0x1
    bd00:	73 ae                	jae    bcb0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x110>
	}

      return __s;
    }
    bd02:	5b                   	pop    rbx
    bd03:	48 89 d0             	mov    rax,rdx
    bd06:	5d                   	pop    rbp
    bd07:	41 5c                	pop    r12
    bd09:	41 5d                	pop    r13
    bd0b:	c3                   	ret
    bd0c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  *__s++ = __sep;	  
    bd10:	48 89 da             	mov    rdx,rbx
    bd13:	eb e7                	jmp    bcfc <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x15c>
    bd15:	0f 1f 00             	nop    DWORD PTR [rax]
	  *__s++ = __sep;	  
    bd18:	48 89 ea             	mov    rdx,rbp
    bd1b:	e9 7a ff ff ff       	jmp    bc9a <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xfa>
      while (__first != __last)
    bd20:	48 89 ea             	mov    rdx,rbp
    bd23:	49 39 f1             	cmp    r9,rsi
    bd26:	74 da                	je     bd02 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x162>
      while (__last - __first > __gbeg[__idx]
    bd28:	48 89 fb             	mov    rbx,rdi
      while (__first != __last)
    bd2b:	49 c7 c3 ff ff ff ff 	mov    r11,0xffffffffffffffff
      size_t __ctr = 0;
    bd32:	31 c9                	xor    ecx,ecx
      size_t __idx = 0;
    bd34:	45 31 c0             	xor    r8d,r8d
      while (__first != __last)
    bd37:	49 c7 c4 ff ff ff ff 	mov    r12,0xffffffffffffffff
    bd3e:	e9 e9 fe ff ff       	jmp    bc2c <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0x8c>
    bd43:	48 89 ea             	mov    rdx,rbp
    bd46:	e9 0f ff ff ff       	jmp    bc5a <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)+0xba>
    bd4b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	_M_format_int(string_view __narrow_str, size_t __prefix_len,
    bd50:	55                   	push   rbp
    bd51:	49 89 f3             	mov    r11,rsi
    bd54:	49 89 d1             	mov    r9,rdx
    bd57:	48 89 e5             	mov    rbp,rsp
    bd5a:	41 57                	push   r15
    bd5c:	4d 89 c7             	mov    r15,r8
    bd5f:	41 56                	push   r14
    bd61:	41 55                	push   r13
    bd63:	41 54                	push   r12
    bd65:	53                   	push   rbx
    bd66:	48 89 fb             	mov    rbx,rdi
    bd69:	48 81 ec 88 00 00 00 	sub    rsp,0x88
	  if (_M_width_kind == _WP_value)
    bd70:	0f b7 07             	movzx  eax,WORD PTR [rdi]
	_M_format_int(string_view __narrow_str, size_t __prefix_len,
    bd73:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
	  if (_M_width_kind == _WP_value)
    bd77:	66 25 80 01          	and    ax,0x180
    bd7b:	66 3d 80 00          	cmp    ax,0x80
    bd7f:	74 3f                	je     bdc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x70>
	  else if (_M_width_kind == _WP_from_arg)
    bd81:	66 3d 00 01          	cmp    ax,0x100
    bd85:	0f 84 ad 02 00 00    	je     c038 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e8>
	    __str = __narrow_str;
    bd8b:	49 89 f5             	mov    r13,rsi
    bd8e:	49 89 d4             	mov    r12,rdx
	  if (_M_spec._M_localized)
    bd91:	f6 07 20             	test   BYTE PTR [rdi],0x20
    bd94:	0f 85 de 00 00 00    	jne    be78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x128>
    bd9a:	4d 8b 78 10          	mov    r15,QWORD PTR [r8+0x10]
	  if (__str.size())
    bd9e:	4d 85 ed             	test   r13,r13
    bda1:	0f 85 21 03 00 00    	jne    c0c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x378>
	}
    bda7:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
    bdab:	4c 89 f8             	mov    rax,r15
    bdae:	5b                   	pop    rbx
    bdaf:	41 5c                	pop    r12
    bdb1:	41 5d                	pop    r13
    bdb3:	41 5e                	pop    r14
    bdb5:	41 5f                	pop    r15
    bdb7:	5d                   	pop    rbp
    bdb8:	c3                   	ret
    bdb9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	    __width = _M_width;
    bdc0:	44 0f b7 77 04       	movzx  r14d,WORD PTR [rdi+0x4]
	    __str = __narrow_str;
    bdc5:	4d 89 dd             	mov    r13,r11
    bdc8:	4d 89 cc             	mov    r12,r9
	  if (_M_spec._M_localized)
    bdcb:	f6 03 20             	test   BYTE PTR [rbx],0x20
    bdce:	0f 85 a7 00 00 00    	jne    be7b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x12b>
      iterator out() { return std::move(_M_out); }
    bdd4:	4d 8b 7f 10          	mov    r15,QWORD PTR [r15+0x10]
	  if (__width <= __str.size())
    bdd8:	4d 39 f5             	cmp    r13,r14
    bddb:	73 c1                	jae    bd9e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e>
	  _Align __align = _M_spec._M_align;
    bddd:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
	  size_t __nfill = __width - __str.size();
    bde0:	4d 29 ee             	sub    r14,r13
	  char32_t __fill_char = _M_spec._M_fill;
    bde3:	44 8b 4b 08          	mov    r9d,DWORD PTR [rbx+0x8]
	  auto __out = __fc.out();
    bde7:	4c 89 ff             	mov    rdi,r15
	  size_t __nfill = __width - __str.size();
    bdea:	4d 89 f0             	mov    r8,r14
	  if (__align == _Align_default)
    bded:	89 d1                	mov    ecx,edx
    bdef:	83 e1 03             	and    ecx,0x3
    bdf2:	75 61                	jne    be55 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x105>
	      if (_M_spec._M_zero_fill)
    bdf4:	83 e2 40             	and    edx,0x40
	      __align = _Align_right;
    bdf7:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
    bdfc:	41 b9 20 00 00 00    	mov    r9d,0x20
	      if (_M_spec._M_zero_fill)
    be02:	74 51                	je     be55 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x105>
		  if (__prefix_len != 0)
    be04:	48 83 7d 88 00       	cmp    QWORD PTR [rbp-0x78],0x0
		  __fill_char = _CharT('0');
    be09:	41 b9 30 00 00 00    	mov    r9d,0x30
		  if (__prefix_len != 0)
    be0f:	74 44                	je     be55 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x105>
    be11:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
    be15:	4c 89 e2             	mov    rdx,r12
    be18:	44 89 4d 80          	mov    DWORD PTR [rbp-0x80],r9d
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    be1c:	89 8d 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],ecx
    be22:	4c 39 eb             	cmp    rbx,r13
    be25:	48 89 d8             	mov    rax,rbx
    be28:	4c 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r14
    be2f:	49 0f 47 c5          	cmova  rax,r13
	this->_M_str += __n;
    be33:	49 01 dc             	add    r12,rbx
	this->_M_len -= __n;
    be36:	49 29 dd             	sub    r13,rbx
		      __out = __format::__write(std::move(__out),
    be39:	48 89 c6             	mov    rsi,rax
    be3c:	e8 af cd ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
      }
    be41:	44 8b 4d 80          	mov    r9d,DWORD PTR [rbp-0x80]
    be45:	8b 8d 78 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x88]
    be4b:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
    be52:	48 89 c7             	mov    rdi,rax
	  return __format::__write_padded(std::move(__out), __str,
    be55:	4d 87 ec             	xchg   r12,r13
    be58:	4c 89 e6             	mov    rsi,r12
    be5b:	4c 89 ea             	mov    rdx,r13
    be5e:	e8 bd ce ff ff       	call   8d20 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
	}
    be63:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
    be67:	5b                   	pop    rbx
    be68:	41 5c                	pop    r12
    be6a:	41 5d                	pop    r13
    be6c:	41 5e                	pop    r14
    be6e:	41 5f                	pop    r15
    be70:	5d                   	pop    rbp
    be71:	c3                   	ret
    be72:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  size_t __width = 0;
    be78:	45 31 f6             	xor    r14d,r14d
      if (!_M_hasval)
    be7b:	41 80 7f 20 00       	cmp    BYTE PTR [r15+0x20],0x0
    be80:	49 8d 77 18          	lea    rsi,[r15+0x18]
    be84:	0f 84 b6 02 00 00    	je     c140 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
      std::locale locale() { return _M_loc.value(); }
    be8a:	48 8d 45 90          	lea    rax,[rbp-0x70]
    be8e:	4c 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r9
    be95:	48 89 c7             	mov    rdi,rax
    be98:	4c 89 9d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r11
    be9f:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
    bea3:	e8 e8 72 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      if (__l.name() != "C")
    bea8:	48 8d 45 b0          	lea    rax,[rbp-0x50]
    beac:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
    beb0:	48 89 c7             	mov    rdi,rax
    beb3:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    beba:	e8 41 74 ff ff       	call   3300 <std::locale::name[abi:cxx11]() const@plt>
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    bebf:	48 83 7d b8 01       	cmp    QWORD PTR [rbp-0x48],0x1
      { return _M_dataplus._M_p; }
    bec4:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
	if (_M_data() == _M_local_data())
    bec8:	48 8d 45 c0          	lea    rax,[rbp-0x40]
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    becc:	4c 8b 9d 78 ff ff ff 	mov    r11,QWORD PTR [rbp-0x88]
    bed3:	4c 8b 8d 70 ff ff ff 	mov    r9,QWORD PTR [rbp-0x90]
    beda:	0f 84 c0 01 00 00    	je     c0a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x350>
	if (_M_data() == _M_local_data())
    bee0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
    bee7:	48 39 c7             	cmp    rdi,rax
    beea:	74 29                	je     bf15 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    beec:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    bef0:	4c 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r9
    bef7:	4c 89 9d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r11
    befe:	48 8d 70 01          	lea    rsi,[rax+0x1]
    bf02:	e8 f9 72 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
    bf07:	4c 8b 9d 70 ff ff ff 	mov    r11,QWORD PTR [rbp-0x90]
    bf0e:	4c 8b 8d 60 ff ff ff 	mov    r9,QWORD PTR [rbp-0xa0]
      const size_t __i = _Facet::id._M_id();
    bf15:	48 8d 3d a4 02 01 00 	lea    rdi,[rip+0x102a4]        # 1c1c0 <std::__cxx11::numpunct<char>::id@GLIBCXX_3.4.21>
    bf1c:	4c 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r9
    bf23:	4c 89 9d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r11
    bf2a:	e8 f1 71 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
    bf2f:	48 89 c2             	mov    rdx,rax
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    bf32:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
      _GLIBCXX_STD_FACET(numpunct<char>);
    bf36:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    bf3a:	4c 8b 04 d0          	mov    r8,QWORD PTR [rax+rdx*8]
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    bf3e:	4d 85 c0             	test   r8,r8
    bf41:	0f 84 11 03 00 00    	je     c258 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x508>
      { return this->do_grouping(); }
    bf47:	49 8b 00             	mov    rax,QWORD PTR [r8]
    bf4a:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
    bf51:	4c 89 c6             	mov    rsi,r8
    bf54:	48 8b bd 68 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x98]
    bf5b:	ff 50 20             	call   QWORD PTR [rax+0x20]
      { return _M_string_length; }
    bf5e:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
      { return _M_dataplus._M_p; }
    bf62:	4c 8b 55 b0          	mov    r10,QWORD PTR [rbp-0x50]
		  if (!__grp.empty())
    bf66:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
    bf6d:	4c 8b 9d 60 ff ff ff 	mov    r11,QWORD PTR [rbp-0xa0]
    bf74:	48 85 c9             	test   rcx,rcx
    bf77:	4c 8b 8d 58 ff ff ff 	mov    r9,QWORD PTR [rbp-0xa8]
    bf7e:	0f 84 86 00 00 00    	je     c00a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ba>
		      size_t __n = __str.size() - __prefix_len;
    bf84:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
    bf88:	4c 89 d8             	mov    rax,r11
    bf8b:	48 29 f0             	sub    rax,rsi
		      auto __p = (_CharT*)__builtin_alloca(2 * __n
    bf8e:	48 8d 44 46 17       	lea    rax,[rsi+rax*2+0x17]
    bf93:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    bf97:	48 29 c4             	sub    rsp,rax
    bf9a:	48 8d 44 24 0f       	lea    rax,[rsp+0xf]
    bf9f:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    bfa3:	49 89 c4             	mov    r12,rax
	if (__n == 0)
    bfa6:	48 85 f6             	test   rsi,rsi
    bfa9:	0f 85 f1 01 00 00    	jne    c1a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x450>
		      __s += __prefix_len;
    bfaf:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
    bfb3:	4c 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r10
      { return this->do_thousands_sep(); }
    bfba:	4c 89 c7             	mov    rdi,r8
    bfbd:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
    bfc4:	4d 8d 2c 01          	lea    r13,[r9+rax*1]
    bfc8:	49 8b 00             	mov    rax,QWORD PTR [r8]
		      auto __end = std::__add_grouping(__p + __prefix_len,
    bfcb:	4d 01 d9             	add    r9,r11
    bfce:	4c 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r9
    bfd5:	ff 50 18             	call   QWORD PTR [rax+0x18]
    bfd8:	4c 8b 8d 70 ff ff ff 	mov    r9,QWORD PTR [rbp-0x90]
    bfdf:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
    bfe6:	4d 89 e8             	mov    r8,r13
    bfe9:	0f be f0             	movsx  esi,al
    bfec:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
    bff0:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
    bff7:	49 8d 3c 04          	lea    rdi,[r12+rax*1]
    bffb:	e8 a0 fb ff ff       	call   bba0 <char* std::__add_grouping<char>(char*, char, char const*, unsigned long, char const*, char const*)>
    c000:	4c 8b 55 b0          	mov    r10,QWORD PTR [rbp-0x50]
		      __str = {__p, size_t(__end - __p)};
    c004:	4c 29 e0             	sub    rax,r12
    c007:	49 89 c5             	mov    r13,rax
	if (_M_data() == _M_local_data())
    c00a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
    c011:	49 39 c2             	cmp    r10,rax
    c014:	74 10                	je     c026 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    c016:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    c01a:	4c 89 d7             	mov    rdi,r10
    c01d:	48 8d 70 01          	lea    rsi,[rax+0x1]
    c021:	e8 da 71 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	    }
    c026:	48 8b 7d 80          	mov    rdi,QWORD PTR [rbp-0x80]
    c02a:	e8 91 72 ff ff       	call   32c0 <std::locale::~locale()@plt>
    c02f:	e9 a0 fd ff ff       	jmp    bdd4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x84>
    c034:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	if (__i < _M_packed_size)
    c038:	41 0f b6 00          	movzx  eax,BYTE PTR [r8]
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    c03c:	0f b7 57 04          	movzx  edx,WORD PTR [rdi+0x4]
	if (__i < _M_packed_size)
    c040:	89 c1                	mov    ecx,eax
    c042:	83 e0 0f             	and    eax,0xf
    c045:	83 e1 0f             	and    ecx,0xf
    c048:	48 39 c2             	cmp    rdx,rax
    c04b:	0f 83 2f 01 00 00    	jae    c180 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x430>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    c051:	49 8b 00             	mov    rax,QWORD PTR [r8]
    c054:	48 8d 0c 92          	lea    rcx,[rdx+rdx*4]
	    __arg._M_val = _M_values[__i];
    c058:	48 c1 e2 04          	shl    rdx,0x4
    c05c:	49 03 50 08          	add    rdx,QWORD PTR [r8+0x8]
    c060:	66 0f 6f 02          	movdqa xmm0,XMMWORD PTR [rdx]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    c064:	48 c1 e8 04          	shr    rax,0x4
    c068:	48 d3 e8             	shr    rax,cl
	    __arg._M_val = _M_values[__i];
    c06b:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    c06f:	83 e0 1f             	and    eax,0x1f
    __int_from_arg(const basic_format_arg<_Context>& __arg)
    c072:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
    c075:	66 0f 6f 45 90       	movdqa xmm0,XMMWORD PTR [rbp-0x70]
	  switch (__type)
    c07a:	48 8d 15 df 98 00 00 	lea    rdx,[rip+0x98df]        # 15960 <CSWTCH.1110+0x880>
    c081:	0f b6 c0             	movzx  eax,al
    c084:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    c088:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    c08c:	66 0f 6f 45 a0       	movdqa xmm0,XMMWORD PTR [rbp-0x60]
    c091:	48 01 d0             	add    rax,rdx
    c094:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    c098:	ff e0                	jmp    rax
    c09a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    c0a0:	80 3f 43             	cmp    BYTE PTR [rdi],0x43
    c0a3:	0f 85 37 fe ff ff    	jne    bee0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x190>
	if (_M_data() == _M_local_data())
    c0a9:	48 39 c7             	cmp    rdi,rax
    c0ac:	0f 84 74 ff ff ff    	je     c026 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    c0b2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    c0b6:	48 8d 70 01          	lea    rsi,[rax+0x1]
    c0ba:	e8 41 71 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    c0bf:	e9 62 ff ff ff       	jmp    c026 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
    c0c4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    c0c8:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    c0cc:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    c0d0:	48 89 f8             	mov    rax,rdi
    c0d3:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    c0d7:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    c0da:	49 39 dd             	cmp    r13,rbx
    c0dd:	72 4a                	jb     c129 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d9>
    c0df:	90                   	nop
    c0e0:	49 39 dd             	cmp    r13,rbx
    c0e3:	48 89 da             	mov    rdx,rbx
    c0e6:	49 0f 46 d5          	cmovbe rdx,r13
    c0ea:	48 85 d2             	test   rdx,rdx
    c0ed:	74 08                	je     c0f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c0ef:	4c 89 e6             	mov    rsi,r12
    c0f2:	e8 b9 70 ff ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
    c0f7:	49 8b 07             	mov    rax,QWORD PTR [r15]
      { _M_current += __n; return *this; }
    c0fa:	49 01 5f 18          	add    QWORD PTR [r15+0x18],rbx
    c0fe:	4c 89 ff             	mov    rdi,r15
	this->_M_str += __n;
    c101:	49 01 dc             	add    r12,rbx
	this->_M_len -= __n;
    c104:	49 29 dd             	sub    r13,rbx
    c107:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
    c109:	49 8b 7f 18          	mov    rdi,QWORD PTR [r15+0x18]
    c10d:	49 8b 5f 10          	mov    rbx,QWORD PTR [r15+0x10]
    c111:	48 89 f8             	mov    rax,rdi
    c114:	49 2b 47 08          	sub    rax,QWORD PTR [r15+0x8]
    c118:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
    c11b:	49 39 dd             	cmp    r13,rbx
    c11e:	73 c0                	jae    c0e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x390>
	if (__s.size())
    c120:	4d 85 ed             	test   r13,r13
    c123:	0f 84 7e fc ff ff    	je     bda7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x57>
    c129:	4c 89 ea             	mov    rdx,r13
    c12c:	4c 89 e6             	mov    rsi,r12
    c12f:	e8 7c 70 ff ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
    c134:	4d 01 6f 18          	add    QWORD PTR [r15+0x18],r13
    c138:	e9 6a fc ff ff       	jmp    bda7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x57>
    c13d:	0f 1f 00             	nop    DWORD PTR [rax]
    c140:	48 89 f7             	mov    rdi,rsi
    c143:	4c 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r9
    c14a:	4c 89 9d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r11
    c151:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
    c155:	e8 16 72 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    c15a:	41 c6 47 20 01       	mov    BYTE PTR [r15+0x20],0x1
    c15f:	4c 8b 8d 70 ff ff ff 	mov    r9,QWORD PTR [rbp-0x90]
    c166:	4c 8b 9d 78 ff ff ff 	mov    r11,QWORD PTR [rbp-0x88]
    c16d:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
    c171:	e9 14 fd ff ff       	jmp    be8a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x13a>
    c176:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    c17d:	00 00 00 
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    c180:	84 c9                	test   cl,cl
    c182:	75 10                	jne    c194 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    c184:	49 8b 00             	mov    rax,QWORD PTR [r8]
    c187:	48 c1 e8 04          	shr    rax,0x4
    c18b:	48 39 c2             	cmp    rdx,rax
    c18e:	0f 82 a4 00 00 00    	jb     c238 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e8>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    c194:	e8 b7 6f ff ff       	call   3150 <abort@plt>
    c199:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    c1a0:	48 89 f2             	mov    rdx,rsi
    c1a3:	48 89 c7             	mov    rdi,rax
    c1a6:	4c 89 ce             	mov    rsi,r9
    c1a9:	4c 89 9d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r11
    c1b0:	4c 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r10
    c1b7:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
    c1be:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
    c1c5:	4c 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r9
    c1cc:	e8 df 6f ff ff       	call   31b0 <memcpy@plt>
    c1d1:	4c 8b 9d 50 ff ff ff 	mov    r11,QWORD PTR [rbp-0xb0]
    c1d8:	4c 8b 95 58 ff ff ff 	mov    r10,QWORD PTR [rbp-0xa8]
    c1df:	4c 8b 85 60 ff ff ff 	mov    r8,QWORD PTR [rbp-0xa0]
    c1e6:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
    c1ed:	4c 8b 8d 70 ff ff ff 	mov    r9,QWORD PTR [rbp-0x90]
    c1f4:	e9 b6 fd ff ff       	jmp    bfaf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25f>
	      return __arg;
    c1f9:	4c 8b 75 b0          	mov    r14,QWORD PTR [rbp-0x50]
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
    c1fd:	e9 c3 fb ff ff       	jmp    bdc5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x75>
	      if (__arg >= 0)
    c202:	4c 8b 75 b0          	mov    r14,QWORD PTR [rbp-0x50]
    c206:	4d 85 f6             	test   r14,r14
    c209:	0f 89 b6 fb ff ff    	jns    bdc5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x75>
    c20f:	eb 83                	jmp    c194 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    c211:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      return __arg;
    c218:	44 8b 75 b0          	mov    r14d,DWORD PTR [rbp-0x50]
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
    c21c:	e9 a4 fb ff ff       	jmp    bdc5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x75>
	      if (__arg >= 0)
    c221:	4c 63 75 b0          	movsxd r14,DWORD PTR [rbp-0x50]
    c225:	45 85 f6             	test   r14d,r14d
    c228:	0f 89 97 fb ff ff    	jns    bdc5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x75>
    c22e:	e9 61 ff ff ff       	jmp    c194 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x444>
    c233:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  __arg = _M_args[__i];
    c238:	48 c1 e2 05          	shl    rdx,0x5
    c23c:	49 03 50 08          	add    rdx,QWORD PTR [r8+0x8]
    c240:	f3 0f 6f 02          	movdqu xmm0,XMMWORD PTR [rdx]
    c244:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
    c248:	0f b6 42 10          	movzx  eax,BYTE PTR [rdx+0x10]
    c24c:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
    c24f:	0f b6 42 10          	movzx  eax,BYTE PTR [rdx+0x10]
    c253:	e9 1a fe ff ff       	jmp    c072 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x322>
      __throw_bad_cast();
    c258:	e8 03 70 ff ff       	call   3260 <std::__throw_bad_cast()@plt>
    c25d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000000c260 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    c260:	41 57                	push   r15
    c262:	89 f0                	mov    eax,esi
    c264:	41 56                	push   r14
    c266:	41 55                	push   r13
    c268:	41 54                	push   r12
    c26a:	55                   	push   rbp
    c26b:	48 89 d5             	mov    rbp,rdx
    c26e:	53                   	push   rbx
    c26f:	48 89 fb             	mov    rbx,rdi
    c272:	48 83 ec 28          	sub    rsp,0x28
	  if (_M_spec._M_type == _Pres_c)
    c276:	0f b6 57 01          	movzx  edx,BYTE PTR [rdi+0x1]
    c27a:	89 d1                	mov    ecx,edx
    c27c:	83 e1 78             	and    ecx,0x78
    c27f:	80 f9 38             	cmp    cl,0x38
    c282:	0f 84 a8 00 00 00    	je     c330 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0>
	  switch (_M_spec._M_type)
    c288:	c0 ea 03             	shr    dl,0x3
    c28b:	83 e2 0f             	and    edx,0xf
    c28e:	80 fa 04             	cmp    dl,0x4
    c291:	0f 84 59 01 00 00    	je     c3f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x190>
    c297:	0f 87 eb 01 00 00    	ja     c488 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x228>
    c29d:	80 fa 01             	cmp    dl,0x1
    c2a0:	0f 87 d2 00 00 00    	ja     c378 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x118>
      if (__value == 0)
    c2a6:	40 84 f6             	test   sil,sil
    c2a9:	0f 84 21 02 00 00    	je     c4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x270>
      _Up __unsigned_val = __value;
    c2af:	40 0f b6 d6          	movzx  edx,sil
    c2b3:	40 80 fe 09          	cmp    sil,0x9
    c2b7:	0f 86 6f 03 00 00    	jbe    c62c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3cc>
    c2bd:	41 bf 03 00 00 00    	mov    r15d,0x3
	  if (__value < __b3) return __n + 2;
    c2c3:	be 03 00 00 00       	mov    esi,0x3
	  if (__value < __b2) return __n + 1;
    c2c8:	83 fa 63             	cmp    edx,0x63
    c2cb:	0f 86 6b 03 00 00    	jbe    c63c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3dc>
      __detail::__to_chars_10_impl(__first, __len, __val);
    c2d1:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c2d6:	4c 89 f7             	mov    rdi,r14
      __res.ptr = __first + __len;
    c2d9:	4d 01 f7             	add    r15,r14
      __detail::__to_chars_10_impl(__first, __len, __val);
    c2dc:	e8 cf 95 ff ff       	call   58b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
    c2e1:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
	  char* __start = __buf + 3;
    c2e4:	4c 89 f6             	mov    rsi,r14
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    c2e7:	c0 e8 02             	shr    al,0x2
    c2ea:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    c2ed:	83 f8 01             	cmp    eax,0x1
    c2f0:	0f 84 7a 01 00 00    	je     c470 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x210>
      else if (__sign == _Sign_space)
    c2f6:	83 f8 03             	cmp    eax,0x3
    c2f9:	0f 84 e9 01 00 00    	je     c4e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x288>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    c2ff:	4c 89 f8             	mov    rax,r15
			       __start_digits - __start, __fc);
    c302:	4c 89 f1             	mov    rcx,r14
      : _M_len{__len}, _M_str{__str}
    c305:	48 89 f2             	mov    rdx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    c308:	49 89 e8             	mov    r8,rbp
    c30b:	48 29 f0             	sub    rax,rsi
			       __start_digits - __start, __fc);
    c30e:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    c311:	48 89 df             	mov    rdi,rbx
    c314:	48 89 c6             	mov    rsi,rax
    c317:	e8 34 fa ff ff       	call   bd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
	}
    c31c:	48 83 c4 28          	add    rsp,0x28
    c320:	5b                   	pop    rbx
    c321:	5d                   	pop    rbp
    c322:	41 5c                	pop    r12
    c324:	41 5d                	pop    r13
    c326:	41 5e                	pop    r14
    c328:	41 5f                	pop    r15
    c32a:	c3                   	ret
    c32b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    c330:	40 84 f6             	test   sil,sil
    c333:	0f 88 31 03 00 00    	js     c66a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x40a>
    c339:	48 8d 4c 24 10       	lea    rcx,[rsp+0x10]
    c33e:	b8 01 00 00 00       	mov    eax,0x1
    c343:	40 88 74 24 10       	mov    BYTE PTR [rsp+0x10],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    c348:	49 89 d8             	mov    r8,rbx
    c34b:	48 89 ce             	mov    rsi,rcx
    c34e:	48 89 c7             	mov    rdi,rax
    c351:	48 89 e9             	mov    rcx,rbp
    c354:	ba 01 00 00 00       	mov    edx,0x1
    c359:	41 b9 01 00 00 00    	mov    r9d,0x1
    c35f:	e8 2c d8 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    c364:	48 83 c4 28          	add    rsp,0x28
    c368:	5b                   	pop    rbx
    c369:	5d                   	pop    rbp
    c36a:	41 5c                	pop    r12
    c36c:	41 5d                	pop    r13
    c36e:	41 5e                	pop    r14
    c370:	41 5f                	pop    r15
    c372:	c3                   	ret
    c373:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    c378:	80 f9 10             	cmp    cl,0x10
    c37b:	4c 8d 25 9a 8e 00 00 	lea    r12,[rip+0x8e9a]        # 1521c <CSWTCH.1110+0x13c>
    c382:	48 8d 15 96 8e 00 00 	lea    rdx,[rip+0x8e96]        # 1521f <CSWTCH.1110+0x13f>
    c389:	4c 0f 45 e2          	cmovne r12,rdx
      if (__value == 0)
    c38d:	40 84 f6             	test   sil,sil
    c390:	0f 85 5a 01 00 00    	jne    c4f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x290>
    c396:	4c 8d 7c 24 09       	lea    r15,[rsp+0x9]
    c39b:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c3a0:	b8 30 00 00 00       	mov    eax,0x30
      __first[0] = '1';
    c3a5:	88 44 24 08          	mov    BYTE PTR [rsp+0x8],al
	  if (_M_spec._M_alt && __base_prefix.size())
    c3a9:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
    c3ac:	a8 10                	test   al,0x10
    c3ae:	0f 84 10 01 00 00    	je     c4c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x264>
    c3b4:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c3bb:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    c3c0:	4c 01 f6             	add    rsi,r14
	      __builtin_memcpy(__start, __base_prefix.data(),
    c3c3:	89 d7                	mov    edi,edx
    c3c5:	85 d2                	test   edx,edx
    c3c7:	0f 84 1a ff ff ff    	je     c2e7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87>
    c3cd:	31 d2                	xor    edx,edx
    c3cf:	89 d1                	mov    ecx,edx
    c3d1:	83 c2 01             	add    edx,0x1
    c3d4:	45 0f b6 04 0c       	movzx  r8d,BYTE PTR [r12+rcx*1]
    c3d9:	44 88 04 0e          	mov    BYTE PTR [rsi+rcx*1],r8b
    c3dd:	39 fa                	cmp    edx,edi
    c3df:	72 ee                	jb     c3cf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x16f>
    c3e1:	e9 01 ff ff ff       	jmp    c2e7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87>
    c3e6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    c3ed:	00 00 00 
	      if (__i != 0)
    c3f0:	40 84 f6             	test   sil,sil
    c3f3:	0f 84 d7 00 00 00    	je     c4d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x270>
      _Up __unsigned_val = __value;
    c3f9:	40 0f b6 ce          	movzx  ecx,sil
	__len = (__to_chars_len_2(__val) + 2) / 3;
    c3fd:	0f bd d1             	bsr    edx,ecx
    c400:	44 8d 7a 03          	lea    r15d,[rdx+0x3]
    c404:	ba ab aa aa aa       	mov    edx,0xaaaaaaab
    c409:	4c 0f af fa          	imul   r15,rdx
    c40d:	49 c1 ef 21          	shr    r15,0x21
      while (__val >= 0100)
    c411:	83 f9 3f             	cmp    ecx,0x3f
    c414:	0f 86 32 02 00 00    	jbe    c64c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ec>
	  __val >>= 3;
    c41a:	89 ca                	mov    edx,ecx
	  __first[__pos] = '0' + __num;
    c41c:	83 e0 07             	and    eax,0x7
	  __val >>= 3;
    c41f:	c1 e9 06             	shr    ecx,0x6
	  __val >>= 3;
    c422:	c1 ea 03             	shr    edx,0x3
	  __first[__pos] = '0' + __num;
    c425:	83 c0 30             	add    eax,0x30
	  __num = __val & 7;
    c428:	83 e2 07             	and    edx,0x7
	  __first[__pos] = '0' + __num;
    c42b:	88 44 24 0a          	mov    BYTE PTR [rsp+0xa],al
	  __first[__pos - 1] = '0' + __num;
    c42f:	83 c2 30             	add    edx,0x30
    c432:	88 54 24 09          	mov    BYTE PTR [rsp+0x9],dl
	__first[0] = '0' + __val;
    c436:	83 c1 30             	add    ecx,0x30
    c439:	88 4c 24 08          	mov    BYTE PTR [rsp+0x8],cl
      __res.ptr = __first + __len;
    c43d:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c442:	44 89 f8             	mov    eax,r15d
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    c445:	4c 8d 25 8c 8d 00 00 	lea    r12,[rip+0x8d8c]        # 151d8 <CSWTCH.1110+0xf8>
    c44c:	4d 8d 3c 06          	lea    r15,[r14+rax*1]
    c450:	ba 01 00 00 00       	mov    edx,0x1
	  if (_M_spec._M_alt && __base_prefix.size())
    c455:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
	  char* __start = __buf + 3;
    c458:	4c 89 f6             	mov    rsi,r14
	  if (_M_spec._M_alt && __base_prefix.size())
    c45b:	a8 10                	test   al,0x10
    c45d:	0f 84 84 fe ff ff    	je     c2e7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87>
	      __start -= __base_prefix.size();
    c463:	48 89 d6             	mov    rsi,rdx
    c466:	48 f7 de             	neg    rsi
    c469:	e9 52 ff ff ff       	jmp    c3c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x160>
    c46e:	66 90                	xchg   ax,ax
    c470:	b8 2b 00 00 00       	mov    eax,0x2b
	*__dest = '+';
    c475:	88 46 ff             	mov    BYTE PTR [rsi-0x1],al
    c478:	48 83 ee 01          	sub    rsi,0x1
    c47c:	e9 7e fe ff ff       	jmp    c2ff <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9f>
    c481:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c488:	80 f9 28             	cmp    cl,0x28
    c48b:	0f 84 df 00 00 00    	je     c570 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
      if (__value == 0)
    c491:	40 84 f6             	test   sil,sil
    c494:	0f 85 fe 00 00 00    	jne    c598 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x338>
	  *__first = '0';
    c49a:	c6 44 24 08 30       	mov    BYTE PTR [rsp+0x8],0x30
	      if (_M_spec._M_type == _Pres_X)
    c49f:	4c 8d 7c 24 09       	lea    r15,[rsp+0x9]
    c4a4:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c4a9:	4c 8d 25 72 8d 00 00 	lea    r12,[rip+0x8d72]        # 15222 <CSWTCH.1110+0x142>
    c4b0:	80 f9 30             	cmp    cl,0x30
    c4b3:	0f 84 24 01 00 00    	je     c5dd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x37d>
	  if (_M_spec._M_alt && __base_prefix.size())
    c4b9:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
    c4bc:	a8 10                	test   al,0x10
    c4be:	0f 85 f0 fe ff ff    	jne    c3b4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x154>
	  char* __start = __buf + 3;
    c4c4:	4c 89 f6             	mov    rsi,r14
    c4c7:	e9 1b fe ff ff       	jmp    c2e7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87>
    c4cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    c4d0:	c6 44 24 08 30       	mov    BYTE PTR [rsp+0x8],0x30
    c4d5:	4c 8d 7c 24 09       	lea    r15,[rsp+0x9]
    c4da:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c4df:	e9 fd fd ff ff       	jmp    c2e1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x81>
    c4e4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    c4e8:	b8 20 00 00 00       	mov    eax,0x20
    c4ed:	eb 86                	jmp    c475 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x215>
    c4ef:	90                   	nop
      _Up __unsigned_val = __value;
    c4f0:	40 0f b6 c6          	movzx  eax,sil
    c4f4:	41 bf 20 00 00 00    	mov    r15d,0x20
      unsigned __pos = __len - 1;
    c4fa:	ba 1f 00 00 00       	mov    edx,0x1f
	  return __builtin_clz(__x) - __diff;
    c4ff:	0f bd f8             	bsr    edi,eax
    c502:	83 f7 1f             	xor    edi,0x1f
      return _Nd - std::__countl_zero(__x);
    c505:	41 29 ff             	sub    r15d,edi
      while (__pos)
    c508:	29 fa                	sub    edx,edi
    c50a:	74 4a                	je     c556 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f6>
    c50c:	89 d1                	mov    ecx,edx
    c50e:	48 8d 74 0c 07       	lea    rsi,[rsp+rcx*1+0x7]
    c513:	48 8d 54 0c 08       	lea    rdx,[rsp+rcx*1+0x8]
    c518:	b9 1e 00 00 00       	mov    ecx,0x1e
    c51d:	29 f9                	sub    ecx,edi
    c51f:	48 29 ce             	sub    rsi,rcx
    c522:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    c529:	00 00 00 00 
    c52d:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    c534:	00 00 00 00 
    c538:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    c53f:	00 
	  __first[__pos--] = '0' + (__val & 1);
    c540:	89 c1                	mov    ecx,eax
      while (__pos)
    c542:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    c546:	d1 e8                	shr    eax,1
	  __first[__pos--] = '0' + (__val & 1);
    c548:	83 e1 01             	and    ecx,0x1
    c54b:	83 c1 30             	add    ecx,0x30
    c54e:	88 4a 01             	mov    BYTE PTR [rdx+0x1],cl
      while (__pos)
    c551:	48 39 d6             	cmp    rsi,rdx
    c554:	75 ea                	jne    c540 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
      __res.ptr = __first + __len;
    c556:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c55b:	4d 63 ff             	movsxd r15,r15d
    c55e:	b8 31 00 00 00       	mov    eax,0x31
    c563:	4d 01 f7             	add    r15,r14
    c566:	e9 3a fe ff ff       	jmp    c3a5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x145>
    c56b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      if (__value == 0)
    c570:	40 84 f6             	test   sil,sil
    c573:	0f 85 a7 00 00 00    	jne    c620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c0>
	  *__first = '0';
    c579:	c6 44 24 08 30       	mov    BYTE PTR [rsp+0x8],0x30
    c57e:	4c 8d 7c 24 09       	lea    r15,[rsp+0x9]
    c583:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c588:	4c 8d 25 96 8c 00 00 	lea    r12,[rip+0x8c96]        # 15225 <CSWTCH.1110+0x145>
    c58f:	e9 25 ff ff ff       	jmp    c4b9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x259>
    c594:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    c598:	4c 8d 25 83 8c 00 00 	lea    r12,[rip+0x8c83]        # 15222 <CSWTCH.1110+0x142>
      _Up __unsigned_val = __value;
    c59f:	0f b6 d0             	movzx  edx,al
      constexpr char __digits[] = {
    c5a2:	66 0f 6f 05 c6 c2 00 	movdqa xmm0,XMMWORD PTR [rip+0xc2c6]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    c5a9:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    c5aa:	0f bd f2             	bsr    esi,edx
    c5ad:	44 8d 7e 04          	lea    r15d,[rsi+0x4]
      constexpr char __digits[] = {
    c5b1:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    c5b6:	41 c1 ef 02          	shr    r15d,0x2
      if (__val >= 0x10)
    c5ba:	83 fa 0f             	cmp    edx,0xf
    c5bd:	77 49                	ja     c608 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a8>
	__first[0] = __digits[__val];
    c5bf:	0f b6 44 14 10       	movzx  eax,BYTE PTR [rsp+rdx*1+0x10]
    c5c4:	88 44 24 08          	mov    BYTE PTR [rsp+0x8],al
      __res.ptr = __first + __len;
    c5c8:	4c 8d 74 24 08       	lea    r14,[rsp+0x8]
    c5cd:	44 89 f8             	mov    eax,r15d
    c5d0:	4d 8d 3c 06          	lea    r15,[r14+rax*1]
	      if (_M_spec._M_type == _Pres_X)
    c5d4:	80 f9 30             	cmp    cl,0x30
    c5d7:	0f 85 dc fe ff ff    	jne    c4b9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x259>
    c5dd:	4d 89 f5             	mov    r13,r14
		  *__p = __builtin_toupper(*__p);
    c5e0:	41 0f be 7d 00       	movsx  edi,BYTE PTR [r13+0x0]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    c5e5:	49 83 c5 01          	add    r13,0x1
		  *__p = __builtin_toupper(*__p);
    c5e9:	e8 62 6d ff ff       	call   3350 <toupper@plt>
    c5ee:	41 88 45 ff          	mov    BYTE PTR [r13-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    c5f2:	4d 39 fd             	cmp    r13,r15
    c5f5:	75 e9                	jne    c5e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    c5f7:	ba 02 00 00 00       	mov    edx,0x2
    c5fc:	e9 54 fe ff ff       	jmp    c455 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f5>
    c601:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  __first[1] = __digits[__num];
    c608:	83 e0 0f             	and    eax,0xf
	  __val >>= 4;
    c60b:	c1 ea 04             	shr    edx,0x4
	  __first[1] = __digits[__num];
    c60e:	0f b6 44 04 10       	movzx  eax,BYTE PTR [rsp+rax*1+0x10]
    c613:	88 44 24 09          	mov    BYTE PTR [rsp+0x9],al
	  __first[0] = __digits[__val];
    c617:	0f b6 44 14 10       	movzx  eax,BYTE PTR [rsp+rdx*1+0x10]
    c61c:	eb a6                	jmp    c5c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x364>
    c61e:	66 90                	xchg   ax,ax
    c620:	4c 8d 25 fe 8b 00 00 	lea    r12,[rip+0x8bfe]        # 15225 <CSWTCH.1110+0x145>
    c627:	e9 73 ff ff ff       	jmp    c59f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x33f>
    c62c:	41 bf 01 00 00 00    	mov    r15d,0x1
	  if (__value < (unsigned)__base) return __n;
    c632:	be 01 00 00 00       	mov    esi,0x1
    c637:	e9 95 fc ff ff       	jmp    c2d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x71>
	  if (__value < __b2) return __n + 1;
    c63c:	41 bf 02 00 00 00    	mov    r15d,0x2
    c642:	be 02 00 00 00       	mov    esi,0x2
    c647:	e9 85 fc ff ff       	jmp    c2d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x71>
      if (__val >= 010)
    c64c:	83 f9 07             	cmp    ecx,0x7
    c64f:	0f 86 e1 fd ff ff    	jbe    c436 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d6>
	  __first[1] = '0' + __num;
    c655:	83 e0 07             	and    eax,0x7
	  __val >>= 3;
    c658:	c1 e9 03             	shr    ecx,0x3
	  __first[1] = '0' + __num;
    c65b:	83 c0 30             	add    eax,0x30
	  __first[0] = '0' + __val;
    c65e:	83 c1 30             	add    ecx,0x30
	  __first[1] = '0' + __num;
    c661:	88 44 24 09          	mov    BYTE PTR [rsp+0x9],al
    c665:	e9 cf fd ff ff       	jmp    c439 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d9>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    c66a:	e8 e1 6a ff ff       	call   3150 <abort@plt>
    c66f:	90                   	nop

000000000000c670 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(bool __i, basic_format_context<_Out, _CharT>& __fc) const
    c670:	41 57                	push   r15
    c672:	41 56                	push   r14
    c674:	41 55                	push   r13
    c676:	41 54                	push   r12
    c678:	49 89 d4             	mov    r12,rdx
    c67b:	55                   	push   rbp
    c67c:	89 f5                	mov    ebp,esi
    c67e:	53                   	push   rbx
    c67f:	48 89 fb             	mov    rbx,rdi
    c682:	48 83 ec 48          	sub    rsp,0x48
	  if (_M_spec._M_type == _Pres_c)
    c686:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    c68a:	83 e0 78             	and    eax,0x78
    c68d:	3c 38                	cmp    al,0x38
    c68f:	0f 84 eb 00 00 00    	je     c780 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x110>
	  if (_M_spec._M_type != _Pres_s)
    c695:	84 c0                	test   al,al
    c697:	0f 85 c3 00 00 00    	jne    c760 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    c69d:	4c 8d 6c 24 10       	lea    r13,[rsp+0x10]
	__c1 = __c2;
    c6a2:	c6 44 24 10 00       	mov    BYTE PTR [rsp+0x10],0x0
    c6a7:	4c 89 2c 24          	mov    QWORD PTR [rsp],r13
      { _M_string_length = __length; }
    c6ab:	48 c7 44 24 08 00 00 	mov    QWORD PTR [rsp+0x8],0x0
    c6b2:	00 00 
	  if (_M_spec._M_localized) [[unlikely]]
    c6b4:	f6 07 20             	test   BYTE PTR [rdi],0x20
    c6b7:	0f 85 23 01 00 00    	jne    c7e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x170>
	return __builtin_strlen(__s);
    c6bd:	41 be 04 00 00 00    	mov    r14d,0x4
		__s = __i ? "true" : "false";
    c6c3:	48 8d 05 6c 8a 00 00 	lea    rax,[rip+0x8a6c]        # 15136 <CSWTCH.1110+0x56>
    c6ca:	40 84 f6             	test   sil,sil
    c6cd:	75 0d                	jne    c6dc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6c>
    c6cf:	41 be 05 00 00 00    	mov    r14d,0x5
    c6d5:	48 8d 05 54 8a 00 00 	lea    rax,[rip+0x8a54]        # 15130 <CSWTCH.1110+0x50>
    c6dc:	48 89 e7             	mov    rdi,rsp
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    c6df:	4c 39 e8             	cmp    rax,r13
    c6e2:	0f 84 18 03 00 00    	je     ca00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x390>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c6e8:	44 89 f1             	mov    ecx,r14d
    c6eb:	31 d2                	xor    edx,edx
    c6ed:	41 f6 c6 04          	test   r14b,0x4
    c6f1:	0f 85 c9 00 00 00    	jne    c7c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x150>
    c6f7:	83 e1 01             	and    ecx,0x1
    c6fa:	0f 85 b0 00 00 00    	jne    c7b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x140>
      }
    c700:	4c 89 e8             	mov    rax,r13
      { _M_string_length = __length; }
    c703:	4c 89 74 24 08       	mov    QWORD PTR [rsp+0x8],r14
	__c1 = __c2;
    c708:	42 c6 04 30 00       	mov    BYTE PTR [rax+r14*1],0x0
      size() const _GLIBCXX_NOEXCEPT
    c70d:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
      { return _M_string_length; }
    c711:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
	  return __format::__write_padded_as_spec(__s, __est_width, __fc,
    c716:	49 89 d8             	mov    r8,rbx
    c719:	4c 89 e1             	mov    rcx,r12
    c71c:	41 b9 01 00 00 00    	mov    r9d,0x1
    c722:	48 89 fe             	mov    rsi,rdi
    c725:	48 89 d7             	mov    rdi,rdx
    c728:	e8 63 d4 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
      { return _M_dataplus._M_p; }
    c72d:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    c731:	48 89 c3             	mov    rbx,rax
	if (_M_data() == _M_local_data())
    c734:	4c 39 ef             	cmp    rdi,r13
    c737:	74 0e                	je     c747 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    c739:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    c73e:	48 8d 70 01          	lea    rsi,[rax+0x1]
    c742:	e8 b9 6a ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    c747:	48 83 c4 48          	add    rsp,0x48
    c74b:	48 89 d8             	mov    rax,rbx
    c74e:	5b                   	pop    rbx
    c74f:	5d                   	pop    rbp
    c750:	41 5c                	pop    r12
    c752:	41 5d                	pop    r13
    c754:	41 5e                	pop    r14
    c756:	41 5f                	pop    r15
    c758:	c3                   	ret
    c759:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    c760:	48 83 c4 48          	add    rsp,0x48
	    return format(static_cast<unsigned char>(__i), __fc);
    c764:	40 0f b6 f6          	movzx  esi,sil
	}
    c768:	5b                   	pop    rbx
    c769:	5d                   	pop    rbp
    c76a:	41 5c                	pop    r12
    c76c:	41 5d                	pop    r13
    c76e:	41 5e                	pop    r14
    c770:	41 5f                	pop    r15
	    return format(static_cast<unsigned char>(__i), __fc);
    c772:	e9 e9 fa ff ff       	jmp    c260 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    c777:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    c77e:	00 00 
    c780:	b8 01 00 00 00       	mov    eax,0x1
    c785:	48 8d 4c 24 20       	lea    rcx,[rsp+0x20]
    c78a:	40 88 74 24 20       	mov    BYTE PTR [rsp+0x20],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    c78f:	49 89 d8             	mov    r8,rbx
    c792:	48 89 ce             	mov    rsi,rcx
    c795:	48 89 c7             	mov    rdi,rax
    c798:	4c 89 e1             	mov    rcx,r12
    c79b:	ba 01 00 00 00       	mov    edx,0x1
    c7a0:	41 b9 01 00 00 00    	mov    r9d,0x1
    c7a6:	e8 e5 d3 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
    c7ab:	48 89 c3             	mov    rbx,rax
	    return _M_format_character(static_cast<unsigned char>(__i), __fc);
    c7ae:	eb 97                	jmp    c747 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c7b0:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    c7b4:	88 44 14 10          	mov    BYTE PTR [rsp+rdx*1+0x10],al
    c7b8:	e9 43 ff ff ff       	jmp    c700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x90>
    c7bd:	0f 1f 00             	nop    DWORD PTR [rax]
    c7c0:	8b 10                	mov    edx,DWORD PTR [rax]
    c7c2:	83 e1 01             	and    ecx,0x1
    c7c5:	89 54 24 10          	mov    DWORD PTR [rsp+0x10],edx
    c7c9:	ba 04 00 00 00       	mov    edx,0x4
    c7ce:	0f 84 2c ff ff ff    	je     c700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x90>
    c7d4:	eb da                	jmp    c7b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x140>
    c7d6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    c7dd:	00 00 00 
      if (!_M_hasval)
    c7e0:	80 7a 20 00          	cmp    BYTE PTR [rdx+0x20],0x0
    c7e4:	4c 8d 7a 18          	lea    r15,[rdx+0x18]
    c7e8:	0f 84 e2 00 00 00    	je     c8d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x260>
      std::locale locale() { return _M_loc.value(); }
    c7ee:	4c 8d 74 24 20       	lea    r14,[rsp+0x20]
    c7f3:	4c 89 fe             	mov    rsi,r15
    c7f6:	4c 89 f7             	mov    rdi,r14
    c7f9:	e8 92 69 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
      const size_t __i = _Facet::id._M_id();
    c7fe:	48 8d 3d bb f9 00 00 	lea    rdi,[rip+0xf9bb]        # 1c1c0 <std::__cxx11::numpunct<char>::id@GLIBCXX_3.4.21>
    c805:	e8 16 69 ff ff       	call   3120 <std::locale::id::_M_id() const@plt>
    c80a:	48 89 c2             	mov    rdx,rax
      const locale::facet** __facets = __loc._M_impl->_M_facets;
    c80d:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
      _GLIBCXX_STD_FACET(numpunct<char>);
    c812:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    c816:	4c 8b 3c d0          	mov    r15,QWORD PTR [rax+rdx*8]
      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
    c81a:	4d 85 ff             	test   r15,r15
    c81d:	0f 84 f9 01 00 00    	je     ca1c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ac>
	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
    c823:	4c 89 f7             	mov    rdi,r14
    c826:	e8 95 6a ff ff       	call   32c0 <std::locale::~locale()@plt>
       *
       *  @return  string_type representing printed form of true.
      */
      string_type
      truename() const
      { return this->do_truename(); }
    c82b:	49 8b 07             	mov    rax,QWORD PTR [r15]
	      __s = __i ? __np.truename() : __np.falsename();
    c82e:	40 84 ed             	test   bpl,bpl
    c831:	0f 85 89 00 00 00    	jne    c8c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x250>
       *
       *  @return  string_type representing printed form of false.
      */
      string_type
      falsename() const
      { return this->do_falsename(); }
    c837:	4c 89 fe             	mov    rsi,r15
    c83a:	4c 89 f7             	mov    rdi,r14
    c83d:	ff 50 30             	call   QWORD PTR [rax+0x30]
      { return _M_dataplus._M_p; }
    c840:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    c844:	48 89 c7             	mov    rdi,rax
	if (_M_data() == _M_local_data())
    c847:	4c 39 e8             	cmp    rax,r13
    c84a:	0f 84 93 00 00 00    	je     c8e3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x273>
	    if (_M_string_length > _S_local_capacity)
    c850:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
      { return _M_dataplus._M_p; }
    c855:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
	if (_M_data() == _M_local_data())
    c85a:	48 8d 74 24 30       	lea    rsi,[rsp+0x30]
	    if (_M_string_length > _S_local_capacity)
    c85f:	49 89 d0             	mov    r8,rdx
	if (_M_data() == _M_local_data())
    c862:	48 39 f1             	cmp    rcx,rsi
    c865:	0f 84 b0 00 00 00    	je     c91b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ab>
    c86b:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
    c870:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
		    __capacity = _M_allocated_capacity;
    c874:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
    c879:	0f 16 44 24 30       	movhps xmm0,QWORD PTR [rsp+0x30]
      { _M_string_length = __length; }
    c87e:	0f 11 44 24 08       	movups XMMWORD PTR [rsp+0x8],xmm0
	    if (__data)
    c883:	48 85 c0             	test   rax,rax
    c886:	74 79                	je     c901 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x291>
      { _M_dataplus._M_p = __p; }
    c888:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
      { _M_allocated_capacity = __capacity; }
    c88d:	48 89 54 24 30       	mov    QWORD PTR [rsp+0x30],rdx
      { _M_string_length = __length; }
    c892:	48 c7 44 24 28 00 00 	mov    QWORD PTR [rsp+0x28],0x0
    c899:	00 00 
	__c1 = __c2;
    c89b:	c6 00 00             	mov    BYTE PTR [rax],0x0
      { return _M_dataplus._M_p; }
    c89e:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
	if (_M_data() == _M_local_data())
    c8a3:	48 39 f7             	cmp    rdi,rsi
    c8a6:	0f 84 61 fe ff ff    	je     c70d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9d>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    c8ac:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    c8b1:	48 8d 70 01          	lea    rsi,[rax+0x1]
    c8b5:	e8 46 69 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    c8ba:	e9 4e fe ff ff       	jmp    c70d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9d>
    c8bf:	90                   	nop
      { return this->do_truename(); }
    c8c0:	4c 89 fe             	mov    rsi,r15
    c8c3:	4c 89 f7             	mov    rdi,r14
    c8c6:	ff 50 28             	call   QWORD PTR [rax+0x28]
    c8c9:	e9 72 ff ff ff       	jmp    c840 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
    c8ce:	66 90                	xchg   ax,ax
    c8d0:	4c 89 ff             	mov    rdi,r15
    c8d3:	e8 98 6a ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
    c8d8:	41 c6 44 24 20 01    	mov    BYTE PTR [r12+0x20],0x1
    c8de:	e9 0b ff ff ff       	jmp    c7ee <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x17e>
      { return _M_dataplus._M_p; }
    c8e3:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
	if (_M_data() == _M_local_data())
    c8e8:	48 8d 74 24 30       	lea    rsi,[rsp+0x30]
    c8ed:	48 39 f2             	cmp    rdx,rsi
    c8f0:	74 21                	je     c913 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2a3>
      { return _M_string_length; }
    c8f2:	f3 0f 6f 44 24 28    	movdqu xmm0,XMMWORD PTR [rsp+0x28]
      { _M_dataplus._M_p = __p; }
    c8f8:	48 89 14 24          	mov    QWORD PTR [rsp],rdx
      { _M_string_length = __length; }
    c8fc:	0f 11 44 24 08       	movups XMMWORD PTR [rsp+0x8],xmm0
      { _M_dataplus._M_p = __p; }
    c901:	48 89 74 24 20       	mov    QWORD PTR [rsp+0x20],rsi
    c906:	48 8d 74 24 30       	lea    rsi,[rsp+0x30]
    c90b:	48 89 f0             	mov    rax,rsi
    c90e:	e9 7f ff ff ff       	jmp    c892 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x222>
	    if (_M_string_length > _S_local_capacity)
    c913:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
    c918:	49 89 d0             	mov    r8,rdx
		if (__str.size())
    c91b:	48 85 d2             	test   rdx,rdx
    c91e:	74 3c                	je     c95c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ec>
	if (__n == 1)
    c920:	48 83 fa 01          	cmp    rdx,0x1
    c924:	0f 84 90 00 00 00    	je     c9ba <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c92a:	89 d0                	mov    eax,edx
    c92c:	83 fa 08             	cmp    edx,0x8
    c92f:	73 3f                	jae    c970 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x300>
    c931:	f6 c2 04             	test   dl,0x4
    c934:	0f 85 92 00 00 00    	jne    c9cc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x35c>
    c93a:	85 d2                	test   edx,edx
    c93c:	74 18                	je     c956 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e6>
    c93e:	0f b6 54 24 30       	movzx  edx,BYTE PTR [rsp+0x30]
    c943:	88 17                	mov    BYTE PTR [rdi],dl
    c945:	a8 02                	test   al,0x2
    c947:	0f 85 9b 00 00 00    	jne    c9e8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x378>
    c94d:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    c951:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
      { return _M_string_length; }
    c956:	49 89 d0             	mov    r8,rdx
      { return _M_dataplus._M_p; }
    c959:	48 89 f8             	mov    rax,rdi
      { _M_string_length = __length; }
    c95c:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
	__c1 = __c2;
    c961:	42 c6 04 00 00       	mov    BYTE PTR [rax+r8*1],0x0
      { return _M_dataplus._M_p; }
    c966:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
      }
    c96b:	e9 22 ff ff ff       	jmp    c892 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x222>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c970:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    c975:	49 89 f0             	mov    r8,rsi
    c978:	48 89 07             	mov    QWORD PTR [rdi],rax
    c97b:	89 d0                	mov    eax,edx
    c97d:	48 8b 4c 06 f8       	mov    rcx,QWORD PTR [rsi+rax*1-0x8]
    c982:	48 89 4c 07 f8       	mov    QWORD PTR [rdi+rax*1-0x8],rcx
    c987:	48 8d 4f 08          	lea    rcx,[rdi+0x8]
    c98b:	48 89 f8             	mov    rax,rdi
    c98e:	48 83 e1 f8          	and    rcx,0xfffffffffffffff8
    c992:	48 29 c8             	sub    rax,rcx
    c995:	49 29 c0             	sub    r8,rax
    c998:	01 d0                	add    eax,edx
    c99a:	83 e0 f8             	and    eax,0xfffffff8
    c99d:	83 f8 08             	cmp    eax,0x8
    c9a0:	72 ab                	jb     c94d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2dd>
    c9a2:	83 e0 f8             	and    eax,0xfffffff8
    c9a5:	31 d2                	xor    edx,edx
    c9a7:	89 d7                	mov    edi,edx
    c9a9:	83 c2 08             	add    edx,0x8
    c9ac:	4d 8b 0c 38          	mov    r9,QWORD PTR [r8+rdi*1]
    c9b0:	4c 89 0c 39          	mov    QWORD PTR [rcx+rdi*1],r9
    c9b4:	39 c2                	cmp    edx,eax
    c9b6:	72 ef                	jb     c9a7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x337>
    c9b8:	eb 93                	jmp    c94d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2dd>
	__c1 = __c2;
    c9ba:	0f b6 44 24 30       	movzx  eax,BYTE PTR [rsp+0x30]
    c9bf:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_string_length; }
    c9c1:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
      { return _M_dataplus._M_p; }
    c9c6:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
      }
    c9ca:	eb 90                	jmp    c95c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    c9cc:	8b 54 24 30          	mov    edx,DWORD PTR [rsp+0x30]
    c9d0:	89 17                	mov    DWORD PTR [rdi],edx
    c9d2:	8b 54 06 fc          	mov    edx,DWORD PTR [rsi+rax*1-0x4]
    c9d6:	89 54 07 fc          	mov    DWORD PTR [rdi+rax*1-0x4],edx
    c9da:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    c9de:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
    c9e3:	e9 6e ff ff ff       	jmp    c956 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e6>
    c9e8:	0f b7 54 06 fe       	movzx  edx,WORD PTR [rsi+rax*1-0x2]
    c9ed:	66 89 54 07 fe       	mov    WORD PTR [rdi+rax*1-0x2],dx
    c9f2:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    c9f6:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
    c9fb:	e9 56 ff ff ff       	jmp    c956 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e6>
    ca00:	45 31 c9             	xor    r9d,r9d
    ca03:	4d 89 f0             	mov    r8,r14
    ca06:	4c 89 e9             	mov    rcx,r13
    ca09:	31 d2                	xor    edx,edx
    ca0b:	4c 89 ee             	mov    rsi,r13
    ca0e:	e8 9d 68 ff ff       	call   32b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long)@plt>
    ca13:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    ca17:	e9 e7 fc ff ff       	jmp    c703 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x93>
      __throw_bad_cast();
    ca1c:	e8 3f 68 ff ff       	call   3260 <std::__throw_bad_cast()@plt>
    ca21:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ca28:	00 00 00 
    ca2b:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ca32:	00 00 00 
    ca35:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ca3c:	00 00 00 
    ca3f:	90                   	nop

000000000000ca40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    ca40:	41 57                	push   r15
    ca42:	41 56                	push   r14
    ca44:	41 89 f6             	mov    r14d,esi
    ca47:	41 55                	push   r13
    ca49:	41 54                	push   r12
    ca4b:	49 89 d4             	mov    r12,rdx
    ca4e:	55                   	push   rbp
    ca4f:	48 89 fd             	mov    rbp,rdi
    ca52:	53                   	push   rbx
    ca53:	48 83 ec 58          	sub    rsp,0x58
	  if (_M_spec._M_type == _Pres_c)
    ca57:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    ca5b:	89 c1                	mov    ecx,eax
    ca5d:	83 e1 78             	and    ecx,0x78
    ca60:	80 f9 38             	cmp    cl,0x38
    ca63:	0f 84 87 01 00 00    	je     cbf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1b0>
	  switch (_M_spec._M_type)
    ca69:	c0 e8 03             	shr    al,0x3
    ca6c:	83 e0 0f             	and    eax,0xf
	  if (__i < 0)
    ca6f:	85 f6                	test   esi,esi
    ca71:	0f 88 e1 00 00 00    	js     cb58 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x118>
    ca77:	89 f6                	mov    esi,esi
	  switch (_M_spec._M_type)
    ca79:	3c 04                	cmp    al,0x4
    ca7b:	0f 84 ff 02 00 00    	je     cd80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
    ca81:	0f 87 b9 01 00 00    	ja     cc40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
    ca87:	3c 01                	cmp    al,0x1
    ca89:	0f 86 c1 02 00 00    	jbe    cd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    ca8f:	80 f9 10             	cmp    cl,0x10
    ca92:	4c 8d 2d 83 87 00 00 	lea    r13,[rip+0x8783]        # 1521c <CSWTCH.1110+0x13c>
    ca99:	48 8d 05 7f 87 00 00 	lea    rax,[rip+0x877f]        # 1521f <CSWTCH.1110+0x13f>
    caa0:	49 0f 44 c5          	cmove  rax,r13
    caa4:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
      if (__value == 0)
    caa9:	45 85 f6             	test   r14d,r14d
    caac:	0f 85 d8 00 00 00    	jne    cb8a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x14a>
    cab2:	b8 30 00 00 00       	mov    eax,0x30
    cab7:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
    cabc:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
      __first[0] = '1';
    cac1:	88 44 24 23          	mov    BYTE PTR [rsp+0x23],al
	  if (_M_spec._M_alt && __base_prefix.size())
    cac5:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    cac9:	0f 84 51 02 00 00    	je     cd20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
    cacf:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cad6:	b8 02 00 00 00       	mov    eax,0x2
	      __start -= __base_prefix.size();
    cadb:	4c 01 fe             	add    rsi,r15
	      __builtin_memcpy(__start, __base_prefix.data(),
    cade:	89 c1                	mov    ecx,eax
    cae0:	85 c0                	test   eax,eax
    cae2:	74 1c                	je     cb00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc0>
    cae4:	31 c0                	xor    eax,eax
    cae6:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
    caeb:	89 c2                	mov    edx,eax
    caed:	83 c0 01             	add    eax,0x1
    caf0:	0f b6 3c 17          	movzx  edi,BYTE PTR [rdi+rdx*1]
    caf4:	40 88 3c 16          	mov    BYTE PTR [rsi+rdx*1],dil
    caf8:	39 c8                	cmp    eax,ecx
    cafa:	72 ea                	jb     cae6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa6>
    cafc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    cb00:	48 8d 56 ff          	lea    rdx,[rsi-0x1]
      if (__i < 0)
    cb04:	45 85 f6             	test   r14d,r14d
    cb07:	0f 88 23 02 00 00    	js     cd30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f0>
    cb0d:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    cb11:	c0 e8 02             	shr    al,0x2
    cb14:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    cb17:	83 f8 01             	cmp    eax,0x1
    cb1a:	0f 84 20 02 00 00    	je     cd40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x300>
      else if (__sign == _Sign_space)
    cb20:	83 f8 03             	cmp    eax,0x3
    cb23:	0f 84 07 03 00 00    	je     ce30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    cb29:	48 29 f3             	sub    rbx,rsi
			       __start_digits - __start, __fc);
    cb2c:	4c 89 f9             	mov    rcx,r15
    cb2f:	48 89 f2             	mov    rdx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    cb32:	4d 89 e0             	mov    r8,r12
			       __start_digits - __start, __fc);
    cb35:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    cb38:	48 89 ef             	mov    rdi,rbp
    cb3b:	48 89 de             	mov    rsi,rbx
    cb3e:	e8 0d f2 ff ff       	call   bd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
	}
    cb43:	48 83 c4 58          	add    rsp,0x58
    cb47:	5b                   	pop    rbx
    cb48:	5d                   	pop    rbp
    cb49:	41 5c                	pop    r12
    cb4b:	41 5d                	pop    r13
    cb4d:	41 5e                	pop    r14
    cb4f:	41 5f                	pop    r15
    cb51:	c3                   	ret
    cb52:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    cb58:	f7 de                	neg    esi
	  switch (_M_spec._M_type)
    cb5a:	3c 04                	cmp    al,0x4
    cb5c:	0f 84 2e 02 00 00    	je     cd90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x350>
    cb62:	0f 87 18 01 00 00    	ja     cc80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
    cb68:	3c 01                	cmp    al,0x1
    cb6a:	0f 86 d0 02 00 00    	jbe    ce40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    cb70:	80 f9 10             	cmp    cl,0x10
    cb73:	4c 8d 2d a5 86 00 00 	lea    r13,[rip+0x86a5]        # 1521f <CSWTCH.1110+0x13f>
    cb7a:	48 8d 05 9b 86 00 00 	lea    rax,[rip+0x869b]        # 1521c <CSWTCH.1110+0x13c>
    cb81:	49 0f 45 c5          	cmovne rax,r13
    cb85:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
	  return __builtin_clz(__x) - __diff;
    cb8a:	44 0f bd c6          	bsr    r8d,esi
      return _Nd - std::__countl_zero(__x);
    cb8e:	bb 20 00 00 00       	mov    ebx,0x20
      unsigned __pos = __len - 1;
    cb93:	ba 1f 00 00 00       	mov    edx,0x1f
	  return __builtin_clz(__x) - __diff;
    cb98:	41 83 f0 1f          	xor    r8d,0x1f
      return _Nd - std::__countl_zero(__x);
    cb9c:	44 29 c3             	sub    ebx,r8d
      while (__pos)
    cb9f:	44 29 c2             	sub    edx,r8d
    cba2:	74 32                	je     cbd6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x196>
    cba4:	89 d1                	mov    ecx,edx
    cba6:	b8 1e 00 00 00       	mov    eax,0x1e
    cbab:	48 8d 7c 0c 1f       	lea    rdi,[rsp+rcx*1+0x1f]
    cbb0:	44 29 c0             	sub    eax,r8d
    cbb3:	48 8d 54 0c 20       	lea    rdx,[rsp+rcx*1+0x20]
    cbb8:	48 29 c7             	sub    rdi,rax
    cbbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  __first[__pos--] = '0' + (__val & 1);
    cbc0:	89 f1                	mov    ecx,esi
      while (__pos)
    cbc2:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    cbc6:	d1 ee                	shr    esi,1
	  __first[__pos--] = '0' + (__val & 1);
    cbc8:	83 e1 01             	and    ecx,0x1
    cbcb:	83 c1 30             	add    ecx,0x30
    cbce:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
      while (__pos)
    cbd1:	48 39 d7             	cmp    rdi,rdx
    cbd4:	75 ea                	jne    cbc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x180>
      __res.ptr = __first + __len;
    cbd6:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cbdb:	48 63 db             	movsxd rbx,ebx
    cbde:	b8 31 00 00 00       	mov    eax,0x31
    cbe3:	4c 01 fb             	add    rbx,r15
    cbe6:	e9 d6 fe ff ff       	jmp    cac1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x81>
    cbeb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
    cbf0:	8d 86 80 00 00 00    	lea    eax,[rsi+0x80]
    cbf6:	3d ff 00 00 00       	cmp    eax,0xff
    cbfb:	0f 87 d7 03 00 00    	ja     cfd8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x598>
    cc01:	48 8d 4c 24 20       	lea    rcx,[rsp+0x20]
    cc06:	b8 01 00 00 00       	mov    eax,0x1
    cc0b:	40 88 74 24 20       	mov    BYTE PTR [rsp+0x20],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    cc10:	49 89 e8             	mov    r8,rbp
    cc13:	48 89 ce             	mov    rsi,rcx
    cc16:	48 89 c7             	mov    rdi,rax
    cc19:	4c 89 e1             	mov    rcx,r12
    cc1c:	ba 01 00 00 00       	mov    edx,0x1
    cc21:	41 b9 01 00 00 00    	mov    r9d,0x1
    cc27:	e8 64 cf ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    cc2c:	48 83 c4 58          	add    rsp,0x58
    cc30:	5b                   	pop    rbx
    cc31:	5d                   	pop    rbp
    cc32:	41 5c                	pop    r12
    cc34:	41 5d                	pop    r13
    cc36:	41 5e                	pop    r14
    cc38:	41 5f                	pop    r15
    cc3a:	c3                   	ret
    cc3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cc40:	80 f9 28             	cmp    cl,0x28
    cc43:	0f 84 ff 02 00 00    	je     cf48 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x508>
      if (__value == 0)
    cc49:	45 85 f6             	test   r14d,r14d
    cc4c:	0f 85 46 03 00 00    	jne    cf98 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x558>
	  *__first = '0';
    cc52:	c6 44 24 23 30       	mov    BYTE PTR [rsp+0x23],0x30
	      if (_M_spec._M_type == _Pres_X)
    cc57:	80 f9 30             	cmp    cl,0x30
    cc5a:	0f 84 a0 02 00 00    	je     cf00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c0>
    cc60:	48 8d 05 bb 85 00 00 	lea    rax,[rip+0x85bb]        # 15222 <CSWTCH.1110+0x142>
    cc67:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
    cc6c:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cc71:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cc76:	e9 9b 00 00 00       	jmp    cd16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d6>
    cc7b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cc80:	80 f9 28             	cmp    cl,0x28
    cc83:	4c 8d 2d 9b 85 00 00 	lea    r13,[rip+0x859b]        # 15225 <CSWTCH.1110+0x145>
    cc8a:	48 8d 05 91 85 00 00 	lea    rax,[rip+0x8591]        # 15222 <CSWTCH.1110+0x142>
    cc91:	49 0f 44 c5          	cmove  rax,r13
    cc95:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    cc9a:	0f bd c6             	bsr    eax,esi
      constexpr char __digits[] = {
    cc9d:	66 0f 6f 05 cb bb 00 	movdqa xmm0,XMMWORD PTR [rip+0xbbcb]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    cca4:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    cca5:	8d 58 04             	lea    ebx,[rax+0x4]
    cca8:	c1 eb 02             	shr    ebx,0x2
      constexpr char __digits[] = {
    ccab:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
      unsigned __pos = __len - 1;
    ccb0:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0x100)
    ccb3:	81 fe ff 00 00 00    	cmp    esi,0xff
    ccb9:	76 38                	jbe    ccf3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2b3>
    ccbb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  __first[__pos] = __digits[__num];
    ccc0:	89 f7                	mov    edi,esi
    ccc2:	89 c2                	mov    edx,eax
    ccc4:	83 e7 0f             	and    edi,0xf
    ccc7:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [rsp+rdi*1+0x10]
    cccc:	40 88 7c 14 23       	mov    BYTE PTR [rsp+rdx*1+0x23],dil
	  __val >>= 4;
    ccd1:	89 f2                	mov    edx,esi
	  __first[__pos - 1] = __digits[__num];
    ccd3:	8d 78 ff             	lea    edi,[rax-0x1]
	  __val >>= 4;
    ccd6:	c1 ee 08             	shr    esi,0x8
	  __val >>= 4;
    ccd9:	c1 ea 04             	shr    edx,0x4
	  __pos -= 2;
    ccdc:	83 e8 02             	sub    eax,0x2
	  __first[__pos - 1] = __digits[__num];
    ccdf:	83 e2 0f             	and    edx,0xf
    cce2:	0f b6 54 14 10       	movzx  edx,BYTE PTR [rsp+rdx*1+0x10]
    cce7:	88 54 3c 23          	mov    BYTE PTR [rsp+rdi*1+0x23],dl
      while (__val >= 0x100)
    cceb:	81 fe ff 00 00 00    	cmp    esi,0xff
    ccf1:	77 cd                	ja     ccc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x280>
      if (__val >= 0x10)
    ccf3:	83 fe 0f             	cmp    esi,0xf
    ccf6:	0f 87 e4 01 00 00    	ja     cee0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
	__first[0] = __digits[__val];
    ccfc:	0f b6 44 34 10       	movzx  eax,BYTE PTR [rsp+rsi*1+0x10]
      __res.ptr = __first + __len;
    cd01:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cd06:	88 44 24 23          	mov    BYTE PTR [rsp+0x23],al
    cd0a:	4c 01 fb             	add    rbx,r15
	      if (_M_spec._M_type == _Pres_X)
    cd0d:	80 f9 30             	cmp    cl,0x30
    cd10:	0f 84 00 02 00 00    	je     cf16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d6>
	  if (_M_spec._M_alt && __base_prefix.size())
    cd16:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    cd1a:	0f 85 af fd ff ff    	jne    cacf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f>
	  char* __start = __buf + 3;
    cd20:	4c 89 fe             	mov    rsi,r15
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    cd23:	48 8d 56 ff          	lea    rdx,[rsi-0x1]
      if (__i < 0)
    cd27:	45 85 f6             	test   r14d,r14d
    cd2a:	0f 89 dd fd ff ff    	jns    cb0d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcd>
	*__dest = '-';
    cd30:	c6 46 ff 2d          	mov    BYTE PTR [rsi-0x1],0x2d
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    cd34:	48 89 d6             	mov    rsi,rdx
    cd37:	e9 ed fd ff ff       	jmp    cb29 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe9>
    cd3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	*__dest = '+';
    cd40:	c6 46 ff 2b          	mov    BYTE PTR [rsi-0x1],0x2b
    cd44:	eb ee                	jmp    cd34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f4>
    cd46:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    cd4d:	00 00 00 
      if (__value == 0)
    cd50:	45 85 f6             	test   r14d,r14d
    cd53:	0f 85 e7 00 00 00    	jne    ce40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
      __glibcxx_assert(2 <= __base && __base <= 36);
    cd59:	c6 44 24 23 30       	mov    BYTE PTR [rsp+0x23],0x30
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    cd5e:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  char* __start = __buf + 3;
    cd62:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cd67:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
    cd6c:	4c 89 fe             	mov    rsi,r15
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    cd6f:	48 8d 54 24 22       	lea    rdx,[rsp+0x22]
    cd74:	e9 98 fd ff ff       	jmp    cb11 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1>
    cd79:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    cd80:	45 85 f6             	test   r14d,r14d
    cd83:	74 d4                	je     cd59 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x319>
    cd85:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cd8c:	00 00 00 00 
	__len = (__to_chars_len_2(__val) + 2) / 3;
    cd90:	0f bd c6             	bsr    eax,esi
    cd93:	8d 58 03             	lea    ebx,[rax+0x3]
    cd96:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    cd9b:	48 0f af d8          	imul   rbx,rax
    cd9f:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    cda3:	8d 4b ff             	lea    ecx,[rbx-0x1]
      while (__val >= 0100)
    cda6:	83 fe 3f             	cmp    esi,0x3f
    cda9:	76 40                	jbe    cdeb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ab>
    cdab:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cdb2:	00 00 00 00 
    cdb6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    cdbd:	00 00 00 
	  auto __num = __val & 7;
    cdc0:	89 f2                	mov    edx,esi
	  __first[__pos] = '0' + __num;
    cdc2:	89 cf                	mov    edi,ecx
	  auto __num = __val & 7;
    cdc4:	83 e2 07             	and    edx,0x7
	  __first[__pos] = '0' + __num;
    cdc7:	83 c2 30             	add    edx,0x30
    cdca:	88 54 3c 23          	mov    BYTE PTR [rsp+rdi*1+0x23],dl
	  __val >>= 3;
    cdce:	89 f2                	mov    edx,esi
	  __first[__pos - 1] = '0' + __num;
    cdd0:	8d 79 ff             	lea    edi,[rcx-0x1]
	  __val >>= 3;
    cdd3:	c1 ee 06             	shr    esi,0x6
	  __val >>= 3;
    cdd6:	c1 ea 03             	shr    edx,0x3
	  __pos -= 2;
    cdd9:	83 e9 02             	sub    ecx,0x2
	  __num = __val & 7;
    cddc:	83 e2 07             	and    edx,0x7
	  __first[__pos - 1] = '0' + __num;
    cddf:	83 c2 30             	add    edx,0x30
    cde2:	88 54 3c 23          	mov    BYTE PTR [rsp+rdi*1+0x23],dl
      while (__val >= 0100)
    cde6:	83 fe 3f             	cmp    esi,0x3f
    cde9:	77 d5                	ja     cdc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
	__first[0] = '0' + __val;
    cdeb:	8d 46 30             	lea    eax,[rsi+0x30]
      if (__val >= 010)
    cdee:	83 fe 07             	cmp    esi,0x7
    cdf1:	0f 87 c9 00 00 00    	ja     cec0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x480>
    cdf7:	88 44 24 23          	mov    BYTE PTR [rsp+0x23],al
      __res.ptr = __first + __len;
    cdfb:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    ce00:	89 db                	mov    ebx,ebx
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    ce02:	48 8d 05 cf 83 00 00 	lea    rax,[rip+0x83cf]        # 151d8 <CSWTCH.1110+0xf8>
    ce09:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    ce0e:	4c 01 fb             	add    rbx,r15
    ce11:	b8 01 00 00 00       	mov    eax,0x1
	  char* __start = __buf + 3;
    ce16:	4c 89 fe             	mov    rsi,r15
	  if (_M_spec._M_alt && __base_prefix.size())
    ce19:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    ce1d:	0f 84 dd fc ff ff    	je     cb00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc0>
	      __start -= __base_prefix.size();
    ce23:	48 89 c6             	mov    rsi,rax
    ce26:	48 f7 de             	neg    rsi
    ce29:	e9 ad fc ff ff       	jmp    cadb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9b>
    ce2e:	66 90                	xchg   ax,ax
	*__dest = ' ';
    ce30:	c6 46 ff 20          	mov    BYTE PTR [rsi-0x1],0x20
    ce34:	e9 fb fe ff ff       	jmp    cd34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f4>
    ce39:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < (unsigned)__base) return __n;
    ce40:	83 fe 09             	cmp    esi,0x9
    ce43:	0f 86 80 01 00 00    	jbe    cfc9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x589>
    ce49:	89 f1                	mov    ecx,esi
      unsigned __n = 1;
    ce4b:	bf 01 00 00 00       	mov    edi,0x1
	  __value /= __b4;
    ce50:	49 b8 4b 59 86 38 d6 	movabs r8,0x346dc5d63886594b
    ce57:	c5 6d 34 
    ce5a:	eb 35                	jmp    ce91 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x451>
    ce5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    ce60:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    ce66:	0f 86 1c 01 00 00    	jbe    cf88 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x548>
	  if (__value < __b4) return __n + 3;
    ce6c:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    ce72:	0f 86 18 01 00 00    	jbe    cf90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x550>
	  __value /= __b4;
    ce78:	89 ca                	mov    edx,ecx
	  __n += 4;
    ce7a:	83 c7 04             	add    edi,0x4
	  __value /= __b4;
    ce7d:	48 89 d0             	mov    rax,rdx
    ce80:	49 f7 e0             	mul    r8
    ce83:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    ce87:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    ce8d:	76 0a                	jbe    ce99 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x459>
    ce8f:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    ce91:	83 f9 63             	cmp    ecx,0x63
    ce94:	77 ca                	ja     ce60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x420>
    ce96:	83 c7 01             	add    edi,0x1
      __res.ptr = __first + __len;
    ce99:	89 fb                	mov    ebx,edi
      if (__builtin_expect((__last - __first) < __len, 0))
    ce9b:	83 ff 20             	cmp    edi,0x20
    ce9e:	0f 87 05 01 00 00    	ja     cfa9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x569>
      __detail::__to_chars_10_impl(__first, __len, __val);
    cea4:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cea9:	89 f2                	mov    edx,esi
    ceab:	89 fe                	mov    esi,edi
    cead:	4c 89 ff             	mov    rdi,r15
      __res.ptr = __first + __len;
    ceb0:	4c 01 fb             	add    rbx,r15
      __detail::__to_chars_10_impl(__first, __len, __val);
    ceb3:	e8 f8 89 ff ff       	call   58b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
      return __res;
    ceb8:	e9 63 fe ff ff       	jmp    cd20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
    cebd:	0f 1f 00             	nop    DWORD PTR [rax]
	  auto const __num = __val & 7;
    cec0:	89 f0                	mov    eax,esi
    cec2:	83 e0 07             	and    eax,0x7
	  __first[1] = '0' + __num;
    cec5:	83 c0 30             	add    eax,0x30
    cec8:	88 44 24 24          	mov    BYTE PTR [rsp+0x24],al
	  __val >>= 3;
    cecc:	89 f0                	mov    eax,esi
    cece:	c1 e8 03             	shr    eax,0x3
	  __first[0] = '0' + __val;
    ced1:	83 c0 30             	add    eax,0x30
    ced4:	e9 1e ff ff ff       	jmp    cdf7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3b7>
    ced9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  __first[1] = __digits[__num];
    cee0:	89 f0                	mov    eax,esi
	  __val >>= 4;
    cee2:	c1 ee 04             	shr    esi,0x4
	  __first[1] = __digits[__num];
    cee5:	83 e0 0f             	and    eax,0xf
    cee8:	0f b6 44 04 10       	movzx  eax,BYTE PTR [rsp+rax*1+0x10]
    ceed:	88 44 24 24          	mov    BYTE PTR [rsp+0x24],al
	  __first[0] = __digits[__val];
    cef1:	0f b6 44 34 10       	movzx  eax,BYTE PTR [rsp+rsi*1+0x10]
    cef6:	e9 06 fe ff ff       	jmp    cd01 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c1>
    cefb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type == _Pres_X)
    cf00:	48 8d 05 1b 83 00 00 	lea    rax,[rip+0x831b]        # 15222 <CSWTCH.1110+0x142>
    cf07:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
    cf0c:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cf11:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cf16:	4d 89 fd             	mov    r13,r15
    cf19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  *__p = __builtin_toupper(*__p);
    cf20:	41 0f be 7d 00       	movsx  edi,BYTE PTR [r13+0x0]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    cf25:	49 83 c5 01          	add    r13,0x1
		  *__p = __builtin_toupper(*__p);
    cf29:	e8 22 64 ff ff       	call   3350 <toupper@plt>
    cf2e:	41 88 45 ff          	mov    BYTE PTR [r13-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    cf32:	49 39 dd             	cmp    r13,rbx
    cf35:	75 e9                	jne    cf20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cf37:	b8 02 00 00 00       	mov    eax,0x2
    cf3c:	e9 d5 fe ff ff       	jmp    ce16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d6>
    cf41:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      if (__value == 0)
    cf48:	45 85 f6             	test   r14d,r14d
    cf4b:	75 6b                	jne    cfb8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x578>
	  if (_M_spec._M_alt && __base_prefix.size())
    cf4d:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
	  *__first = '0';
    cf50:	c6 44 24 23 30       	mov    BYTE PTR [rsp+0x23],0x30
    cf55:	a8 10                	test   al,0x10
    cf57:	0f 84 05 fe ff ff    	je     cd62 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x322>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cf5d:	48 8d 05 c1 82 00 00 	lea    rax,[rip+0x82c1]        # 15225 <CSWTCH.1110+0x145>
	  if (_M_spec._M_alt && __base_prefix.size())
    cf64:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
    cf6b:	48 8d 5c 24 24       	lea    rbx,[rsp+0x24]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    cf70:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cf75:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cf7a:	b8 02 00 00 00       	mov    eax,0x2
    cf7f:	e9 57 fb ff ff       	jmp    cadb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9b>
    cf84:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    cf88:	83 c7 02             	add    edi,0x2
    cf8b:	e9 09 ff ff ff       	jmp    ce99 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x459>
	  if (__value < __b4) return __n + 3;
    cf90:	83 c7 03             	add    edi,0x3
    cf93:	e9 01 ff ff ff       	jmp    ce99 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x459>
    cf98:	48 8d 05 83 82 00 00 	lea    rax,[rip+0x8283]        # 15222 <CSWTCH.1110+0x142>
    cf9f:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cfa4:	e9 f1 fc ff ff       	jmp    cc9a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25a>
	  return __res;
    cfa9:	48 8d 5c 24 43       	lea    rbx,[rsp+0x43]
    cfae:	4c 8d 7c 24 23       	lea    r15,[rsp+0x23]
    cfb3:	e9 68 fd ff ff       	jmp    cd20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
    cfb8:	48 8d 05 66 82 00 00 	lea    rax,[rip+0x8266]        # 15225 <CSWTCH.1110+0x145>
    cfbf:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    cfc4:	e9 d1 fc ff ff       	jmp    cc9a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25a>
	  if (__value < (unsigned)__base) return __n;
    cfc9:	bb 01 00 00 00       	mov    ebx,0x1
    cfce:	bf 01 00 00 00       	mov    edi,0x1
    cfd3:	e9 cc fe ff ff       	jmp    cea4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x464>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    cfd8:	e8 73 61 ff ff       	call   3150 <abort@plt>
    cfdd:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    cfe4:	00 00 00 
    cfe7:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    cfee:	00 00 00 
    cff1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    cff8:	00 00 00 
    cffb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d000 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    d000:	41 57                	push   r15
    d002:	41 56                	push   r14
    d004:	41 55                	push   r13
    d006:	41 54                	push   r12
    d008:	49 89 d4             	mov    r12,rdx
    d00b:	55                   	push   rbp
    d00c:	48 89 fd             	mov    rbp,rdi
    d00f:	53                   	push   rbx
    d010:	48 83 ec 48          	sub    rsp,0x48
	  if (_M_spec._M_type == _Pres_c)
    d014:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    d018:	89 c1                	mov    ecx,eax
    d01a:	83 e1 78             	and    ecx,0x78
    d01d:	80 f9 38             	cmp    cl,0x38
    d020:	0f 84 8a 00 00 00    	je     d0b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb0>
	  switch (_M_spec._M_type)
    d026:	c0 e8 03             	shr    al,0x3
    d029:	83 e0 0f             	and    eax,0xf
    d02c:	3c 04                	cmp    al,0x4
    d02e:	0f 84 24 01 00 00    	je     d158 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x158>
    d034:	0f 87 56 01 00 00    	ja     d190 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x190>
    d03a:	3c 01                	cmp    al,0x1
    d03c:	0f 86 b6 00 00 00    	jbe    d0f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf8>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    d042:	80 f9 10             	cmp    cl,0x10
    d045:	4c 8d 2d d0 81 00 00 	lea    r13,[rip+0x81d0]        # 1521c <CSWTCH.1110+0x13c>
    d04c:	48 8d 05 cc 81 00 00 	lea    rax,[rip+0x81cc]        # 1521f <CSWTCH.1110+0x13f>
    d053:	4c 0f 45 e8          	cmovne r13,rax
      if (__value == 0)
    d057:	85 f6                	test   esi,esi
    d059:	0f 85 d1 02 00 00    	jne    d330 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x330>
    d05f:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    d064:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d069:	b8 30 00 00 00       	mov    eax,0x30
      __first[0] = '1';
    d06e:	88 44 24 13          	mov    BYTE PTR [rsp+0x13],al
	  if (_M_spec._M_alt && __base_prefix.size())
    d072:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
    d076:	a8 10                	test   al,0x10
    d078:	0f 84 e3 01 00 00    	je     d261 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x261>
    d07e:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d085:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    d08a:	4c 01 f6             	add    rsi,r14
	      __builtin_memcpy(__start, __base_prefix.data(),
    d08d:	89 d7                	mov    edi,edx
    d08f:	85 d2                	test   edx,edx
    d091:	0f 84 7f 00 00 00    	je     d116 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    d097:	31 d2                	xor    edx,edx
    d099:	89 d1                	mov    ecx,edx
    d09b:	83 c2 01             	add    edx,0x1
    d09e:	45 0f b6 44 0d 00    	movzx  r8d,BYTE PTR [r13+rcx*1+0x0]
    d0a4:	44 88 04 0e          	mov    BYTE PTR [rsi+rcx*1],r8b
    d0a8:	39 fa                	cmp    edx,edi
    d0aa:	72 ed                	jb     d099 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x99>
    d0ac:	eb 68                	jmp    d116 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    d0ae:	66 90                	xchg   ax,ax
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    d0b0:	83 fe 7f             	cmp    esi,0x7f
    d0b3:	0f 87 5d 04 00 00    	ja     d516 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x516>
    d0b9:	48 8d 4c 24 10       	lea    rcx,[rsp+0x10]
    d0be:	b8 01 00 00 00       	mov    eax,0x1
    d0c3:	40 88 74 24 10       	mov    BYTE PTR [rsp+0x10],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    d0c8:	49 89 e8             	mov    r8,rbp
    d0cb:	48 89 ce             	mov    rsi,rcx
    d0ce:	48 89 c7             	mov    rdi,rax
    d0d1:	4c 89 e1             	mov    rcx,r12
    d0d4:	ba 01 00 00 00       	mov    edx,0x1
    d0d9:	41 b9 01 00 00 00    	mov    r9d,0x1
    d0df:	e8 ac ca ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    d0e4:	48 83 c4 48          	add    rsp,0x48
    d0e8:	5b                   	pop    rbx
    d0e9:	5d                   	pop    rbp
    d0ea:	41 5c                	pop    r12
    d0ec:	41 5d                	pop    r13
    d0ee:	41 5e                	pop    r14
    d0f0:	41 5f                	pop    r15
    d0f2:	c3                   	ret
    d0f3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      if (__value == 0)
    d0f8:	85 f6                	test   esi,esi
    d0fa:	0f 85 b0 02 00 00    	jne    d3b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3b0>
	  *__first = '0';
    d100:	c6 44 24 13 30       	mov    BYTE PTR [rsp+0x13],0x30
    d105:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    d10a:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d10f:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  char* __start = __buf + 3;
    d113:	4c 89 f6             	mov    rsi,r14
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d116:	c0 e8 02             	shr    al,0x2
    d119:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    d11c:	83 f8 01             	cmp    eax,0x1
    d11f:	74 5f                	je     d180 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x180>
      else if (__sign == _Sign_space)
    d121:	83 f8 03             	cmp    eax,0x3
    d124:	0f 84 9e 00 00 00    	je     d1c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c8>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d12a:	48 29 f3             	sub    rbx,rsi
			       __start_digits - __start, __fc);
    d12d:	4c 89 f1             	mov    rcx,r14
    d130:	48 89 f2             	mov    rdx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d133:	4d 89 e0             	mov    r8,r12
			       __start_digits - __start, __fc);
    d136:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d139:	48 89 ef             	mov    rdi,rbp
    d13c:	48 89 de             	mov    rsi,rbx
    d13f:	e8 0c ec ff ff       	call   bd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
	}
    d144:	48 83 c4 48          	add    rsp,0x48
    d148:	5b                   	pop    rbx
    d149:	5d                   	pop    rbp
    d14a:	41 5c                	pop    r12
    d14c:	41 5d                	pop    r13
    d14e:	41 5e                	pop    r14
    d150:	41 5f                	pop    r15
    d152:	c3                   	ret
    d153:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (__i != 0)
    d158:	85 f6                	test   esi,esi
    d15a:	0f 85 10 01 00 00    	jne    d270 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x270>
	  char* __start = __buf + 3;
    d160:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d165:	c6 44 24 13 30       	mov    BYTE PTR [rsp+0x13],0x30
    d16a:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
    d16d:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    d172:	4c 89 f6             	mov    rsi,r14
    d175:	eb 9f                	jmp    d116 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    d177:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d17e:	00 00 
    d180:	b8 2b 00 00 00       	mov    eax,0x2b
	*__dest = '+';
    d185:	88 46 ff             	mov    BYTE PTR [rsi-0x1],al
    d188:	48 83 ee 01          	sub    rsi,0x1
    d18c:	eb 9c                	jmp    d12a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x12a>
    d18e:	66 90                	xchg   ax,ax
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d190:	80 f9 28             	cmp    cl,0x28
    d193:	0f 84 97 02 00 00    	je     d430 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x430>
      if (__value == 0)
    d199:	85 f6                	test   esi,esi
    d19b:	75 33                	jne    d1d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
	  *__first = '0';
    d19d:	c6 44 24 13 30       	mov    BYTE PTR [rsp+0x13],0x30
	      if (_M_spec._M_type == _Pres_X)
    d1a2:	80 f9 30             	cmp    cl,0x30
    d1a5:	0f 84 f5 02 00 00    	je     d4a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
    d1ab:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    d1b0:	4c 8d 2d 6b 80 00 00 	lea    r13,[rip+0x806b]        # 15222 <CSWTCH.1110+0x142>
    d1b7:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d1bc:	e9 94 00 00 00       	jmp    d255 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x255>
    d1c1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d1c8:	b8 20 00 00 00       	mov    eax,0x20
    d1cd:	eb b6                	jmp    d185 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x185>
    d1cf:	90                   	nop
    d1d0:	4c 8d 2d 4b 80 00 00 	lea    r13,[rip+0x804b]        # 15222 <CSWTCH.1110+0x142>
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    d1d7:	0f bd c6             	bsr    eax,esi
      constexpr char __digits[] = {
    d1da:	66 0f 6f 05 8e b6 00 	movdqa xmm0,XMMWORD PTR [rip+0xb68e]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    d1e1:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    d1e2:	8d 58 04             	lea    ebx,[rax+0x4]
    d1e5:	c1 eb 02             	shr    ebx,0x2
      constexpr char __digits[] = {
    d1e8:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
      unsigned __pos = __len - 1;
    d1ec:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0x100)
    d1ef:	81 fe ff 00 00 00    	cmp    esi,0xff
    d1f5:	76 3a                	jbe    d231 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x231>
    d1f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d1fe:	00 00 
	  __first[__pos] = __digits[__num];
    d200:	89 f7                	mov    edi,esi
    d202:	89 c2                	mov    edx,eax
    d204:	83 e7 0f             	and    edi,0xf
    d207:	0f b6 3c 3c          	movzx  edi,BYTE PTR [rsp+rdi*1]
    d20b:	40 88 7c 14 13       	mov    BYTE PTR [rsp+rdx*1+0x13],dil
	  __val >>= 4;
    d210:	89 f2                	mov    edx,esi
	  __first[__pos - 1] = __digits[__num];
    d212:	8d 78 ff             	lea    edi,[rax-0x1]
	  __val >>= 4;
    d215:	c1 ee 08             	shr    esi,0x8
	  __val >>= 4;
    d218:	c1 ea 04             	shr    edx,0x4
	  __pos -= 2;
    d21b:	83 e8 02             	sub    eax,0x2
	  __first[__pos - 1] = __digits[__num];
    d21e:	83 e2 0f             	and    edx,0xf
    d221:	0f b6 14 14          	movzx  edx,BYTE PTR [rsp+rdx*1]
    d225:	88 54 3c 13          	mov    BYTE PTR [rsp+rdi*1+0x13],dl
      while (__val >= 0x100)
    d229:	81 fe ff 00 00 00    	cmp    esi,0xff
    d22f:	77 cf                	ja     d200 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
      if (__val >= 0x10)
    d231:	83 fe 0f             	cmp    esi,0xf
    d234:	0f 87 16 02 00 00    	ja     d450 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x450>
	__first[0] = __digits[__val];
    d23a:	89 f6                	mov    esi,esi
    d23c:	0f b6 04 34          	movzx  eax,BYTE PTR [rsp+rsi*1]
      __res.ptr = __first + __len;
    d240:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d245:	88 44 24 13          	mov    BYTE PTR [rsp+0x13],al
    d249:	4c 01 f3             	add    rbx,r14
    d24c:	80 f9 30             	cmp    cl,0x30
    d24f:	0f 84 5c 02 00 00    	je     d4b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b1>
	  if (_M_spec._M_alt && __base_prefix.size())
    d255:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
    d259:	a8 10                	test   al,0x10
    d25b:	0f 85 1d fe ff ff    	jne    d07e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e>
	  char* __start = __buf + 3;
    d261:	4c 89 f6             	mov    rsi,r14
    d264:	e9 ad fe ff ff       	jmp    d116 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    d269:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	__len = (__to_chars_len_2(__val) + 2) / 3;
    d270:	0f bd c6             	bsr    eax,esi
    d273:	8d 58 03             	lea    ebx,[rax+0x3]
    d276:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    d27b:	48 0f af d8          	imul   rbx,rax
    d27f:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    d283:	8d 4b ff             	lea    ecx,[rbx-0x1]
      while (__val >= 0100)
    d286:	83 fe 3f             	cmp    esi,0x3f
    d289:	76 60                	jbe    d2eb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2eb>
    d28b:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d292:	00 00 00 00 
    d296:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d29d:	00 00 00 00 
    d2a1:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d2a8:	00 00 00 00 
    d2ac:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d2b3:	00 00 00 00 
    d2b7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d2be:	00 00 
	  auto __num = __val & 7;
    d2c0:	89 f2                	mov    edx,esi
	  __first[__pos] = '0' + __num;
    d2c2:	89 cf                	mov    edi,ecx
	  auto __num = __val & 7;
    d2c4:	83 e2 07             	and    edx,0x7
	  __first[__pos] = '0' + __num;
    d2c7:	83 c2 30             	add    edx,0x30
    d2ca:	88 54 3c 13          	mov    BYTE PTR [rsp+rdi*1+0x13],dl
	  __val >>= 3;
    d2ce:	89 f2                	mov    edx,esi
	  __first[__pos - 1] = '0' + __num;
    d2d0:	8d 79 ff             	lea    edi,[rcx-0x1]
	  __val >>= 3;
    d2d3:	c1 ee 06             	shr    esi,0x6
	  __val >>= 3;
    d2d6:	c1 ea 03             	shr    edx,0x3
	  __pos -= 2;
    d2d9:	83 e9 02             	sub    ecx,0x2
	  __num = __val & 7;
    d2dc:	83 e2 07             	and    edx,0x7
	  __first[__pos - 1] = '0' + __num;
    d2df:	83 c2 30             	add    edx,0x30
    d2e2:	88 54 3c 13          	mov    BYTE PTR [rsp+rdi*1+0x13],dl
      while (__val >= 0100)
    d2e6:	83 fe 3f             	cmp    esi,0x3f
    d2e9:	77 d5                	ja     d2c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c0>
	__first[0] = '0' + __val;
    d2eb:	8d 46 30             	lea    eax,[rsi+0x30]
      if (__val >= 010)
    d2ee:	83 fe 07             	cmp    esi,0x7
    d2f1:	0f 87 79 01 00 00    	ja     d470 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x470>
    d2f7:	88 44 24 13          	mov    BYTE PTR [rsp+0x13],al
      __res.ptr = __first + __len;
    d2fb:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d300:	89 db                	mov    ebx,ebx
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    d302:	ba 01 00 00 00       	mov    edx,0x1
    d307:	4c 01 f3             	add    rbx,r14
    d30a:	4c 8d 2d c7 7e 00 00 	lea    r13,[rip+0x7ec7]        # 151d8 <CSWTCH.1110+0xf8>
	  if (_M_spec._M_alt && __base_prefix.size())
    d311:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  char* __start = __buf + 3;
    d315:	4c 89 f6             	mov    rsi,r14
	  if (_M_spec._M_alt && __base_prefix.size())
    d318:	a8 10                	test   al,0x10
    d31a:	0f 84 f6 fd ff ff    	je     d116 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
	      __start -= __base_prefix.size();
    d320:	48 89 d6             	mov    rsi,rdx
    d323:	48 f7 de             	neg    rsi
    d326:	e9 5f fd ff ff       	jmp    d08a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8a>
    d32b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  return __builtin_clz(__x) - __diff;
    d330:	44 0f bd c6          	bsr    r8d,esi
      return _Nd - std::__countl_zero(__x);
    d334:	bb 20 00 00 00       	mov    ebx,0x20
      unsigned __pos = __len - 1;
    d339:	ba 1f 00 00 00       	mov    edx,0x1f
	  return __builtin_clz(__x) - __diff;
    d33e:	41 83 f0 1f          	xor    r8d,0x1f
      return _Nd - std::__countl_zero(__x);
    d342:	44 29 c3             	sub    ebx,r8d
      while (__pos)
    d345:	44 29 c2             	sub    edx,r8d
    d348:	74 4c                	je     d396 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x396>
    d34a:	89 d1                	mov    ecx,edx
    d34c:	b8 1e 00 00 00       	mov    eax,0x1e
    d351:	48 8d 7c 0c 0f       	lea    rdi,[rsp+rcx*1+0xf]
    d356:	44 29 c0             	sub    eax,r8d
    d359:	48 8d 54 0c 10       	lea    rdx,[rsp+rcx*1+0x10]
    d35e:	48 29 c7             	sub    rdi,rax
    d361:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d368:	00 00 00 00 
    d36c:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d373:	00 00 00 00 
    d377:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d37e:	00 00 
	  __first[__pos--] = '0' + (__val & 1);
    d380:	89 f1                	mov    ecx,esi
      while (__pos)
    d382:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    d386:	d1 ee                	shr    esi,1
	  __first[__pos--] = '0' + (__val & 1);
    d388:	83 e1 01             	and    ecx,0x1
    d38b:	83 c1 30             	add    ecx,0x30
    d38e:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
      while (__pos)
    d391:	48 39 d7             	cmp    rdi,rdx
    d394:	75 ea                	jne    d380 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
      __res.ptr = __first + __len;
    d396:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d39b:	48 63 db             	movsxd rbx,ebx
    d39e:	b8 31 00 00 00       	mov    eax,0x31
    d3a3:	4c 01 f3             	add    rbx,r14
    d3a6:	e9 c3 fc ff ff       	jmp    d06e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6e>
    d3ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    d3b0:	83 fe 09             	cmp    esi,0x9
    d3b3:	0f 86 4e 01 00 00    	jbe    d507 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x507>
    d3b9:	89 f1                	mov    ecx,esi
      unsigned __n = 1;
    d3bb:	bf 01 00 00 00       	mov    edi,0x1
	  __value /= __b4;
    d3c0:	49 b8 4b 59 86 38 d6 	movabs r8,0x346dc5d63886594b
    d3c7:	c5 6d 34 
    d3ca:	eb 35                	jmp    d401 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x401>
    d3cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    d3d0:	81 f9 e7 03 00 00    	cmp    ecx,0x3e7
    d3d6:	0f 86 04 01 00 00    	jbe    d4e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	  if (__value < __b4) return __n + 3;
    d3dc:	81 f9 0f 27 00 00    	cmp    ecx,0x270f
    d3e2:	0f 86 08 01 00 00    	jbe    d4f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f0>
	  __value /= __b4;
    d3e8:	89 ca                	mov    edx,ecx
	  __n += 4;
    d3ea:	83 c7 04             	add    edi,0x4
	  __value /= __b4;
    d3ed:	48 89 d0             	mov    rax,rdx
    d3f0:	49 f7 e0             	mul    r8
    d3f3:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    d3f7:	81 f9 9f 86 01 00    	cmp    ecx,0x1869f
    d3fd:	76 0a                	jbe    d409 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x409>
    d3ff:	89 d1                	mov    ecx,edx
	  if (__value < __b2) return __n + 1;
    d401:	83 f9 63             	cmp    ecx,0x63
    d404:	77 ca                	ja     d3d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d0>
    d406:	83 c7 01             	add    edi,0x1
      __res.ptr = __first + __len;
    d409:	89 fb                	mov    ebx,edi
      if (__builtin_expect((__last - __first) < __len, 0))
    d40b:	83 ff 20             	cmp    edi,0x20
    d40e:	0f 87 e4 00 00 00    	ja     d4f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f8>
      __detail::__to_chars_10_impl(__first, __len, __val);
    d414:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d419:	89 f2                	mov    edx,esi
    d41b:	89 fe                	mov    esi,edi
    d41d:	4c 89 f7             	mov    rdi,r14
      __res.ptr = __first + __len;
    d420:	4c 01 f3             	add    rbx,r14
      __detail::__to_chars_10_impl(__first, __len, __val);
    d423:	e8 88 84 ff ff       	call   58b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
      return __res;
    d428:	e9 e2 fc ff ff       	jmp    d10f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x10f>
    d42d:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__value == 0)
    d430:	85 f6                	test   esi,esi
    d432:	75 5c                	jne    d490 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x490>
	  *__first = '0';
    d434:	c6 44 24 13 30       	mov    BYTE PTR [rsp+0x13],0x30
    d439:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    d43e:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d443:	4c 8d 2d db 7d 00 00 	lea    r13,[rip+0x7ddb]        # 15225 <CSWTCH.1110+0x145>
    d44a:	e9 06 fe ff ff       	jmp    d255 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x255>
    d44f:	90                   	nop
	  __first[1] = __digits[__num];
    d450:	89 f0                	mov    eax,esi
	  __val >>= 4;
    d452:	c1 ee 04             	shr    esi,0x4
	  __first[1] = __digits[__num];
    d455:	83 e0 0f             	and    eax,0xf
    d458:	0f b6 04 04          	movzx  eax,BYTE PTR [rsp+rax*1]
    d45c:	88 44 24 14          	mov    BYTE PTR [rsp+0x14],al
	  __first[0] = __digits[__val];
    d460:	0f b6 04 34          	movzx  eax,BYTE PTR [rsp+rsi*1]
    d464:	e9 d7 fd ff ff       	jmp    d240 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
    d469:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  auto const __num = __val & 7;
    d470:	89 f0                	mov    eax,esi
    d472:	83 e0 07             	and    eax,0x7
	  __first[1] = '0' + __num;
    d475:	83 c0 30             	add    eax,0x30
    d478:	88 44 24 14          	mov    BYTE PTR [rsp+0x14],al
	  __val >>= 3;
    d47c:	89 f0                	mov    eax,esi
    d47e:	c1 e8 03             	shr    eax,0x3
	  __first[0] = '0' + __val;
    d481:	83 c0 30             	add    eax,0x30
    d484:	e9 6e fe ff ff       	jmp    d2f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f7>
    d489:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d490:	4c 8d 2d 8e 7d 00 00 	lea    r13,[rip+0x7d8e]        # 15225 <CSWTCH.1110+0x145>
    d497:	e9 3b fd ff ff       	jmp    d1d7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d7>
    d49c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_M_spec._M_type == _Pres_X)
    d4a0:	4c 8d 2d 7b 7d 00 00 	lea    r13,[rip+0x7d7b]        # 15222 <CSWTCH.1110+0x142>
    d4a7:	48 8d 5c 24 14       	lea    rbx,[rsp+0x14]
    d4ac:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d4b1:	4d 89 f7             	mov    r15,r14
    d4b4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d4bb:	00 00 00 00 
    d4bf:	90                   	nop
		  *__p = __builtin_toupper(*__p);
    d4c0:	41 0f be 3f          	movsx  edi,BYTE PTR [r15]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d4c4:	49 83 c7 01          	add    r15,0x1
		  *__p = __builtin_toupper(*__p);
    d4c8:	e8 83 5e ff ff       	call   3350 <toupper@plt>
    d4cd:	41 88 47 ff          	mov    BYTE PTR [r15-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d4d1:	49 39 df             	cmp    r15,rbx
    d4d4:	75 ea                	jne    d4c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c0>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d4d6:	ba 02 00 00 00       	mov    edx,0x2
    d4db:	e9 31 fe ff ff       	jmp    d311 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x311>
	  if (__value < __b3) return __n + 2;
    d4e0:	83 c7 02             	add    edi,0x2
    d4e3:	e9 21 ff ff ff       	jmp    d409 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x409>
    d4e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    d4ef:	00 
	  if (__value < __b4) return __n + 3;
    d4f0:	83 c7 03             	add    edi,0x3
    d4f3:	e9 11 ff ff ff       	jmp    d409 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x409>
	  return __res;
    d4f8:	48 8d 5c 24 33       	lea    rbx,[rsp+0x33]
    d4fd:	4c 8d 74 24 13       	lea    r14,[rsp+0x13]
    d502:	e9 08 fc ff ff       	jmp    d10f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x10f>
	  if (__value < (unsigned)__base) return __n;
    d507:	bb 01 00 00 00       	mov    ebx,0x1
    d50c:	bf 01 00 00 00       	mov    edi,0x1
    d511:	e9 fe fe ff ff       	jmp    d414 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x414>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    d516:	e8 35 5c ff ff       	call   3150 <abort@plt>
    d51b:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d522:	00 00 00 
    d525:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d52c:	00 00 00 
    d52f:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d536:	00 00 00 
    d539:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000000d540 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    d540:	41 57                	push   r15
    d542:	41 56                	push   r14
    d544:	41 55                	push   r13
    d546:	41 54                	push   r12
    d548:	49 89 d4             	mov    r12,rdx
    d54b:	55                   	push   rbp
    d54c:	48 89 fd             	mov    rbp,rdi
    d54f:	53                   	push   rbx
    d550:	48 89 f3             	mov    rbx,rsi
    d553:	48 81 ec 28 01 00 00 	sub    rsp,0x128
	  if (_M_spec._M_type == _Pres_c)
    d55a:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    d55e:	41 89 c7             	mov    r15d,eax
    d561:	41 83 e7 78          	and    r15d,0x78
    d565:	41 80 ff 38          	cmp    r15b,0x38
    d569:	0f 84 41 01 00 00    	je     d6b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x170>
	  switch (_M_spec._M_type)
    d56f:	c0 e8 03             	shr    al,0x3
    d572:	83 e0 0f             	and    eax,0xf
	  if (__i < 0)
    d575:	48 85 f6             	test   rsi,rsi
    d578:	0f 88 8a 00 00 00    	js     d608 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc8>
	  switch (_M_spec._M_type)
    d57e:	3c 04                	cmp    al,0x4
    d580:	0f 84 ca 02 00 00    	je     d850 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
    d586:	0f 87 74 01 00 00    	ja     d700 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c0>
    d58c:	3c 01                	cmp    al,0x1
    d58e:	0f 86 8c 02 00 00    	jbe    d820 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    d594:	41 80 ff 10          	cmp    r15b,0x10
    d598:	48 8d 3d 7d 7c 00 00 	lea    rdi,[rip+0x7c7d]        # 1521c <CSWTCH.1110+0x13c>
    d59f:	48 8d 05 79 7c 00 00 	lea    rax,[rip+0x7c79]        # 1521f <CSWTCH.1110+0x13f>
    d5a6:	48 0f 45 f8          	cmovne rdi,rax
      if (__value == 0)
    d5aa:	48 85 f6             	test   rsi,rsi
    d5ad:	0f 85 84 00 00 00    	jne    d637 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf7>
    d5b3:	4c 8d 6c 24 04       	lea    r13,[rsp+0x4]
    d5b8:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d5bd:	b8 30 00 00 00       	mov    eax,0x30
      __first[0] = '1';
    d5c2:	88 44 24 03          	mov    BYTE PTR [rsp+0x3],al
	  if (_M_spec._M_alt && __base_prefix.size())
    d5c6:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    d5ca:	0f 84 70 01 00 00    	je     d740 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
    d5d0:	48 c7 c0 fe ff ff ff 	mov    rax,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d5d7:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    d5dc:	4c 01 f0             	add    rax,r14
	      __builtin_memcpy(__start, __base_prefix.data(),
    d5df:	89 d6                	mov    esi,edx
    d5e1:	85 d2                	test   edx,edx
    d5e3:	0f 84 5a 01 00 00    	je     d743 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x203>
    d5e9:	31 d2                	xor    edx,edx
    d5eb:	89 d1                	mov    ecx,edx
    d5ed:	83 c2 01             	add    edx,0x1
    d5f0:	44 0f b6 04 0f       	movzx  r8d,BYTE PTR [rdi+rcx*1]
    d5f5:	44 88 04 08          	mov    BYTE PTR [rax+rcx*1],r8b
    d5f9:	39 f2                	cmp    edx,esi
    d5fb:	72 ee                	jb     d5eb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xab>
    d5fd:	e9 41 01 00 00       	jmp    d743 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x203>
    d602:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    d608:	48 f7 de             	neg    rsi
	  switch (_M_spec._M_type)
    d60b:	3c 04                	cmp    al,0x4
    d60d:	0f 84 4d 02 00 00    	je     d860 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x320>
    d613:	0f 87 77 01 00 00    	ja     d790 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x250>
    d619:	3c 01                	cmp    al,0x1
    d61b:	0f 86 df 02 00 00    	jbe    d900 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    d621:	41 80 ff 10          	cmp    r15b,0x10
    d625:	48 8d 3d f3 7b 00 00 	lea    rdi,[rip+0x7bf3]        # 1521f <CSWTCH.1110+0x13f>
    d62c:	48 8d 05 e9 7b 00 00 	lea    rax,[rip+0x7be9]        # 1521c <CSWTCH.1110+0x13c>
    d633:	48 0f 44 f8          	cmove  rdi,rax
	  return __builtin_clzl(__x) - __diff;
    d637:	4c 0f bd ce          	bsr    r9,rsi
      return _Nd - std::__countl_zero(__x);
    d63b:	41 bd 40 00 00 00    	mov    r13d,0x40
      unsigned __pos = __len - 1;
    d641:	b8 3f 00 00 00       	mov    eax,0x3f
	  return __builtin_clzl(__x) - __diff;
    d646:	49 83 f1 3f          	xor    r9,0x3f
      return _Nd - std::__countl_zero(__x);
    d64a:	45 29 cd             	sub    r13d,r9d
      while (__pos)
    d64d:	44 29 c8             	sub    eax,r9d
    d650:	74 45                	je     d697 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x157>
    d652:	89 c2                	mov    edx,eax
    d654:	4c 8d 44 14 ff       	lea    r8,[rsp+rdx*1-0x1]
    d659:	48 8d 04 14          	lea    rax,[rsp+rdx*1]
    d65d:	ba 3e 00 00 00       	mov    edx,0x3e
    d662:	44 29 ca             	sub    edx,r9d
    d665:	49 29 d0             	sub    r8,rdx
    d668:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d66f:	00 00 00 00 
    d673:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d67a:	00 00 00 00 
    d67e:	66 90                	xchg   ax,ax
	  __first[__pos--] = '0' + (__val & 1);
    d680:	89 f2                	mov    edx,esi
      while (__pos)
    d682:	48 83 e8 01          	sub    rax,0x1
	  __val >>= 1;
    d686:	48 d1 ee             	shr    rsi,1
	  __first[__pos--] = '0' + (__val & 1);
    d689:	83 e2 01             	and    edx,0x1
    d68c:	83 c2 30             	add    edx,0x30
    d68f:	88 50 04             	mov    BYTE PTR [rax+0x4],dl
      while (__pos)
    d692:	4c 39 c0             	cmp    rax,r8
    d695:	75 e9                	jne    d680 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x140>
      __res.ptr = __first + __len;
    d697:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d69c:	4d 63 ed             	movsxd r13,r13d
    d69f:	b8 31 00 00 00       	mov    eax,0x31
    d6a4:	4d 01 f5             	add    r13,r14
    d6a7:	e9 16 ff ff ff       	jmp    d5c2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x82>
    d6ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_Traits::__min <= __i && __i <= _Traits::__max)
    d6b0:	48 8d 86 80 00 00 00 	lea    rax,[rsi+0x80]
    d6b7:	48 3d ff 00 00 00    	cmp    rax,0xff
    d6bd:	0f 87 24 05 00 00    	ja     dbe7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6a7>
    d6c3:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    d6c8:	b8 01 00 00 00       	mov    eax,0x1
    d6cd:	40 88 74 24 50       	mov    BYTE PTR [rsp+0x50],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    d6d2:	41 b9 01 00 00 00    	mov    r9d,0x1
    d6d8:	48 89 ce             	mov    rsi,rcx
    d6db:	48 89 c7             	mov    rdi,rax
    d6de:	49 89 e8             	mov    r8,rbp
    d6e1:	4c 89 e1             	mov    rcx,r12
    d6e4:	ba 01 00 00 00       	mov    edx,0x1
    d6e9:	e8 a2 c4 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    d6ee:	48 81 c4 28 01 00 00 	add    rsp,0x128
    d6f5:	5b                   	pop    rbx
    d6f6:	5d                   	pop    rbp
    d6f7:	41 5c                	pop    r12
    d6f9:	41 5d                	pop    r13
    d6fb:	41 5e                	pop    r14
    d6fd:	41 5f                	pop    r15
    d6ff:	c3                   	ret
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d700:	41 80 ff 28          	cmp    r15b,0x28
    d704:	0f 84 46 04 00 00    	je     db50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x610>
      if (__value == 0)
    d70a:	48 85 f6             	test   rsi,rsi
    d70d:	0f 85 87 00 00 00    	jne    d79a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25a>
	  *__first = '0';
    d713:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
	      if (_M_spec._M_type == _Pres_X)
    d718:	4c 8d 6c 24 04       	lea    r13,[rsp+0x4]
    d71d:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d722:	48 8d 3d f9 7a 00 00 	lea    rdi,[rip+0x7af9]        # 15222 <CSWTCH.1110+0x142>
    d729:	41 80 ff 30          	cmp    r15b,0x30
    d72d:	0f 84 fd 03 00 00    	je     db30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5f0>
	  if (_M_spec._M_alt && __base_prefix.size())
    d733:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    d737:	0f 85 93 fe ff ff    	jne    d5d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x90>
    d73d:	0f 1f 00             	nop    DWORD PTR [rax]
	  char* __start = __buf + 3;
    d740:	4c 89 f0             	mov    rax,r14
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d743:	48 8d 48 ff          	lea    rcx,[rax-0x1]
      if (__i < 0)
    d747:	48 85 db             	test   rbx,rbx
    d74a:	0f 88 b0 00 00 00    	js     d800 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c0>
    d750:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d754:	c0 ea 02             	shr    dl,0x2
    d757:	83 e2 03             	and    edx,0x3
      else if (__sign == _Sign_plus)
    d75a:	83 fa 01             	cmp    edx,0x1
    d75d:	0f 84 ad 00 00 00    	je     d810 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d0>
      else if (__sign == _Sign_space)
    d763:	83 fa 03             	cmp    edx,0x3
    d766:	0f 84 84 01 00 00    	je     d8f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3b0>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d76c:	49 29 c5             	sub    r13,rax
			       __start_digits - __start, __fc);
    d76f:	49 29 c6             	sub    r14,rax
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    d772:	48 89 c2             	mov    rdx,rax
    d775:	4d 89 e0             	mov    r8,r12
    d778:	4c 89 ee             	mov    rsi,r13
    d77b:	4c 89 f1             	mov    rcx,r14
    d77e:	48 89 ef             	mov    rdi,rbp
    d781:	e8 ca e5 ff ff       	call   bd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    d786:	e9 63 ff ff ff       	jmp    d6ee <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1ae>
    d78b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d790:	41 80 ff 28          	cmp    r15b,0x28
    d794:	0f 84 6e 03 00 00    	je     db08 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5c8>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    d79a:	48 8d 44 24 43       	lea    rax,[rsp+0x43]
    d79f:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d7a4:	48 89 f2             	mov    rdx,rsi
    d7a7:	4c 89 f7             	mov    rdi,r14
    d7aa:	48 89 c6             	mov    rsi,rax
    d7ad:	e8 8e 83 ff ff       	call   5b40 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
    d7b2:	49 89 c5             	mov    r13,rax
	      if (_M_spec._M_type == _Pres_X)
    d7b5:	41 80 ff 30          	cmp    r15b,0x30
    d7b9:	0f 85 81 03 00 00    	jne    db40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d7bf:	4c 39 f0             	cmp    rax,r14
    d7c2:	74 22                	je     d7e6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2a6>
	      if (_M_spec._M_type == _Pres_X)
    d7c4:	4d 89 f7             	mov    r15,r14
    d7c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d7ce:	00 00 
		  *__p = __builtin_toupper(*__p);
    d7d0:	41 0f be 3f          	movsx  edi,BYTE PTR [r15]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d7d4:	49 83 c7 01          	add    r15,0x1
		  *__p = __builtin_toupper(*__p);
    d7d8:	e8 73 5b ff ff       	call   3350 <toupper@plt>
    d7dd:	41 88 47 ff          	mov    BYTE PTR [r15-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    d7e1:	4d 39 fd             	cmp    r13,r15
    d7e4:	75 ea                	jne    d7d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x290>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    d7e6:	48 8d 3d 35 7a 00 00 	lea    rdi,[rip+0x7a35]        # 15222 <CSWTCH.1110+0x142>
    d7ed:	ba 02 00 00 00       	mov    edx,0x2
    d7f2:	e9 e1 00 00 00       	jmp    d8d8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x398>
    d7f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d7fe:	00 00 
	*__dest = '-';
    d800:	c6 40 ff 2d          	mov    BYTE PTR [rax-0x1],0x2d
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d804:	48 89 c8             	mov    rax,rcx
    d807:	e9 60 ff ff ff       	jmp    d76c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x22c>
    d80c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	*__dest = '+';
    d810:	c6 40 ff 2b          	mov    BYTE PTR [rax-0x1],0x2b
    d814:	eb ee                	jmp    d804 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c4>
    d816:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    d81d:	00 00 00 
      if (__value == 0)
    d820:	48 85 f6             	test   rsi,rsi
    d823:	0f 85 d7 00 00 00    	jne    d900 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c0>
      __glibcxx_assert(2 <= __base && __base <= 36);
    d829:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    d82e:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
	  char* __start = __buf + 3;
    d832:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d837:	4c 8d 6c 24 04       	lea    r13,[rsp+0x4]
    d83c:	4c 89 f0             	mov    rax,r14
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    d83f:	48 8d 4c 24 02       	lea    rcx,[rsp+0x2]
    d844:	e9 0b ff ff ff       	jmp    d754 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x214>
    d849:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    d850:	48 85 f6             	test   rsi,rsi
    d853:	74 d4                	je     d829 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e9>
    d855:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d85c:	00 00 00 00 
	__len = (__to_chars_len_2(__val) + 2) / 3;
    d860:	48 0f bd c6          	bsr    rax,rsi
    d864:	44 8d 68 03          	lea    r13d,[rax+0x3]
    d868:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    d86d:	4c 0f af e8          	imul   r13,rax
    d871:	49 c1 ed 21          	shr    r13,0x21
      unsigned __pos = __len - 1;
    d875:	41 8d 55 ff          	lea    edx,[r13-0x1]
      while (__val >= 0100)
    d879:	48 83 fe 3f          	cmp    rsi,0x3f
    d87d:	76 31                	jbe    d8b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x370>
    d87f:	90                   	nop
	  auto __num = __val & 7;
    d880:	48 89 f0             	mov    rax,rsi
	  __first[__pos] = '0' + __num;
    d883:	89 d7                	mov    edi,edx
	  auto __num = __val & 7;
    d885:	83 e0 07             	and    eax,0x7
	  __first[__pos] = '0' + __num;
    d888:	83 c0 30             	add    eax,0x30
    d88b:	88 44 3c 03          	mov    BYTE PTR [rsp+rdi*1+0x3],al
	  __val >>= 3;
    d88f:	48 89 f0             	mov    rax,rsi
	  __first[__pos - 1] = '0' + __num;
    d892:	8d 7a ff             	lea    edi,[rdx-0x1]
	  __val >>= 3;
    d895:	48 c1 ee 06          	shr    rsi,0x6
	  __val >>= 3;
    d899:	48 c1 e8 03          	shr    rax,0x3
	  __pos -= 2;
    d89d:	83 ea 02             	sub    edx,0x2
	  __num = __val & 7;
    d8a0:	83 e0 07             	and    eax,0x7
	  __first[__pos - 1] = '0' + __num;
    d8a3:	83 c0 30             	add    eax,0x30
    d8a6:	88 44 3c 03          	mov    BYTE PTR [rsp+rdi*1+0x3],al
      while (__val >= 0100)
    d8aa:	48 83 fe 3f          	cmp    rsi,0x3f
    d8ae:	77 d0                	ja     d880 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
	__first[0] = '0' + __val;
    d8b0:	8d 46 30             	lea    eax,[rsi+0x30]
      if (__val >= 010)
    d8b3:	48 83 fe 07          	cmp    rsi,0x7
    d8b7:	0f 87 13 02 00 00    	ja     dad0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x590>
    d8bd:	88 44 24 03          	mov    BYTE PTR [rsp+0x3],al
      __res.ptr = __first + __len;
    d8c1:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    d8c6:	45 89 ed             	mov    r13d,r13d
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    d8c9:	48 8d 3d 08 79 00 00 	lea    rdi,[rip+0x7908]        # 151d8 <CSWTCH.1110+0xf8>
    d8d0:	4d 01 f5             	add    r13,r14
    d8d3:	ba 01 00 00 00       	mov    edx,0x1
	  char* __start = __buf + 3;
    d8d8:	4c 89 f0             	mov    rax,r14
	  if (_M_spec._M_alt && __base_prefix.size())
    d8db:	f6 45 00 10          	test   BYTE PTR [rbp+0x0],0x10
    d8df:	0f 84 5e fe ff ff    	je     d743 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x203>
	      __start -= __base_prefix.size();
    d8e5:	48 89 d0             	mov    rax,rdx
    d8e8:	48 f7 d8             	neg    rax
    d8eb:	e9 ec fc ff ff       	jmp    d5dc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9c>
	*__dest = ' ';
    d8f0:	c6 40 ff 20          	mov    BYTE PTR [rax-0x1],0x20
    d8f4:	e9 0b ff ff ff       	jmp    d804 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c4>
    d8f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d900:	48 83 fe 09          	cmp    rsi,0x9
    d904:	0f 86 d2 02 00 00    	jbe    dbdc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x69c>
    d90a:	48 89 f1             	mov    rcx,rsi
      unsigned __n = 1;
    d90d:	41 bd 01 00 00 00    	mov    r13d,0x1
	  __value /= __b4;
    d913:	48 bf 4b 59 86 38 d6 	movabs rdi,0x346dc5d63886594b
    d91a:	c5 6d 34 
    d91d:	eb 35                	jmp    d954 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x414>
    d91f:	90                   	nop
	  if (__value < __b3) return __n + 2;
    d920:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    d927:	0f 86 63 02 00 00    	jbe    db90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x650>
	  if (__value < __b4) return __n + 3;
    d92d:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    d934:	0f 86 66 02 00 00    	jbe    dba0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x660>
	  __value /= __b4;
    d93a:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    d93d:	41 83 c5 04          	add    r13d,0x4
	  __value /= __b4;
    d941:	48 f7 e7             	mul    rdi
    d944:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    d948:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    d94f:	76 0d                	jbe    d95e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x41e>
    d951:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    d954:	48 83 f9 63          	cmp    rcx,0x63
    d958:	77 c6                	ja     d920 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e0>
    d95a:	41 83 c5 01          	add    r13d,0x1
      if (__builtin_expect((__last - __first) < __len, 0))
    d95e:	41 83 fd 40          	cmp    r13d,0x40
    d962:	0f 87 41 02 00 00    	ja     dba9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x669>
      constexpr char __digits[201] =
    d968:	66 0f 6f 05 30 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae30]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    d96f:	00 
      unsigned __pos = __len - 1;
    d970:	41 8d 7d ff          	lea    edi,[r13-0x1]
      constexpr char __digits[201] =
    d974:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
    d979:	66 0f 6f 05 2f ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae2f]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    d980:	00 
    d981:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
    d986:	66 0f 6f 05 32 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae32]        # 187c0 <std::__unicode::__v15_1_0::__width_edges+0x340>
    d98d:	00 
    d98e:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    d993:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x350>
    d99a:	00 
    d99b:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
    d9a2:	00 
    d9a3:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x360>
    d9aa:	00 
    d9ab:	0f 29 84 24 90 00 00 	movaps XMMWORD PTR [rsp+0x90],xmm0
    d9b2:	00 
    d9b3:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x370>
    d9ba:	00 
    d9bb:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    d9c2:	00 
    d9c3:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x380>
    d9ca:	00 
    d9cb:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    d9d2:	00 
    d9d3:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x390>
    d9da:	00 
    d9db:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    d9e2:	00 
    d9e3:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    d9ea:	00 
    d9eb:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    d9f2:	00 
    d9f3:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    d9fa:	00 
    d9fb:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    da02:	00 
    da03:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    da0a:	00 
    da0b:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    da12:	00 
    da13:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    da1a:	00 
    da1b:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    da22:	00 
    da23:	66 0f 6f 05 35 ae 00 	movdqa xmm0,XMMWORD PTR [rip+0xae35]        # 18860 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    da2a:	00 
    da2b:	0f 11 84 24 09 01 00 	movups XMMWORD PTR [rsp+0x109],xmm0
    da32:	00 
      while (__val >= 100)
    da33:	48 83 fe 63          	cmp    rsi,0x63
    da37:	0f 86 b3 00 00 00    	jbe    daf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5b0>
	  auto const __num = (__val % 100) * 2;
    da3d:	48 b9 c3 f5 28 5c 8f 	movabs rcx,0x28f5c28f5c28f5c3
    da44:	c2 f5 28 
    da47:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    da4e:	00 00 
    da50:	48 89 f2             	mov    rdx,rsi
    da53:	48 c1 ea 02          	shr    rdx,0x2
    da57:	48 89 d0             	mov    rax,rdx
    da5a:	48 f7 e1             	mul    rcx
    da5d:	48 89 f0             	mov    rax,rsi
    da60:	49 89 d0             	mov    r8,rdx
    da63:	48 83 e2 fc          	and    rdx,0xfffffffffffffffc
    da67:	49 c1 e8 02          	shr    r8,0x2
    da6b:	4c 01 c2             	add    rdx,r8
    da6e:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    da72:	48 c1 e2 02          	shl    rdx,0x2
    da76:	48 29 d0             	sub    rax,rdx
    da79:	48 89 f2             	mov    rdx,rsi
	  __val /= 100;
    da7c:	4c 89 c6             	mov    rsi,r8
	  __first[__pos] = __digits[__num + 1];
    da7f:	41 89 f8             	mov    r8d,edi
	  auto const __num = (__val % 100) * 2;
    da82:	48 01 c0             	add    rax,rax
	  __first[__pos] = __digits[__num + 1];
    da85:	44 0f b6 4c 04 51    	movzx  r9d,BYTE PTR [rsp+rax*1+0x51]
	  __first[__pos - 1] = __digits[__num];
    da8b:	0f b6 44 04 50       	movzx  eax,BYTE PTR [rsp+rax*1+0x50]
	  __first[__pos] = __digits[__num + 1];
    da90:	46 88 4c 04 03       	mov    BYTE PTR [rsp+r8*1+0x3],r9b
	  __first[__pos - 1] = __digits[__num];
    da95:	44 8d 47 ff          	lea    r8d,[rdi-0x1]
	  __pos -= 2;
    da99:	83 ef 02             	sub    edi,0x2
	  __first[__pos - 1] = __digits[__num];
    da9c:	42 88 44 04 03       	mov    BYTE PTR [rsp+r8*1+0x3],al
      while (__val >= 100)
    daa1:	48 81 fa 0f 27 00 00 	cmp    rdx,0x270f
    daa8:	77 a6                	ja     da50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x510>
      if (__val >= 10)
    daaa:	48 81 fa e7 03 00 00 	cmp    rdx,0x3e7
    dab1:	77 3d                	ja     daf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5b0>
	__first[0] = '0' + __val;
    dab3:	83 c6 30             	add    esi,0x30
      __res.ptr = __first + __len;
    dab6:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    dabb:	40 88 74 24 03       	mov    BYTE PTR [rsp+0x3],sil
    dac0:	4d 01 f5             	add    r13,r14
      return __res;
    dac3:	e9 78 fc ff ff       	jmp    d740 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
    dac8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    dacf:	00 
	  auto const __num = __val & 7;
    dad0:	48 89 f0             	mov    rax,rsi
    dad3:	83 e0 07             	and    eax,0x7
	  __first[1] = '0' + __num;
    dad6:	83 c0 30             	add    eax,0x30
    dad9:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
	  __val >>= 3;
    dadd:	48 89 f0             	mov    rax,rsi
    dae0:	48 c1 e8 03          	shr    rax,0x3
	  __first[0] = '0' + __val;
    dae4:	83 c0 30             	add    eax,0x30
    dae7:	e9 d1 fd ff ff       	jmp    d8bd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x37d>
    daec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  auto const __num = __val * 2;
    daf0:	48 01 f6             	add    rsi,rsi
	  __first[1] = __digits[__num + 1];
    daf3:	0f b6 44 34 51       	movzx  eax,BYTE PTR [rsp+rsi*1+0x51]
	  __first[0] = __digits[__num];
    daf8:	0f b6 74 34 50       	movzx  esi,BYTE PTR [rsp+rsi*1+0x50]
	  __first[1] = __digits[__num + 1];
    dafd:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
    db01:	eb b3                	jmp    dab6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x576>
    db03:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    db08:	48 8d 44 24 43       	lea    rax,[rsp+0x43]
    db0d:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    db12:	48 89 f2             	mov    rdx,rsi
    db15:	4c 89 f7             	mov    rdi,r14
    db18:	48 89 c6             	mov    rsi,rax
    db1b:	e8 20 80 ff ff       	call   5b40 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    db20:	48 8d 3d fe 76 00 00 	lea    rdi,[rip+0x76fe]        # 15225 <CSWTCH.1110+0x145>
    db27:	49 89 c5             	mov    r13,rax
    db2a:	e9 04 fc ff ff       	jmp    d733 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f3>
    db2f:	90                   	nop
    db30:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    db35:	e9 8a fc ff ff       	jmp    d7c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x284>
    db3a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    db40:	48 8d 3d db 76 00 00 	lea    rdi,[rip+0x76db]        # 15222 <CSWTCH.1110+0x142>
    db47:	e9 e7 fb ff ff       	jmp    d733 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f3>
    db4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (__value == 0)
    db50:	48 85 f6             	test   rsi,rsi
    db53:	75 63                	jne    dbb8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x678>
	  if (_M_spec._M_alt && __base_prefix.size())
    db55:	0f b6 17             	movzx  edx,BYTE PTR [rdi]
	  *__first = '0';
    db58:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    db5d:	f6 c2 10             	test   dl,0x10
    db60:	0f 84 cc fc ff ff    	je     d832 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2f2>
    db66:	4c 8d 6c 24 04       	lea    r13,[rsp+0x4]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    db6b:	ba 02 00 00 00       	mov    edx,0x2
    db70:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
	  if (_M_spec._M_alt && __base_prefix.size())
    db75:	48 c7 c0 fe ff ff ff 	mov    rax,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    db7c:	48 8d 3d a2 76 00 00 	lea    rdi,[rip+0x76a2]        # 15225 <CSWTCH.1110+0x145>
    db83:	e9 54 fa ff ff       	jmp    d5dc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9c>
    db88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    db8f:	00 
	  if (__value < __b3) return __n + 2;
    db90:	41 83 c5 02          	add    r13d,0x2
    db94:	e9 c5 fd ff ff       	jmp    d95e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x41e>
    db99:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b4) return __n + 3;
    dba0:	41 83 c5 03          	add    r13d,0x3
    dba4:	e9 b5 fd ff ff       	jmp    d95e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x41e>
	  return __res;
    dba9:	4c 8d 6c 24 43       	lea    r13,[rsp+0x43]
    dbae:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    dbb3:	e9 88 fb ff ff       	jmp    d740 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x200>
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    dbb8:	4c 8d 74 24 03       	lea    r14,[rsp+0x3]
    dbbd:	48 8d 74 24 43       	lea    rsi,[rsp+0x43]
    dbc2:	48 89 da             	mov    rdx,rbx
    dbc5:	4c 89 f7             	mov    rdi,r14
    dbc8:	e8 73 7f ff ff       	call   5b40 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
    dbcd:	48 8d 3d 51 76 00 00 	lea    rdi,[rip+0x7651]        # 15225 <CSWTCH.1110+0x145>
    dbd4:	49 89 c5             	mov    r13,rax
    dbd7:	e9 57 fb ff ff       	jmp    d733 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f3>
	  if (__value < (unsigned)__base) return __n;
    dbdc:	41 bd 01 00 00 00    	mov    r13d,0x1
    dbe2:	e9 cc fe ff ff       	jmp    dab3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x573>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    dbe7:	e8 64 55 ff ff       	call   3150 <abort@plt>
    dbec:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    dbf3:	00 00 00 
    dbf6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    dbfd:	00 00 00 

000000000000dc00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    dc00:	41 56                	push   r14
    dc02:	41 55                	push   r13
    dc04:	41 54                	push   r12
    dc06:	55                   	push   rbp
    dc07:	48 89 d5             	mov    rbp,rdx
    dc0a:	53                   	push   rbx
    dc0b:	48 89 fb             	mov    rbx,rdi
    dc0e:	48 81 ec 20 01 00 00 	sub    rsp,0x120
	  if (_M_spec._M_type == _Pres_c)
    dc15:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    dc19:	41 89 c6             	mov    r14d,eax
    dc1c:	41 83 e6 78          	and    r14d,0x78
    dc20:	41 80 fe 38          	cmp    r14b,0x38
    dc24:	0f 84 86 00 00 00    	je     dcb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb0>
	  switch (_M_spec._M_type)
    dc2a:	c0 e8 03             	shr    al,0x3
    dc2d:	83 e0 0f             	and    eax,0xf
    dc30:	3c 04                	cmp    al,0x4
    dc32:	0f 84 20 01 00 00    	je     dd58 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x158>
    dc38:	0f 87 52 01 00 00    	ja     dd90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x190>
    dc3e:	3c 01                	cmp    al,0x1
    dc40:	0f 86 b2 00 00 00    	jbe    dcf8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf8>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    dc46:	41 80 fe 10          	cmp    r14b,0x10
    dc4a:	4c 8d 05 cb 75 00 00 	lea    r8,[rip+0x75cb]        # 1521c <CSWTCH.1110+0x13c>
    dc51:	48 8d 05 c7 75 00 00 	lea    rax,[rip+0x75c7]        # 1521f <CSWTCH.1110+0x13f>
    dc58:	4c 0f 45 c0          	cmovne r8,rax
      if (__value == 0)
    dc5c:	48 85 f6             	test   rsi,rsi
    dc5f:	0f 85 5b 03 00 00    	jne    dfc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c0>
    dc65:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    dc6a:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    dc6f:	b8 30 00 00 00       	mov    eax,0x30
      __first[0] = '1';
    dc74:	88 44 24 03          	mov    BYTE PTR [rsp+0x3],al
	  if (_M_spec._M_alt && __base_prefix.size())
    dc78:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
    dc7b:	a8 10                	test   al,0x10
    dc7d:	0f 84 4b 01 00 00    	je     ddce <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1ce>
    dc83:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    dc8a:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    dc8f:	4c 01 ee             	add    rsi,r13
	      __builtin_memcpy(__start, __base_prefix.data(),
    dc92:	89 d7                	mov    edi,edx
    dc94:	85 d2                	test   edx,edx
    dc96:	74 7e                	je     dd16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    dc98:	31 d2                	xor    edx,edx
    dc9a:	89 d1                	mov    ecx,edx
    dc9c:	83 c2 01             	add    edx,0x1
    dc9f:	45 0f b6 0c 08       	movzx  r9d,BYTE PTR [r8+rcx*1]
    dca4:	44 88 0c 0e          	mov    BYTE PTR [rsi+rcx*1],r9b
    dca8:	39 fa                	cmp    edx,edi
    dcaa:	72 ee                	jb     dc9a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9a>
    dcac:	eb 68                	jmp    dd16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    dcae:	66 90                	xchg   ax,ax
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    dcb0:	48 83 fe 7f          	cmp    rsi,0x7f
    dcb4:	0f 87 89 05 00 00    	ja     e243 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x643>
    dcba:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    dcbf:	b8 01 00 00 00       	mov    eax,0x1
    dcc4:	40 88 74 24 50       	mov    BYTE PTR [rsp+0x50],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    dcc9:	49 89 d8             	mov    r8,rbx
    dccc:	48 89 ce             	mov    rsi,rcx
    dccf:	48 89 c7             	mov    rdi,rax
    dcd2:	48 89 e9             	mov    rcx,rbp
    dcd5:	ba 01 00 00 00       	mov    edx,0x1
    dcda:	41 b9 01 00 00 00    	mov    r9d,0x1
    dce0:	e8 ab be ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    dce5:	48 81 c4 20 01 00 00 	add    rsp,0x120
    dcec:	5b                   	pop    rbx
    dced:	5d                   	pop    rbp
    dcee:	41 5c                	pop    r12
    dcf0:	41 5d                	pop    r13
    dcf2:	41 5e                	pop    r14
    dcf4:	c3                   	ret
    dcf5:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__value == 0)
    dcf8:	48 85 f6             	test   rsi,rsi
    dcfb:	0f 85 ef 00 00 00    	jne    ddf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f0>
	  *__first = '0';
    dd01:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    dd06:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    dd0b:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    dd10:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
	  char* __start = __buf + 3;
    dd13:	4c 89 ee             	mov    rsi,r13
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    dd16:	c0 e8 02             	shr    al,0x2
    dd19:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    dd1c:	83 f8 01             	cmp    eax,0x1
    dd1f:	74 5f                	je     dd80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x180>
      else if (__sign == _Sign_space)
    dd21:	83 f8 03             	cmp    eax,0x3
    dd24:	0f 84 b6 00 00 00    	je     dde0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    dd2a:	49 29 f4             	sub    r12,rsi
			       __start_digits - __start, __fc);
    dd2d:	4c 89 e9             	mov    rcx,r13
    dd30:	48 89 f2             	mov    rdx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    dd33:	49 89 e8             	mov    r8,rbp
			       __start_digits - __start, __fc);
    dd36:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    dd39:	48 89 df             	mov    rdi,rbx
    dd3c:	4c 89 e6             	mov    rsi,r12
    dd3f:	e8 0c e0 ff ff       	call   bd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
	}
    dd44:	48 81 c4 20 01 00 00 	add    rsp,0x120
    dd4b:	5b                   	pop    rbx
    dd4c:	5d                   	pop    rbp
    dd4d:	41 5c                	pop    r12
    dd4f:	41 5d                	pop    r13
    dd51:	41 5e                	pop    r14
    dd53:	c3                   	ret
    dd54:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    dd58:	48 85 f6             	test   rsi,rsi
    dd5b:	0f 85 cf 02 00 00    	jne    e030 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x430>
	  char* __start = __buf + 3;
    dd61:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    dd66:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    dd6b:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
    dd6e:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    dd73:	4c 89 ee             	mov    rsi,r13
    dd76:	eb 9e                	jmp    dd16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    dd78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    dd7f:	00 
    dd80:	b8 2b 00 00 00       	mov    eax,0x2b
	*__dest = '+';
    dd85:	88 46 ff             	mov    BYTE PTR [rsi-0x1],al
    dd88:	48 83 ee 01          	sub    rsi,0x1
    dd8c:	eb 9c                	jmp    dd2a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x12a>
    dd8e:	66 90                	xchg   ax,ax
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    dd90:	41 80 fe 28          	cmp    r14b,0x28
    dd94:	0f 84 5e 03 00 00    	je     e0f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f8>
      if (__value == 0)
    dd9a:	48 85 f6             	test   rsi,rsi
    dd9d:	0f 85 7d 03 00 00    	jne    e120 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
	  *__first = '0';
    dda3:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
	      if (_M_spec._M_type == _Pres_X)
    dda8:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    ddad:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    ddb2:	4c 8d 05 69 74 00 00 	lea    r8,[rip+0x7469]        # 15222 <CSWTCH.1110+0x142>
    ddb9:	41 80 fe 30          	cmp    r14b,0x30
    ddbd:	0f 84 2d 04 00 00    	je     e1f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5f0>
	  if (_M_spec._M_alt && __base_prefix.size())
    ddc3:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
    ddc6:	a8 10                	test   al,0x10
    ddc8:	0f 85 b5 fe ff ff    	jne    dc83 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x83>
	  char* __start = __buf + 3;
    ddce:	4c 89 ee             	mov    rsi,r13
    ddd1:	e9 40 ff ff ff       	jmp    dd16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
    ddd6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    dddd:	00 00 00 
    dde0:	b8 20 00 00 00       	mov    eax,0x20
    dde5:	eb 9e                	jmp    dd85 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x185>
    dde7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    ddee:	00 00 
    ddf0:	48 83 fe 09          	cmp    rsi,0x9
    ddf4:	0f 86 3e 04 00 00    	jbe    e238 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x638>
    ddfa:	48 89 f1             	mov    rcx,rsi
      unsigned __n = 1;
    ddfd:	41 bc 01 00 00 00    	mov    r12d,0x1
	  __value /= __b4;
    de03:	48 bf 4b 59 86 38 d6 	movabs rdi,0x346dc5d63886594b
    de0a:	c5 6d 34 
    de0d:	eb 35                	jmp    de44 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x244>
    de0f:	90                   	nop
	  if (__value < __b3) return __n + 2;
    de10:	48 81 f9 e7 03 00 00 	cmp    rcx,0x3e7
    de17:	0f 86 f3 03 00 00    	jbe    e210 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x610>
	  if (__value < __b4) return __n + 3;
    de1d:	48 81 f9 0f 27 00 00 	cmp    rcx,0x270f
    de24:	0f 86 f6 03 00 00    	jbe    e220 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x620>
	  __value /= __b4;
    de2a:	48 89 c8             	mov    rax,rcx
	  __n += 4;
    de2d:	41 83 c4 04          	add    r12d,0x4
	  __value /= __b4;
    de31:	48 f7 e7             	mul    rdi
    de34:	48 c1 ea 0b          	shr    rdx,0xb
	  if (__value < (unsigned)__base) return __n;
    de38:	48 81 f9 9f 86 01 00 	cmp    rcx,0x1869f
    de3f:	76 0d                	jbe    de4e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x24e>
    de41:	48 89 d1             	mov    rcx,rdx
	  if (__value < __b2) return __n + 1;
    de44:	48 83 f9 63          	cmp    rcx,0x63
    de48:	77 c6                	ja     de10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x210>
    de4a:	41 83 c4 01          	add    r12d,0x1
      if (__builtin_expect((__last - __first) < __len, 0))
    de4e:	41 83 fc 40          	cmp    r12d,0x40
    de52:	0f 87 d1 03 00 00    	ja     e229 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x629>
      constexpr char __digits[201] =
    de58:	66 0f 6f 05 40 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa940]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    de5f:	00 
      unsigned __pos = __len - 1;
    de60:	41 8d 4c 24 ff       	lea    ecx,[r12-0x1]
      constexpr char __digits[201] =
    de65:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
    de6a:	66 0f 6f 05 3e a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa93e]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    de71:	00 
    de72:	0f 29 44 24 60       	movaps XMMWORD PTR [rsp+0x60],xmm0
    de77:	66 0f 6f 05 41 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa941]        # 187c0 <std::__unicode::__v15_1_0::__width_edges+0x340>
    de7e:	00 
    de7f:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
    de84:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x350>
    de8b:	00 
    de8c:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
    de93:	00 
    de94:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x360>
    de9b:	00 
    de9c:	0f 29 84 24 90 00 00 	movaps XMMWORD PTR [rsp+0x90],xmm0
    dea3:	00 
    dea4:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x370>
    deab:	00 
    deac:	0f 29 84 24 a0 00 00 	movaps XMMWORD PTR [rsp+0xa0],xmm0
    deb3:	00 
    deb4:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x380>
    debb:	00 
    debc:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    dec3:	00 
    dec4:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x390>
    decb:	00 
    decc:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    ded3:	00 
    ded4:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    dedb:	00 
    dedc:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    dee3:	00 
    dee4:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    deeb:	00 
    deec:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    def3:	00 
    def4:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    defb:	00 
    defc:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    df03:	00 
    df04:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    df0b:	00 
    df0c:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    df13:	00 
    df14:	66 0f 6f 05 44 a9 00 	movdqa xmm0,XMMWORD PTR [rip+0xa944]        # 18860 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    df1b:	00 
    df1c:	0f 11 84 24 09 01 00 	movups XMMWORD PTR [rsp+0x109],xmm0
    df23:	00 
      while (__val >= 100)
    df24:	48 83 fe 63          	cmp    rsi,0x63
    df28:	0f 86 72 02 00 00    	jbe    e1a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a0>
	  auto const __num = (__val % 100) * 2;
    df2e:	48 bf c3 f5 28 5c 8f 	movabs rdi,0x28f5c28f5c28f5c3
    df35:	c2 f5 28 
    df38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    df3f:	00 
    df40:	48 89 f2             	mov    rdx,rsi
    df43:	48 c1 ea 02          	shr    rdx,0x2
    df47:	48 89 d0             	mov    rax,rdx
    df4a:	48 f7 e7             	mul    rdi
    df4d:	48 89 f0             	mov    rax,rsi
    df50:	49 89 d0             	mov    r8,rdx
    df53:	48 83 e2 fc          	and    rdx,0xfffffffffffffffc
    df57:	49 c1 e8 02          	shr    r8,0x2
    df5b:	4c 01 c2             	add    rdx,r8
    df5e:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    df62:	48 c1 e2 02          	shl    rdx,0x2
    df66:	48 29 d0             	sub    rax,rdx
    df69:	48 89 f2             	mov    rdx,rsi
	  __val /= 100;
    df6c:	4c 89 c6             	mov    rsi,r8
	  __first[__pos] = __digits[__num + 1];
    df6f:	41 89 c8             	mov    r8d,ecx
	  auto const __num = (__val % 100) * 2;
    df72:	48 01 c0             	add    rax,rax
	  __first[__pos] = __digits[__num + 1];
    df75:	44 0f b6 4c 04 51    	movzx  r9d,BYTE PTR [rsp+rax*1+0x51]
	  __first[__pos - 1] = __digits[__num];
    df7b:	0f b6 44 04 50       	movzx  eax,BYTE PTR [rsp+rax*1+0x50]
	  __first[__pos] = __digits[__num + 1];
    df80:	46 88 4c 04 03       	mov    BYTE PTR [rsp+r8*1+0x3],r9b
	  __first[__pos - 1] = __digits[__num];
    df85:	44 8d 41 ff          	lea    r8d,[rcx-0x1]
	  __pos -= 2;
    df89:	83 e9 02             	sub    ecx,0x2
	  __first[__pos - 1] = __digits[__num];
    df8c:	42 88 44 04 03       	mov    BYTE PTR [rsp+r8*1+0x3],al
      while (__val >= 100)
    df91:	48 81 fa 0f 27 00 00 	cmp    rdx,0x270f
    df98:	77 a6                	ja     df40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
      if (__val >= 10)
    df9a:	48 81 fa e7 03 00 00 	cmp    rdx,0x3e7
    dfa1:	0f 87 f9 01 00 00    	ja     e1a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a0>
	__first[0] = '0' + __val;
    dfa7:	83 c6 30             	add    esi,0x30
      __res.ptr = __first + __len;
    dfaa:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    dfaf:	40 88 74 24 03       	mov    BYTE PTR [rsp+0x3],sil
    dfb4:	4d 01 ec             	add    r12,r13
      return __res;
    dfb7:	e9 54 fd ff ff       	jmp    dd10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x110>
    dfbc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  return __builtin_clzl(__x) - __diff;
    dfc0:	4c 0f bd ce          	bsr    r9,rsi
      return _Nd - std::__countl_zero(__x);
    dfc4:	41 bc 40 00 00 00    	mov    r12d,0x40
      unsigned __pos = __len - 1;
    dfca:	ba 3f 00 00 00       	mov    edx,0x3f
	  return __builtin_clzl(__x) - __diff;
    dfcf:	49 83 f1 3f          	xor    r9,0x3f
      return _Nd - std::__countl_zero(__x);
    dfd3:	45 29 cc             	sub    r12d,r9d
      while (__pos)
    dfd6:	44 29 ca             	sub    edx,r9d
    dfd9:	74 3c                	je     e017 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x417>
    dfdb:	89 d1                	mov    ecx,edx
    dfdd:	b8 3e 00 00 00       	mov    eax,0x3e
    dfe2:	48 8d 7c 0c ff       	lea    rdi,[rsp+rcx*1-0x1]
    dfe7:	44 29 c8             	sub    eax,r9d
    dfea:	48 8d 14 0c          	lea    rdx,[rsp+rcx*1]
    dfee:	48 29 c7             	sub    rdi,rax
    dff1:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    dff8:	00 00 00 00 
    dffc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  __first[__pos--] = '0' + (__val & 1);
    e000:	89 f1                	mov    ecx,esi
      while (__pos)
    e002:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    e006:	48 d1 ee             	shr    rsi,1
	  __first[__pos--] = '0' + (__val & 1);
    e009:	83 e1 01             	and    ecx,0x1
    e00c:	83 c1 30             	add    ecx,0x30
    e00f:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
      while (__pos)
    e012:	48 39 d7             	cmp    rdi,rdx
    e015:	75 e9                	jne    e000 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
      __res.ptr = __first + __len;
    e017:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    e01c:	4d 63 e4             	movsxd r12,r12d
    e01f:	b8 31 00 00 00       	mov    eax,0x31
    e024:	4d 01 ec             	add    r12,r13
    e027:	e9 48 fc ff ff       	jmp    dc74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x74>
    e02c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	__len = (__to_chars_len_2(__val) + 2) / 3;
    e030:	48 0f bd c6          	bsr    rax,rsi
    e034:	44 8d 60 03          	lea    r12d,[rax+0x3]
    e038:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    e03d:	4c 0f af e0          	imul   r12,rax
    e041:	49 c1 ec 21          	shr    r12,0x21
      unsigned __pos = __len - 1;
    e045:	41 8d 4c 24 ff       	lea    ecx,[r12-0x1]
      while (__val >= 0100)
    e04a:	48 83 fe 3f          	cmp    rsi,0x3f
    e04e:	76 60                	jbe    e0b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b0>
    e050:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e057:	00 00 00 00 
    e05b:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e062:	00 00 00 00 
    e066:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e06d:	00 00 00 00 
    e071:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e078:	00 00 00 00 
    e07c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  auto __num = __val & 7;
    e080:	48 89 f2             	mov    rdx,rsi
	  __first[__pos] = '0' + __num;
    e083:	89 cf                	mov    edi,ecx
	  auto __num = __val & 7;
    e085:	83 e2 07             	and    edx,0x7
	  __first[__pos] = '0' + __num;
    e088:	83 c2 30             	add    edx,0x30
    e08b:	88 54 3c 03          	mov    BYTE PTR [rsp+rdi*1+0x3],dl
	  __val >>= 3;
    e08f:	48 89 f2             	mov    rdx,rsi
	  __first[__pos - 1] = '0' + __num;
    e092:	8d 79 ff             	lea    edi,[rcx-0x1]
	  __val >>= 3;
    e095:	48 c1 ee 06          	shr    rsi,0x6
	  __val >>= 3;
    e099:	48 c1 ea 03          	shr    rdx,0x3
	  __pos -= 2;
    e09d:	83 e9 02             	sub    ecx,0x2
	  __num = __val & 7;
    e0a0:	83 e2 07             	and    edx,0x7
	  __first[__pos - 1] = '0' + __num;
    e0a3:	83 c2 30             	add    edx,0x30
    e0a6:	88 54 3c 03          	mov    BYTE PTR [rsp+rdi*1+0x3],dl
      while (__val >= 0100)
    e0aa:	48 83 fe 3f          	cmp    rsi,0x3f
    e0ae:	77 d0                	ja     e080 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x480>
	__first[0] = '0' + __val;
    e0b0:	8d 46 30             	lea    eax,[rsi+0x30]
      if (__val >= 010)
    e0b3:	48 83 fe 07          	cmp    rsi,0x7
    e0b7:	0f 87 c3 00 00 00    	ja     e180 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x580>
    e0bd:	88 44 24 03          	mov    BYTE PTR [rsp+0x3],al
      __res.ptr = __first + __len;
    e0c1:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    e0c6:	45 89 e4             	mov    r12d,r12d
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    e0c9:	4c 8d 05 08 71 00 00 	lea    r8,[rip+0x7108]        # 151d8 <CSWTCH.1110+0xf8>
    e0d0:	4d 01 ec             	add    r12,r13
    e0d3:	ba 01 00 00 00       	mov    edx,0x1
	  if (_M_spec._M_alt && __base_prefix.size())
    e0d8:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
	  char* __start = __buf + 3;
    e0db:	4c 89 ee             	mov    rsi,r13
	  if (_M_spec._M_alt && __base_prefix.size())
    e0de:	a8 10                	test   al,0x10
    e0e0:	0f 84 30 fc ff ff    	je     dd16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x116>
	      __start -= __base_prefix.size();
    e0e6:	48 89 d6             	mov    rsi,rdx
    e0e9:	48 f7 de             	neg    rsi
    e0ec:	e9 9e fb ff ff       	jmp    dc8f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f>
    e0f1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
      if (__value == 0)
    e0f8:	48 85 f6             	test   rsi,rsi
    e0fb:	0f 85 bf 00 00 00    	jne    e1c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5c0>
	  *__first = '0';
    e101:	c6 44 24 03 30       	mov    BYTE PTR [rsp+0x3],0x30
    e106:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
    e10b:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e110:	4c 8d 05 0e 71 00 00 	lea    r8,[rip+0x710e]        # 15225 <CSWTCH.1110+0x145>
    e117:	e9 a7 fc ff ff       	jmp    ddc3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c3>
    e11c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    e120:	48 8d 44 24 43       	lea    rax,[rsp+0x43]
    e125:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    e12a:	48 89 f2             	mov    rdx,rsi
    e12d:	4c 89 ef             	mov    rdi,r13
    e130:	48 89 c6             	mov    rsi,rax
    e133:	e8 08 7a ff ff       	call   5b40 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
    e138:	49 89 c4             	mov    r12,rax
	      if (_M_spec._M_type == _Pres_X)
    e13b:	41 80 fe 30          	cmp    r14b,0x30
    e13f:	0f 85 bb 00 00 00    	jne    e200 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
		for (auto __p = __start; __p != __res.ptr; ++__p)
    e145:	4c 39 e8             	cmp    rax,r13
    e148:	74 1c                	je     e166 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x566>
	      if (_M_spec._M_type == _Pres_X)
    e14a:	4d 89 ee             	mov    r14,r13
    e14d:	0f 1f 00             	nop    DWORD PTR [rax]
		  *__p = __builtin_toupper(*__p);
    e150:	41 0f be 3e          	movsx  edi,BYTE PTR [r14]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    e154:	49 83 c6 01          	add    r14,0x1
		  *__p = __builtin_toupper(*__p);
    e158:	e8 f3 51 ff ff       	call   3350 <toupper@plt>
    e15d:	41 88 46 ff          	mov    BYTE PTR [r14-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    e161:	4d 39 e6             	cmp    r14,r12
    e164:	75 ea                	jne    e150 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x550>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e166:	4c 8d 05 b5 70 00 00 	lea    r8,[rip+0x70b5]        # 15222 <CSWTCH.1110+0x142>
    e16d:	ba 02 00 00 00       	mov    edx,0x2
    e172:	e9 61 ff ff ff       	jmp    e0d8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d8>
    e177:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    e17e:	00 00 
	  auto const __num = __val & 7;
    e180:	48 89 f0             	mov    rax,rsi
    e183:	83 e0 07             	and    eax,0x7
	  __first[1] = '0' + __num;
    e186:	83 c0 30             	add    eax,0x30
    e189:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
	  __val >>= 3;
    e18d:	48 89 f0             	mov    rax,rsi
    e190:	48 c1 e8 03          	shr    rax,0x3
	  __first[0] = '0' + __val;
    e194:	83 c0 30             	add    eax,0x30
    e197:	e9 21 ff ff ff       	jmp    e0bd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4bd>
    e19c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  auto const __num = __val * 2;
    e1a0:	48 01 f6             	add    rsi,rsi
	  __first[1] = __digits[__num + 1];
    e1a3:	0f b6 44 34 51       	movzx  eax,BYTE PTR [rsp+rsi*1+0x51]
	  __first[0] = __digits[__num];
    e1a8:	0f b6 74 34 50       	movzx  esi,BYTE PTR [rsp+rsi*1+0x50]
	  __first[1] = __digits[__num + 1];
    e1ad:	88 44 24 04          	mov    BYTE PTR [rsp+0x4],al
    e1b1:	e9 f4 fd ff ff       	jmp    dfaa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3aa>
    e1b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e1bd:	00 00 00 
	return __detail::__to_chars_16(__first, __last, __unsigned_val);
    e1c0:	48 8d 44 24 43       	lea    rax,[rsp+0x43]
    e1c5:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    e1ca:	48 89 f2             	mov    rdx,rsi
    e1cd:	4c 89 ef             	mov    rdi,r13
    e1d0:	48 89 c6             	mov    rsi,rax
    e1d3:	e8 68 79 ff ff       	call   5b40 <std::to_chars_result std::__detail::__to_chars_16<unsigned long>(char*, char*, unsigned long)>
    e1d8:	4c 8d 05 46 70 00 00 	lea    r8,[rip+0x7046]        # 15225 <CSWTCH.1110+0x145>
    e1df:	49 89 c4             	mov    r12,rax
    e1e2:	e9 dc fb ff ff       	jmp    ddc3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c3>
    e1e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    e1ee:	00 00 
    e1f0:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    e1f5:	e9 50 ff ff ff       	jmp    e14a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x54a>
    e1fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    e200:	4c 8d 05 1b 70 00 00 	lea    r8,[rip+0x701b]        # 15222 <CSWTCH.1110+0x142>
    e207:	e9 b7 fb ff ff       	jmp    ddc3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c3>
    e20c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    e210:	41 83 c4 02          	add    r12d,0x2
    e214:	e9 35 fc ff ff       	jmp    de4e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x24e>
    e219:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (__value < __b4) return __n + 3;
    e220:	41 83 c4 03          	add    r12d,0x3
    e224:	e9 25 fc ff ff       	jmp    de4e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x24e>
	  return __res;
    e229:	4c 8d 64 24 43       	lea    r12,[rsp+0x43]
    e22e:	4c 8d 6c 24 03       	lea    r13,[rsp+0x3]
    e233:	e9 d8 fa ff ff       	jmp    dd10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x110>
	  if (__value < (unsigned)__base) return __n;
    e238:	41 bc 01 00 00 00    	mov    r12d,0x1
    e23e:	e9 64 fd ff ff       	jmp    dfa7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a7>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    e243:	e8 08 4f ff ff       	call   3150 <abort@plt>
    e248:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e24f:	00 00 00 
    e252:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e259:	00 00 00 
    e25c:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e263:	00 00 00 
    e266:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e26d:	00 00 00 
    e270:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e277:	00 00 00 
    e27a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000000e280 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    e280:	41 57                	push   r15
    e282:	49 89 fa             	mov    r10,rdi
    e285:	49 89 d1             	mov    r9,rdx
    e288:	41 56                	push   r14
    e28a:	41 55                	push   r13
    e28c:	41 54                	push   r12
    e28e:	55                   	push   rbp
    e28f:	53                   	push   rbx
    e290:	48 81 ec 98 01 00 00 	sub    rsp,0x198
    e297:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
	  if (_M_spec._M_type == _Pres_c)
    e29c:	0f b6 4f 01          	movzx  ecx,BYTE PTR [rdi+0x1]
    e2a0:	89 cf                	mov    edi,ecx
    e2a2:	83 e7 78             	and    edi,0x78
    e2a5:	40 80 ff 38          	cmp    dil,0x38
    e2a9:	0f 84 a9 01 00 00    	je     e458 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d8>
	  switch (_M_spec._M_type)
    e2af:	c0 e9 03             	shr    cl,0x3
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    e2b2:	49 89 f4             	mov    r12,rsi
    e2b5:	49 89 d5             	mov    r13,rdx
	  switch (_M_spec._M_type)
    e2b8:	83 e1 0f             	and    ecx,0xf
	  if (__i < 0)
    e2bb:	48 85 d2             	test   rdx,rdx
    e2be:	0f 88 dc 00 00 00    	js     e3a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x120>
	  switch (_M_spec._M_type)
    e2c4:	80 f9 04             	cmp    cl,0x4
    e2c7:	0f 84 83 03 00 00    	je     e650 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d0>
    e2cd:	0f 87 e5 01 00 00    	ja     e4b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x238>
    e2d3:	80 f9 01             	cmp    cl,0x1
    e2d6:	0f 86 44 03 00 00    	jbe    e620 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    e2dc:	40 80 ff 10          	cmp    dil,0x10
    e2e0:	48 8d 2d 35 6f 00 00 	lea    rbp,[rip+0x6f35]        # 1521c <CSWTCH.1110+0x13c>
    e2e7:	48 8d 0d 31 6f 00 00 	lea    rcx,[rip+0x6f31]        # 1521f <CSWTCH.1110+0x13f>
      if (__value == 0)
    e2ee:	48 89 f0             	mov    rax,rsi
    e2f1:	48 0f 45 e9          	cmovne rbp,rcx
    e2f5:	48 09 d0             	or     rax,rdx
    e2f8:	0f 85 da 00 00 00    	jne    e3d8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x158>
    e2fe:	b8 30 00 00 00       	mov    eax,0x30
    e303:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    e308:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
      __first[0] = '1';
    e30d:	88 44 24 33          	mov    BYTE PTR [rsp+0x33],al
	  if (_M_spec._M_alt && __base_prefix.size())
    e311:	41 f6 02 10          	test   BYTE PTR [r10],0x10
    e315:	0f 84 d5 02 00 00    	je     e5f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x370>
    e31b:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e322:	b8 02 00 00 00       	mov    eax,0x2
	      __start -= __base_prefix.size();
    e327:	4c 01 ee             	add    rsi,r13
	      __builtin_memcpy(__start, __base_prefix.data(),
    e32a:	89 c1                	mov    ecx,eax
    e32c:	85 c0                	test   eax,eax
    e32e:	74 20                	je     e350 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0>
    e330:	31 c0                	xor    eax,eax
    e332:	89 c2                	mov    edx,eax
    e334:	83 c0 01             	add    eax,0x1
    e337:	0f b6 7c 15 00       	movzx  edi,BYTE PTR [rbp+rdx*1+0x0]
    e33c:	40 88 3c 16          	mov    BYTE PTR [rsi+rdx*1],dil
    e340:	39 c8                	cmp    eax,ecx
    e342:	72 ee                	jb     e332 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb2>
    e344:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e34b:	00 00 00 00 
    e34f:	90                   	nop
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e350:	48 8d 56 ff          	lea    rdx,[rsi-0x1]
      if (__i < 0)
    e354:	4d 85 c9             	test   r9,r9
    e357:	0f 88 a3 02 00 00    	js     e600 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
    e35d:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e361:	c0 e8 02             	shr    al,0x2
    e364:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    e367:	83 f8 01             	cmp    eax,0x1
    e36a:	0f 84 a0 02 00 00    	je     e610 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x390>
      else if (__sign == _Sign_space)
    e370:	83 f8 03             	cmp    eax,0x3
    e373:	0f 84 d7 03 00 00    	je     e750 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d0>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    e379:	48 29 f3             	sub    rbx,rsi
			       __start_digits - __start, __fc);
    e37c:	4c 89 e9             	mov    rcx,r13
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    e37f:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
    e384:	48 89 f2             	mov    rdx,rsi
			       __start_digits - __start, __fc);
    e387:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    e38a:	4c 89 d7             	mov    rdi,r10
    e38d:	48 89 de             	mov    rsi,rbx
    e390:	e8 bb d9 ff ff       	call   bd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    e395:	e9 07 01 00 00       	jmp    e4a1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x221>
    e39a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    e3a0:	49 f7 dc             	neg    r12
    e3a3:	49 83 d5 00          	adc    r13,0x0
    e3a7:	49 f7 dd             	neg    r13
	  switch (_M_spec._M_type)
    e3aa:	80 f9 04             	cmp    cl,0x4
    e3ad:	0f 84 ad 02 00 00    	je     e660 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e0>
    e3b3:	0f 87 3f 01 00 00    	ja     e4f8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x278>
    e3b9:	80 f9 01             	cmp    cl,0x1
    e3bc:	0f 86 9e 03 00 00    	jbe    e760 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    e3c2:	40 80 ff 10          	cmp    dil,0x10
    e3c6:	48 8d 2d 52 6e 00 00 	lea    rbp,[rip+0x6e52]        # 1521f <CSWTCH.1110+0x13f>
    e3cd:	48 8d 05 48 6e 00 00 	lea    rax,[rip+0x6e48]        # 1521c <CSWTCH.1110+0x13c>
    e3d4:	48 0f 44 e8          	cmove  rbp,rax
	  if (__high != 0)
    e3d8:	4d 85 ed             	test   r13,r13
    e3db:	0f 85 47 07 00 00    	jne    eb28 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8a8>
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
    e3e1:	49 0f bd d4          	bsr    rdx,r12
      return _Nd - std::__countl_zero(__x);
    e3e5:	bb 80 00 00 00       	mov    ebx,0x80
      unsigned __pos = __len - 1;
    e3ea:	b8 7f 00 00 00       	mov    eax,0x7f
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
    e3ef:	48 83 f2 3f          	xor    rdx,0x3f
    e3f3:	83 c2 40             	add    edx,0x40
      return _Nd - std::__countl_zero(__x);
    e3f6:	29 d3                	sub    ebx,edx
      while (__pos)
    e3f8:	29 d0                	sub    eax,edx
    e3fa:	0f 84 43 07 00 00    	je     eb43 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8c3>
    e400:	89 c1                	mov    ecx,eax
    e402:	83 e8 01             	sub    eax,0x1
    e405:	48 8d 74 0c 2f       	lea    rsi,[rsp+rcx*1+0x2f]
    e40a:	48 8d 54 0c 30       	lea    rdx,[rsp+rcx*1+0x30]
    e40f:	48 29 c6             	sub    rsi,rax
    e412:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e419:	00 00 00 00 
    e41d:	0f 1f 00             	nop    DWORD PTR [rax]
	  __first[__pos--] = '0' + (__val & 1);
    e420:	44 89 e0             	mov    eax,r12d
      while (__pos)
    e423:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    e427:	4d 0f ac ec 01       	shrd   r12,r13,0x1
	  __first[__pos--] = '0' + (__val & 1);
    e42c:	83 e0 01             	and    eax,0x1
	  __val >>= 1;
    e42f:	49 d1 ed             	shr    r13,1
	  __first[__pos--] = '0' + (__val & 1);
    e432:	83 c0 30             	add    eax,0x30
    e435:	88 42 04             	mov    BYTE PTR [rdx+0x4],al
      while (__pos)
    e438:	48 39 f2             	cmp    rdx,rsi
    e43b:	75 e3                	jne    e420 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1a0>
      __res.ptr = __first + __len;
    e43d:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e442:	48 63 db             	movsxd rbx,ebx
    e445:	b8 31 00 00 00       	mov    eax,0x31
    e44a:	4c 01 eb             	add    rbx,r13
    e44d:	e9 bb fe ff ff       	jmp    e30d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8d>
    e452:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    e458:	b9 7f 00 00 00       	mov    ecx,0x7f
    e45d:	48 39 f1             	cmp    rcx,rsi
    e460:	b9 00 00 00 00       	mov    ecx,0x0
    e465:	48 19 d1             	sbb    rcx,rdx
    e468:	0f 8c f1 07 00 00    	jl     ec5f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9df>
    e46e:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    e475:	00 
    e476:	b8 01 00 00 00       	mov    eax,0x1
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    e47b:	41 b9 01 00 00 00    	mov    r9d,0x1
	    return static_cast<_CharT>(__i);
    e481:	40 88 b4 24 c0 00 00 	mov    BYTE PTR [rsp+0xc0],sil
    e488:	00 
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    e489:	48 89 ce             	mov    rsi,rcx
    e48c:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    e491:	48 89 c7             	mov    rdi,rax
    e494:	4d 89 d0             	mov    r8,r10
    e497:	ba 01 00 00 00       	mov    edx,0x1
    e49c:	e8 ef b6 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    e4a1:	48 81 c4 98 01 00 00 	add    rsp,0x198
    e4a8:	5b                   	pop    rbx
    e4a9:	5d                   	pop    rbp
    e4aa:	41 5c                	pop    r12
    e4ac:	41 5d                	pop    r13
    e4ae:	41 5e                	pop    r14
    e4b0:	41 5f                	pop    r15
    e4b2:	c3                   	ret
    e4b3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e4b8:	40 80 ff 28          	cmp    dil,0x28
    e4bc:	0f 84 ae 06 00 00    	je     eb70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
      if (__value == 0)
    e4c2:	48 89 f0             	mov    rax,rsi
    e4c5:	48 09 d0             	or     rax,rdx
    e4c8:	0f 85 5d 07 00 00    	jne    ec2b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9ab>
	  *__first = '0';
    e4ce:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
	      if (_M_spec._M_type == _Pres_X)
    e4d3:	40 80 ff 30          	cmp    dil,0x30
    e4d7:	0f 84 cb 05 00 00    	je     eaa8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x828>
    e4dd:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    e4e2:	48 8d 2d 39 6d 00 00 	lea    rbp,[rip+0x6d39]        # 15222 <CSWTCH.1110+0x142>
    e4e9:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e4ee:	e9 e6 00 00 00       	jmp    e5d9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x359>
    e4f3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    e4f8:	40 80 ff 28          	cmp    dil,0x28
    e4fc:	48 8d 2d 22 6d 00 00 	lea    rbp,[rip+0x6d22]        # 15225 <CSWTCH.1110+0x145>
    e503:	48 8d 05 18 6d 00 00 	lea    rax,[rip+0x6d18]        # 15222 <CSWTCH.1110+0x142>
    e50a:	48 0f 45 e8          	cmovne rbp,rax
	  if (__high != 0)
    e50e:	4d 85 ed             	test   r13,r13
    e511:	0f 85 e9 05 00 00    	jne    eb00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x880>
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    e517:	49 0f bd c4          	bsr    rax,r12
      constexpr char __digits[] = {
    e51b:	66 0f 6f 05 4d a3 00 	movdqa xmm0,XMMWORD PTR [rip+0xa34d]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    e522:	00 
      while (__val >= 0x100)
    e523:	b9 ff 00 00 00       	mov    ecx,0xff
    e528:	4c 8d 9c 24 c0 00 00 	lea    r11,[rsp+0xc0]
    e52f:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    e530:	83 c0 04             	add    eax,0x4
    e533:	c1 e8 02             	shr    eax,0x2
      constexpr char __digits[] = {
    e536:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    e53d:	00 
      unsigned __pos = __len - 1;
    e53e:	8d 50 ff             	lea    edx,[rax-0x1]
      while (__val >= 0x100)
    e541:	4c 39 e1             	cmp    rcx,r12
    e544:	73 5e                	jae    e5a4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x324>
    e546:	4c 8d 9c 24 c0 00 00 	lea    r11,[rsp+0xc0]
    e54d:	00 
    e54e:	41 b8 ff 00 00 00    	mov    r8d,0xff
    e554:	31 f6                	xor    esi,esi
    e556:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e55d:	00 00 00 
	  auto __num = __val & 0xF;
    e560:	4c 89 e1             	mov    rcx,r12
	  __first[__pos] = __digits[__num];
    e563:	41 89 d6             	mov    r14d,edx
	  __first[__pos - 1] = __digits[__num];
    e566:	8d 5a ff             	lea    ebx,[rdx-0x1]
	  __pos -= 2;
    e569:	83 ea 02             	sub    edx,0x2
	  auto __num = __val & 0xF;
    e56c:	83 e1 0f             	and    ecx,0xf
	  __first[__pos] = __digits[__num];
    e56f:	4c 01 d9             	add    rcx,r11
    e572:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
    e575:	42 88 4c 34 33       	mov    BYTE PTR [rsp+r14*1+0x33],cl
	  __val >>= 4;
    e57a:	4c 89 e1             	mov    rcx,r12
	  __val >>= 4;
    e57d:	4d 0f ac ec 08       	shrd   r12,r13,0x8
	  __val >>= 4;
    e582:	4c 0f ac e9 04       	shrd   rcx,r13,0x4
	  __val >>= 4;
    e587:	49 c1 ed 08          	shr    r13,0x8
	  __num = __val & 0xF;
    e58b:	83 e1 0f             	and    ecx,0xf
      while (__val >= 0x100)
    e58e:	4d 39 e0             	cmp    r8,r12
	  __first[__pos - 1] = __digits[__num];
    e591:	4a 8d 0c 19          	lea    rcx,[rcx+r11*1]
    e595:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
    e598:	88 4c 1c 33          	mov    BYTE PTR [rsp+rbx*1+0x33],cl
      while (__val >= 0x100)
    e59c:	48 89 f3             	mov    rbx,rsi
    e59f:	4c 19 eb             	sbb    rbx,r13
    e5a2:	72 bc                	jb     e560 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
      if (__val >= 0x10)
    e5a4:	ba 0f 00 00 00       	mov    edx,0xf
    e5a9:	4c 39 e2             	cmp    rdx,r12
    e5ac:	ba 00 00 00 00       	mov    edx,0x0
    e5b1:	4c 19 ea             	sbb    rdx,r13
    e5b4:	0f 82 c6 04 00 00    	jb     ea80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x800>
	__first[0] = __digits[__val];
    e5ba:	4d 01 e3             	add    r11,r12
    e5bd:	41 0f b6 13          	movzx  edx,BYTE PTR [r11]
      __res.ptr = __first + __len;
    e5c1:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e5c6:	88 54 24 33          	mov    BYTE PTR [rsp+0x33],dl
    e5ca:	49 8d 5c 05 00       	lea    rbx,[r13+rax*1+0x0]
	      if (_M_spec._M_type == _Pres_X)
    e5cf:	40 80 ff 30          	cmp    dil,0x30
    e5d3:	0f 84 e0 04 00 00    	je     eab9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x839>
	  if (_M_spec._M_alt && __base_prefix.size())
    e5d9:	41 f6 02 10          	test   BYTE PTR [r10],0x10
    e5dd:	0f 85 38 fd ff ff    	jne    e31b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9b>
    e5e3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e5ea:	00 00 00 00 
    e5ee:	66 90                	xchg   ax,ax
	  char* __start = __buf + 3;
    e5f0:	4c 89 ee             	mov    rsi,r13
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e5f3:	48 8d 56 ff          	lea    rdx,[rsi-0x1]
      if (__i < 0)
    e5f7:	4d 85 c9             	test   r9,r9
    e5fa:	0f 89 5d fd ff ff    	jns    e35d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdd>
	*__dest = '-';
    e600:	c6 46 ff 2d          	mov    BYTE PTR [rsi-0x1],0x2d
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e604:	48 89 d6             	mov    rsi,rdx
    e607:	e9 6d fd ff ff       	jmp    e379 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf9>
    e60c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	*__dest = '+';
    e610:	c6 46 ff 2b          	mov    BYTE PTR [rsi-0x1],0x2b
    e614:	eb ee                	jmp    e604 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x384>
    e616:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    e61d:	00 00 00 
      if (__value == 0)
    e620:	48 89 f0             	mov    rax,rsi
    e623:	48 09 d0             	or     rax,rdx
    e626:	0f 85 34 01 00 00    	jne    e760 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
      __glibcxx_assert(2 <= __base && __base <= 36);
    e62c:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    e631:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  char* __start = __buf + 3;
    e635:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e63a:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    e63f:	4c 89 ee             	mov    rsi,r13
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    e642:	48 8d 54 24 32       	lea    rdx,[rsp+0x32]
    e647:	e9 15 fd ff ff       	jmp    e361 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe1>
    e64c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    e650:	48 89 f0             	mov    rax,rsi
    e653:	48 09 d0             	or     rax,rdx
    e656:	74 d4                	je     e62c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ac>
    e658:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    e65f:	00 
    e660:	4d 85 ed             	test   r13,r13
    e663:	0f 85 47 05 00 00    	jne    ebb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x930>
	__len = (__to_chars_len_2(__val) + 2) / 3;
    e669:	49 0f bd c4          	bsr    rax,r12
      while (__val >= 0100)
    e66d:	ba 3f 00 00 00       	mov    edx,0x3f
	__len = (__to_chars_len_2(__val) + 2) / 3;
    e672:	8d 58 03             	lea    ebx,[rax+0x3]
    e675:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    e67a:	48 0f af d8          	imul   rbx,rax
    e67e:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    e682:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0100)
    e685:	4c 39 e2             	cmp    rdx,r12
    e688:	73 77                	jae    e701 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x481>
    e68a:	be 3f 00 00 00       	mov    esi,0x3f
    e68f:	31 d2                	xor    edx,edx
    e691:	89 df                	mov    edi,ebx
    e693:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e69a:	00 00 00 00 
    e69e:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e6a5:	00 00 00 00 
    e6a9:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e6b0:	00 00 00 00 
    e6b4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e6bb:	00 00 00 00 
    e6bf:	90                   	nop
	  auto __num = __val & 7;
    e6c0:	4c 89 e1             	mov    rcx,r12
	  __first[__pos] = '0' + __num;
    e6c3:	41 89 c0             	mov    r8d,eax
      while (__val >= 0100)
    e6c6:	48 89 d3             	mov    rbx,rdx
	  auto __num = __val & 7;
    e6c9:	83 e1 07             	and    ecx,0x7
	  __first[__pos] = '0' + __num;
    e6cc:	83 c1 30             	add    ecx,0x30
    e6cf:	42 88 4c 04 33       	mov    BYTE PTR [rsp+r8*1+0x33],cl
	  __val >>= 3;
    e6d4:	4c 89 e1             	mov    rcx,r12
	  __val >>= 3;
    e6d7:	4d 0f ac ec 06       	shrd   r12,r13,0x6
	  __first[__pos - 1] = '0' + __num;
    e6dc:	44 8d 40 ff          	lea    r8d,[rax-0x1]
	  __val >>= 3;
    e6e0:	4c 0f ac e9 03       	shrd   rcx,r13,0x3
	  __pos -= 2;
    e6e5:	83 e8 02             	sub    eax,0x2
	  __val >>= 3;
    e6e8:	49 c1 ed 06          	shr    r13,0x6
	  __num = __val & 7;
    e6ec:	83 e1 07             	and    ecx,0x7
	  __first[__pos - 1] = '0' + __num;
    e6ef:	83 c1 30             	add    ecx,0x30
      while (__val >= 0100)
    e6f2:	4c 39 e6             	cmp    rsi,r12
    e6f5:	4c 19 eb             	sbb    rbx,r13
	  __first[__pos - 1] = '0' + __num;
    e6f8:	42 88 4c 04 33       	mov    BYTE PTR [rsp+r8*1+0x33],cl
      while (__val >= 0100)
    e6fd:	72 c1                	jb     e6c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x440>
    e6ff:	89 fb                	mov    ebx,edi
      if (__val >= 010)
    e701:	b8 07 00 00 00       	mov    eax,0x7
    e706:	4c 39 e0             	cmp    rax,r12
    e709:	b8 00 00 00 00       	mov    eax,0x0
    e70e:	4c 19 e8             	sbb    rax,r13
    e711:	0f 82 49 03 00 00    	jb     ea60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e0>
	__first[0] = '0' + __val;
    e717:	41 83 c4 30          	add    r12d,0x30
    e71b:	44 88 64 24 33       	mov    BYTE PTR [rsp+0x33],r12b
      __res.ptr = __first + __len;
    e720:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    e725:	89 db                	mov    ebx,ebx
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    e727:	48 8d 2d aa 6a 00 00 	lea    rbp,[rip+0x6aaa]        # 151d8 <CSWTCH.1110+0xf8>
    e72e:	4c 01 eb             	add    rbx,r13
    e731:	b8 01 00 00 00       	mov    eax,0x1
	  char* __start = __buf + 3;
    e736:	4c 89 ee             	mov    rsi,r13
	  if (_M_spec._M_alt && __base_prefix.size())
    e739:	41 f6 02 10          	test   BYTE PTR [r10],0x10
    e73d:	0f 84 0d fc ff ff    	je     e350 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0>
	      __start -= __base_prefix.size();
    e743:	48 89 c6             	mov    rsi,rax
    e746:	48 f7 de             	neg    rsi
    e749:	e9 d9 fb ff ff       	jmp    e327 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa7>
    e74e:	66 90                	xchg   ax,ax
	*__dest = ' ';
    e750:	c6 46 ff 20          	mov    BYTE PTR [rsi-0x1],0x20
    e754:	e9 ab fe ff ff       	jmp    e604 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x384>
    e759:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    e760:	b8 09 00 00 00       	mov    eax,0x9
    e765:	4c 39 e0             	cmp    rax,r12
    e768:	b8 00 00 00 00       	mov    eax,0x0
    e76d:	4c 19 e8             	sbb    rax,r13
    e770:	0f 83 df 04 00 00    	jae    ec55 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9d5>
    e776:	4c 89 ed             	mov    rbp,r13
      unsigned __n = 1;
    e779:	be 01 00 00 00       	mov    esi,0x1
    e77e:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
	  if (__value < __b2) return __n + 1;
    e783:	45 31 ff             	xor    r15d,r15d
    e786:	49 89 ee             	mov    r14,rbp
    e789:	4c 89 64 24 10       	mov    QWORD PTR [rsp+0x10],r12
	  if (__value < (unsigned)__base) return __n;
    e78e:	bb 9f 86 01 00       	mov    ebx,0x1869f
    e793:	4d 89 e5             	mov    r13,r12
    e796:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
    e79b:	89 f5                	mov    ebp,esi
    e79d:	4c 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],r9
    e7a2:	eb 5c                	jmp    e800 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x580>
    e7a4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    e7a8:	b8 e7 03 00 00       	mov    eax,0x3e7
    e7ad:	4c 39 e8             	cmp    rax,r13
    e7b0:	4c 89 f8             	mov    rax,r15
    e7b3:	4c 19 f0             	sbb    rax,r14
    e7b6:	0f 83 14 04 00 00    	jae    ebd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x950>
	  if (__value < __b4) return __n + 3;
    e7bc:	b8 0f 27 00 00       	mov    eax,0x270f
    e7c1:	4c 39 e8             	cmp    rax,r13
    e7c4:	4c 89 f8             	mov    rax,r15
    e7c7:	4c 19 f0             	sbb    rax,r14
    e7ca:	0f 83 20 04 00 00    	jae    ebf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x970>
	  __value /= __b4;
    e7d0:	31 c9                	xor    ecx,ecx
    e7d2:	4c 89 ef             	mov    rdi,r13
    e7d5:	ba 10 27 00 00       	mov    edx,0x2710
    e7da:	4c 89 f6             	mov    rsi,r14
    e7dd:	e8 de 48 ff ff       	call   30c0 <__udivti3@plt>
	  __n += 4;
    e7e2:	83 c5 04             	add    ebp,0x4
	  if (__value < (unsigned)__base) return __n;
    e7e5:	4c 89 ff             	mov    rdi,r15
    e7e8:	4c 39 eb             	cmp    rbx,r13
    e7eb:	4c 19 f7             	sbb    rdi,r14
	  __value /= __b4;
    e7ee:	48 89 c1             	mov    rcx,rax
    e7f1:	48 89 d0             	mov    rax,rdx
	  if (__value < (unsigned)__base) return __n;
    e7f4:	0f 83 16 04 00 00    	jae    ec10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x990>
    e7fa:	49 89 cd             	mov    r13,rcx
    e7fd:	49 89 c6             	mov    r14,rax
	  if (__value < __b2) return __n + 1;
    e800:	b8 63 00 00 00       	mov    eax,0x63
    e805:	4c 39 e8             	cmp    rax,r13
    e808:	4c 89 f8             	mov    rax,r15
    e80b:	4c 19 f0             	sbb    rax,r14
    e80e:	72 98                	jb     e7a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x528>
    e810:	89 ee                	mov    esi,ebp
    e812:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    e817:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    e81c:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    e821:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    e826:	83 c6 01             	add    esi,0x1
      if (__builtin_expect((__last - __first) < __len, 0))
    e829:	81 fe 80 00 00 00    	cmp    esi,0x80
    e82f:	0f 87 02 04 00 00    	ja     ec37 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9b7>
      constexpr char __digits[201] =
    e835:	66 0f 6f 05 63 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f63]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    e83c:	00 
      while (__val >= 100)
    e83d:	b8 63 00 00 00       	mov    eax,0x63
      unsigned __pos = __len - 1;
    e842:	8d 6e ff             	lea    ebp,[rsi-0x1]
      while (__val >= 100)
    e845:	4c 8d 9c 24 c0 00 00 	lea    r11,[rsp+0xc0]
    e84c:	00 
    e84d:	4c 39 e0             	cmp    rax,r12
    e850:	b8 00 00 00 00       	mov    eax,0x0
      constexpr char __digits[201] =
    e855:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    e85c:	00 
    e85d:	66 0f 6f 05 4b 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f4b]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    e864:	00 
      while (__val >= 100)
    e865:	4c 19 e8             	sbb    rax,r13
      constexpr char __digits[201] =
    e868:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    e86f:	00 
    e870:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 187c0 <std::__unicode::__v15_1_0::__width_edges+0x340>
    e877:	00 
    e878:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    e87f:	00 
    e880:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x350>
    e887:	00 
    e888:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    e88f:	00 
    e890:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x360>
    e897:	00 
    e898:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    e89f:	00 
    e8a0:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x370>
    e8a7:	00 
    e8a8:	0f 29 84 24 10 01 00 	movaps XMMWORD PTR [rsp+0x110],xmm0
    e8af:	00 
    e8b0:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x380>
    e8b7:	00 
    e8b8:	0f 29 84 24 20 01 00 	movaps XMMWORD PTR [rsp+0x120],xmm0
    e8bf:	00 
    e8c0:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x390>
    e8c7:	00 
    e8c8:	0f 29 84 24 30 01 00 	movaps XMMWORD PTR [rsp+0x130],xmm0
    e8cf:	00 
    e8d0:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    e8d7:	00 
    e8d8:	0f 29 84 24 40 01 00 	movaps XMMWORD PTR [rsp+0x140],xmm0
    e8df:	00 
    e8e0:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    e8e7:	00 
    e8e8:	0f 29 84 24 50 01 00 	movaps XMMWORD PTR [rsp+0x150],xmm0
    e8ef:	00 
    e8f0:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    e8f7:	00 
    e8f8:	0f 29 84 24 60 01 00 	movaps XMMWORD PTR [rsp+0x160],xmm0
    e8ff:	00 
    e900:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    e907:	00 
    e908:	0f 29 84 24 70 01 00 	movaps XMMWORD PTR [rsp+0x170],xmm0
    e90f:	00 
    e910:	66 0f 6f 05 48 9f 00 	movdqa xmm0,XMMWORD PTR [rip+0x9f48]        # 18860 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    e917:	00 
    e918:	0f 11 84 24 79 01 00 	movups XMMWORD PTR [rsp+0x179],xmm0
    e91f:	00 
      while (__val >= 100)
    e920:	0f 83 2a 02 00 00    	jae    eb50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8d0>
    e926:	49 be ff ff ff ff ff 	movabs r14,0xfffffffffffffff
    e92d:	ff ff 0f 
    e930:	89 74 24 10          	mov    DWORD PTR [rsp+0x10],esi
    e934:	49 bf 29 5c 8f c2 f5 	movabs r15,0x8f5c28f5c28f5c29
    e93b:	28 5c 8f 
    e93e:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
    e943:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e94a:	00 00 00 00 
    e94e:	66 90                	xchg   ax,ax
    e950:	4c 89 e0             	mov    rax,r12
    e953:	4c 89 e1             	mov    rcx,r12
    e956:	4c 89 e6             	mov    rsi,r12
    e959:	31 db                	xor    ebx,ebx
    e95b:	4c 0f ac e8 3c       	shrd   rax,r13,0x3c
    e960:	4c 21 f1             	and    rcx,r14
    e963:	4c 89 ef             	mov    rdi,r13
    e966:	41 b9 19 00 00 00    	mov    r9d,0x19
    e96c:	4c 21 f0             	and    rax,r14
    e96f:	48 01 c1             	add    rcx,rax
    e972:	4c 89 e8             	mov    rax,r13
    e975:	48 c1 e8 38          	shr    rax,0x38
    e979:	48 01 c1             	add    rcx,rax
    e97c:	48 b8 15 ae 47 e1 7a 	movabs rax,0x47ae147ae147ae15
    e983:	14 ae 47 
    e986:	48 f7 e1             	mul    rcx
    e989:	48 89 c8             	mov    rax,rcx
    e98c:	48 29 d0             	sub    rax,rdx
    e98f:	48 d1 e8             	shr    rax,1
    e992:	48 01 c2             	add    rdx,rax
    e995:	48 c1 ea 04          	shr    rdx,0x4
    e999:	48 8d 04 92          	lea    rax,[rdx+rdx*4]
    e99d:	48 8d 04 80          	lea    rax,[rax+rax*4]
    e9a1:	48 29 c1             	sub    rcx,rax
    e9a4:	48 b8 c2 f5 28 5c 8f 	movabs rax,0x28f5c28f5c28f5c2
    e9ab:	c2 f5 28 
    e9ae:	48 29 ce             	sub    rsi,rcx
    e9b1:	48 19 df             	sbb    rdi,rbx
    e9b4:	48 0f af c6          	imul   rax,rsi
    e9b8:	49 89 f8             	mov    r8,rdi
    e9bb:	4d 0f af c7          	imul   r8,r15
    e9bf:	49 01 c0             	add    r8,rax
    e9c2:	48 89 f0             	mov    rax,rsi
    e9c5:	49 f7 e7             	mul    r15
    e9c8:	48 89 c6             	mov    rsi,rax
    e9cb:	83 e0 03             	and    eax,0x3
    e9ce:	49 01 d0             	add    r8,rdx
    e9d1:	49 f7 e1             	mul    r9
    e9d4:	4c 89 c7             	mov    rdi,r8
    e9d7:	4c 89 ea             	mov    rdx,r13
    e9da:	48 01 c8             	add    rax,rcx
    e9dd:	4c 89 e1             	mov    rcx,r12
	  auto const __num = (__val % 100) * 2;
    e9e0:	48 01 c0             	add    rax,rax
	  __val /= 100;
    e9e3:	48 c1 ef 02          	shr    rdi,0x2
    e9e7:	49 89 fd             	mov    r13,rdi
	  __first[__pos] = __digits[__num + 1];
    e9ea:	49 8d 3c 03          	lea    rdi,[r11+rax*1]
	  __val /= 100;
    e9ee:	4c 0f ac c6 02       	shrd   rsi,r8,0x2
	  __first[__pos - 1] = __digits[__num];
    e9f3:	4a 8d 04 18          	lea    rax,[rax+r11*1]
	  __first[__pos] = __digits[__num + 1];
    e9f7:	0f b6 7f 01          	movzx  edi,BYTE PTR [rdi+0x1]
	  __first[__pos - 1] = __digits[__num];
    e9fb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
	  __val /= 100;
    e9fe:	49 89 f4             	mov    r12,rsi
	  __first[__pos] = __digits[__num + 1];
    ea01:	89 ee                	mov    esi,ebp
    ea03:	40 88 7c 34 33       	mov    BYTE PTR [rsp+rsi*1+0x33],dil
	  __first[__pos - 1] = __digits[__num];
    ea08:	8d 75 ff             	lea    esi,[rbp-0x1]
	  __pos -= 2;
    ea0b:	83 ed 02             	sub    ebp,0x2
	  __first[__pos - 1] = __digits[__num];
    ea0e:	88 44 34 33          	mov    BYTE PTR [rsp+rsi*1+0x33],al
      while (__val >= 100)
    ea12:	b8 0f 27 00 00       	mov    eax,0x270f
    ea17:	48 39 c8             	cmp    rax,rcx
    ea1a:	b8 00 00 00 00       	mov    eax,0x0
    ea1f:	48 19 d0             	sbb    rax,rdx
    ea22:	0f 82 28 ff ff ff    	jb     e950 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d0>
      if (__val >= 10)
    ea28:	b8 e7 03 00 00       	mov    eax,0x3e7
    ea2d:	8b 74 24 10          	mov    esi,DWORD PTR [rsp+0x10]
    ea31:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    ea36:	48 39 c8             	cmp    rax,rcx
    ea39:	b8 00 00 00 00       	mov    eax,0x0
    ea3e:	48 19 d0             	sbb    rax,rdx
      __res.ptr = __first + __len;
    ea41:	89 f3                	mov    ebx,esi
    ea43:	0f 82 07 01 00 00    	jb     eb50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8d0>
	__first[0] = '0' + __val;
    ea49:	41 83 c4 30          	add    r12d,0x30
    ea4d:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    ea52:	44 88 64 24 33       	mov    BYTE PTR [rsp+0x33],r12b
    ea57:	4c 01 eb             	add    rbx,r13
      return __res;
    ea5a:	e9 91 fb ff ff       	jmp    e5f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x370>
    ea5f:	90                   	nop
	  auto const __num = __val & 7;
    ea60:	4c 89 e0             	mov    rax,r12
	  __val >>= 3;
    ea63:	4d 0f ac ec 03       	shrd   r12,r13,0x3
	  auto const __num = __val & 7;
    ea68:	83 e0 07             	and    eax,0x7
	  __first[0] = '0' + __val;
    ea6b:	41 83 c4 30          	add    r12d,0x30
	  __first[1] = '0' + __num;
    ea6f:	83 c0 30             	add    eax,0x30
    ea72:	88 44 24 34          	mov    BYTE PTR [rsp+0x34],al
    ea76:	e9 a0 fc ff ff       	jmp    e71b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x49b>
    ea7b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  const auto __num = __val & 0xF;
    ea80:	4c 89 e1             	mov    rcx,r12
    ea83:	83 e1 0f             	and    ecx,0xf
	  __first[1] = __digits[__num];
    ea86:	4c 01 d9             	add    rcx,r11
    ea89:	0f b6 11             	movzx  edx,BYTE PTR [rcx]
    ea8c:	88 54 24 34          	mov    BYTE PTR [rsp+0x34],dl
	  __first[0] = __digits[__val];
    ea90:	4c 89 e2             	mov    rdx,r12
    ea93:	4c 0f ac ea 04       	shrd   rdx,r13,0x4
    ea98:	42 0f b6 14 1a       	movzx  edx,BYTE PTR [rdx+r11*1]
    ea9d:	e9 1f fb ff ff       	jmp    e5c1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x341>
    eaa2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type == _Pres_X)
    eaa8:	48 8d 2d 73 67 00 00 	lea    rbp,[rip+0x6773]        # 15222 <CSWTCH.1110+0x142>
    eaaf:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    eab4:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    eab9:	4d 89 ec             	mov    r12,r13
    eabc:	4d 89 d6             	mov    r14,r10
    eabf:	4d 89 cf             	mov    r15,r9
    eac2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    eac9:	00 00 00 00 
    eacd:	0f 1f 00             	nop    DWORD PTR [rax]
		  *__p = __builtin_toupper(*__p);
    ead0:	41 0f be 3c 24       	movsx  edi,BYTE PTR [r12]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    ead5:	49 83 c4 01          	add    r12,0x1
		  *__p = __builtin_toupper(*__p);
    ead9:	e8 72 48 ff ff       	call   3350 <toupper@plt>
    eade:	41 88 44 24 ff       	mov    BYTE PTR [r12-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    eae3:	49 39 dc             	cmp    r12,rbx
    eae6:	75 e8                	jne    ead0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x850>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    eae8:	4d 89 f2             	mov    r10,r14
    eaeb:	4d 89 f9             	mov    r9,r15
    eaee:	b8 02 00 00 00       	mov    eax,0x2
    eaf3:	e9 3e fc ff ff       	jmp    e736 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b6>
    eaf8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    eaff:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    eb00:	49 0f bd c5          	bsr    rax,r13
      constexpr char __digits[] = {
    eb04:	66 0f 6f 05 64 9d 00 	movdqa xmm0,XMMWORD PTR [rip+0x9d64]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    eb0b:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    eb0c:	83 c0 44             	add    eax,0x44
    eb0f:	c1 e8 02             	shr    eax,0x2
      constexpr char __digits[] = {
    eb12:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    eb19:	00 
      unsigned __pos = __len - 1;
    eb1a:	8d 50 ff             	lea    edx,[rax-0x1]
      while (__val >= 0x100)
    eb1d:	e9 24 fa ff ff       	jmp    e546 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c6>
    eb22:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __builtin_clzll(__high) - __diff;
    eb28:	49 0f bd d5          	bsr    rdx,r13
      return _Nd - std::__countl_zero(__x);
    eb2c:	bb 80 00 00 00       	mov    ebx,0x80
      unsigned __pos = __len - 1;
    eb31:	b8 7f 00 00 00       	mov    eax,0x7f
	      return __builtin_clzll(__high) - __diff;
    eb36:	48 83 f2 3f          	xor    rdx,0x3f
      return _Nd - std::__countl_zero(__x);
    eb3a:	29 d3                	sub    ebx,edx
    eb3c:	29 d0                	sub    eax,edx
      while (__pos)
    eb3e:	e9 bd f8 ff ff       	jmp    e400 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x180>
    eb43:	bb 01 00 00 00       	mov    ebx,0x1
    eb48:	e9 f0 f8 ff ff       	jmp    e43d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1bd>
    eb4d:	0f 1f 00             	nop    DWORD PTR [rax]
	  auto const __num = __val * 2;
    eb50:	4d 01 e4             	add    r12,r12
      __res.ptr = __first + __len;
    eb53:	89 f3                	mov    ebx,esi
	  __first[1] = __digits[__num + 1];
    eb55:	4b 8d 04 23          	lea    rax,[r11+r12*1]
	  __first[0] = __digits[__num];
    eb59:	4d 01 dc             	add    r12,r11
	  __first[1] = __digits[__num + 1];
    eb5c:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
	  __first[0] = __digits[__num];
    eb60:	45 0f b6 24 24       	movzx  r12d,BYTE PTR [r12]
	  __first[1] = __digits[__num + 1];
    eb65:	88 44 24 34          	mov    BYTE PTR [rsp+0x34],al
    eb69:	e9 df fe ff ff       	jmp    ea4d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7cd>
    eb6e:	66 90                	xchg   ax,ax
      if (__value == 0)
    eb70:	48 89 f0             	mov    rax,rsi
    eb73:	48 09 d0             	or     rax,rdx
    eb76:	0f 85 cd 00 00 00    	jne    ec49 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9c9>
	  if (_M_spec._M_alt && __base_prefix.size())
    eb7c:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  *__first = '0';
    eb80:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    eb85:	a8 10                	test   al,0x10
    eb87:	0f 84 a8 fa ff ff    	je     e635 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3b5>
    eb8d:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    eb92:	b8 02 00 00 00       	mov    eax,0x2
    eb97:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
	  if (_M_spec._M_alt && __base_prefix.size())
    eb9c:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    eba3:	48 8d 2d 7b 66 00 00 	lea    rbp,[rip+0x667b]        # 15225 <CSWTCH.1110+0x145>
    ebaa:	e9 78 f7 ff ff       	jmp    e327 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa7>
    ebaf:	90                   	nop
	__len = (__to_chars_len_2(__val) + 2) / 3;
    ebb0:	49 0f bd c5          	bsr    rax,r13
    ebb4:	8d 58 43             	lea    ebx,[rax+0x43]
    ebb7:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    ebbc:	48 0f af d8          	imul   rbx,rax
    ebc0:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    ebc4:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0100)
    ebc7:	e9 be fa ff ff       	jmp    e68a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x40a>
    ebcc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__value < __b3) return __n + 2;
    ebd0:	89 ee                	mov    esi,ebp
    ebd2:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    ebd7:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    ebdc:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    ebe1:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    ebe6:	83 c6 02             	add    esi,0x2
    ebe9:	e9 3b fc ff ff       	jmp    e829 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a9>
    ebee:	66 90                	xchg   ax,ax
	  if (__value < __b4) return __n + 3;
    ebf0:	89 ee                	mov    esi,ebp
    ebf2:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    ebf7:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    ebfc:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    ec01:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    ec06:	83 c6 03             	add    esi,0x3
    ec09:	e9 1b fc ff ff       	jmp    e829 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a9>
    ec0e:	66 90                	xchg   ax,ax
    ec10:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    ec15:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    ec1a:	89 ee                	mov    esi,ebp
    ec1c:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    ec21:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
    ec26:	e9 fe fb ff ff       	jmp    e829 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a9>
    ec2b:	48 8d 2d f0 65 00 00 	lea    rbp,[rip+0x65f0]        # 15222 <CSWTCH.1110+0x142>
    ec32:	e9 d7 f8 ff ff       	jmp    e50e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x28e>
	  return __res;
    ec37:	48 8d 9c 24 b3 00 00 	lea    rbx,[rsp+0xb3]
    ec3e:	00 
    ec3f:	4c 8d 6c 24 33       	lea    r13,[rsp+0x33]
    ec44:	e9 a7 f9 ff ff       	jmp    e5f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x370>
    ec49:	48 8d 2d d5 65 00 00 	lea    rbp,[rip+0x65d5]        # 15225 <CSWTCH.1110+0x145>
    ec50:	e9 b9 f8 ff ff       	jmp    e50e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x28e>
	  if (__value < (unsigned)__base) return __n;
    ec55:	bb 01 00 00 00       	mov    ebx,0x1
    ec5a:	e9 ea fd ff ff       	jmp    ea49 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7c9>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    ec5f:	e8 ec 44 ff ff       	call   3150 <abort@plt>
    ec64:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ec6b:	00 00 00 
    ec6e:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    ec75:	00 00 00 
    ec78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    ec7f:	00 

000000000000ec80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
    ec80:	41 57                	push   r15
    ec82:	49 89 f1             	mov    r9,rsi
    ec85:	49 89 fa             	mov    r10,rdi
    ec88:	49 89 cf             	mov    r15,rcx
    ec8b:	41 56                	push   r14
    ec8d:	41 55                	push   r13
    ec8f:	41 54                	push   r12
    ec91:	49 89 f4             	mov    r12,rsi
    ec94:	55                   	push   rbp
    ec95:	53                   	push   rbx
    ec96:	48 81 ec 98 01 00 00 	sub    rsp,0x198
	  if (_M_spec._M_type == _Pres_c)
    ec9d:	0f b6 47 01          	movzx  eax,BYTE PTR [rdi+0x1]
    eca1:	89 c6                	mov    esi,eax
    eca3:	83 e6 78             	and    esi,0x78
    eca6:	40 80 fe 38          	cmp    sil,0x38
    ecaa:	74 74                	je     ed20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa0>
	  switch (_M_spec._M_type)
    ecac:	c0 e8 03             	shr    al,0x3
    ecaf:	49 89 d5             	mov    r13,rdx
    ecb2:	83 e0 0f             	and    eax,0xf
    ecb5:	3c 04                	cmp    al,0x4
    ecb7:	0f 84 9b 01 00 00    	je     ee58 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d8>
    ecbd:	0f 87 a5 02 00 00    	ja     ef68 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e8>
    ecc3:	3c 01                	cmp    al,0x1
    ecc5:	0f 87 b5 00 00 00    	ja     ed80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x100>
      if (__value == 0)
    eccb:	4c 89 c8             	mov    rax,r9
    ecce:	48 09 d0             	or     rax,rdx
    ecd1:	0f 85 f1 03 00 00    	jne    f0c8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x448>
	  *__first = '0';
    ecd7:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    ecdc:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    ece1:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    ece6:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  char* __start = __buf + 3;
    ecea:	48 89 ce             	mov    rsi,rcx
	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    eced:	c0 e8 02             	shr    al,0x2
    ecf0:	83 e0 03             	and    eax,0x3
      else if (__sign == _Sign_plus)
    ecf3:	83 f8 01             	cmp    eax,0x1
    ecf6:	0f 84 54 02 00 00    	je     ef50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d0>
      else if (__sign == _Sign_space)
    ecfc:	83 f8 03             	cmp    eax,0x3
    ecff:	0f 84 9b 02 00 00    	je     efa0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x320>
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    ed05:	48 29 f3             	sub    rbx,rsi
    ed08:	48 89 f2             	mov    rdx,rsi
			       __start_digits - __start, __fc);
    ed0b:	48 29 f1             	sub    rcx,rsi
	  return _M_format_int(string_view(__start, __res.ptr - __start),
    ed0e:	4d 89 f8             	mov    r8,r15
    ed11:	48 89 de             	mov    rsi,rbx
    ed14:	4c 89 d7             	mov    rdi,r10
    ed17:	e8 34 d0 ff ff       	call   bd50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
    ed1c:	eb 49                	jmp    ed67 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe7>
    ed1e:	66 90                	xchg   ax,ax
	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    ed20:	b8 7f 00 00 00       	mov    eax,0x7f
    ed25:	4c 39 c8             	cmp    rax,r9
    ed28:	b8 00 00 00 00       	mov    eax,0x0
    ed2d:	48 19 d0             	sbb    rax,rdx
    ed30:	0f 82 b7 08 00 00    	jb     f5ed <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x96d>
    ed36:	48 8d 8c 24 c0 00 00 	lea    rcx,[rsp+0xc0]
    ed3d:	00 
    ed3e:	b8 01 00 00 00       	mov    eax,0x1
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    ed43:	4d 89 d0             	mov    r8,r10
    ed46:	ba 01 00 00 00       	mov    edx,0x1
    ed4b:	44 88 8c 24 c0 00 00 	mov    BYTE PTR [rsp+0xc0],r9b
    ed52:	00 
    ed53:	48 89 ce             	mov    rsi,rcx
    ed56:	48 89 c7             	mov    rdi,rax
    ed59:	41 b9 01 00 00 00    	mov    r9d,0x1
    ed5f:	4c 89 f9             	mov    rcx,r15
    ed62:	e8 29 ae ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	}
    ed67:	48 81 c4 98 01 00 00 	add    rsp,0x198
    ed6e:	5b                   	pop    rbx
    ed6f:	5d                   	pop    rbp
    ed70:	41 5c                	pop    r12
    ed72:	41 5d                	pop    r13
    ed74:	41 5e                	pop    r14
    ed76:	41 5f                	pop    r15
    ed78:	c3                   	ret
    ed79:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    ed80:	40 80 fe 10          	cmp    sil,0x10
    ed84:	48 8d 05 94 64 00 00 	lea    rax,[rip+0x6494]        # 1521f <CSWTCH.1110+0x13f>
    ed8b:	48 8d 2d 8a 64 00 00 	lea    rbp,[rip+0x648a]        # 1521c <CSWTCH.1110+0x13c>
    ed92:	48 0f 45 e8          	cmovne rbp,rax
      if (__value == 0)
    ed96:	4c 89 c8             	mov    rax,r9
    ed99:	48 09 d0             	or     rax,rdx
    ed9c:	0f 84 ee 02 00 00    	je     f090 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x410>
	  if (__high != 0)
    eda2:	48 85 d2             	test   rdx,rdx
    eda5:	0f 85 2d 07 00 00    	jne    f4d8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x858>
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
    edab:	49 0f bd d1          	bsr    rdx,r9
      return _Nd - std::__countl_zero(__x);
    edaf:	bb 80 00 00 00       	mov    ebx,0x80
      unsigned __pos = __len - 1;
    edb4:	b8 7f 00 00 00       	mov    eax,0x7f
	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
    edb9:	48 83 f2 3f          	xor    rdx,0x3f
    edbd:	83 c2 40             	add    edx,0x40
      return _Nd - std::__countl_zero(__x);
    edc0:	29 d3                	sub    ebx,edx
      while (__pos)
    edc2:	29 d0                	sub    eax,edx
    edc4:	0f 84 2b 07 00 00    	je     f4f5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x875>
    edca:	89 c1                	mov    ecx,eax
    edcc:	83 e8 01             	sub    eax,0x1
    edcf:	48 8d 74 0c 2f       	lea    rsi,[rsp+rcx*1+0x2f]
    edd4:	48 8d 54 0c 30       	lea    rdx,[rsp+rcx*1+0x30]
    edd9:	48 29 c6             	sub    rsi,rax
    eddc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  __first[__pos--] = '0' + (__val & 1);
    ede0:	44 89 e0             	mov    eax,r12d
      while (__pos)
    ede3:	48 83 ea 01          	sub    rdx,0x1
	  __val >>= 1;
    ede7:	4d 0f ac ec 01       	shrd   r12,r13,0x1
	  __first[__pos--] = '0' + (__val & 1);
    edec:	83 e0 01             	and    eax,0x1
	  __val >>= 1;
    edef:	49 d1 ed             	shr    r13,1
	  __first[__pos--] = '0' + (__val & 1);
    edf2:	83 c0 30             	add    eax,0x30
    edf5:	88 42 04             	mov    BYTE PTR [rdx+0x4],al
      while (__pos)
    edf8:	48 39 d6             	cmp    rsi,rdx
    edfb:	75 e3                	jne    ede0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x160>
      __res.ptr = __first + __len;
    edfd:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    ee02:	48 63 db             	movsxd rbx,ebx
    ee05:	b8 31 00 00 00       	mov    eax,0x31
    ee0a:	48 01 cb             	add    rbx,rcx
      __first[0] = '1';
    ee0d:	88 44 24 33          	mov    BYTE PTR [rsp+0x33],al
	  if (_M_spec._M_alt && __base_prefix.size())
    ee11:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
    ee15:	a8 10                	test   al,0x10
    ee17:	0f 84 68 02 00 00    	je     f085 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x405>
    ee1d:	48 c7 c6 fe ff ff ff 	mov    rsi,0xfffffffffffffffe
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    ee24:	ba 02 00 00 00       	mov    edx,0x2
	      __start -= __base_prefix.size();
    ee29:	48 01 ce             	add    rsi,rcx
	      __builtin_memcpy(__start, __base_prefix.data(),
    ee2c:	89 d7                	mov    edi,edx
    ee2e:	85 d2                	test   edx,edx
    ee30:	0f 84 b7 fe ff ff    	je     eced <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
    ee36:	31 d2                	xor    edx,edx
    ee38:	41 89 d0             	mov    r8d,edx
    ee3b:	83 c2 01             	add    edx,0x1
    ee3e:	46 0f b6 4c 05 00    	movzx  r9d,BYTE PTR [rbp+r8*1+0x0]
    ee44:	46 88 0c 06          	mov    BYTE PTR [rsi+r8*1],r9b
    ee48:	39 fa                	cmp    edx,edi
    ee4a:	72 ec                	jb     ee38 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1b8>
    ee4c:	e9 9c fe ff ff       	jmp    eced <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
    ee51:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      if (__i != 0)
    ee58:	4c 89 c8             	mov    rax,r9
    ee5b:	48 09 d0             	or     rax,rdx
    ee5e:	0f 84 44 02 00 00    	je     f0a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x428>
	  if (__high != 0)
    ee64:	48 85 d2             	test   rdx,rdx
    ee67:	0f 85 b3 06 00 00    	jne    f520 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8a0>
	__len = (__to_chars_len_2(__val) + 2) / 3;
    ee6d:	49 0f bd c1          	bsr    rax,r9
      while (__val >= 0100)
    ee71:	ba 3f 00 00 00       	mov    edx,0x3f
	__len = (__to_chars_len_2(__val) + 2) / 3;
    ee76:	8d 58 03             	lea    ebx,[rax+0x3]
    ee79:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    ee7e:	48 0f af d8          	imul   rbx,rax
    ee82:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    ee86:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0100)
    ee89:	4c 39 ca             	cmp    rdx,r9
    ee8c:	73 73                	jae    ef01 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x281>
    ee8e:	be 3f 00 00 00       	mov    esi,0x3f
    ee93:	31 d2                	xor    edx,edx
    ee95:	89 df                	mov    edi,ebx
    ee97:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    ee9e:	00 00 00 00 
    eea2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    eea9:	00 00 00 00 
    eead:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    eeb4:	00 00 00 00 
    eeb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    eebf:	00 
	  auto __num = __val & 7;
    eec0:	4c 89 e1             	mov    rcx,r12
	  __first[__pos] = '0' + __num;
    eec3:	41 89 c0             	mov    r8d,eax
      while (__val >= 0100)
    eec6:	48 89 d3             	mov    rbx,rdx
	  auto __num = __val & 7;
    eec9:	83 e1 07             	and    ecx,0x7
	  __first[__pos] = '0' + __num;
    eecc:	83 c1 30             	add    ecx,0x30
    eecf:	42 88 4c 04 33       	mov    BYTE PTR [rsp+r8*1+0x33],cl
	  __val >>= 3;
    eed4:	4c 89 e1             	mov    rcx,r12
	  __val >>= 3;
    eed7:	4d 0f ac ec 06       	shrd   r12,r13,0x6
	  __first[__pos - 1] = '0' + __num;
    eedc:	44 8d 40 ff          	lea    r8d,[rax-0x1]
	  __val >>= 3;
    eee0:	4c 0f ac e9 03       	shrd   rcx,r13,0x3
	  __pos -= 2;
    eee5:	83 e8 02             	sub    eax,0x2
	  __val >>= 3;
    eee8:	49 c1 ed 06          	shr    r13,0x6
	  __num = __val & 7;
    eeec:	83 e1 07             	and    ecx,0x7
	  __first[__pos - 1] = '0' + __num;
    eeef:	83 c1 30             	add    ecx,0x30
      while (__val >= 0100)
    eef2:	4c 39 e6             	cmp    rsi,r12
    eef5:	4c 19 eb             	sbb    rbx,r13
	  __first[__pos - 1] = '0' + __num;
    eef8:	42 88 4c 04 33       	mov    BYTE PTR [rsp+r8*1+0x33],cl
      while (__val >= 0100)
    eefd:	72 c1                	jb     eec0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
    eeff:	89 fb                	mov    ebx,edi
      if (__val >= 010)
    ef01:	b8 07 00 00 00       	mov    eax,0x7
    ef06:	4c 39 e0             	cmp    rax,r12
    ef09:	b8 00 00 00 00       	mov    eax,0x0
    ef0e:	4c 19 e8             	sbb    rax,r13
    ef11:	0f 82 11 05 00 00    	jb     f428 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7a8>
	__first[0] = '0' + __val;
    ef17:	41 83 c4 30          	add    r12d,0x30
    ef1b:	44 88 64 24 33       	mov    BYTE PTR [rsp+0x33],r12b
      __res.ptr = __first + __len;
    ef20:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    ef25:	89 db                	mov    ebx,ebx
	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    ef27:	48 8d 2d aa 62 00 00 	lea    rbp,[rip+0x62aa]        # 151d8 <CSWTCH.1110+0xf8>
    ef2e:	48 01 cb             	add    rbx,rcx
    ef31:	ba 01 00 00 00       	mov    edx,0x1
	  if (_M_spec._M_alt && __base_prefix.size())
    ef36:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
	  char* __start = __buf + 3;
    ef3a:	48 89 ce             	mov    rsi,rcx
	  if (_M_spec._M_alt && __base_prefix.size())
    ef3d:	a8 10                	test   al,0x10
    ef3f:	0f 84 a8 fd ff ff    	je     eced <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
	      __start -= __base_prefix.size();
    ef45:	48 89 d6             	mov    rsi,rdx
    ef48:	48 f7 de             	neg    rsi
    ef4b:	e9 d9 fe ff ff       	jmp    ee29 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1a9>
    ef50:	b8 2b 00 00 00       	mov    eax,0x2b
	*__dest = '+';
    ef55:	88 46 ff             	mov    BYTE PTR [rsi-0x1],al
    ef58:	48 83 ee 01          	sub    rsi,0x1
    ef5c:	e9 a4 fd ff ff       	jmp    ed05 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x85>
    ef61:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    ef68:	40 80 fe 28          	cmp    sil,0x28
    ef6c:	0f 84 66 04 00 00    	je     f3d8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x758>
      if (__value == 0)
    ef72:	4c 89 c8             	mov    rax,r9
    ef75:	48 09 d0             	or     rax,rdx
    ef78:	75 36                	jne    efb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x330>
	  *__first = '0';
    ef7a:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
	      if (_M_spec._M_type == _Pres_X)
    ef7f:	40 80 fe 30          	cmp    sil,0x30
    ef83:	0f 84 cf 04 00 00    	je     f458 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7d8>
    ef89:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    ef8e:	48 8d 2d 8d 62 00 00 	lea    rbp,[rip+0x628d]        # 15222 <CSWTCH.1110+0x142>
    ef95:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    ef9a:	e9 da 00 00 00       	jmp    f079 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f9>
    ef9f:	90                   	nop
    efa0:	b8 20 00 00 00       	mov    eax,0x20
    efa5:	eb ae                	jmp    ef55 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2d5>
    efa7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    efae:	00 00 
    efb0:	48 8d 2d 6b 62 00 00 	lea    rbp,[rip+0x626b]        # 15222 <CSWTCH.1110+0x142>
    efb7:	48 85 d2             	test   rdx,rdx
    efba:	0f 85 f0 04 00 00    	jne    f4b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x830>
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    efc0:	49 0f bd c4          	bsr    rax,r12
      constexpr char __digits[] = {
    efc4:	66 0f 6f 05 a4 98 00 	movdqa xmm0,XMMWORD PTR [rip+0x98a4]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    efcb:	00 
      while (__val >= 0x100)
    efcc:	b9 ff 00 00 00       	mov    ecx,0xff
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    efd1:	83 c0 04             	add    eax,0x4
    efd4:	c1 e8 02             	shr    eax,0x2
      constexpr char __digits[] = {
    efd7:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    efde:	00 
      unsigned __pos = __len - 1;
    efdf:	8d 50 ff             	lea    edx,[rax-0x1]
      while (__val >= 0x100)
    efe2:	4c 39 c9             	cmp    rcx,r9
    efe5:	0f 83 d9 05 00 00    	jae    f5c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x944>
    efeb:	4c 8d 8c 24 c0 00 00 	lea    r9,[rsp+0xc0]
    eff2:	00 
    eff3:	41 b8 ff 00 00 00    	mov    r8d,0xff
    eff9:	31 ff                	xor    edi,edi
    effb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  auto __num = __val & 0xF;
    f000:	4c 89 e1             	mov    rcx,r12
	  __first[__pos] = __digits[__num];
    f003:	41 89 d3             	mov    r11d,edx
      while (__val >= 0x100)
    f006:	48 89 fb             	mov    rbx,rdi
	  auto __num = __val & 0xF;
    f009:	83 e1 0f             	and    ecx,0xf
	  __first[__pos] = __digits[__num];
    f00c:	4c 01 c9             	add    rcx,r9
    f00f:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
    f012:	42 88 4c 1c 33       	mov    BYTE PTR [rsp+r11*1+0x33],cl
	  __val >>= 4;
    f017:	4c 89 e1             	mov    rcx,r12
	  __val >>= 4;
    f01a:	4d 0f ac ec 08       	shrd   r12,r13,0x8
	  __first[__pos - 1] = __digits[__num];
    f01f:	44 8d 5a ff          	lea    r11d,[rdx-0x1]
	  __val >>= 4;
    f023:	4c 0f ac e9 04       	shrd   rcx,r13,0x4
	  __pos -= 2;
    f028:	83 ea 02             	sub    edx,0x2
	  __val >>= 4;
    f02b:	49 c1 ed 08          	shr    r13,0x8
	  __num = __val & 0xF;
    f02f:	83 e1 0f             	and    ecx,0xf
	  __first[__pos - 1] = __digits[__num];
    f032:	4c 01 c9             	add    rcx,r9
      while (__val >= 0x100)
    f035:	4d 39 e0             	cmp    r8,r12
	  __first[__pos - 1] = __digits[__num];
    f038:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
      while (__val >= 0x100)
    f03b:	4c 19 eb             	sbb    rbx,r13
	  __first[__pos - 1] = __digits[__num];
    f03e:	42 88 4c 1c 33       	mov    BYTE PTR [rsp+r11*1+0x33],cl
      while (__val >= 0x100)
    f043:	72 bb                	jb     f000 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x380>
      if (__val >= 0x10)
    f045:	ba 0f 00 00 00       	mov    edx,0xf
    f04a:	4c 39 e2             	cmp    rdx,r12
    f04d:	ba 00 00 00 00       	mov    edx,0x0
    f052:	4c 19 ea             	sbb    rdx,r13
    f055:	0f 82 a5 03 00 00    	jb     f400 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x780>
	__first[0] = __digits[__val];
    f05b:	4d 01 e1             	add    r9,r12
    f05e:	41 0f b6 11          	movzx  edx,BYTE PTR [r9]
      __res.ptr = __first + __len;
    f062:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    f067:	88 54 24 33          	mov    BYTE PTR [rsp+0x33],dl
    f06b:	48 8d 1c 01          	lea    rbx,[rcx+rax*1]
    f06f:	40 80 fe 30          	cmp    sil,0x30
    f073:	0f 84 f0 03 00 00    	je     f469 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e9>
	  if (_M_spec._M_alt && __base_prefix.size())
    f079:	41 0f b6 02          	movzx  eax,BYTE PTR [r10]
    f07d:	a8 10                	test   al,0x10
    f07f:	0f 85 98 fd ff ff    	jne    ee1d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x19d>
	  char* __start = __buf + 3;
    f085:	48 89 ce             	mov    rsi,rcx
    f088:	e9 60 fc ff ff       	jmp    eced <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
    f08d:	0f 1f 00             	nop    DWORD PTR [rax]
    f090:	b8 30 00 00 00       	mov    eax,0x30
    f095:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    f09a:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    f09f:	e9 69 fd ff ff       	jmp    ee0d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x18d>
    f0a4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    f0a8:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
	  *__first = '0';
    f0ad:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    f0b2:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
    f0b5:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    f0ba:	48 89 ce             	mov    rsi,rcx
    f0bd:	e9 2b fc ff ff       	jmp    eced <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6d>
    f0c2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    f0c8:	b8 09 00 00 00       	mov    eax,0x9
    f0cd:	4c 39 c8             	cmp    rax,r9
    f0d0:	b8 00 00 00 00       	mov    eax,0x0
    f0d5:	48 19 d0             	sbb    rax,rdx
    f0d8:	0f 83 05 05 00 00    	jae    f5e3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x963>
    f0de:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
	  if (__value < __b2) return __n + 1;
    f0e3:	45 31 f6             	xor    r14d,r14d
    f0e6:	49 89 d7             	mov    r15,rdx
    f0e9:	49 89 d5             	mov    r13,rdx
      unsigned __n = 1;
    f0ec:	41 bb 01 00 00 00    	mov    r11d,0x1
    f0f2:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
    f0f7:	4c 89 cd             	mov    rbp,r9
    f0fa:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    f0ff:	44 89 db             	mov    ebx,r11d
    f102:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
    f107:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
    f10c:	eb 5f                	jmp    f16d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ed>
    f10e:	66 90                	xchg   ax,ax
	  if (__value < __b3) return __n + 2;
    f110:	b8 e7 03 00 00       	mov    eax,0x3e7
    f115:	48 39 e8             	cmp    rax,rbp
    f118:	4c 89 f0             	mov    rax,r14
    f11b:	4c 19 e8             	sbb    rax,r13
    f11e:	0f 83 1c 04 00 00    	jae    f540 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8c0>
	  if (__value < __b4) return __n + 3;
    f124:	b8 0f 27 00 00       	mov    eax,0x270f
    f129:	48 39 e8             	cmp    rax,rbp
    f12c:	4c 89 f0             	mov    rax,r14
    f12f:	4c 19 e8             	sbb    rax,r13
    f132:	0f 83 38 04 00 00    	jae    f570 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
	  __value /= __b4;
    f138:	31 c9                	xor    ecx,ecx
    f13a:	48 89 ef             	mov    rdi,rbp
    f13d:	ba 10 27 00 00       	mov    edx,0x2710
    f142:	4c 89 ee             	mov    rsi,r13
    f145:	e8 76 3f ff ff       	call   30c0 <__udivti3@plt>
	  if (__value < (unsigned)__base) return __n;
    f14a:	bf 9f 86 01 00       	mov    edi,0x1869f
	  __n += 4;
    f14f:	83 c3 04             	add    ebx,0x4
	  if (__value < (unsigned)__base) return __n;
    f152:	48 39 ef             	cmp    rdi,rbp
    f155:	4c 89 f7             	mov    rdi,r14
	  __value /= __b4;
    f158:	48 89 c1             	mov    rcx,rax
    f15b:	48 89 d0             	mov    rax,rdx
	  if (__value < (unsigned)__base) return __n;
    f15e:	4c 19 ef             	sbb    rdi,r13
    f161:	0f 83 39 04 00 00    	jae    f5a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x920>
    f167:	48 89 cd             	mov    rbp,rcx
    f16a:	49 89 c5             	mov    r13,rax
	  if (__value < __b2) return __n + 1;
    f16d:	b8 63 00 00 00       	mov    eax,0x63
    f172:	48 39 e8             	cmp    rax,rbp
    f175:	4c 89 f0             	mov    rax,r14
    f178:	4c 19 e8             	sbb    rax,r13
    f17b:	72 93                	jb     f110 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x490>
    f17d:	41 89 db             	mov    r11d,ebx
    f180:	4c 89 fa             	mov    rdx,r15
    f183:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    f188:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    f18d:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    f192:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    f197:	41 83 c3 01          	add    r11d,0x1
    f19b:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
      if (__builtin_expect((__last - __first) < __len, 0))
    f1a0:	41 81 fb 80 00 00 00 	cmp    r11d,0x80
    f1a7:	0f 87 24 04 00 00    	ja     f5d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x951>
      constexpr char __digits[201] =
    f1ad:	66 0f 6f 05 eb 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95eb]        # 187a0 <std::__unicode::__v15_1_0::__width_edges+0x320>
    f1b4:	00 
      while (__val >= 100)
    f1b5:	b8 63 00 00 00       	mov    eax,0x63
      unsigned __pos = __len - 1;
    f1ba:	45 8d 43 ff          	lea    r8d,[r11-0x1]
      while (__val >= 100)
    f1be:	4c 39 c8             	cmp    rax,r9
    f1c1:	b8 00 00 00 00       	mov    eax,0x0
    f1c6:	4c 8d 8c 24 c0 00 00 	lea    r9,[rsp+0xc0]
    f1cd:	00 
      constexpr char __digits[201] =
    f1ce:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    f1d5:	00 
    f1d6:	66 0f 6f 05 d2 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95d2]        # 187b0 <std::__unicode::__v15_1_0::__width_edges+0x330>
    f1dd:	00 
      while (__val >= 100)
    f1de:	48 19 d0             	sbb    rax,rdx
      constexpr char __digits[201] =
    f1e1:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    f1e8:	00 
    f1e9:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 187c0 <std::__unicode::__v15_1_0::__width_edges+0x340>
    f1f0:	00 
    f1f1:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    f1f8:	00 
    f1f9:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 187d0 <std::__unicode::__v15_1_0::__width_edges+0x350>
    f200:	00 
    f201:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
    f208:	00 
    f209:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 187e0 <std::__unicode::__v15_1_0::__width_edges+0x360>
    f210:	00 
    f211:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    f218:	00 
    f219:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 187f0 <std::__unicode::__v15_1_0::__width_edges+0x370>
    f220:	00 
    f221:	0f 29 84 24 10 01 00 	movaps XMMWORD PTR [rsp+0x110],xmm0
    f228:	00 
    f229:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 18800 <std::__unicode::__v15_1_0::__width_edges+0x380>
    f230:	00 
    f231:	0f 29 84 24 20 01 00 	movaps XMMWORD PTR [rsp+0x120],xmm0
    f238:	00 
    f239:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 18810 <std::__unicode::__v15_1_0::__width_edges+0x390>
    f240:	00 
    f241:	0f 29 84 24 30 01 00 	movaps XMMWORD PTR [rsp+0x130],xmm0
    f248:	00 
    f249:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 18820 <std::__unicode::__v15_1_0::__width_edges+0x3a0>
    f250:	00 
    f251:	0f 29 84 24 40 01 00 	movaps XMMWORD PTR [rsp+0x140],xmm0
    f258:	00 
    f259:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 18830 <std::__unicode::__v15_1_0::__width_edges+0x3b0>
    f260:	00 
    f261:	0f 29 84 24 50 01 00 	movaps XMMWORD PTR [rsp+0x150],xmm0
    f268:	00 
    f269:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 18840 <std::__unicode::__v15_1_0::__width_edges+0x3c0>
    f270:	00 
    f271:	0f 29 84 24 60 01 00 	movaps XMMWORD PTR [rsp+0x160],xmm0
    f278:	00 
    f279:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 18850 <std::__unicode::__v15_1_0::__width_edges+0x3d0>
    f280:	00 
    f281:	0f 29 84 24 70 01 00 	movaps XMMWORD PTR [rsp+0x170],xmm0
    f288:	00 
    f289:	66 0f 6f 05 cf 95 00 	movdqa xmm0,XMMWORD PTR [rip+0x95cf]        # 18860 <std::__unicode::__v15_1_0::__width_edges+0x3e0>
    f290:	00 
    f291:	0f 11 84 24 79 01 00 	movups XMMWORD PTR [rsp+0x179],xmm0
    f298:	00 
      while (__val >= 100)
    f299:	0f 83 61 02 00 00    	jae    f500 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x880>
    f29f:	48 bd ff ff ff ff ff 	movabs rbp,0xfffffffffffffff
    f2a6:	ff ff 0f 
    f2a9:	44 89 5c 24 08       	mov    DWORD PTR [rsp+0x8],r11d
    f2ae:	49 be 29 5c 8f c2 f5 	movabs r14,0x8f5c28f5c28f5c29
    f2b5:	28 5c 8f 
    f2b8:	4c 89 54 24 10       	mov    QWORD PTR [rsp+0x10],r10
    f2bd:	0f 1f 00             	nop    DWORD PTR [rax]
    f2c0:	4c 89 e0             	mov    rax,r12
    f2c3:	4c 89 e1             	mov    rcx,r12
    f2c6:	4c 89 e6             	mov    rsi,r12
    f2c9:	31 db                	xor    ebx,ebx
    f2cb:	4c 0f ac e8 3c       	shrd   rax,r13,0x3c
    f2d0:	48 21 e9             	and    rcx,rbp
    f2d3:	4c 89 ef             	mov    rdi,r13
    f2d6:	41 bb 19 00 00 00    	mov    r11d,0x19
    f2dc:	48 21 e8             	and    rax,rbp
    f2df:	48 01 c1             	add    rcx,rax
    f2e2:	4c 89 e8             	mov    rax,r13
    f2e5:	48 c1 e8 38          	shr    rax,0x38
    f2e9:	48 01 c1             	add    rcx,rax
    f2ec:	48 b8 15 ae 47 e1 7a 	movabs rax,0x47ae147ae147ae15
    f2f3:	14 ae 47 
    f2f6:	48 f7 e1             	mul    rcx
    f2f9:	48 89 c8             	mov    rax,rcx
    f2fc:	48 29 d0             	sub    rax,rdx
    f2ff:	48 d1 e8             	shr    rax,1
    f302:	48 01 c2             	add    rdx,rax
    f305:	48 c1 ea 04          	shr    rdx,0x4
    f309:	48 8d 04 92          	lea    rax,[rdx+rdx*4]
    f30d:	48 8d 04 80          	lea    rax,[rax+rax*4]
    f311:	48 29 c1             	sub    rcx,rax
    f314:	48 b8 c2 f5 28 5c 8f 	movabs rax,0x28f5c28f5c28f5c2
    f31b:	c2 f5 28 
    f31e:	48 29 ce             	sub    rsi,rcx
    f321:	48 19 df             	sbb    rdi,rbx
    f324:	48 0f af c6          	imul   rax,rsi
    f328:	49 89 fa             	mov    r10,rdi
    f32b:	4d 0f af d6          	imul   r10,r14
    f32f:	49 01 c2             	add    r10,rax
    f332:	48 89 f0             	mov    rax,rsi
    f335:	49 f7 e6             	mul    r14
    f338:	48 89 c6             	mov    rsi,rax
    f33b:	83 e0 03             	and    eax,0x3
    f33e:	49 01 d2             	add    r10,rdx
    f341:	49 f7 e3             	mul    r11
    f344:	4c 89 d7             	mov    rdi,r10
    f347:	4c 89 ea             	mov    rdx,r13
    f34a:	48 01 c8             	add    rax,rcx
    f34d:	4c 89 e1             	mov    rcx,r12
	  auto const __num = (__val % 100) * 2;
    f350:	48 01 c0             	add    rax,rax
	  __val /= 100;
    f353:	48 c1 ef 02          	shr    rdi,0x2
    f357:	49 89 fd             	mov    r13,rdi
	  __first[__pos] = __digits[__num + 1];
    f35a:	49 8d 3c 01          	lea    rdi,[r9+rax*1]
	  __val /= 100;
    f35e:	4c 0f ac d6 02       	shrd   rsi,r10,0x2
	  __first[__pos - 1] = __digits[__num];
    f363:	4a 8d 04 08          	lea    rax,[rax+r9*1]
	  __first[__pos] = __digits[__num + 1];
    f367:	0f b6 7f 01          	movzx  edi,BYTE PTR [rdi+0x1]
	  __first[__pos - 1] = __digits[__num];
    f36b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
	  __val /= 100;
    f36e:	49 89 f4             	mov    r12,rsi
	  __first[__pos] = __digits[__num + 1];
    f371:	44 89 c6             	mov    esi,r8d
    f374:	40 88 7c 34 33       	mov    BYTE PTR [rsp+rsi*1+0x33],dil
	  __first[__pos - 1] = __digits[__num];
    f379:	41 8d 70 ff          	lea    esi,[r8-0x1]
	  __pos -= 2;
    f37d:	41 83 e8 02          	sub    r8d,0x2
	  __first[__pos - 1] = __digits[__num];
    f381:	88 44 34 33          	mov    BYTE PTR [rsp+rsi*1+0x33],al
      while (__val >= 100)
    f385:	b8 0f 27 00 00       	mov    eax,0x270f
    f38a:	48 39 c8             	cmp    rax,rcx
    f38d:	b8 00 00 00 00       	mov    eax,0x0
    f392:	48 19 d0             	sbb    rax,rdx
    f395:	0f 82 25 ff ff ff    	jb     f2c0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x640>
      if (__val >= 10)
    f39b:	b8 e7 03 00 00       	mov    eax,0x3e7
    f3a0:	44 8b 5c 24 08       	mov    r11d,DWORD PTR [rsp+0x8]
    f3a5:	4c 8b 54 24 10       	mov    r10,QWORD PTR [rsp+0x10]
    f3aa:	48 39 c8             	cmp    rax,rcx
    f3ad:	b8 00 00 00 00       	mov    eax,0x0
    f3b2:	48 19 d0             	sbb    rax,rdx
      __res.ptr = __first + __len;
    f3b5:	44 89 db             	mov    ebx,r11d
    f3b8:	0f 82 42 01 00 00    	jb     f500 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x880>
	__first[0] = '0' + __val;
    f3be:	41 83 c4 30          	add    r12d,0x30
    f3c2:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    f3c7:	44 88 64 24 33       	mov    BYTE PTR [rsp+0x33],r12b
    f3cc:	48 01 cb             	add    rbx,rcx
      return __res;
    f3cf:	e9 12 f9 ff ff       	jmp    ece6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x66>
    f3d4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      if (__value == 0)
    f3d8:	4c 89 c8             	mov    rax,r9
    f3db:	48 09 d0             	or     rax,rdx
    f3de:	75 68                	jne    f448 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7c8>
	  *__first = '0';
    f3e0:	c6 44 24 33 30       	mov    BYTE PTR [rsp+0x33],0x30
    f3e5:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    f3ea:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    f3ef:	48 8d 2d 2f 5e 00 00 	lea    rbp,[rip+0x5e2f]        # 15225 <CSWTCH.1110+0x145>
    f3f6:	e9 7e fc ff ff       	jmp    f079 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f9>
    f3fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  const auto __num = __val & 0xF;
    f400:	4c 89 e1             	mov    rcx,r12
    f403:	83 e1 0f             	and    ecx,0xf
	  __first[1] = __digits[__num];
    f406:	4c 01 c9             	add    rcx,r9
    f409:	0f b6 11             	movzx  edx,BYTE PTR [rcx]
    f40c:	88 54 24 34          	mov    BYTE PTR [rsp+0x34],dl
	  __first[0] = __digits[__val];
    f410:	4c 89 e2             	mov    rdx,r12
    f413:	4c 0f ac ea 04       	shrd   rdx,r13,0x4
    f418:	42 0f b6 14 0a       	movzx  edx,BYTE PTR [rdx+r9*1]
    f41d:	e9 40 fc ff ff       	jmp    f062 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e2>
    f422:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  auto const __num = __val & 7;
    f428:	4c 89 e0             	mov    rax,r12
	  __val >>= 3;
    f42b:	4d 0f ac ec 03       	shrd   r12,r13,0x3
	  auto const __num = __val & 7;
    f430:	83 e0 07             	and    eax,0x7
	  __first[0] = '0' + __val;
    f433:	41 83 c4 30          	add    r12d,0x30
	  __first[1] = '0' + __num;
    f437:	83 c0 30             	add    eax,0x30
    f43a:	88 44 24 34          	mov    BYTE PTR [rsp+0x34],al
    f43e:	e9 d8 fa ff ff       	jmp    ef1b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x29b>
    f443:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    f448:	48 8d 2d d6 5d 00 00 	lea    rbp,[rip+0x5dd6]        # 15225 <CSWTCH.1110+0x145>
    f44f:	e9 63 fb ff ff       	jmp    efb7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x337>
    f454:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_M_spec._M_type == _Pres_X)
    f458:	48 8d 2d c3 5d 00 00 	lea    rbp,[rip+0x5dc3]        # 15222 <CSWTCH.1110+0x142>
    f45f:	48 8d 5c 24 34       	lea    rbx,[rsp+0x34]
    f464:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    f469:	49 89 cd             	mov    r13,rcx
    f46c:	4d 89 d4             	mov    r12,r10
    f46f:	49 89 ce             	mov    r14,rcx
    f472:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    f479:	00 00 00 00 
    f47d:	0f 1f 00             	nop    DWORD PTR [rax]
		  *__p = __builtin_toupper(*__p);
    f480:	41 0f be 7d 00       	movsx  edi,BYTE PTR [r13+0x0]
		for (auto __p = __start; __p != __res.ptr; ++__p)
    f485:	49 83 c5 01          	add    r13,0x1
		  *__p = __builtin_toupper(*__p);
    f489:	e8 c2 3e ff ff       	call   3350 <toupper@plt>
    f48e:	41 88 45 ff          	mov    BYTE PTR [r13-0x1],al
		for (auto __p = __start; __p != __res.ptr; ++__p)
    f492:	49 39 dd             	cmp    r13,rbx
    f495:	75 e9                	jne    f480 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x800>
	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    f497:	4d 89 e2             	mov    r10,r12
    f49a:	4c 89 f1             	mov    rcx,r14
    f49d:	ba 02 00 00 00       	mov    edx,0x2
    f4a2:	e9 8f fa ff ff       	jmp    ef36 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2b6>
    f4a7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    f4ae:	00 00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    f4b0:	4c 0f bd da          	bsr    r11,rdx
      constexpr char __digits[] = {
    f4b4:	66 0f 6f 05 b4 93 00 	movdqa xmm0,XMMWORD PTR [rip+0x93b4]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
    f4bb:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
    f4bc:	41 8d 43 44          	lea    eax,[r11+0x44]
    f4c0:	c1 e8 02             	shr    eax,0x2
      constexpr char __digits[] = {
    f4c3:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
    f4ca:	00 
      unsigned __pos = __len - 1;
    f4cb:	8d 50 ff             	lea    edx,[rax-0x1]
      while (__val >= 0x100)
    f4ce:	e9 18 fb ff ff       	jmp    efeb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36b>
    f4d3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      return __builtin_clzll(__high) - __diff;
    f4d8:	4c 0f bd da          	bsr    r11,rdx
      return _Nd - std::__countl_zero(__x);
    f4dc:	bb 80 00 00 00       	mov    ebx,0x80
      unsigned __pos = __len - 1;
    f4e1:	b8 7f 00 00 00       	mov    eax,0x7f
	      return __builtin_clzll(__high) - __diff;
    f4e6:	49 83 f3 3f          	xor    r11,0x3f
      return _Nd - std::__countl_zero(__x);
    f4ea:	44 29 db             	sub    ebx,r11d
    f4ed:	44 29 d8             	sub    eax,r11d
      while (__pos)
    f4f0:	e9 d5 f8 ff ff       	jmp    edca <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x14a>
    f4f5:	bb 01 00 00 00       	mov    ebx,0x1
    f4fa:	e9 fe f8 ff ff       	jmp    edfd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x17d>
    f4ff:	90                   	nop
	  auto const __num = __val * 2;
    f500:	4d 01 e4             	add    r12,r12
      __res.ptr = __first + __len;
    f503:	44 89 db             	mov    ebx,r11d
	  __first[1] = __digits[__num + 1];
    f506:	4b 8d 04 21          	lea    rax,[r9+r12*1]
	  __first[0] = __digits[__num];
    f50a:	4d 01 cc             	add    r12,r9
	  __first[1] = __digits[__num + 1];
    f50d:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
	  __first[0] = __digits[__num];
    f511:	45 0f b6 24 24       	movzx  r12d,BYTE PTR [r12]
	  __first[1] = __digits[__num + 1];
    f516:	88 44 24 34          	mov    BYTE PTR [rsp+0x34],al
    f51a:	e9 a3 fe ff ff       	jmp    f3c2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x742>
    f51f:	90                   	nop
	__len = (__to_chars_len_2(__val) + 2) / 3;
    f520:	4c 0f bd da          	bsr    r11,rdx
    f524:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
    f529:	41 8d 5b 43          	lea    ebx,[r11+0x43]
    f52d:	48 0f af d8          	imul   rbx,rax
    f531:	48 c1 eb 21          	shr    rbx,0x21
      unsigned __pos = __len - 1;
    f535:	8d 43 ff             	lea    eax,[rbx-0x1]
      while (__val >= 0100)
    f538:	e9 51 f9 ff ff       	jmp    ee8e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x20e>
    f53d:	0f 1f 00             	nop    DWORD PTR [rax]
	  if (__value < __b3) return __n + 2;
    f540:	41 89 db             	mov    r11d,ebx
    f543:	4c 89 fa             	mov    rdx,r15
    f546:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    f54b:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    f550:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    f555:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    f55a:	41 83 c3 02          	add    r11d,0x2
    f55e:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    f563:	e9 38 fc ff ff       	jmp    f1a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
    f568:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    f56f:	00 
	  if (__value < __b4) return __n + 3;
    f570:	41 89 db             	mov    r11d,ebx
    f573:	4c 89 fa             	mov    rdx,r15
    f576:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    f57b:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    f580:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    f585:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    f58a:	41 83 c3 03          	add    r11d,0x3
    f58e:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    f593:	e9 08 fc ff ff       	jmp    f1a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
    f598:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    f59f:	00 
    f5a0:	4c 89 fa             	mov    rdx,r15
    f5a3:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    f5a8:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    f5ad:	41 89 db             	mov    r11d,ebx
    f5b0:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    f5b5:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
    f5ba:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    f5bf:	e9 dc fb ff ff       	jmp    f1a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
    f5c4:	4c 8d 8c 24 c0 00 00 	lea    r9,[rsp+0xc0]
    f5cb:	00 
    f5cc:	e9 74 fa ff ff       	jmp    f045 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c5>
	  return __res;
    f5d1:	48 8d 9c 24 b3 00 00 	lea    rbx,[rsp+0xb3]
    f5d8:	00 
    f5d9:	48 8d 4c 24 33       	lea    rcx,[rsp+0x33]
    f5de:	e9 03 f7 ff ff       	jmp    ece6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x66>
	  if (__value < (unsigned)__base) return __n;
    f5e3:	bb 01 00 00 00       	mov    ebx,0x1
    f5e8:	e9 d1 fd ff ff       	jmp    f3be <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x73e>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    f5ed:	e8 5e 3b ff ff       	call   3150 <abort@plt>
    f5f2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    f5f9:	00 00 00 
    f5fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000000f600 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
    f600:	41 57                	push   r15
    f602:	41 56                	push   r14
    f604:	41 55                	push   r13
    f606:	41 54                	push   r12
    f608:	55                   	push   rbp
    f609:	48 89 fd             	mov    rbp,rdi
    f60c:	53                   	push   rbx
    f60d:	48 81 ec 78 01 00 00 	sub    rsp,0x178
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
    f614:	0f b6 5f 01          	movzx  ebx,BYTE PTR [rdi+0x1]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f618:	4c 8d bc 24 80 00 00 	lea    r15,[rsp+0x80]
    f61f:	00 
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
    f620:	48 89 74 24 20       	mov    QWORD PTR [rsp+0x20],rsi
	  if (__use_prec)
    f625:	89 d8                	mov    eax,ebx
    f627:	4c 89 7c 24 70       	mov    QWORD PTR [rsp+0x70],r15
      { _M_string_length = __length; }
    f62c:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
    f633:	00 00 
	__c1 = __c2;
    f635:	c6 84 24 80 00 00 00 	mov    BYTE PTR [rsp+0x80],0x0
    f63c:	00 
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
    f63d:	0f 29 04 24          	movaps XMMWORD PTR [rsp],xmm0
	  if (__use_prec)
    f641:	83 e0 06             	and    eax,0x6
    f644:	0f 85 2e 05 00 00    	jne    fb78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x578>
	  switch (_M_spec._M_type)
    f64a:	89 d8                	mov    eax,ebx
    f64c:	48 8d 15 61 63 00 00 	lea    rdx,[rip+0x6361]        # 159b4 <CSWTCH.1110+0x8d4>
    f653:	c0 e8 03             	shr    al,0x3
    f656:	83 e0 0f             	and    eax,0xf
    f659:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    f65d:	48 01 d0             	add    rax,rdx
    f660:	ff e0                	jmp    rax
    f662:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      return __format::to_chars(__b, __e, __v);
    f668:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f66d:	4c 8d a4 24 f1 00 00 	lea    r12,[rsp+0xf1]
    f674:	00 
    f675:	48 8d b4 24 70 01 00 	lea    rsi,[rsp+0x170]
    f67c:	00 
    f67d:	4c 89 e7             	mov    rdi,r12
    f680:	e8 ab 3c ff ff       	call   3330 <std::to_chars(char*, char*, _Float128)@plt>
    f685:	48 89 c3             	mov    rbx,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    f688:	83 fa 4b             	cmp    edx,0x4b
    f68b:	0f 84 7b 0d 00 00    	je     1040c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe0c>
	  char* __end = __buf + sizeof(__buf);
    f691:	48 8d 84 24 70 01 00 	lea    rax,[rsp+0x170]
    f698:	00 
	  char __expc = 'e';
    f699:	c6 44 24 4f 65       	mov    BYTE PTR [rsp+0x4f],0x65
	  size_t __prec = 6;
    f69e:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    f6a5:	00 00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    f6a7:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  char* __end = __buf + sizeof(__buf);
    f6ac:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
	  if (!__builtin_signbit(__v))
    f6b1:	0f 28 14 24          	movaps xmm2,XMMWORD PTR [rsp]
	      if (_M_spec._M_sign == _Sign_plus)
    f6b5:	44 0f b6 75 00       	movzx  r14d,BYTE PTR [rbp+0x0]
	  if (!__builtin_signbit(__v))
    f6ba:	0f 50 c2             	movmskps eax,xmm2
    f6bd:	a8 08                	test   al,0x8
    f6bf:	0f 85 8b 03 00 00    	jne    fa50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x450>
	      if (_M_spec._M_sign == _Sign_plus)
    f6c5:	44 89 f0             	mov    eax,r14d
    f6c8:	83 e0 0c             	and    eax,0xc
    f6cb:	3c 04                	cmp    al,0x4
    f6cd:	0f 84 85 07 00 00    	je     fe58 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x858>
		__have_sign = false;
    f6d3:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
	      else if (_M_spec._M_sign == _Sign_space)
    f6d8:	3c 0c                	cmp    al,0xc
    f6da:	0f 84 58 03 00 00    	je     fa38 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x438>
	  string_view __narrow_str(__start, __res.ptr - __start);
    f6e0:	49 89 dd             	mov    r13,rbx
    f6e3:	4d 29 e5             	sub    r13,r12
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
    f6e6:	41 f6 c6 10          	test   r14b,0x10
    f6ea:	0f 84 50 02 00 00    	je     f940 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
    f6f0:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f6f5:	66 0f 6f 0d b3 91 00 	movdqa xmm1,XMMWORD PTR [rip+0x91b3]        # 188b0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f6fc:	00 
    f6fd:	66 0f db 05 9b 91 00 	pand   xmm0,XMMWORD PTR [rip+0x919b]        # 188a0 <std::__unicode::__v15_1_0::__width_edges+0x420>
    f704:	00 
    f705:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
    f70a:	e8 c1 3b ff ff       	call   32d0 <__unordtf2@plt>
    f70f:	48 85 c0             	test   rax,rax
    f712:	0f 85 28 02 00 00    	jne    f940 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
    f718:	66 0f 6f 0d 90 91 00 	movdqa xmm1,XMMWORD PTR [rip+0x9190]        # 188b0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f71f:	00 
    f720:	66 0f 6f 44 24 50    	movdqa xmm0,XMMWORD PTR [rsp+0x50]
    f726:	e8 e5 39 ff ff       	call   3110 <__gttf2@plt>
    f72b:	48 85 c0             	test   rax,rax
    f72e:	0f 8f 0c 02 00 00    	jg     f940 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
      if (__pos < this->_M_len)
    f734:	4d 85 ed             	test   r13,r13
    f737:	0f 84 93 04 00 00    	je     fbd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5d0>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    f73d:	4c 89 ea             	mov    rdx,r13
    f740:	be 2e 00 00 00       	mov    esi,0x2e
    f745:	4c 89 e7             	mov    rdi,r12
    f748:	e8 d3 3a ff ff       	call   3220 <memchr@plt>
    f74d:	49 89 c1             	mov    r9,rax
	  if (__p)
    f750:	48 85 c0             	test   rax,rax
    f753:	0f 84 77 04 00 00    	je     fbd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5d0>
	    __ret = __p - this->_M_str;
    f759:	4d 29 e1             	sub    r9,r12
	      if (__d != __s.npos) // Found decimal point.
    f75c:	49 83 f9 ff          	cmp    r9,0xffffffffffffffff
    f760:	0f 84 6a 04 00 00    	je     fbd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5d0>
		  __p = __s.find(__expc, __d + 1);
    f766:	49 8d 49 01          	lea    rcx,[r9+0x1]
      if (__pos < this->_M_len)
    f76a:	4c 39 e9             	cmp    rcx,r13
    f76d:	0f 83 ed 09 00 00    	jae    10160 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb60>
    f773:	0f be 74 24 4f       	movsx  esi,BYTE PTR [rsp+0x4f]
	  const size_type __n = this->_M_len - __pos;
    f778:	4c 89 ea             	mov    rdx,r13
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
    f77b:	49 8d 3c 0c          	lea    rdi,[r12+rcx*1]
    f77f:	4c 89 4c 24 68       	mov    QWORD PTR [rsp+0x68],r9
	  const size_type __n = this->_M_len - __pos;
    f784:	48 29 ca             	sub    rdx,rcx
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
    f787:	48 89 4c 24 50       	mov    QWORD PTR [rsp+0x50],rcx
    f78c:	e8 8f 3a ff ff       	call   3220 <memchr@plt>
	  if (__p)
    f791:	48 8b 4c 24 50       	mov    rcx,QWORD PTR [rsp+0x50]
    f796:	4c 8b 4c 24 68       	mov    r9,QWORD PTR [rsp+0x68]
    f79b:	48 85 c0             	test   rax,rax
    f79e:	49 89 c2             	mov    r10,rax
    f7a1:	0f 84 8b 0d 00 00    	je     10532 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf32>
	    __ret = __p - this->_M_str;
    f7a7:	4d 29 e2             	sub    r10,r12
		    __p = __s.size();
    f7aa:	49 83 fa ff          	cmp    r10,0xffffffffffffffff
    f7ae:	4d 0f 44 d5          	cmove  r10,r13
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    f7b2:	45 31 db             	xor    r11d,r11d
    f7b5:	4d 39 ca             	cmp    r10,r9
    f7b8:	41 0f 94 c3          	sete   r11b
		  if (__trailing_zeros)
    f7bc:	80 7c 24 38 00       	cmp    BYTE PTR [rsp+0x38],0x0
    f7c1:	0f 84 09 0a 00 00    	je     101d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbd0>
		      if (__s[__have_sign] != '0')
    f7c7:	0f b6 54 24 60       	movzx  edx,BYTE PTR [rsp+0x60]
    f7cc:	41 80 3c 14 30       	cmp    BYTE PTR [r12+rdx*1],0x30
    f7d1:	0f 84 e6 03 00 00    	je     fbbd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5bd>
			__sigfigs = __p - __have_sign - 1;
    f7d7:	4c 89 d0             	mov    rax,r10
    f7da:	48 29 d0             	sub    rax,rdx
    f7dd:	48 83 e8 01          	sub    rax,0x1
	      if (__trailing_zeros && __prec != 0)
    f7e1:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
    f7e7:	0f 85 2b 04 00 00    	jne    fc18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x618>
    f7ed:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    f7f0:	4d 85 db             	test   r11,r11
    f7f3:	0f 85 1c 07 00 00    	jne    ff15 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x915>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f7f9:	48 8d 9c 24 a0 00 00 	lea    rbx,[rsp+0xa0]
    f800:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
    f801:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
    f805:	48 c7 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],0x0
    f80c:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f811:	48 89 9c 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rbx
    f818:	00 
	__c1 = __c2;
    f819:	c6 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],0x0
    f820:	00 
    f821:	0f 84 83 01 00 00    	je     f9aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3aa>
      if (!_M_hasval)
    f827:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    f82c:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
    f830:	0f 84 6a 09 00 00    	je     101a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xba0>
      return _M_loc;
    f836:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
      std::locale locale() { return _M_loc.value(); }
    f83b:	4c 8d b4 24 b0 00 00 	lea    r14,[rsp+0xb0]
    f842:	00 
      return _M_loc;
    f843:	48 8d 70 18          	lea    rsi,[rax+0x18]
      std::locale locale() { return _M_loc.value(); }
    f847:	4c 89 f7             	mov    rdi,r14
    f84a:	e8 41 39 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
    f84f:	0f be 4c 24 4f       	movsx  ecx,BYTE PTR [rsp+0x4f]
    f854:	4c 89 e2             	mov    rdx,r12
    f857:	4c 89 ee             	mov    rsi,r13
    f85a:	48 8d bc 24 d0 00 00 	lea    rdi,[rsp+0xd0]
    f861:	00 
    f862:	4d 89 f0             	mov    r8,r14
    f865:	e8 06 50 ff ff       	call   4870 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>
      { return _M_dataplus._M_p; }
    f86a:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    f871:	00 
    f872:	48 89 c1             	mov    rcx,rax
	if (_M_data() == _M_local_data())
    f875:	48 39 d8             	cmp    rax,rbx
    f878:	0f 84 2c 0b 00 00    	je     103aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdaa>
	    if (_M_string_length > _S_local_capacity)
    f87e:	48 8b 94 24 d8 00 00 	mov    rdx,QWORD PTR [rsp+0xd8]
    f885:	00 
      { return _M_dataplus._M_p; }
    f886:	48 8b b4 24 d0 00 00 	mov    rsi,QWORD PTR [rsp+0xd0]
    f88d:	00 
	if (_M_data() == _M_local_data())
    f88e:	4c 8d 84 24 e0 00 00 	lea    r8,[rsp+0xe0]
    f895:	00 
	    if (_M_string_length > _S_local_capacity)
    f896:	48 89 d7             	mov    rdi,rdx
	if (_M_data() == _M_local_data())
    f899:	4c 39 c6             	cmp    rsi,r8
    f89c:	0f 84 9d 0b 00 00    	je     1043f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe3f>
    f8a2:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
    f8a7:	48 89 b4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rsi
    f8ae:	00 
		    __capacity = _M_allocated_capacity;
    f8af:	48 8b 94 24 a0 00 00 	mov    rdx,QWORD PTR [rsp+0xa0]
    f8b6:	00 
    f8b7:	0f 16 84 24 e0 00 00 	movhps xmm0,QWORD PTR [rsp+0xe0]
    f8be:	00 
      { _M_string_length = __length; }
    f8bf:	0f 11 84 24 98 00 00 	movups XMMWORD PTR [rsp+0x98],xmm0
    f8c6:	00 
	    if (__data)
    f8c7:	48 85 c0             	test   rax,rax
    f8ca:	0f 84 08 0b 00 00    	je     103d8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdd8>
      { _M_dataplus._M_p = __p; }
    f8d0:	48 89 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],rax
    f8d7:	00 
      { _M_allocated_capacity = __capacity; }
    f8d8:	48 89 94 24 e0 00 00 	mov    QWORD PTR [rsp+0xe0],rdx
    f8df:	00 
      { _M_string_length = __length; }
    f8e0:	48 c7 84 24 d8 00 00 	mov    QWORD PTR [rsp+0xd8],0x0
    f8e7:	00 00 00 00 00 
    f8ec:	c6 01 00             	mov    BYTE PTR [rcx],0x0
      { return _M_dataplus._M_p; }
    f8ef:	48 8b bc 24 d0 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    f8f6:	00 
	if (_M_data() == _M_local_data())
    f8f7:	4c 39 c7             	cmp    rdi,r8
    f8fa:	74 11                	je     f90d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x30d>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    f8fc:	48 8b 84 24 e0 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    f903:	00 
    f904:	48 8d 70 01          	lea    rsi,[rax+0x1]
    f908:	e8 f3 38 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
    f90d:	4c 89 f7             	mov    rdi,r14
    f910:	e8 ab 39 ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_string_length; }
    f915:	48 8b 84 24 98 00 00 	mov    rax,QWORD PTR [rsp+0x98]
    f91c:	00 
	      if (!__wstr.empty())
    f91d:	48 85 c0             	test   rax,rax
    f920:	0f 84 84 00 00 00    	je     f9aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3aa>
      basic_string_view(const _CharT* __str, size_type __len) noexcept
    f926:	4c 89 e6             	mov    rsi,r12
		__str = __wstr;
    f929:	49 89 c5             	mov    r13,rax
    f92c:	4c 8b a4 24 90 00 00 	mov    r12,QWORD PTR [rsp+0x90]
    f933:	00 
    f934:	eb 77                	jmp    f9ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ad>
    f936:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    f93d:	00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f940:	48 8d 9c 24 a0 00 00 	lea    rbx,[rsp+0xa0]
    f947:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
    f948:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
    f94c:	48 c7 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],0x0
    f953:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    f958:	48 89 9c 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rbx
    f95f:	00 
    f960:	c6 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],0x0
    f967:	00 
    f968:	74 40                	je     f9aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3aa>
    f96a:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    f96f:	66 0f 6f 0d 39 8f 00 	movdqa xmm1,XMMWORD PTR [rip+0x8f39]        # 188b0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f976:	00 
    f977:	66 0f db 05 21 8f 00 	pand   xmm0,XMMWORD PTR [rip+0x8f21]        # 188a0 <std::__unicode::__v15_1_0::__width_edges+0x420>
    f97e:	00 
    f97f:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
    f984:	e8 47 39 ff ff       	call   32d0 <__unordtf2@plt>
    f989:	48 85 c0             	test   rax,rax
    f98c:	75 1c                	jne    f9aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3aa>
    f98e:	66 0f 6f 0d 1a 8f 00 	movdqa xmm1,XMMWORD PTR [rip+0x8f1a]        # 188b0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    f995:	00 
    f996:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
    f99c:	e8 6f 37 ff ff       	call   3110 <__gttf2@plt>
    f9a1:	48 85 c0             	test   rax,rax
    f9a4:	0f 8e 7d fe ff ff    	jle    f827 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x227>
      { _M_dataplus._M_p = __p; }
    f9aa:	4c 89 e6             	mov    rsi,r12
	  if (_M_width_kind == _WP_value)
    f9ad:	0f b7 45 00          	movzx  eax,WORD PTR [rbp+0x0]
    f9b1:	66 25 80 01          	and    ax,0x180
    f9b5:	66 3d 80 00          	cmp    ax,0x80
    f9b9:	0f 84 a1 00 00 00    	je     fa60 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x460>
	  else if (_M_width_kind == _WP_from_arg)
    f9bf:	66 3d 00 01          	cmp    ax,0x100
    f9c3:	0f 84 af 04 00 00    	je     fe78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x878>
    f9c9:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    f9ce:	4c 8b 70 10          	mov    r14,QWORD PTR [rax+0x10]
	    return __format::__write(__fc.out(), __str);
    f9d2:	4c 89 e2             	mov    rdx,r12
    f9d5:	4c 89 ee             	mov    rsi,r13
    f9d8:	4c 89 f7             	mov    rdi,r14
    f9db:	e8 10 92 ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
    f9e0:	48 89 c5             	mov    rbp,rax
      { return _M_dataplus._M_p; }
    f9e3:	48 8b bc 24 90 00 00 	mov    rdi,QWORD PTR [rsp+0x90]
    f9ea:	00 
	if (_M_data() == _M_local_data())
    f9eb:	48 39 df             	cmp    rdi,rbx
    f9ee:	74 11                	je     fa01 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x401>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    f9f0:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    f9f7:	00 
    f9f8:	48 8d 70 01          	lea    rsi,[rax+0x1]
    f9fc:	e8 ff 37 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { return _M_dataplus._M_p; }
    fa01:	48 8b 7c 24 70       	mov    rdi,QWORD PTR [rsp+0x70]
	if (_M_data() == _M_local_data())
    fa06:	4c 39 ff             	cmp    rdi,r15
    fa09:	74 11                	je     fa1c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x41c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    fa0b:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    fa12:	00 
    fa13:	48 8d 70 01          	lea    rsi,[rax+0x1]
    fa17:	e8 e4 37 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
    fa1c:	48 81 c4 78 01 00 00 	add    rsp,0x178
    fa23:	48 89 e8             	mov    rax,rbp
    fa26:	5b                   	pop    rbx
    fa27:	5d                   	pop    rbp
    fa28:	41 5c                	pop    r12
    fa2a:	41 5d                	pop    r13
    fa2c:	41 5e                	pop    r14
    fa2e:	41 5f                	pop    r15
    fa30:	c3                   	ret
    fa31:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		*--__start = ' ';
    fa38:	41 c6 44 24 ff 20    	mov    BYTE PTR [r12-0x1],0x20
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
    fa3e:	44 0f b6 75 00       	movzx  r14d,BYTE PTR [rbp+0x0]
		*--__start = ' ';
    fa43:	49 83 ec 01          	sub    r12,0x1
    fa47:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    fa4e:	00 00 
	  bool __have_sign = true;
    fa50:	c6 44 24 60 01       	mov    BYTE PTR [rsp+0x60],0x1
    fa55:	e9 86 fc ff ff       	jmp    f6e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe0>
    fa5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __width = _M_width;
    fa60:	44 0f b7 45 04       	movzx  r8d,WORD PTR [rbp+0x4]
      iterator out() { return std::move(_M_out); }
    fa65:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    fa6a:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    fa6f:	4c 8b 70 10          	mov    r14,QWORD PTR [rax+0x10]
	  if (__width <= __str.size())
    fa73:	4d 39 c5             	cmp    r13,r8
    fa76:	0f 83 56 ff ff ff    	jae    f9d2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d2>
	  _Align __align = _M_spec._M_align;
    fa7c:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	  char32_t __fill_char = _M_spec._M_fill;
    fa80:	44 8b 4d 08          	mov    r9d,DWORD PTR [rbp+0x8]
	  size_t __nfill = __width - __str.size();
    fa84:	4d 29 e8             	sub    r8,r13
	  if (__align == _Align_default)
    fa87:	89 c1                	mov    ecx,eax
    fa89:	83 e1 03             	and    ecx,0x3
    fa8c:	0f 85 c9 00 00 00    	jne    fb5b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x55b>
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
    fa92:	a8 40                	test   al,0x40
    fa94:	0f 84 b6 00 00 00    	je     fb50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x550>
    fa9a:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    fa9f:	66 0f 6f 0d 09 8e 00 	movdqa xmm1,XMMWORD PTR [rip+0x8e09]        # 188b0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    faa6:	00 
    faa7:	4c 89 44 24 38       	mov    QWORD PTR [rsp+0x38],r8
    faac:	66 0f db 05 ec 8d 00 	pand   xmm0,XMMWORD PTR [rip+0x8dec]        # 188a0 <std::__unicode::__v15_1_0::__width_edges+0x420>
    fab3:	00 
    fab4:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    fab9:	e8 12 38 ff ff       	call   32d0 <__unordtf2@plt>
    fabe:	4c 8b 44 24 38       	mov    r8,QWORD PTR [rsp+0x38]
    fac3:	48 85 c0             	test   rax,rax
    fac6:	0f 85 84 00 00 00    	jne    fb50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x550>
    facc:	66 0f 6f 0d dc 8d 00 	movdqa xmm1,XMMWORD PTR [rip+0x8ddc]        # 188b0 <std::__unicode::__v15_1_0::__width_edges+0x430>
    fad3:	00 
    fad4:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    fada:	4c 89 04 24          	mov    QWORD PTR [rsp],r8
    fade:	e8 2d 36 ff ff       	call   3110 <__gttf2@plt>
    fae3:	4c 8b 04 24          	mov    r8,QWORD PTR [rsp]
    fae7:	48 85 c0             	test   rax,rax
    faea:	7f 64                	jg     fb50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x550>
	return __from_chars_alnum_to_val_table<_DecOnly>::value.__data[__c];
    faec:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
		  if (!__format::__is_xdigit(__narrow_str[0]))
    faf1:	48 8d 15 48 65 00 00 	lea    rdx,[rip+0x6548]        # 16040 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
	      __align = _Align_right;
    faf8:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
    fafd:	41 b9 30 00 00 00    	mov    r9d,0x30
    fb03:	0f b6 06             	movzx  eax,BYTE PTR [rsi]
		  if (!__format::__is_xdigit(__narrow_str[0]))
    fb06:	80 3c 02 0f          	cmp    BYTE PTR [rdx+rax*1],0xf
    fb0a:	76 4f                	jbe    fb5b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x55b>
      { return __normal_iterator(_M_current++); }
    fb0c:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
		      *__out++ = __str[0];
    fb10:	41 0f b6 14 24       	movzx  edx,BYTE PTR [r12]
    fb15:	48 8d 48 01          	lea    rcx,[rax+0x1]
    fb19:	49 89 4e 18          	mov    QWORD PTR [r14+0x18],rcx
	*_M_next++ = __c;
    fb1d:	88 10                	mov    BYTE PTR [rax],dl
    { return __lhs.base() - __rhs.base(); }
    fb1f:	49 8b 46 18          	mov    rax,QWORD PTR [r14+0x18]
    fb23:	49 2b 46 08          	sub    rax,QWORD PTR [r14+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
    fb27:	49 3b 46 10          	cmp    rax,QWORD PTR [r14+0x10]
    fb2b:	0f 84 14 0b 00 00    	je     10645 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1045>
	this->_M_str += __n;
    fb31:	49 83 c4 01          	add    r12,0x1
	this->_M_len -= __n;
    fb35:	49 83 ed 01          	sub    r13,0x1
	      __align = _Align_right;
    fb39:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
    fb3e:	41 b9 30 00 00 00    	mov    r9d,0x30
      }
    fb44:	eb 15                	jmp    fb5b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x55b>
    fb46:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    fb4d:	00 00 00 
	      __align = _Align_right;
    fb50:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
    fb55:	41 b9 20 00 00 00    	mov    r9d,0x20
	  return __format::__write_padded(std::move(__out), __str,
    fb5b:	4c 89 e2             	mov    rdx,r12
    fb5e:	4c 89 ee             	mov    rsi,r13
    fb61:	4c 89 f7             	mov    rdi,r14
    fb64:	e8 b7 91 ff ff       	call   8d20 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
    fb69:	48 89 c5             	mov    rbp,rax
					  __align, __nfill, __fill_char);
    fb6c:	e9 72 fe ff ff       	jmp    f9e3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e3>
    fb71:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  if (_M_prec_kind == _WP_value)
    fb78:	3c 02                	cmp    al,0x2
    fb7a:	0f 84 b0 04 00 00    	je     10030 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa30>
	  size_t __prec = -1;
    fb80:	48 c7 44 24 10 ff ff 	mov    QWORD PTR [rsp+0x10],0xffffffffffffffff
    fb87:	ff ff 
	  else if (_M_prec_kind == _WP_from_arg)
    fb89:	3c 04                	cmp    al,0x4
    fb8b:	0f 84 8f 02 00 00    	je     fe20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x820>
	  switch (_M_spec._M_type)
    fb91:	89 d8                	mov    eax,ebx
    fb93:	48 8d 15 3e 5e 00 00 	lea    rdx,[rip+0x5e3e]        # 159d8 <CSWTCH.1110+0x8f8>
    fb9a:	c0 e8 03             	shr    al,0x3
    fb9d:	83 e0 0f             	and    eax,0xf
    fba0:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    fba4:	48 01 d0             	add    rax,rdx
    fba7:	ff e0                	jmp    rax
    fba9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->_M_len; ++__pos)
    fbb0:	48 83 c1 01          	add    rcx,0x1
    fbb4:	4c 39 e9             	cmp    rcx,r13
    fbb7:	0f 83 cb 05 00 00    	jae    10188 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb88>
	if (!traits_type::eq(this->_M_str[__pos], __c))
    fbbd:	41 80 3c 0c 30       	cmp    BYTE PTR [r12+rcx*1],0x30
    fbc2:	74 ec                	je     fbb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5b0>
    fbc4:	e9 c6 05 00 00       	jmp    1018f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb8f>
    fbc9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  __p = __s.find(__expc); // Find the exponent, if present.
    fbd0:	0f be 54 24 4f       	movsx  edx,BYTE PTR [rsp+0x4f]
    fbd5:	31 c9                	xor    ecx,ecx
    fbd7:	4c 89 e6             	mov    rsi,r12
    fbda:	4c 89 ef             	mov    rdi,r13
    fbdd:	e8 8e 41 ff ff       	call   3d70 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>
		    __p = __s.size();
    fbe2:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
		  __p = __s.find(__expc); // Find the exponent, if present.
    fbe6:	49 89 c1             	mov    r9,rax
		    __p = __s.size();
    fbe9:	4d 0f 44 cd          	cmove  r9,r13
	      if (__trailing_zeros && __prec != 0)
    fbed:	80 7c 24 38 00       	cmp    BYTE PTR [rsp+0x38],0x0
    fbf2:	0f 84 0b 03 00 00    	je     ff03 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x903>
    fbf8:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
    fbfe:	0f 84 11 09 00 00    	je     10515 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf15>
		  __sigfigs = __d - __have_sign;
    fc04:	0f b6 54 24 60       	movzx  edx,BYTE PTR [rsp+0x60]
    fc09:	4c 89 c8             	mov    rax,r9
    fc0c:	4d 89 ca             	mov    r10,r9
    fc0f:	41 bb 01 00 00 00    	mov    r11d,0x1
    fc15:	48 29 d0             	sub    rax,rdx
		  __z = __prec - __sigfigs;
    fc18:	48 29 44 24 10       	sub    QWORD PTR [rsp+0x10],rax
    fc1d:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    fc22:	49 01 cb             	add    r11,rcx
    fc25:	e9 c6 fb ff ff       	jmp    f7f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f0>
    fc2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
    fc30:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
    fc33:	ba 65 00 00 00       	mov    edx,0x65
    fc38:	b8 70 00 00 00       	mov    eax,0x70
    fc3d:	80 fb 10             	cmp    bl,0x10
    fc40:	0f 44 c2             	cmove  eax,edx
    fc43:	45 31 ed             	xor    r13d,r13d
    fc46:	88 44 24 4f          	mov    BYTE PTR [rsp+0x4f],al
	      return __format::to_chars(__b, __e, __v, __fmt);
    fc4a:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    fc4f:	4c 8d a4 24 f1 00 00 	lea    r12,[rsp+0xf1]
    fc56:	00 
    fc57:	ba 04 00 00 00       	mov    edx,0x4
    fc5c:	48 8d b4 24 70 01 00 	lea    rsi,[rsp+0x170]
    fc63:	00 
    fc64:	4c 89 e7             	mov    rdi,r12
    fc67:	e8 34 35 ff ff       	call   31a0 <std::to_chars(char*, char*, _Float128, std::chars_format)@plt>
    fc6c:	48 89 c3             	mov    rbx,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    fc6f:	83 fa 4b             	cmp    edx,0x4b
    fc72:	0f 84 c0 04 00 00    	je     10138 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb38>
	  char* __end = __buf + sizeof(__buf);
    fc78:	48 8d 84 24 70 01 00 	lea    rax,[rsp+0x170]
    fc7f:	00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    fc80:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
    fc85:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fc8c:	00 00 
	  char* __end = __buf + sizeof(__buf);
    fc8e:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
	  if (__upper)
    fc93:	45 84 ed             	test   r13b,r13b
    fc96:	0f 84 15 fa ff ff    	je     f6b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb1>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
    fc9c:	49 39 dc             	cmp    r12,rbx
    fc9f:	0f 84 0c fa ff ff    	je     f6b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb1>
    fca5:	4d 89 e5             	mov    r13,r12
    fca8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    fcaf:	00 
		*__p = std::toupper(*__p);
    fcb0:	41 0f be 7d 00       	movsx  edi,BYTE PTR [r13+0x0]
	      for (char* __p = __start; __p != __res.ptr; ++__p)
    fcb5:	49 83 c5 01          	add    r13,0x1
		*__p = std::toupper(*__p);
    fcb9:	e8 92 36 ff ff       	call   3350 <toupper@plt>
    fcbe:	41 88 45 ff          	mov    BYTE PTR [r13-0x1],al
	      for (char* __p = __start; __p != __res.ptr; ++__p)
    fcc2:	49 39 dd             	cmp    r13,rbx
    fcc5:	75 e9                	jne    fcb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6b0>
    fcc7:	e9 e5 f9 ff ff       	jmp    f6b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb1>
    fccc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_M_spec._M_type != _Pres_A)
    fcd0:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
    fcd3:	ba 50 00 00 00       	mov    edx,0x50
    fcd8:	b8 70 00 00 00       	mov    eax,0x70
    fcdd:	41 bd 01 00 00 00    	mov    r13d,0x1
    fce3:	80 fb 10             	cmp    bl,0x10
    fce6:	0f 44 c2             	cmove  eax,edx
    fce9:	88 44 24 4f          	mov    BYTE PTR [rsp+0x4f],al
    fced:	e9 58 ff ff ff       	jmp    fc4a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x64a>
    fcf2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
    fcf8:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fcff:	00 00 
    fd01:	b9 06 00 00 00       	mov    ecx,0x6
    fd06:	45 31 ed             	xor    r13d,r13d
	  char __expc = 'e';
    fd09:	c6 44 24 4f 65       	mov    BYTE PTR [rsp+0x4f],0x65
	      __fmt = chars_format::fixed;
    fd0e:	41 bc 02 00 00 00    	mov    r12d,0x2
	  bool __trailing_zeros = false;
    fd14:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    fd19:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
    fd1e:	4c 8d b4 24 f1 00 00 	lea    r14,[rsp+0xf1]
    fd25:	00 
    fd26:	44 89 e2             	mov    edx,r12d
    fd29:	48 8d b4 24 70 01 00 	lea    rsi,[rsp+0x170]
    fd30:	00 
    fd31:	4c 89 f7             	mov    rdi,r14
    fd34:	e8 87 34 ff ff       	call   31c0 <std::to_chars(char*, char*, _Float128, std::chars_format, int)@plt>
    fd39:	48 89 c3             	mov    rbx,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
    fd3c:	83 fa 4b             	cmp    edx,0x4b
    fd3f:	0f 84 23 03 00 00    	je     10068 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa68>
	  char* __end = __buf + sizeof(__buf);
    fd45:	48 8d 84 24 70 01 00 	lea    rax,[rsp+0x170]
    fd4c:	00 
	  char* __start = __buf + 1; // reserve space for sign
    fd4d:	4d 89 f4             	mov    r12,r14
	  char* __end = __buf + sizeof(__buf);
    fd50:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    fd55:	e9 39 ff ff ff       	jmp    fc93 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x693>
    fd5a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
    fd60:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fd67:	00 00 
    fd69:	b9 06 00 00 00       	mov    ecx,0x6
	      __upper = true;
    fd6e:	41 bd 01 00 00 00    	mov    r13d,0x1
    fd74:	eb 93                	jmp    fd09 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x709>
    fd76:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    fd7d:	00 00 00 
	  switch (_M_spec._M_type)
    fd80:	c6 44 24 4f 65       	mov    BYTE PTR [rsp+0x4f],0x65
    fd85:	b9 06 00 00 00       	mov    ecx,0x6
    fd8a:	45 31 ed             	xor    r13d,r13d
    fd8d:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fd94:	00 00 
	      __trailing_zeros = true;
    fd96:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
	      __fmt = chars_format::general;
    fd9b:	41 bc 03 00 00 00    	mov    r12d,0x3
	      break;
    fda1:	e9 73 ff ff ff       	jmp    fd19 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x719>
    fda6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    fdad:	00 00 00 
	  switch (_M_spec._M_type)
    fdb0:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fdb7:	00 00 
    fdb9:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
    fdbe:	c6 44 24 4f 45       	mov    BYTE PTR [rsp+0x4f],0x45
	      __upper = true;
    fdc3:	41 bd 01 00 00 00    	mov    r13d,0x1
    fdc9:	eb cb                	jmp    fd96 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x796>
    fdcb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
    fdd0:	c6 44 24 4f 65       	mov    BYTE PTR [rsp+0x4f],0x65
    fdd5:	b9 06 00 00 00       	mov    ecx,0x6
    fdda:	45 31 ed             	xor    r13d,r13d
    fddd:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fde4:	00 00 
	  bool __trailing_zeros = false;
    fde6:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	      __fmt = chars_format::scientific;
    fdeb:	41 bc 01 00 00 00    	mov    r12d,0x1
	      break;
    fdf1:	e9 23 ff ff ff       	jmp    fd19 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x719>
    fdf6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    fdfd:	00 00 00 
	  switch (_M_spec._M_type)
    fe00:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
    fe07:	00 00 
    fe09:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
    fe0e:	c6 44 24 4f 45       	mov    BYTE PTR [rsp+0x4f],0x45
	      __upper = true;
    fe13:	41 bd 01 00 00 00    	mov    r13d,0x1
    fe19:	eb cb                	jmp    fde6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e6>
    fe1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    fe20:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
    fe24:	48 8b 74 24 20       	mov    rsi,QWORD PTR [rsp+0x20]
    fe29:	e8 92 3f ff ff       	call   3dc0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
    fe2e:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    fe33:	e9 59 fd ff ff       	jmp    fb91 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x591>
	  char __expc = 'e';
    fe38:	c6 44 24 4f 65       	mov    BYTE PTR [rsp+0x4f],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    fe3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
		__fmt = chars_format::general;
    fe41:	41 bc 03 00 00 00    	mov    r12d,0x3
	  bool __upper = false;
    fe47:	45 31 ed             	xor    r13d,r13d
	  bool __trailing_zeros = false;
    fe4a:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
    fe4f:	e9 c5 fe ff ff       	jmp    fd19 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x719>
    fe54:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		*--__start = '+';
    fe58:	41 c6 44 24 ff 2b    	mov    BYTE PTR [r12-0x1],0x2b
    fe5e:	49 83 ec 01          	sub    r12,0x1
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
    fe62:	44 0f b6 75 00       	movzx  r14d,BYTE PTR [rbp+0x0]
	  bool __have_sign = true;
    fe67:	c6 44 24 60 01       	mov    BYTE PTR [rsp+0x60],0x1
    fe6c:	e9 6f f8 ff ff       	jmp    f6e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe0>
    fe71:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	if (__i < _M_packed_size)
    fe78:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    fe7d:	0f b7 55 04          	movzx  edx,WORD PTR [rbp+0x4]
	if (__i < _M_packed_size)
    fe81:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
    fe84:	89 c1                	mov    ecx,eax
    fe86:	83 e0 0f             	and    eax,0xf
    fe89:	83 e1 0f             	and    ecx,0xf
    fe8c:	48 39 c2             	cmp    rdx,rax
    fe8f:	0f 83 ab 01 00 00    	jae    10040 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa40>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    fe95:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    fe98:	48 8d 0c 92          	lea    rcx,[rdx+rdx*4]
	    __arg._M_val = _M_values[__i];
    fe9c:	48 c1 e2 04          	shl    rdx,0x4
    fea0:	48 03 57 08          	add    rdx,QWORD PTR [rdi+0x8]
    fea4:	66 0f 6f 02          	movdqa xmm0,XMMWORD PTR [rdx]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    fea8:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    fead:	48 c1 e8 04          	shr    rax,0x4
    feb1:	48 d3 e8             	shr    rax,cl
	    __arg._M_val = _M_values[__i];
    feb4:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
    febb:	00 
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    febc:	83 e0 1f             	and    eax,0x1f
    __int_from_arg(const basic_format_arg<_Context>& __arg)
    febf:	66 0f 6f 84 24 b0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xb0]
    fec6:	00 00 
    fec8:	88 84 24 c0 00 00 00 	mov    BYTE PTR [rsp+0xc0],al
    fecf:	0f 29 84 24 d0 00 00 	movaps XMMWORD PTR [rsp+0xd0],xmm0
    fed6:	00 
    fed7:	66 0f 6f 84 24 c0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xc0]
    fede:	00 00 
    fee0:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    fee7:	00 
	  switch (__type)
    fee8:	3c 14                	cmp    al,0x14
    feea:	0f 87 ad 07 00 00    	ja     1069d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x109d>
    fef0:	48 8d 15 05 5b 00 00 	lea    rdx,[rip+0x5b05]        # 159fc <CSWTCH.1110+0x91c>
    fef7:	0f b6 c0             	movzx  eax,al
    fefa:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
    fefe:	48 01 d0             	add    rax,rdx
    ff01:	ff e0                	jmp    rax
	      size_t __z = 0;   // Number of trailing zeros to add.
    ff03:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
    ff0a:	00 00 
	      if (__trailing_zeros && __prec != 0)
    ff0c:	4d 89 ca             	mov    r10,r9
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
    ff0f:	41 bb 01 00 00 00    	mov    r11d,0x1
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
    ff15:	48 83 7c 24 78 00    	cmp    QWORD PTR [rsp+0x78],0x0
    ff1b:	75 11                	jne    ff2e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x92e>
    ff1d:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    ff22:	48 29 d8             	sub    rax,rbx
    ff25:	4c 39 d8             	cmp    rax,r11
    ff28:	0f 83 7b 05 00 00    	jae    104a9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xea9>
		      __dynbuf.reserve(__s.size() + __extras);
    ff2e:	4c 8d 74 24 70       	lea    r14,[rsp+0x70]
    ff33:	4b 8d 74 1d 00       	lea    rsi,[r13+r11*1+0x0]
    ff38:	4c 89 54 24 40       	mov    QWORD PTR [rsp+0x40],r10
    ff3d:	4c 89 f7             	mov    rdi,r14
    ff40:	4c 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],r9
    ff45:	4c 89 5c 24 60       	mov    QWORD PTR [rsp+0x60],r11
    ff4a:	e8 e1 5c ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
		      if (__dynbuf.empty())
    ff4f:	48 83 7c 24 78 00    	cmp    QWORD PTR [rsp+0x78],0x0
    ff55:	4c 8b 4c 24 38       	mov    r9,QWORD PTR [rsp+0x38]
    ff5a:	4c 8b 54 24 40       	mov    r10,QWORD PTR [rsp+0x40]
    ff5f:	0f 85 7b 02 00 00    	jne    101e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbe0>
	return _M_replace(size_type(0), this->size(), __s, __n);
    ff65:	4d 39 d5             	cmp    r13,r10
    ff68:	4d 89 d0             	mov    r8,r10
    ff6b:	4c 89 e1             	mov    rcx,r12
    ff6e:	4c 89 f7             	mov    rdi,r14
    ff71:	4d 0f 46 c5          	cmovbe r8,r13
    ff75:	31 d2                	xor    edx,edx
    ff77:	31 f6                	xor    esi,esi
    ff79:	4c 89 4c 24 40       	mov    QWORD PTR [rsp+0x40],r9
    ff7e:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
    ff83:	e8 d8 46 ff ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  if (__d == __p)
    ff88:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
    ff8d:	4c 8b 4c 24 40       	mov    r9,QWORD PTR [rsp+0x40]
    ff92:	4d 39 d1             	cmp    r9,r10
    ff95:	0f 84 07 06 00 00    	je     105a2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xfa2>
			  if (__z)
    ff9b:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
    ffa1:	0f 85 bb 05 00 00    	jne    10562 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf62>
    if (__pos > __size)
    ffa7:	4d 39 d5             	cmp    r13,r10
    ffaa:	0f 82 f9 06 00 00    	jb     106a9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x10a9>
      { return _M_string_length; }
    ffb0:	48 8b 74 24 78       	mov    rsi,QWORD PTR [rsp+0x78]
      [[nodiscard]]
      constexpr basic_string_view
      substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)
      {
	__pos = std::__sv_check(size(), __pos, "basic_string_view::substr");
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
    ffb5:	4d 29 d5             	sub    r13,r10
	return basic_string_view{_M_str + __pos, __rlen};
    ffb8:	4b 8d 0c 14          	lea    rcx,[r12+r10*1]
	if (this->max_size() - (this->size() - __n1) < __n2)
    ffbc:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
    ffc3:	ff ff 7f 
    ffc6:	48 29 f0             	sub    rax,rsi
    ffc9:	4c 39 e8             	cmp    rax,r13
    ffcc:	0f 82 cb 06 00 00    	jb     1069d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x109d>
      { return _M_dataplus._M_p; }
    ffd2:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
      const size_type __len = __n + this->size();
    ffd7:	4a 8d 1c 2e          	lea    rbx,[rsi+r13*1]
	if (_M_data() == _M_local_data())
    ffdb:	4c 39 f8             	cmp    rax,r15
    ffde:	0f 84 d5 05 00 00    	je     105b9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xfb9>
	return _M_is_local() ? size_type(_S_local_capacity)
    ffe4:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    ffeb:	00 
      if (__len <= this->capacity())
    ffec:	48 39 da             	cmp    rdx,rbx
    ffef:	0f 82 96 05 00 00    	jb     1058b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf8b>
	  if (__n)
    fff5:	4d 85 ed             	test   r13,r13
    fff8:	74 1e                	je     10018 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa18>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    fffa:	48 8d 3c 30          	lea    rdi,[rax+rsi*1]
	if (__n == 1)
    fffe:	49 83 fd 01          	cmp    r13,0x1
   10002:	0f 84 bb 05 00 00    	je     105c3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xfc3>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   10008:	4c 89 ea             	mov    rdx,r13
   1000b:	48 89 ce             	mov    rsi,rcx
   1000e:	e8 9d 31 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
   10013:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
      { _M_string_length = __length; }
   10018:	48 89 5c 24 78       	mov    QWORD PTR [rsp+0x78],rbx
	__c1 = __c2;
   1001d:	c6 04 18 00          	mov    BYTE PTR [rax+rbx*1],0x0
   10021:	e9 fa 01 00 00       	jmp    10220 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc20>
   10026:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   1002d:	00 00 00 
	    __prec = _M_prec;
   10030:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   10034:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   10039:	e9 53 fb ff ff       	jmp    fb91 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x591>
   1003e:	66 90                	xchg   ax,ax
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
   10040:	84 c9                	test   cl,cl
   10042:	75 1a                	jne    1005e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa5e>
   10044:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
   10049:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   1004c:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   10051:	48 c1 e8 04          	shr    rax,0x4
   10055:	48 39 c2             	cmp    rdx,rax
   10058:	0f 82 dc 04 00 00    	jb     1053a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf3a>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
   1005e:	e8 ed 30 ff ff       	call   3150 <abort@plt>
   10063:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (__fmt == chars_format::fixed) // +ddd.prec
   10068:	41 83 fc 02          	cmp    r12d,0x2
   1006c:	0f 85 a0 02 00 00    	jne    10312 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd12>
		    __guess += numeric_limits<_Fp>::max_exponent10;
   10072:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   10077:	c6 44 24 40 01       	mov    BYTE PTR [rsp+0x40],0x1
   1007c:	48 8d b0 4c 13 00 00 	lea    rsi,[rax+0x134c]
		__guess = sizeof(__buf) * 2;
   10083:	48 81 fe 80 00 00 00 	cmp    rsi,0x80
   1008a:	b8 00 01 00 00       	mov    eax,0x100
   1008f:	48 0f 46 f0          	cmovbe rsi,rax
	      __dynbuf.reserve(__guess);
   10093:	4c 8d 74 24 70       	lea    r14,[rsp+0x70]
   10098:	4c 89 f7             	mov    rdi,r14
   1009b:	e8 90 5b ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   100a0:	4c 89 74 24 60       	mov    QWORD PTR [rsp+0x60],r14
   100a5:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
	if (_M_data() == _M_local_data())
   100aa:	4c 39 fa             	cmp    rdx,r15
   100ad:	0f 84 70 04 00 00    	je     10523 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf23>
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
   100b3:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   100ba:	00 
   100bb:	48 8d 34 00          	lea    rsi,[rax+rax*1]
		    __res = __to_chars(__p + 1, __p + __n - 1);
   100bf:	48 8d 5e ff          	lea    rbx,[rsi-0x1]
      reserve(__n);
   100c3:	48 8b 7c 24 60       	mov    rdi,QWORD PTR [rsp+0x60]
   100c8:	e8 63 5b ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   100cd:	4c 8b 74 24 70       	mov    r14,QWORD PTR [rsp+0x70]
	    if (__use_prec)
   100d2:	80 7c 24 40 00       	cmp    BYTE PTR [rsp+0x40],0x0
		    __res = __to_chars(__p + 1, __p + __n - 1);
   100d7:	49 8d 34 1e          	lea    rsi,[r14+rbx*1]
   100db:	49 8d 7e 01          	lea    rdi,[r14+0x1]
	    if (__use_prec)
   100df:	0f 85 0b 03 00 00    	jne    103f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdf0>
	    else if (__fmt != chars_format{})
   100e5:	45 85 e4             	test   r12d,r12d
   100e8:	0f 85 71 01 00 00    	jne    1025f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc5f>
	      return __format::to_chars(__b, __e, __v);
   100ee:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
   100f3:	e8 38 32 ff ff       	call   3330 <std::to_chars(char*, char*, _Float128)@plt>
   100f8:	48 89 c3             	mov    rbx,rax
   100fb:	48 89 d0             	mov    rax,rdx
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
   100fe:	85 c0                	test   eax,eax
   10100:	0f 85 72 02 00 00    	jne    10378 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd78>
   10106:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
   1010b:	48 89 d8             	mov    rax,rbx
   1010e:	4c 29 f0             	sub    rax,r14
      { _M_string_length = __length; }
   10111:	48 89 44 24 78       	mov    QWORD PTR [rsp+0x78],rax
   10116:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
   1011a:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
		  __start = __dynbuf.data() + 1; // reserve space for sign
   1011f:	4c 8d 60 01          	lea    r12,[rax+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   10123:	48 03 44 24 78       	add    rax,QWORD PTR [rsp+0x78]
   10128:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   1012d:	e9 61 fb ff ff       	jmp    fc93 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x693>
   10132:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10138:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
   1013d:	41 bc 04 00 00 00    	mov    r12d,0x4
   10143:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   1014a:	00 00 
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   1014c:	c6 44 24 40 00       	mov    BYTE PTR [rsp+0x40],0x0
	      size_t __guess = 8 + __prec;
   10151:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   10156:	48 8d 70 08          	lea    rsi,[rax+0x8]
   1015a:	e9 24 ff ff ff       	jmp    10083 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa83>
   1015f:	90                   	nop
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10160:	45 31 db             	xor    r11d,r11d
   10163:	4d 39 cd             	cmp    r13,r9
   10166:	41 0f 94 c3          	sete   r11b
		  if (__trailing_zeros)
   1016a:	80 7c 24 38 00       	cmp    BYTE PTR [rsp+0x38],0x0
   1016f:	0f 84 a7 01 00 00    	je     1031c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1c>
		      if (__s[__have_sign] != '0')
   10175:	0f b6 54 24 60       	movzx  edx,BYTE PTR [rsp+0x60]
		    __p = __s.size();
   1017a:	4d 89 ea             	mov    r10,r13
		      if (__s[__have_sign] != '0')
   1017d:	41 80 3c 14 30       	cmp    BYTE PTR [r12+rdx*1],0x30
   10182:	0f 85 4f f6 ff ff    	jne    f7d7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d7>
	  return __pos;
      return npos;
   10188:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
   1018f:	4c 89 d0             	mov    rax,r10
   10192:	48 29 c8             	sub    rax,rcx
   10195:	e9 47 f6 ff ff       	jmp    f7e1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e1>
   1019a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  std::construct_at(&_M_loc);
   101a0:	48 8d 70 18          	lea    rsi,[rax+0x18]
   101a4:	49 89 c6             	mov    r14,rax
   101a7:	48 89 f7             	mov    rdi,rsi
   101aa:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
   101af:	e8 bc 31 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
   101b4:	41 c6 46 20 01       	mov    BYTE PTR [r14+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
   101b9:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
   101be:	4c 8d b4 24 b0 00 00 	lea    r14,[rsp+0xb0]
   101c5:	00 
   101c6:	e9 7c f6 ff ff       	jmp    f847 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x247>
   101cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      size_t __z = 0;   // Number of trailing zeros to add.
   101d0:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   101d7:	00 00 
   101d9:	e9 12 f6 ff ff       	jmp    f7f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f0>
   101de:	66 90                	xchg   ax,ax
   101e0:	4c 8b 5c 24 60       	mov    r11,QWORD PTR [rsp+0x60]
			  __dynbuf.insert(__p, __extras, '0');
   101e5:	4c 89 d6             	mov    rsi,r10
   101e8:	b9 30 00 00 00       	mov    ecx,0x30
   101ed:	4c 89 f7             	mov    rdi,r14
   101f0:	4c 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],r9
   101f5:	4c 89 da             	mov    rdx,r11
   101f8:	4c 89 54 24 10       	mov    QWORD PTR [rsp+0x10],r10
   101fd:	e8 6e 45 ff ff       	call   4770 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>
			  if (__d == __p)
   10202:	4c 8b 54 24 10       	mov    r10,QWORD PTR [rsp+0x10]
   10207:	4c 8b 4c 24 38       	mov    r9,QWORD PTR [rsp+0x38]
   1020c:	4d 39 d1             	cmp    r9,r10
   1020f:	75 0f                	jne    10220 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc20>
			    __dynbuf[__p] = '.';
   10211:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   10216:	42 c6 04 08 2e       	mov    BYTE PTR [rax+r9*1],0x2e
   1021b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      { return _M_string_length; }
   10220:	4c 8b 6c 24 78       	mov    r13,QWORD PTR [rsp+0x78]
      { return _M_dataplus._M_p; }
   10225:	4c 8b 64 24 70       	mov    r12,QWORD PTR [rsp+0x70]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   1022a:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1022e:	48 8d 9c 24 a0 00 00 	lea    rbx,[rsp+0xa0]
   10235:	00 
   10236:	c6 84 24 a0 00 00 00 	mov    BYTE PTR [rsp+0xa0],0x0
   1023d:	00 
   1023e:	48 89 9c 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rbx
   10245:	00 
      { _M_string_length = __length; }
   10246:	48 c7 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],0x0
   1024d:	00 00 00 00 00 
   10252:	a8 20                	test   al,0x20
   10254:	0f 85 cd f5 ff ff    	jne    f827 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x227>
   1025a:	e9 4b f7 ff ff       	jmp    f9aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3aa>
	      return __format::to_chars(__b, __e, __v, __fmt);
   1025f:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
   10264:	44 89 e2             	mov    edx,r12d
   10267:	e8 34 2f ff ff       	call   31a0 <std::to_chars(char*, char*, _Float128, std::chars_format)@plt>
   1026c:	48 89 c3             	mov    rbx,rax
   1026f:	48 89 d0             	mov    rax,rdx
   10272:	e9 87 fe ff ff       	jmp    100fe <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xafe>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10277:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   1027b:	45 31 ed             	xor    r13d,r13d
   1027e:	e9 86 fa ff ff       	jmp    fd09 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x709>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10283:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   10287:	e9 e2 fa ff ff       	jmp    fd6e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x76e>
	  char __expc = 'e';
   1028c:	c6 44 24 4f 65       	mov    BYTE PTR [rsp+0x4f],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10291:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   10295:	45 31 ed             	xor    r13d,r13d
   10298:	e9 f9 fa ff ff       	jmp    fd96 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x796>
	      if (_M_spec._M_type != _Pres_A)
   1029d:	83 e3 78             	and    ebx,0x78
   102a0:	ba 70 00 00 00       	mov    edx,0x70
   102a5:	b8 65 00 00 00       	mov    eax,0x65
   102aa:	80 fb 10             	cmp    bl,0x10
   102ad:	0f 45 c2             	cmovne eax,edx
   102b0:	45 31 ed             	xor    r13d,r13d
   102b3:	88 44 24 4f          	mov    BYTE PTR [rsp+0x4f],al
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   102b7:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
   102bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	      __fmt = chars_format::hex;
   102c0:	41 bc 04 00 00 00    	mov    r12d,0x4
   102c6:	e9 4e fa ff ff       	jmp    fd19 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x719>
   102cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
   102d0:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   102d3:	ba 50 00 00 00       	mov    edx,0x50
   102d8:	b8 70 00 00 00       	mov    eax,0x70
   102dd:	41 bd 01 00 00 00    	mov    r13d,0x1
   102e3:	80 fb 10             	cmp    bl,0x10
   102e6:	0f 44 c2             	cmove  eax,edx
   102e9:	88 44 24 4f          	mov    BYTE PTR [rsp+0x4f],al
   102ed:	eb c8                	jmp    102b7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcb7>
	  char __expc = 'e';
   102ef:	c6 44 24 4f 65       	mov    BYTE PTR [rsp+0x4f],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   102f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   102f8:	45 31 ed             	xor    r13d,r13d
   102fb:	e9 e6 fa ff ff       	jmp    fde6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e6>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10300:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   10304:	e9 05 fb ff ff       	jmp    fe0e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x80e>
   10309:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   1030d:	e9 ac fa ff ff       	jmp    fdbe <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7be>
   10312:	c6 44 24 40 01       	mov    BYTE PTR [rsp+0x40],0x1
   10317:	e9 35 fe ff ff       	jmp    10151 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb51>
	      size_t __z = 0;   // Number of trailing zeros to add.
   1031c:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   10323:	00 00 
		    __p = __s.size();
   10325:	4d 89 ea             	mov    r10,r13
   10328:	e9 c3 f4 ff ff       	jmp    f7f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f0>
	      return __arg;
   1032d:	44 8b 84 24 d0 00 00 	mov    r8d,DWORD PTR [rsp+0xd0]
   10334:	00 
	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
   10335:	e9 2b f7 ff ff       	jmp    fa65 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x465>
	      if (__arg >= 0)
   1033a:	4c 63 84 24 d0 00 00 	movsxd r8,DWORD PTR [rsp+0xd0]
   10341:	00 
   10342:	45 85 c0             	test   r8d,r8d
   10345:	0f 89 1a f7 ff ff    	jns    fa65 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x465>
   1034b:	e9 0e fd ff ff       	jmp    1005e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa5e>
	      return __arg;
   10350:	4c 8b 84 24 d0 00 00 	mov    r8,QWORD PTR [rsp+0xd0]
   10357:	00 
	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
   10358:	e9 08 f7 ff ff       	jmp    fa65 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x465>
	      if (__arg >= 0)
   1035d:	4c 8b 84 24 d0 00 00 	mov    r8,QWORD PTR [rsp+0xd0]
   10364:	00 
   10365:	4d 85 c0             	test   r8,r8
   10368:	0f 89 f7 f6 ff ff    	jns    fa65 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x465>
   1036e:	e9 eb fc ff ff       	jmp    1005e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa5e>
   10373:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   10378:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
   1037f:	00 00 
      { return _M_dataplus._M_p; }
   10381:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
   10386:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   10389:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   1038e:	83 f8 4b             	cmp    eax,0x4b
   10391:	0f 84 13 fd ff ff    	je     100aa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaaa>
		  __start = __dynbuf.data() + 1; // reserve space for sign
   10397:	4c 8d 62 01          	lea    r12,[rdx+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   1039b:	48 03 54 24 78       	add    rdx,QWORD PTR [rsp+0x78]
   103a0:	48 89 54 24 40       	mov    QWORD PTR [rsp+0x40],rdx
   103a5:	e9 e9 f8 ff ff       	jmp    fc93 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x693>
   103aa:	48 8b 94 24 d0 00 00 	mov    rdx,QWORD PTR [rsp+0xd0]
   103b1:	00 
	if (_M_data() == _M_local_data())
   103b2:	4c 8d 84 24 e0 00 00 	lea    r8,[rsp+0xe0]
   103b9:	00 
   103ba:	4c 39 c2             	cmp    rdx,r8
   103bd:	74 75                	je     10434 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe34>
      { return _M_string_length; }
   103bf:	f3 0f 6f 84 24 d8 00 	movdqu xmm0,XMMWORD PTR [rsp+0xd8]
   103c6:	00 00 
      { _M_dataplus._M_p = __p; }
   103c8:	48 89 94 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rdx
   103cf:	00 
      { _M_string_length = __length; }
   103d0:	0f 11 84 24 98 00 00 	movups XMMWORD PTR [rsp+0x98],xmm0
   103d7:	00 
      { _M_dataplus._M_p = __p; }
   103d8:	4c 89 84 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r8
   103df:	00 
   103e0:	4c 8d 84 24 e0 00 00 	lea    r8,[rsp+0xe0]
   103e7:	00 
   103e8:	4c 89 c1             	mov    rcx,r8
   103eb:	e9 f0 f4 ff ff       	jmp    f8e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   103f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   103f4:	66 0f 6f 04 24       	movdqa xmm0,XMMWORD PTR [rsp]
   103f9:	44 89 e2             	mov    edx,r12d
   103fc:	e8 bf 2d ff ff       	call   31c0 <std::to_chars(char*, char*, _Float128, std::chars_format, int)@plt>
   10401:	48 89 c3             	mov    rbx,rax
   10404:	48 89 d0             	mov    rax,rdx
   10407:	e9 f2 fc ff ff       	jmp    100fe <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xafe>
	  char __expc = 'e';
   1040c:	c6 44 24 4f 65       	mov    BYTE PTR [rsp+0x4f],0x65
	  bool __upper = false;
   10411:	45 31 ed             	xor    r13d,r13d
	  chars_format __fmt{};
   10414:	45 31 e4             	xor    r12d,r12d
		__guess = sizeof(__buf) * 2;
   10417:	be 00 01 00 00       	mov    esi,0x100
	  size_t __prec = 6;
   1041c:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   10423:	00 00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10425:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   1042a:	c6 44 24 40 00       	mov    BYTE PTR [rsp+0x40],0x0
   1042f:	e9 5f fc ff ff       	jmp    10093 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa93>
	    if (_M_string_length > _S_local_capacity)
   10434:	48 8b 94 24 d8 00 00 	mov    rdx,QWORD PTR [rsp+0xd8]
   1043b:	00 
   1043c:	48 89 d7             	mov    rdi,rdx
		if (__str.size())
   1043f:	48 85 d2             	test   rdx,rdx
   10442:	74 4c                	je     10490 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe90>
	if (__n == 1)
   10444:	48 83 fa 01          	cmp    rdx,0x1
   10448:	0f 84 84 01 00 00    	je     105d2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xfd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1044e:	89 d1                	mov    ecx,edx
   10450:	83 fa 08             	cmp    edx,0x8
   10453:	0f 83 98 01 00 00    	jae    105f1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xff1>
   10459:	f6 c2 04             	test   dl,0x4
   1045c:	0f 85 f4 01 00 00    	jne    10656 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1056>
   10462:	85 d2                	test   edx,edx
   10464:	74 24                	je     1048a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe8a>
   10466:	0f b6 b4 24 e0 00 00 	movzx  esi,BYTE PTR [rsp+0xe0]
   1046d:	00 
   1046e:	83 e2 02             	and    edx,0x2
   10471:	40 88 30             	mov    BYTE PTR [rax],sil
   10474:	0f 85 03 02 00 00    	jne    1067d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x107d>
   1047a:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
   10481:	00 
   10482:	48 8b 94 24 d8 00 00 	mov    rdx,QWORD PTR [rsp+0xd8]
   10489:	00 
      { return _M_string_length; }
   1048a:	48 89 d7             	mov    rdi,rdx
      { return _M_dataplus._M_p; }
   1048d:	48 89 c1             	mov    rcx,rax
      { _M_string_length = __length; }
   10490:	48 89 bc 24 98 00 00 	mov    QWORD PTR [rsp+0x98],rdi
   10497:	00 
	__c1 = __c2;
   10498:	c6 04 39 00          	mov    BYTE PTR [rcx+rdi*1],0x0
      { return _M_dataplus._M_p; }
   1049c:	48 8b 8c 24 d0 00 00 	mov    rcx,QWORD PTR [rsp+0xd0]
   104a3:	00 
      }
   104a4:	e9 37 f4 ff ff       	jmp    f8e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2e0>
		      __builtin_memmove(__start + __p + __extras,
   104a9:	4b 8d 3c 13          	lea    rdi,[r11+r10*1]
					__start + __p,
   104ad:	4b 8d 1c 14          	lea    rbx,[r12+r10*1]
		      __builtin_memmove(__start + __p + __extras,
   104b1:	4c 89 ea             	mov    rdx,r13
   104b4:	4c 89 4c 24 60       	mov    QWORD PTR [rsp+0x60],r9
   104b9:	4c 29 d2             	sub    rdx,r10
   104bc:	4c 01 e7             	add    rdi,r12
   104bf:	48 89 de             	mov    rsi,rbx
   104c2:	4c 89 54 24 40       	mov    QWORD PTR [rsp+0x40],r10
   104c7:	4c 89 5c 24 38       	mov    QWORD PTR [rsp+0x38],r11
   104cc:	e8 4f 2e ff ff       	call   3320 <memmove@plt>
		      if (__d == __p)
   104d1:	4c 8b 54 24 40       	mov    r10,QWORD PTR [rsp+0x40]
   104d6:	4c 8b 4c 24 60       	mov    r9,QWORD PTR [rsp+0x60]
   104db:	4c 8b 5c 24 38       	mov    r11,QWORD PTR [rsp+0x38]
   104e0:	4d 39 d1             	cmp    r9,r10
   104e3:	75 08                	jne    104ed <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeed>
			__start[__p++] = '.';
   104e5:	c6 03 2e             	mov    BYTE PTR [rbx],0x2e
		      __builtin_memset(__start + __p, '0', __z);
   104e8:	4b 8d 5c 0c 01       	lea    rbx,[r12+r9*1+0x1]
   104ed:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
   104f2:	be 30 00 00 00       	mov    esi,0x30
   104f7:	48 89 df             	mov    rdi,rbx
   104fa:	4c 89 5c 24 38       	mov    QWORD PTR [rsp+0x38],r11
   104ff:	e8 3c 2c ff ff       	call   3140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
   10504:	4c 8b 5c 24 38       	mov    r11,QWORD PTR [rsp+0x38]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   10509:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
		      __narrow_str = {__s.data(), __s.size() + __extras};
   1050d:	4d 01 dd             	add    r13,r11
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   10510:	e9 19 fd ff ff       	jmp    1022e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc2e>
	      if (__trailing_zeros && __prec != 0)
   10515:	4d 89 ca             	mov    r10,r9
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10518:	41 bb 01 00 00 00    	mov    r11d,0x1
   1051e:	e9 f2 f9 ff ff       	jmp    ff15 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x915>
   10523:	bb 1d 00 00 00       	mov    ebx,0x1d
   10528:	be 1e 00 00 00       	mov    esi,0x1e
   1052d:	e9 91 fb ff ff       	jmp    100c3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xac3>
		    __p = __s.size();
   10532:	4d 89 ea             	mov    r10,r13
   10535:	e9 78 f2 ff ff       	jmp    f7b2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1b2>
	  __arg = _M_args[__i];
   1053a:	48 c1 e2 05          	shl    rdx,0x5
   1053e:	48 03 51 08          	add    rdx,QWORD PTR [rcx+0x8]
   10542:	f3 0f 6f 02          	movdqu xmm0,XMMWORD PTR [rdx]
   10546:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
   1054d:	00 
   1054e:	0f b6 42 10          	movzx  eax,BYTE PTR [rdx+0x10]
   10552:	88 84 24 c0 00 00 00 	mov    BYTE PTR [rsp+0xc0],al
   10559:	0f b6 42 10          	movzx  eax,BYTE PTR [rdx+0x10]
   1055d:	e9 5d f9 ff ff       	jmp    febf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8bf>
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   10562:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   10567:	48 8b 74 24 78       	mov    rsi,QWORD PTR [rsp+0x78]
   1056c:	31 d2                	xor    edx,edx
   1056e:	4c 89 f7             	mov    rdi,r14
   10571:	41 b8 30 00 00 00    	mov    r8d,0x30
   10577:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   1057c:	e8 ef 3f ff ff       	call   4570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>
   10581:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   10586:	e9 1c fa ff ff       	jmp    ffa7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9a7>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
   1058b:	4d 89 e8             	mov    r8,r13
   1058e:	31 d2                	xor    edx,edx
   10590:	4c 89 f7             	mov    rdi,r14
   10593:	e8 d8 72 ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
   10598:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   1059d:	e9 76 fa ff ff       	jmp    10018 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa18>
	this->push_back(__c);
   105a2:	be 2e 00 00 00       	mov    esi,0x2e
   105a7:	4c 89 f7             	mov    rdi,r14
   105aa:	e8 11 7c ff ff       	call   81c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
   105af:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
	return *this;
   105b4:	e9 e2 f9 ff ff       	jmp    ff9b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x99b>
	return _M_is_local() ? size_type(_S_local_capacity)
   105b9:	ba 0f 00 00 00       	mov    edx,0xf
   105be:	e9 29 fa ff ff       	jmp    ffec <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9ec>
   105c3:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   105c6:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
   105c8:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
      }
   105cd:	e9 46 fa ff ff       	jmp    10018 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa18>
	__c1 = __c2;
   105d2:	0f b6 94 24 e0 00 00 	movzx  edx,BYTE PTR [rsp+0xe0]
   105d9:	00 
   105da:	88 10                	mov    BYTE PTR [rax],dl
      { return _M_string_length; }
   105dc:	48 8b bc 24 d8 00 00 	mov    rdi,QWORD PTR [rsp+0xd8]
   105e3:	00 
      { return _M_dataplus._M_p; }
   105e4:	48 8b 8c 24 90 00 00 	mov    rcx,QWORD PTR [rsp+0x90]
   105eb:	00 
      }
   105ec:	e9 9f fe ff ff       	jmp    10490 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe90>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   105f1:	48 8b 8c 24 e0 00 00 	mov    rcx,QWORD PTR [rsp+0xe0]
   105f8:	00 
   105f9:	4c 89 c7             	mov    rdi,r8
   105fc:	48 89 08             	mov    QWORD PTR [rax],rcx
   105ff:	89 d1                	mov    ecx,edx
   10601:	49 8b 74 08 f8       	mov    rsi,QWORD PTR [r8+rcx*1-0x8]
   10606:	48 89 74 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rsi
   1060b:	48 8d 70 08          	lea    rsi,[rax+0x8]
   1060f:	48 83 e6 f8          	and    rsi,0xfffffffffffffff8
   10613:	48 29 f0             	sub    rax,rsi
   10616:	48 89 c1             	mov    rcx,rax
   10619:	48 29 c7             	sub    rdi,rax
   1061c:	01 d1                	add    ecx,edx
   1061e:	83 e1 f8             	and    ecx,0xfffffff8
   10621:	83 f9 08             	cmp    ecx,0x8
   10624:	0f 82 50 fe ff ff    	jb     1047a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe7a>
   1062a:	83 e1 f8             	and    ecx,0xfffffff8
   1062d:	31 c0                	xor    eax,eax
   1062f:	89 c2                	mov    edx,eax
   10631:	83 c0 08             	add    eax,0x8
   10634:	4c 8b 0c 17          	mov    r9,QWORD PTR [rdi+rdx*1]
   10638:	4c 89 0c 16          	mov    QWORD PTR [rsi+rdx*1],r9
   1063c:	39 c8                	cmp    eax,ecx
   1063e:	72 ef                	jb     1062f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x102f>
   10640:	e9 35 fe ff ff       	jmp    1047a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe7a>
	  _M_overflow();
   10645:	49 8b 06             	mov    rax,QWORD PTR [r14]
   10648:	4c 89 f7             	mov    rdi,r14
   1064b:	ff 10                	call   QWORD PTR [rax]
   1064d:	4c 8b 04 24          	mov    r8,QWORD PTR [rsp]
      }
   10651:	e9 db f4 ff ff       	jmp    fb31 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x531>
   10656:	8b 94 24 e0 00 00 00 	mov    edx,DWORD PTR [rsp+0xe0]
   1065d:	89 10                	mov    DWORD PTR [rax],edx
   1065f:	41 8b 54 08 fc       	mov    edx,DWORD PTR [r8+rcx*1-0x4]
   10664:	89 54 08 fc          	mov    DWORD PTR [rax+rcx*1-0x4],edx
   10668:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
   1066f:	00 
   10670:	48 8b 94 24 d8 00 00 	mov    rdx,QWORD PTR [rsp+0xd8]
   10677:	00 
   10678:	e9 0d fe ff ff       	jmp    1048a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe8a>
   1067d:	41 0f b7 54 08 fe    	movzx  edx,WORD PTR [r8+rcx*1-0x2]
   10683:	66 89 54 08 fe       	mov    WORD PTR [rax+rcx*1-0x2],dx
   10688:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
   1068f:	00 
   10690:	48 8b 94 24 d8 00 00 	mov    rdx,QWORD PTR [rsp+0xd8]
   10697:	00 
   10698:	e9 ed fd ff ff       	jmp    1048a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe8a>
	  __throw_length_error(__N(__s));
   1069d:	48 8d 3d 17 4b 00 00 	lea    rdi,[rip+0x4b17]        # 151bb <CSWTCH.1110+0xdb>
   106a4:	e8 87 2a ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
   106a9:	4c 89 e9             	mov    rcx,r13
   106ac:	4c 89 d2             	mov    rdx,r10
   106af:	48 8d 35 72 4b 00 00 	lea    rsi,[rip+0x4b72]        # 15228 <CSWTCH.1110+0x148>
   106b6:	31 c0                	xor    eax,eax
   106b8:	48 8d 3d 41 4d 00 00 	lea    rdi,[rip+0x4d41]        # 15400 <CSWTCH.1110+0x320>
   106bf:	e8 1c 2c ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
   106c4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   106cb:	00 00 00 
   106ce:	66 90                	xchg   ax,ax

00000000000106d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   106d0:	41 57                	push   r15
   106d2:	41 56                	push   r14
   106d4:	49 89 fe             	mov    r14,rdi
   106d7:	41 55                	push   r13
   106d9:	41 54                	push   r12
   106db:	55                   	push   rbp
   106dc:	53                   	push   rbx
   106dd:	48 81 ec 38 01 00 00 	sub    rsp,0x138
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   106e4:	0f b6 6f 01          	movzx  ebp,BYTE PTR [rdi+0x1]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   106e8:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   106ed:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
   106f2:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   106f7:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
	  if (__use_prec)
   106fc:	89 e8                	mov    eax,ebp
      { _M_string_length = __length; }
   106fe:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
   10705:	00 00 
	__c1 = __c2;
   10707:	c6 44 24 60 00       	mov    BYTE PTR [rsp+0x60],0x0
   1070c:	83 e0 06             	and    eax,0x6
   1070f:	0f 85 83 04 00 00    	jne    10b98 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c8>
	  switch (_M_spec._M_type)
   10715:	89 e8                	mov    eax,ebp
   10717:	48 8d 15 32 53 00 00 	lea    rdx,[rip+0x5332]        # 15a50 <CSWTCH.1110+0x970>
   1071e:	c0 e8 03             	shr    al,0x3
   10721:	83 e0 0f             	and    eax,0xf
   10724:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   10728:	48 01 d0             	add    rax,rdx
   1072b:	ff e0                	jmp    rax
   1072d:	0f 1f 00             	nop    DWORD PTR [rax]
	      return __format::to_chars(__b, __e, __v);
   10730:	48 8d ac 24 b1 00 00 	lea    rbp,[rsp+0xb1]
   10737:	00 
   10738:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   1073f:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10746:	48 89 ef             	mov    rdi,rbp
   10749:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   10750:	00 
   10751:	e8 0a 2a ff ff       	call   3160 <std::to_chars(char*, char*, long double)@plt>
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10756:	41 5c                	pop    r12
   10758:	41 5d                	pop    r13
   1075a:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
   1075f:	48 89 c3             	mov    rbx,rax
	  char __expc = 'e';
   10762:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10767:	83 fa 4b             	cmp    edx,0x4b
   1076a:	0f 84 1a 0c 00 00    	je     1138a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcba>
	  char* __end = __buf + sizeof(__buf);
   10770:	48 8d 84 24 30 01 00 	lea    rax,[rsp+0x130]
   10777:	00 
	  size_t __prec = 6;
   10778:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   1077f:	00 
	  char* __end = __buf + sizeof(__buf);
   10780:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
	  if (!__builtin_signbit(__v))
   10785:	db ac 24 70 01 00 00 	fld    TBYTE PTR [rsp+0x170]
	      if (_M_spec._M_sign == _Sign_plus)
   1078c:	45 0f b6 2e          	movzx  r13d,BYTE PTR [r14]
	  if (!__builtin_signbit(__v))
   10790:	d9 e5                	fxam
   10792:	df e0                	fnstsw ax
   10794:	dd d8                	fstp   st(0)
   10796:	f6 c4 02             	test   ah,0x2
   10799:	0f 85 21 03 00 00    	jne    10ac0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
	      if (_M_spec._M_sign == _Sign_plus)
   1079f:	44 89 e8             	mov    eax,r13d
   107a2:	83 e0 0c             	and    eax,0xc
   107a5:	3c 04                	cmp    al,0x4
   107a7:	0f 84 d3 06 00 00    	je     10e80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7b0>
		__have_sign = false;
   107ad:	45 31 c0             	xor    r8d,r8d
	      else if (_M_spec._M_sign == _Sign_space)
   107b0:	3c 0c                	cmp    al,0xc
   107b2:	0f 84 f0 02 00 00    	je     10aa8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d8>
	  string_view __narrow_str(__start, __res.ptr - __start);
   107b8:	49 89 df             	mov    r15,rbx
   107bb:	49 29 ef             	sub    r15,rbp
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   107be:	41 f6 c5 10          	test   r13b,0x10
   107c2:	0f 84 18 02 00 00    	je     109e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
   107c8:	db ac 24 70 01 00 00 	fld    TBYTE PTR [rsp+0x170]
   107cf:	d9 e1                	fabs
   107d1:	db 2d e9 80 00 00    	fld    TBYTE PTR [rip+0x80e9]        # 188c0 <std::__unicode::__v15_1_0::__width_edges+0x440>
   107d7:	df e9                	fucomip st,st(1)
   107d9:	dd d8                	fstp   st(0)
   107db:	0f 82 ff 01 00 00    	jb     109e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
      if (__pos < this->_M_len)
   107e1:	4d 85 ff             	test   r15,r15
   107e4:	0f 84 06 04 00 00    	je     10bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
   107ea:	4c 89 fa             	mov    rdx,r15
   107ed:	be 2e 00 00 00       	mov    esi,0x2e
   107f2:	48 89 ef             	mov    rdi,rbp
   107f5:	44 88 44 24 28       	mov    BYTE PTR [rsp+0x28],r8b
   107fa:	e8 21 2a ff ff       	call   3220 <memchr@plt>
	  if (__p)
   107ff:	44 0f b6 44 24 28    	movzx  r8d,BYTE PTR [rsp+0x28]
   10805:	48 85 c0             	test   rax,rax
   10808:	0f 84 e2 03 00 00    	je     10bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
	    __ret = __p - this->_M_str;
   1080e:	48 29 e8             	sub    rax,rbp
   10811:	49 89 c3             	mov    r11,rax
	      if (__d != __s.npos) // Found decimal point.
   10814:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
   10818:	0f 84 d2 03 00 00    	je     10bf0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
		  __p = __s.find(__expc, __d + 1);
   1081e:	48 8d 48 01          	lea    rcx,[rax+0x1]
      if (__pos < this->_M_len)
   10822:	4c 39 f9             	cmp    rcx,r15
   10825:	0f 83 a5 08 00 00    	jae    110d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa00>
   1082b:	0f be 74 24 36       	movsx  esi,BYTE PTR [rsp+0x36]
	  const size_type __n = this->_M_len - __pos;
   10830:	4c 89 fa             	mov    rdx,r15
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   10833:	48 8d 7c 0d 00       	lea    rdi,[rbp+rcx*1+0x0]
   10838:	44 88 44 24 37       	mov    BYTE PTR [rsp+0x37],r8b
	  const size_type __n = this->_M_len - __pos;
   1083d:	48 29 ca             	sub    rdx,rcx
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   10840:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
   10845:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
   1084a:	e8 d1 29 ff ff       	call   3220 <memchr@plt>
	  if (__p)
   1084f:	48 8b 4c 24 28       	mov    rcx,QWORD PTR [rsp+0x28]
   10854:	44 0f b6 44 24 37    	movzx  r8d,BYTE PTR [rsp+0x37]
   1085a:	48 85 c0             	test   rax,rax
   1085d:	4c 8b 5c 24 38       	mov    r11,QWORD PTR [rsp+0x38]
   10862:	49 89 c4             	mov    r12,rax
   10865:	0f 84 29 0c 00 00    	je     11494 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdc4>
	    __ret = __p - this->_M_str;
   1086b:	49 29 ec             	sub    r12,rbp
		    __p = __s.size();
   1086e:	49 83 fc ff          	cmp    r12,0xffffffffffffffff
   10872:	4d 0f 44 e7          	cmove  r12,r15
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10876:	45 31 c9             	xor    r9d,r9d
   10879:	4d 39 dc             	cmp    r12,r11
   1087c:	41 0f 94 c1          	sete   r9b
		  if (__trailing_zeros)
   10880:	80 7c 24 18 00       	cmp    BYTE PTR [rsp+0x18],0x0
   10885:	0f 84 ad 08 00 00    	je     11138 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa68>
		      if (__s[__have_sign] != '0')
   1088b:	41 0f b6 c0          	movzx  eax,r8b
   1088f:	80 7c 05 00 30       	cmp    BYTE PTR [rbp+rax*1+0x0],0x30
   10894:	0f 84 43 03 00 00    	je     10bdd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50d>
			__sigfigs = __p - __have_sign - 1;
   1089a:	4c 89 e2             	mov    rdx,r12
   1089d:	48 29 c2             	sub    rdx,rax
   108a0:	48 83 ea 01          	sub    rdx,0x1
	      if (__trailing_zeros && __prec != 0)
   108a4:	48 83 3c 24 00       	cmp    QWORD PTR [rsp],0x0
   108a9:	0f 85 8d 03 00 00    	jne    10c3c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x56c>
   108af:	90                   	nop
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   108b0:	4d 85 c9             	test   r9,r9
   108b3:	0f 85 17 06 00 00    	jne    10ed0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x800>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   108b9:	4c 8d a4 24 80 00 00 	lea    r12,[rsp+0x80]
   108c0:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   108c1:	41 83 e5 20          	and    r13d,0x20
      { _M_string_length = __length; }
   108c5:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
   108cc:	00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   108ce:	4c 89 64 24 70       	mov    QWORD PTR [rsp+0x70],r12
	__c1 = __c2;
   108d3:	c6 84 24 80 00 00 00 	mov    BYTE PTR [rsp+0x80],0x0
   108da:	00 
   108db:	0f 84 3c 01 00 00    	je     10a1d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34d>
      if (!_M_hasval)
   108e1:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
   108e6:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
   108ea:	0f 84 20 08 00 00    	je     11110 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa40>
      return _M_loc;
   108f0:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
      std::locale locale() { return _M_loc.value(); }
   108f5:	4c 8d 6c 24 48       	lea    r13,[rsp+0x48]
      return _M_loc;
   108fa:	48 8d 70 18          	lea    rsi,[rax+0x18]
      std::locale locale() { return _M_loc.value(); }
   108fe:	4c 89 ef             	mov    rdi,r13
   10901:	e8 8a 28 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
   10906:	0f be 4c 24 36       	movsx  ecx,BYTE PTR [rsp+0x36]
   1090b:	4c 89 fe             	mov    rsi,r15
   1090e:	48 89 ea             	mov    rdx,rbp
   10911:	48 8d 84 24 90 00 00 	lea    rax,[rsp+0x90]
   10918:	00 
   10919:	4d 89 e8             	mov    r8,r13
   1091c:	48 89 c7             	mov    rdi,rax
   1091f:	e8 4c 3f ff ff       	call   4870 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>
      { return _M_dataplus._M_p; }
   10924:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   10929:	48 89 c1             	mov    rcx,rax
	if (_M_data() == _M_local_data())
   1092c:	4c 39 e0             	cmp    rax,r12
   1092f:	0f 84 ed 09 00 00    	je     11322 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc52>
	    if (_M_string_length > _S_local_capacity)
   10935:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   1093c:	00 
      { return _M_dataplus._M_p; }
   1093d:	48 8b b4 24 90 00 00 	mov    rsi,QWORD PTR [rsp+0x90]
   10944:	00 
	if (_M_data() == _M_local_data())
   10945:	4c 8d 84 24 a0 00 00 	lea    r8,[rsp+0xa0]
   1094c:	00 
	    if (_M_string_length > _S_local_capacity)
   1094d:	48 89 d7             	mov    rdi,rdx
	if (_M_data() == _M_local_data())
   10950:	4c 39 c6             	cmp    rsi,r8
   10953:	0f 84 56 0a 00 00    	je     113af <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcdf>
   10959:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
   1095e:	48 89 74 24 70       	mov    QWORD PTR [rsp+0x70],rsi
		    __capacity = _M_allocated_capacity;
   10963:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
   1096a:	00 
   1096b:	0f 16 84 24 a0 00 00 	movhps xmm0,QWORD PTR [rsp+0xa0]
   10972:	00 
      { _M_string_length = __length; }
   10973:	0f 11 44 24 78       	movups XMMWORD PTR [rsp+0x78],xmm0
	    if (__data)
   10978:	48 85 c0             	test   rax,rax
   1097b:	0f 84 c9 09 00 00    	je     1134a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc7a>
      { _M_dataplus._M_p = __p; }
   10981:	48 89 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rax
   10988:	00 
      { _M_allocated_capacity = __capacity; }
   10989:	48 89 94 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rdx
   10990:	00 
      { _M_string_length = __length; }
   10991:	48 c7 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],0x0
   10998:	00 00 00 00 00 
   1099d:	c6 01 00             	mov    BYTE PTR [rcx],0x0
      { return _M_dataplus._M_p; }
   109a0:	48 8b bc 24 90 00 00 	mov    rdi,QWORD PTR [rsp+0x90]
   109a7:	00 
	if (_M_data() == _M_local_data())
   109a8:	4c 39 c7             	cmp    rdi,r8
   109ab:	74 11                	je     109be <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ee>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   109ad:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
   109b4:	00 
   109b5:	48 8d 70 01          	lea    rsi,[rax+0x1]
   109b9:	e8 42 28 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
   109be:	4c 89 ef             	mov    rdi,r13
   109c1:	e8 fa 28 ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_string_length; }
   109c6:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
	      if (!__wstr.empty())
   109cb:	48 85 c0             	test   rax,rax
   109ce:	74 4d                	je     10a1d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34d>
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   109d0:	48 89 e9             	mov    rcx,rbp
		__str = __wstr;
   109d3:	49 89 c7             	mov    r15,rax
   109d6:	48 8b 6c 24 70       	mov    rbp,QWORD PTR [rsp+0x70]
   109db:	eb 43                	jmp    10a20 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x350>
   109dd:	0f 1f 00             	nop    DWORD PTR [rax]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   109e0:	4c 8d a4 24 80 00 00 	lea    r12,[rsp+0x80]
   109e7:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   109e8:	41 83 e5 20          	and    r13d,0x20
      { _M_string_length = __length; }
   109ec:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
   109f3:	00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   109f5:	4c 89 64 24 70       	mov    QWORD PTR [rsp+0x70],r12
   109fa:	c6 84 24 80 00 00 00 	mov    BYTE PTR [rsp+0x80],0x0
   10a01:	00 
   10a02:	74 19                	je     10a1d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34d>
   10a04:	db ac 24 70 01 00 00 	fld    TBYTE PTR [rsp+0x170]
   10a0b:	d9 e1                	fabs
   10a0d:	db 2d ad 7e 00 00    	fld    TBYTE PTR [rip+0x7ead]        # 188c0 <std::__unicode::__v15_1_0::__width_edges+0x440>
   10a13:	df e9                	fucomip st,st(1)
   10a15:	dd d8                	fstp   st(0)
   10a17:	0f 83 c4 fe ff ff    	jae    108e1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x211>
      { _M_dataplus._M_p = __p; }
   10a1d:	48 89 e9             	mov    rcx,rbp
	  if (_M_width_kind == _WP_value)
   10a20:	41 0f b7 06          	movzx  eax,WORD PTR [r14]
   10a24:	66 25 80 01          	and    ax,0x180
   10a28:	66 3d 80 00          	cmp    ax,0x80
   10a2c:	0f 84 9e 00 00 00    	je     10ad0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
	  else if (_M_width_kind == _WP_from_arg)
   10a32:	66 3d 00 01          	cmp    ax,0x100
   10a36:	0f 84 64 04 00 00    	je     10ea0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7d0>
   10a3c:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
   10a41:	4c 8b 68 10          	mov    r13,QWORD PTR [rax+0x10]
	    return __format::__write(__fc.out(), __str);
   10a45:	48 89 ea             	mov    rdx,rbp
   10a48:	4c 89 fe             	mov    rsi,r15
   10a4b:	4c 89 ef             	mov    rdi,r13
   10a4e:	e8 9d 81 ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
   10a53:	48 89 c5             	mov    rbp,rax
      { return _M_dataplus._M_p; }
   10a56:	48 8b 7c 24 70       	mov    rdi,QWORD PTR [rsp+0x70]
	if (_M_data() == _M_local_data())
   10a5b:	4c 39 e7             	cmp    rdi,r12
   10a5e:	74 11                	je     10a71 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   10a60:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   10a67:	00 
   10a68:	48 8d 70 01          	lea    rsi,[rax+0x1]
   10a6c:	e8 8f 27 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { return _M_dataplus._M_p; }
   10a71:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
	if (_M_data() == _M_local_data())
   10a76:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   10a7b:	48 39 c7             	cmp    rdi,rax
   10a7e:	74 0e                	je     10a8e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3be>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   10a80:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   10a85:	48 8d 70 01          	lea    rsi,[rax+0x1]
   10a89:	e8 72 27 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
   10a8e:	48 81 c4 38 01 00 00 	add    rsp,0x138
   10a95:	48 89 e8             	mov    rax,rbp
   10a98:	5b                   	pop    rbx
   10a99:	5d                   	pop    rbp
   10a9a:	41 5c                	pop    r12
   10a9c:	41 5d                	pop    r13
   10a9e:	41 5e                	pop    r14
   10aa0:	41 5f                	pop    r15
   10aa2:	c3                   	ret
   10aa3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		*--__start = ' ';
   10aa8:	c6 45 ff 20          	mov    BYTE PTR [rbp-0x1],0x20
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   10aac:	45 0f b6 2e          	movzx  r13d,BYTE PTR [r14]
		*--__start = ' ';
   10ab0:	48 83 ed 01          	sub    rbp,0x1
   10ab4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   10abb:	00 00 00 00 
   10abf:	90                   	nop
	  bool __have_sign = true;
   10ac0:	41 b8 01 00 00 00    	mov    r8d,0x1
   10ac6:	e9 ed fc ff ff       	jmp    107b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe8>
   10acb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    __width = _M_width;
   10ad0:	45 0f b7 46 04       	movzx  r8d,WORD PTR [r14+0x4]
      iterator out() { return std::move(_M_out); }
   10ad5:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
   10ada:	4c 8b 68 10          	mov    r13,QWORD PTR [rax+0x10]
	  if (__width <= __str.size())
   10ade:	4d 39 c7             	cmp    r15,r8
   10ae1:	0f 83 5e ff ff ff    	jae    10a45 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x375>
	  _Align __align = _M_spec._M_align;
   10ae7:	41 0f b6 16          	movzx  edx,BYTE PTR [r14]
	  char32_t __fill_char = _M_spec._M_fill;
   10aeb:	45 8b 4e 08          	mov    r9d,DWORD PTR [r14+0x8]
	  size_t __nfill = __width - __str.size();
   10aef:	4d 29 f8             	sub    r8,r15
	  if (__align == _Align_default)
   10af2:	89 d0                	mov    eax,edx
   10af4:	83 e0 03             	and    eax,0x3
   10af7:	0f 85 7e 00 00 00    	jne    10b7b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
   10afd:	83 e2 40             	and    edx,0x40
   10b00:	74 6e                	je     10b70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
   10b02:	db ac 24 70 01 00 00 	fld    TBYTE PTR [rsp+0x170]
   10b09:	d9 e1                	fabs
   10b0b:	db 2d af 7d 00 00    	fld    TBYTE PTR [rip+0x7daf]        # 188c0 <std::__unicode::__v15_1_0::__width_edges+0x440>
   10b11:	df e9                	fucomip st,st(1)
   10b13:	dd d8                	fstp   st(0)
   10b15:	72 59                	jb     10b70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
   10b17:	0f b6 11             	movzx  edx,BYTE PTR [rcx]
		  if (!__format::__is_xdigit(__narrow_str[0]))
   10b1a:	48 8d 0d 1f 55 00 00 	lea    rcx,[rip+0x551f]        # 16040 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
	      __align = _Align_right;
   10b21:	b8 02 00 00 00       	mov    eax,0x2
		  __fill_char = _CharT('0');
   10b26:	41 b9 30 00 00 00    	mov    r9d,0x30
		  if (!__format::__is_xdigit(__narrow_str[0]))
   10b2c:	80 3c 11 0f          	cmp    BYTE PTR [rcx+rdx*1],0xf
   10b30:	76 49                	jbe    10b7b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
      { return __normal_iterator(_M_current++); }
   10b32:	49 8b 45 18          	mov    rax,QWORD PTR [r13+0x18]
		      *__out++ = __str[0];
   10b36:	0f b6 55 00          	movzx  edx,BYTE PTR [rbp+0x0]
   10b3a:	48 8d 48 01          	lea    rcx,[rax+0x1]
   10b3e:	49 89 4d 18          	mov    QWORD PTR [r13+0x18],rcx
	*_M_next++ = __c;
   10b42:	88 10                	mov    BYTE PTR [rax],dl
    { return __lhs.base() - __rhs.base(); }
   10b44:	49 8b 45 18          	mov    rax,QWORD PTR [r13+0x18]
   10b48:	49 2b 45 08          	sub    rax,QWORD PTR [r13+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
   10b4c:	49 3b 45 10          	cmp    rax,QWORD PTR [r13+0x10]
   10b50:	0f 84 16 0a 00 00    	je     1156c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe9c>
	this->_M_str += __n;
   10b56:	48 83 c5 01          	add    rbp,0x1
	this->_M_len -= __n;
   10b5a:	49 83 ef 01          	sub    r15,0x1
	      __align = _Align_right;
   10b5e:	b8 02 00 00 00       	mov    eax,0x2
		  __fill_char = _CharT('0');
   10b63:	41 b9 30 00 00 00    	mov    r9d,0x30
      }
   10b69:	eb 10                	jmp    10b7b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
   10b6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      __align = _Align_right;
   10b70:	b8 02 00 00 00       	mov    eax,0x2
		__fill_char = _CharT(' ');
   10b75:	41 b9 20 00 00 00    	mov    r9d,0x20
	  return __format::__write_padded(std::move(__out), __str,
   10b7b:	48 89 ea             	mov    rdx,rbp
   10b7e:	4c 89 fe             	mov    rsi,r15
   10b81:	89 c1                	mov    ecx,eax
   10b83:	4c 89 ef             	mov    rdi,r13
   10b86:	e8 95 81 ff ff       	call   8d20 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
   10b8b:	48 89 c5             	mov    rbp,rax
					  __align, __nfill, __fill_char);
   10b8e:	e9 c3 fe ff ff       	jmp    10a56 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x386>
   10b93:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  if (_M_prec_kind == _WP_value)
   10b98:	3c 02                	cmp    al,0x2
   10b9a:	0f 84 30 04 00 00    	je     10fd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
	  size_t __prec = -1;
   10ba0:	48 c7 04 24 ff ff ff 	mov    QWORD PTR [rsp],0xffffffffffffffff
   10ba7:	ff 
	  else if (_M_prec_kind == _WP_from_arg)
   10ba8:	3c 04                	cmp    al,0x4
   10baa:	0f 84 98 02 00 00    	je     10e48 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x778>
	  switch (_M_spec._M_type)
   10bb0:	89 e8                	mov    eax,ebp
   10bb2:	48 8d 15 bb 4e 00 00 	lea    rdx,[rip+0x4ebb]        # 15a74 <CSWTCH.1110+0x994>
   10bb9:	c0 e8 03             	shr    al,0x3
   10bbc:	83 e0 0f             	and    eax,0xf
   10bbf:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   10bc3:	48 01 d0             	add    rax,rdx
   10bc6:	ff e0                	jmp    rax
   10bc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   10bcf:	00 
      for (; __pos < this->_M_len; ++__pos)
   10bd0:	48 83 c1 01          	add    rcx,0x1
   10bd4:	4c 39 f9             	cmp    rcx,r15
   10bd7:	0f 83 1a 05 00 00    	jae    110f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa27>
	if (!traits_type::eq(this->_M_str[__pos], __c))
   10bdd:	80 7c 0d 00 30       	cmp    BYTE PTR [rbp+rcx*1+0x0],0x30
   10be2:	74 ec                	je     10bd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x500>
   10be4:	e9 15 05 00 00       	jmp    110fe <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa2e>
   10be9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		  __p = __s.find(__expc); // Find the exponent, if present.
   10bf0:	0f be 54 24 36       	movsx  edx,BYTE PTR [rsp+0x36]
   10bf5:	31 c9                	xor    ecx,ecx
   10bf7:	48 89 ee             	mov    rsi,rbp
   10bfa:	4c 89 ff             	mov    rdi,r15
   10bfd:	44 88 44 24 28       	mov    BYTE PTR [rsp+0x28],r8b
   10c02:	e8 69 31 ff ff       	call   3d70 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>
		    __p = __s.size();
   10c07:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
		  __p = __s.find(__expc); // Find the exponent, if present.
   10c0b:	49 89 c3             	mov    r11,rax
		    __p = __s.size();
   10c0e:	4d 0f 44 df          	cmove  r11,r15
	      if (__trailing_zeros && __prec != 0)
   10c12:	80 7c 24 18 00       	cmp    BYTE PTR [rsp+0x18],0x0
   10c17:	0f 84 a2 02 00 00    	je     10ebf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7ef>
   10c1d:	48 83 3c 24 00       	cmp    QWORD PTR [rsp],0x0
   10c22:	0f 84 4f 08 00 00    	je     11477 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xda7>
		  __sigfigs = __d - __have_sign;
   10c28:	0f b6 44 24 28       	movzx  eax,BYTE PTR [rsp+0x28]
   10c2d:	4c 89 da             	mov    rdx,r11
   10c30:	4d 89 dc             	mov    r12,r11
   10c33:	41 b9 01 00 00 00    	mov    r9d,0x1
   10c39:	48 29 c2             	sub    rdx,rax
		  __z = __prec - __sigfigs;
   10c3c:	48 29 14 24          	sub    QWORD PTR [rsp],rdx
   10c40:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10c44:	49 01 c1             	add    r9,rax
   10c47:	e9 64 fc ff ff       	jmp    108b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   10c4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      if (_M_spec._M_type != _Pres_A)
   10c50:	83 e5 78             	and    ebp,0x78
		__expc = 'p';
   10c53:	ba 65 00 00 00       	mov    edx,0x65
   10c58:	b8 70 00 00 00       	mov    eax,0x70
   10c5d:	40 80 fd 10          	cmp    bpl,0x10
   10c61:	0f 44 c2             	cmove  eax,edx
   10c64:	45 31 e4             	xor    r12d,r12d
   10c67:	88 44 24 36          	mov    BYTE PTR [rsp+0x36],al
	      return __format::to_chars(__b, __e, __v, __fmt);
   10c6b:	48 8d ac 24 b1 00 00 	lea    rbp,[rsp+0xb1]
   10c72:	00 
   10c73:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10c7a:	ba 04 00 00 00       	mov    edx,0x4
   10c7f:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10c86:	48 89 ef             	mov    rdi,rbp
   10c89:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   10c90:	00 
   10c91:	e8 ca 23 ff ff       	call   3060 <std::to_chars(char*, char*, long double, std::chars_format)@plt>
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10c96:	41 5f                	pop    r15
   10c98:	48 89 c3             	mov    rbx,rax
   10c9b:	58                   	pop    rax
   10c9c:	83 fa 4b             	cmp    edx,0x4b
   10c9f:	0f 84 0b 04 00 00    	je     110b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9e0>
	  char* __end = __buf + sizeof(__buf);
   10ca5:	48 8d 84 24 30 01 00 	lea    rax,[rsp+0x130]
   10cac:	00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10cad:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
   10cb2:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10cb9:	00 
	  char* __end = __buf + sizeof(__buf);
   10cba:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
	  if (__upper)
   10cbf:	45 84 e4             	test   r12b,r12b
   10cc2:	0f 84 bd fa ff ff    	je     10785 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb5>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   10cc8:	48 39 dd             	cmp    rbp,rbx
   10ccb:	0f 84 b4 fa ff ff    	je     10785 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb5>
   10cd1:	49 89 ec             	mov    r12,rbp
   10cd4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   10cdb:	00 00 00 00 
   10cdf:	90                   	nop
		*__p = std::toupper(*__p);
   10ce0:	41 0f be 3c 24       	movsx  edi,BYTE PTR [r12]
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   10ce5:	49 83 c4 01          	add    r12,0x1
		*__p = std::toupper(*__p);
   10ce9:	e8 62 26 ff ff       	call   3350 <toupper@plt>
   10cee:	41 88 44 24 ff       	mov    BYTE PTR [r12-0x1],al
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   10cf3:	49 39 dc             	cmp    r12,rbx
   10cf6:	75 e8                	jne    10ce0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x610>
   10cf8:	e9 88 fa ff ff       	jmp    10785 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb5>
   10cfd:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (_M_spec._M_type != _Pres_A)
   10d00:	83 e5 78             	and    ebp,0x78
		__expc = 'p';
   10d03:	ba 50 00 00 00       	mov    edx,0x50
   10d08:	b8 70 00 00 00       	mov    eax,0x70
   10d0d:	41 bc 01 00 00 00    	mov    r12d,0x1
   10d13:	40 80 fd 10          	cmp    bpl,0x10
   10d17:	0f 44 c2             	cmove  eax,edx
   10d1a:	88 44 24 36          	mov    BYTE PTR [rsp+0x36],al
   10d1e:	e9 48 ff ff ff       	jmp    10c6b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x59b>
   10d23:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   10d28:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10d2f:	00 
   10d30:	b9 06 00 00 00       	mov    ecx,0x6
   10d35:	45 31 e4             	xor    r12d,r12d
	  char __expc = 'e';
   10d38:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      __fmt = chars_format::fixed;
   10d3d:	bd 02 00 00 00       	mov    ebp,0x2
	  bool __trailing_zeros = false;
   10d42:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10d47:	4c 8d ac 24 b1 00 00 	lea    r13,[rsp+0xb1]
   10d4e:	00 
   10d4f:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10d56:	89 ea                	mov    edx,ebp
   10d58:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   10d5f:	4c 89 ef             	mov    rdi,r13
   10d62:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   10d69:	00 
   10d6a:	e8 a1 24 ff ff       	call   3210 <std::to_chars(char*, char*, long double, std::chars_format, int)@plt>
   10d6f:	49 89 c0             	mov    r8,rax
   10d72:	48 89 d0             	mov    rax,rdx
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   10d75:	5a                   	pop    rdx
   10d76:	59                   	pop    rcx
   10d77:	4c 89 c3             	mov    rbx,r8
   10d7a:	83 f8 4b             	cmp    eax,0x4b
   10d7d:	0f 84 5d 02 00 00    	je     10fe0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x910>
	  char* __end = __buf + sizeof(__buf);
   10d83:	48 8d 84 24 30 01 00 	lea    rax,[rsp+0x130]
   10d8a:	00 
	  char* __start = __buf + 1; // reserve space for sign
   10d8b:	4c 89 ed             	mov    rbp,r13
	  char* __end = __buf + sizeof(__buf);
   10d8e:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
   10d93:	e9 27 ff ff ff       	jmp    10cbf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5ef>
   10d98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   10d9f:	00 
	  switch (_M_spec._M_type)
   10da0:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10da7:	00 
   10da8:	b9 06 00 00 00       	mov    ecx,0x6
	      __upper = true;
   10dad:	41 bc 01 00 00 00    	mov    r12d,0x1
   10db3:	eb 83                	jmp    10d38 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   10db5:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   10db8:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10dbf:	00 
   10dc0:	b9 06 00 00 00       	mov    ecx,0x6
   10dc5:	45 31 e4             	xor    r12d,r12d
   10dc8:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      __trailing_zeros = true;
   10dcd:	c6 44 24 18 01       	mov    BYTE PTR [rsp+0x18],0x1
	      __fmt = chars_format::general;
   10dd2:	bd 03 00 00 00       	mov    ebp,0x3
	      break;
   10dd7:	e9 6b ff ff ff       	jmp    10d47 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x677>
   10ddc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
   10de0:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10de7:	00 
   10de8:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   10ded:	c6 44 24 36 45       	mov    BYTE PTR [rsp+0x36],0x45
	      __upper = true;
   10df2:	41 bc 01 00 00 00    	mov    r12d,0x1
   10df8:	eb d3                	jmp    10dcd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6fd>
   10dfa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   10e00:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10e07:	00 
   10e08:	b9 06 00 00 00       	mov    ecx,0x6
   10e0d:	45 31 e4             	xor    r12d,r12d
   10e10:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	  bool __trailing_zeros = false;
   10e15:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
	      __fmt = chars_format::scientific;
   10e1a:	bd 01 00 00 00       	mov    ebp,0x1
	      break;
   10e1f:	e9 23 ff ff ff       	jmp    10d47 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x677>
   10e24:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
   10e28:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   10e2f:	00 
   10e30:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   10e35:	c6 44 24 36 45       	mov    BYTE PTR [rsp+0x36],0x45
	      __upper = true;
   10e3a:	41 bc 01 00 00 00    	mov    r12d,0x1
   10e40:	eb d3                	jmp    10e15 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x745>
   10e42:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
   10e48:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
   10e4c:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
   10e51:	e8 6a 2f ff ff       	call   3dc0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   10e56:	48 89 04 24          	mov    QWORD PTR [rsp],rax
   10e5a:	e9 51 fd ff ff       	jmp    10bb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	  char __expc = 'e';
   10e5f:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   10e64:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
		__fmt = chars_format::general;
   10e67:	bd 03 00 00 00       	mov    ebp,0x3
	  bool __upper = false;
   10e6c:	45 31 e4             	xor    r12d,r12d
	  bool __trailing_zeros = false;
   10e6f:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
   10e74:	e9 ce fe ff ff       	jmp    10d47 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x677>
   10e79:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		*--__start = '+';
   10e80:	c6 45 ff 2b          	mov    BYTE PTR [rbp-0x1],0x2b
	  bool __have_sign = true;
   10e84:	41 b8 01 00 00 00    	mov    r8d,0x1
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   10e8a:	45 0f b6 2e          	movzx  r13d,BYTE PTR [r14]
		*--__start = '+';
   10e8e:	48 83 ed 01          	sub    rbp,0x1
   10e92:	e9 21 f9 ff ff       	jmp    107b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe8>
   10e97:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   10e9e:	00 00 
   10ea0:	41 0f b7 7e 04       	movzx  edi,WORD PTR [r14+0x4]
   10ea5:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
   10eaa:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
   10eae:	e8 ed 2f ff ff       	call   3ea0 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   10eb3:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
   10eb7:	49 89 c0             	mov    r8,rax
   10eba:	e9 16 fc ff ff       	jmp    10ad5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x405>
	      size_t __z = 0;   // Number of trailing zeros to add.
   10ebf:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
   10ec6:	00 
	      if (__trailing_zeros && __prec != 0)
   10ec7:	4d 89 dc             	mov    r12,r11
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   10eca:	41 b9 01 00 00 00    	mov    r9d,0x1
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
   10ed0:	48 83 7c 24 58 00    	cmp    QWORD PTR [rsp+0x58],0x0
   10ed6:	75 11                	jne    10ee9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x819>
   10ed8:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
   10edd:	48 29 d8             	sub    rax,rbx
   10ee0:	4c 39 c8             	cmp    rax,r9
   10ee3:	0f 83 2a 05 00 00    	jae    11413 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd43>
		      __dynbuf.reserve(__s.size() + __extras);
   10ee9:	4c 8d 6c 24 50       	lea    r13,[rsp+0x50]
   10eee:	4b 8d 34 0f          	lea    rsi,[r15+r9*1]
   10ef2:	4c 89 5c 24 18       	mov    QWORD PTR [rsp+0x18],r11
   10ef7:	4c 89 ef             	mov    rdi,r13
   10efa:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   10eff:	e8 2c 4d ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
		      if (__dynbuf.empty())
   10f04:	48 83 7c 24 58 00    	cmp    QWORD PTR [rsp+0x58],0x0
   10f0a:	4c 8b 5c 24 18       	mov    r11,QWORD PTR [rsp+0x18]
   10f0f:	0f 85 33 02 00 00    	jne    11148 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa78>
	return _M_replace(size_type(0), this->size(), __s, __n);
   10f15:	4d 39 e7             	cmp    r15,r12
   10f18:	4d 89 e0             	mov    r8,r12
   10f1b:	48 89 e9             	mov    rcx,rbp
   10f1e:	4c 89 ef             	mov    rdi,r13
   10f21:	4d 0f 46 c7          	cmovbe r8,r15
   10f25:	31 d2                	xor    edx,edx
   10f27:	31 f6                	xor    esi,esi
   10f29:	4c 89 5c 24 18       	mov    QWORD PTR [rsp+0x18],r11
   10f2e:	e8 2d 37 ff ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  if (__d == __p)
   10f33:	4c 8b 5c 24 18       	mov    r11,QWORD PTR [rsp+0x18]
   10f38:	4d 39 dc             	cmp    r12,r11
   10f3b:	0f 84 90 05 00 00    	je     114d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe01>
			  if (__z)
   10f41:	48 83 3c 24 00       	cmp    QWORD PTR [rsp],0x0
   10f46:	0f 85 67 05 00 00    	jne    114b3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xde3>
    if (__pos > __size)
   10f4c:	4d 39 e7             	cmp    r15,r12
   10f4f:	0f 82 7a 06 00 00    	jb     115cf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeff>
      { return _M_string_length; }
   10f55:	48 8b 74 24 58       	mov    rsi,QWORD PTR [rsp+0x58]
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
   10f5a:	4d 29 e7             	sub    r15,r12
	return basic_string_view{_M_str + __pos, __rlen};
   10f5d:	4a 8d 4c 25 00       	lea    rcx,[rbp+r12*1+0x0]
	if (this->max_size() - (this->size() - __n1) < __n2)
   10f62:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
   10f69:	ff ff 7f 
   10f6c:	48 29 f0             	sub    rax,rsi
   10f6f:	4c 39 f8             	cmp    rax,r15
   10f72:	0f 82 4b 06 00 00    	jb     115c3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xef3>
      { return _M_dataplus._M_p; }
   10f78:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
	if (_M_data() == _M_local_data())
   10f7d:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
      const size_type __len = __n + this->size();
   10f82:	4a 8d 2c 3e          	lea    rbp,[rsi+r15*1]
   10f86:	48 39 d8             	cmp    rax,rbx
   10f89:	0f 84 54 05 00 00    	je     114e3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe13>
	return _M_is_local() ? size_type(_S_local_capacity)
   10f8f:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
      if (__len <= this->capacity())
   10f94:	48 39 ea             	cmp    rdx,rbp
   10f97:	0f 82 ff 04 00 00    	jb     1149c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdcc>
	  if (__n)
   10f9d:	4d 85 ff             	test   r15,r15
   10fa0:	74 1e                	je     10fc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
   10fa2:	48 8d 3c 30          	lea    rdi,[rax+rsi*1]
	if (__n == 1)
   10fa6:	49 83 ff 01          	cmp    r15,0x1
   10faa:	0f 84 3d 05 00 00    	je     114ed <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe1d>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   10fb0:	4c 89 fa             	mov    rdx,r15
   10fb3:	48 89 ce             	mov    rsi,rcx
   10fb6:	e8 f5 21 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
   10fbb:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
      { _M_string_length = __length; }
   10fc0:	48 89 6c 24 58       	mov    QWORD PTR [rsp+0x58],rbp
	__c1 = __c2;
   10fc5:	c6 04 28 00          	mov    BYTE PTR [rax+rbp*1],0x0
   10fc9:	e9 b2 01 00 00       	jmp    11180 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xab0>
   10fce:	66 90                	xchg   ax,ax
	    __prec = _M_prec;
   10fd0:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   10fd4:	48 89 04 24          	mov    QWORD PTR [rsp],rax
   10fd8:	e9 d3 fb ff ff       	jmp    10bb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
   10fdd:	0f 1f 00             	nop    DWORD PTR [rax]
	      size_t __guess = 8 + __prec;
   10fe0:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
   10fe4:	41 bf 01 00 00 00    	mov    r15d,0x1
   10fea:	48 8d 70 08          	lea    rsi,[rax+0x8]
	      if (__fmt == chars_format::fixed) // +ddd.prec
   10fee:	83 fd 02             	cmp    ebp,0x2
   10ff1:	0f 84 89 02 00 00    	je     11280 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbb0>
	      if (__guess <= sizeof(__buf)) [[unlikely]]
   10ff7:	48 81 fe 80 00 00 00 	cmp    rsi,0x80
   10ffe:	0f 86 c1 00 00 00    	jbe    110c5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9f5>
	      __dynbuf.reserve(__guess);
   11004:	4c 8d 6c 24 50       	lea    r13,[rsp+0x50]
   11009:	4c 89 ef             	mov    rdi,r13
   1100c:	e8 1f 4c ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   11011:	4c 89 6c 24 20       	mov    QWORD PTR [rsp+0x20],r13
   11016:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
	if (_M_data() == _M_local_data())
   1101b:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   11020:	48 39 c2             	cmp    rdx,rax
   11023:	0f 84 5c 04 00 00    	je     11485 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdb5>
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
   11029:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   1102e:	48 8d 34 00          	lea    rsi,[rax+rax*1]
		    __res = __to_chars(__p + 1, __p + __n - 1);
   11032:	48 8d 5e ff          	lea    rbx,[rsi-0x1]
      reserve(__n);
   11036:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
   1103b:	e8 f0 4b ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   11040:	4c 8b 6c 24 50       	mov    r13,QWORD PTR [rsp+0x50]
   11045:	49 8d 74 1d 00       	lea    rsi,[r13+rbx*1+0x0]
   1104a:	49 8d 7d 01          	lea    rdi,[r13+0x1]
	    if (__use_prec)
   1104e:	45 84 ff             	test   r15b,r15b
   11051:	0f 85 0b 03 00 00    	jne    11362 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc92>
	    else if (__fmt != chars_format{})
   11057:	85 ed                	test   ebp,ebp
   11059:	0f 85 5a 01 00 00    	jne    111b9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xae9>
	      return __format::to_chars(__b, __e, __v);
   1105f:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   11066:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   1106d:	e8 ee 20 ff ff       	call   3160 <std::to_chars(char*, char*, long double)@plt>
   11072:	48 89 c3             	mov    rbx,rax
   11075:	48 89 d0             	mov    rax,rdx
   11078:	5a                   	pop    rdx
   11079:	59                   	pop    rcx
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
   1107a:	85 c0                	test   eax,eax
   1107c:	0f 85 6e 02 00 00    	jne    112f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc20>
   11082:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
   11087:	48 89 d8             	mov    rax,rbx
   1108a:	4c 29 e8             	sub    rax,r13
      { _M_string_length = __length; }
   1108d:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
   11092:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
   11096:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
		  __start = __dynbuf.data() + 1; // reserve space for sign
   1109b:	48 8d 68 01          	lea    rbp,[rax+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   1109f:	48 03 44 24 58       	add    rax,QWORD PTR [rsp+0x58]
   110a4:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   110a9:	e9 11 fc ff ff       	jmp    10cbf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5ef>
   110ae:	66 90                	xchg   ax,ax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   110b0:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   110b5:	45 31 ff             	xor    r15d,r15d
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   110b8:	bd 04 00 00 00       	mov    ebp,0x4
   110bd:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   110c4:	00 
		__guess = sizeof(__buf) * 2;
   110c5:	be 00 01 00 00       	mov    esi,0x100
   110ca:	e9 35 ff ff ff       	jmp    11004 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x934>
   110cf:	90                   	nop
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   110d0:	45 31 c9             	xor    r9d,r9d
   110d3:	49 39 c7             	cmp    r15,rax
   110d6:	41 0f 94 c1          	sete   r9b
		  if (__trailing_zeros)
   110da:	80 7c 24 18 00       	cmp    BYTE PTR [rsp+0x18],0x0
   110df:	0f 84 8b 01 00 00    	je     11270 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xba0>
		      if (__s[__have_sign] != '0')
   110e5:	41 0f b6 c0          	movzx  eax,r8b
		    __p = __s.size();
   110e9:	4d 89 fc             	mov    r12,r15
		      if (__s[__have_sign] != '0')
   110ec:	80 7c 05 00 30       	cmp    BYTE PTR [rbp+rax*1+0x0],0x30
   110f1:	0f 85 a3 f7 ff ff    	jne    1089a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1ca>
      return npos;
   110f7:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
   110fe:	4c 89 e2             	mov    rdx,r12
   11101:	48 29 ca             	sub    rdx,rcx
   11104:	e9 9b f7 ff ff       	jmp    108a4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d4>
   11109:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  std::construct_at(&_M_loc);
   11110:	48 8d 70 18          	lea    rsi,[rax+0x18]
   11114:	48 89 c3             	mov    rbx,rax
      std::locale locale() { return _M_loc.value(); }
   11117:	4c 8d 6c 24 48       	lea    r13,[rsp+0x48]
   1111c:	48 89 f7             	mov    rdi,rsi
   1111f:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
   11123:	e8 48 22 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
   11128:	c6 43 20 01          	mov    BYTE PTR [rbx+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
   1112c:	48 8b 34 24          	mov    rsi,QWORD PTR [rsp]
   11130:	e9 c9 f7 ff ff       	jmp    108fe <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x22e>
   11135:	0f 1f 00             	nop    DWORD PTR [rax]
	      size_t __z = 0;   // Number of trailing zeros to add.
   11138:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
   1113f:	00 
   11140:	e9 6b f7 ff ff       	jmp    108b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   11145:	0f 1f 00             	nop    DWORD PTR [rax]
   11148:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
			  __dynbuf.insert(__p, __extras, '0');
   1114d:	b9 30 00 00 00       	mov    ecx,0x30
   11152:	4c 89 e6             	mov    rsi,r12
   11155:	4c 89 ef             	mov    rdi,r13
   11158:	4c 89 1c 24          	mov    QWORD PTR [rsp],r11
   1115c:	4c 89 ca             	mov    rdx,r9
   1115f:	e8 0c 36 ff ff       	call   4770 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>
			  if (__d == __p)
   11164:	4c 8b 1c 24          	mov    r11,QWORD PTR [rsp]
   11168:	4d 39 dc             	cmp    r12,r11
   1116b:	75 13                	jne    11180 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xab0>
			    __dynbuf[__p] = '.';
   1116d:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
   11172:	42 c6 04 20 2e       	mov    BYTE PTR [rax+r12*1],0x2e
   11177:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   1117e:	00 00 
      { return _M_string_length; }
   11180:	4c 8b 7c 24 58       	mov    r15,QWORD PTR [rsp+0x58]
      { return _M_dataplus._M_p; }
   11185:	48 8b 6c 24 50       	mov    rbp,QWORD PTR [rsp+0x50]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   1118a:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1118e:	4c 8d a4 24 80 00 00 	lea    r12,[rsp+0x80]
   11195:	00 
   11196:	c6 84 24 80 00 00 00 	mov    BYTE PTR [rsp+0x80],0x0
   1119d:	00 
   1119e:	4c 89 64 24 70       	mov    QWORD PTR [rsp+0x70],r12
      { _M_string_length = __length; }
   111a3:	48 c7 44 24 78 00 00 	mov    QWORD PTR [rsp+0x78],0x0
   111aa:	00 00 
   111ac:	a8 20                	test   al,0x20
   111ae:	0f 85 2d f7 ff ff    	jne    108e1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x211>
   111b4:	e9 64 f8 ff ff       	jmp    10a1d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x34d>
	      return __format::to_chars(__b, __e, __v, __fmt);
   111b9:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   111c0:	89 ea                	mov    edx,ebp
   111c2:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   111c9:	e8 92 1e ff ff       	call   3060 <std::to_chars(char*, char*, long double, std::chars_format)@plt>
   111ce:	5e                   	pop    rsi
   111cf:	5f                   	pop    rdi
   111d0:	48 89 c3             	mov    rbx,rax
   111d3:	48 89 d0             	mov    rax,rdx
   111d6:	e9 9f fe ff ff       	jmp    1107a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9aa>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   111db:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
	  bool __upper = false;
   111de:	45 31 e4             	xor    r12d,r12d
   111e1:	e9 52 fb ff ff       	jmp    10d38 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   111e6:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
   111e9:	e9 bf fb ff ff       	jmp    10dad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6dd>
   111ee:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
   111f1:	e9 3f fc ff ff       	jmp    10e35 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x765>
   111f6:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
   111f9:	e9 ef fb ff ff       	jmp    10ded <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x71d>
	  char __expc = 'e';
   111fe:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11203:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
	  bool __upper = false;
   11206:	45 31 e4             	xor    r12d,r12d
   11209:	e9 bf fb ff ff       	jmp    10dcd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6fd>
	      if (_M_spec._M_type != _Pres_A)
   1120e:	83 e5 78             	and    ebp,0x78
   11211:	ba 70 00 00 00       	mov    edx,0x70
   11216:	b8 65 00 00 00       	mov    eax,0x65
   1121b:	40 80 fd 10          	cmp    bpl,0x10
   1121f:	0f 45 c2             	cmovne eax,edx
   11222:	45 31 e4             	xor    r12d,r12d
   11225:	88 44 24 36          	mov    BYTE PTR [rsp+0x36],al
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11229:	c6 44 24 18 00       	mov    BYTE PTR [rsp+0x18],0x0
   1122e:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
	      __fmt = chars_format::hex;
   11231:	bd 04 00 00 00       	mov    ebp,0x4
   11236:	e9 0c fb ff ff       	jmp    10d47 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x677>
   1123b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
   11240:	83 e5 78             	and    ebp,0x78
		__expc = 'p';
   11243:	ba 50 00 00 00       	mov    edx,0x50
   11248:	b8 70 00 00 00       	mov    eax,0x70
   1124d:	41 bc 01 00 00 00    	mov    r12d,0x1
   11253:	40 80 fd 10          	cmp    bpl,0x10
   11257:	0f 44 c2             	cmove  eax,edx
   1125a:	88 44 24 36          	mov    BYTE PTR [rsp+0x36],al
   1125e:	eb c9                	jmp    11229 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb59>
	  char __expc = 'e';
   11260:	c6 44 24 36 65       	mov    BYTE PTR [rsp+0x36],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11265:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
	  bool __upper = false;
   11268:	45 31 e4             	xor    r12d,r12d
   1126b:	e9 a5 fb ff ff       	jmp    10e15 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x745>
	      size_t __z = 0;   // Number of trailing zeros to add.
   11270:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
   11277:	00 
		    __p = __s.size();
   11278:	4d 89 fc             	mov    r12,r15
   1127b:	e9 30 f6 ff ff       	jmp    108b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   11280:	48 89 74 24 20       	mov    QWORD PTR [rsp+0x20],rsi
			__builtin_frexpl(__v, &__exp);
   11285:	48 8d bc 24 90 00 00 	lea    rdi,[rsp+0x90]
   1128c:	00 
		      int __exp{};
   1128d:	c7 84 24 90 00 00 00 	mov    DWORD PTR [rsp+0x90],0x0
   11294:	00 00 00 00 
			__builtin_frexpl(__v, &__exp);
   11298:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   1129f:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   112a6:	e8 45 20 ff ff       	call   32f0 <frexpl@plt>
   112ab:	dd d8                	fstp   st(0)
		      if (__exp > 0)
   112ad:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [rsp+0xa0]
   112b4:	41 5a                	pop    r10
   112b6:	41 5b                	pop    r11
   112b8:	48 8b 74 24 20       	mov    rsi,QWORD PTR [rsp+0x20]
   112bd:	85 c0                	test   eax,eax
   112bf:	7e 23                	jle    112e4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc14>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
   112c1:	69 d0 a4 0f 00 00    	imul   edx,eax,0xfa4
   112c7:	48 89 d0             	mov    rax,rdx
   112ca:	48 69 d2 f9 65 56 3b 	imul   rdx,rdx,0x3b5665f9
   112d1:	48 c1 ea 20          	shr    rdx,0x20
   112d5:	29 d0                	sub    eax,edx
   112d7:	d1 e8                	shr    eax,1
   112d9:	01 d0                	add    eax,edx
   112db:	c1 e8 0d             	shr    eax,0xd
   112de:	83 c0 01             	add    eax,0x1
   112e1:	48 01 c6             	add    rsi,rax
   112e4:	41 bf 01 00 00 00    	mov    r15d,0x1
   112ea:	e9 08 fd ff ff       	jmp    10ff7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x927>
   112ef:	90                   	nop
   112f0:	48 c7 44 24 58 00 00 	mov    QWORD PTR [rsp+0x58],0x0
   112f7:	00 00 
      { return _M_dataplus._M_p; }
   112f9:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
   112fe:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   11301:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   11306:	83 f8 4b             	cmp    eax,0x4b
   11309:	0f 84 0c fd ff ff    	je     1101b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x94b>
		  __start = __dynbuf.data() + 1; // reserve space for sign
   1130f:	48 8d 6a 01          	lea    rbp,[rdx+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   11313:	48 03 54 24 58       	add    rdx,QWORD PTR [rsp+0x58]
   11318:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
   1131d:	e9 9d f9 ff ff       	jmp    10cbf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5ef>
   11322:	48 8b 94 24 90 00 00 	mov    rdx,QWORD PTR [rsp+0x90]
   11329:	00 
	if (_M_data() == _M_local_data())
   1132a:	4c 8d 84 24 a0 00 00 	lea    r8,[rsp+0xa0]
   11331:	00 
   11332:	4c 39 c2             	cmp    rdx,r8
   11335:	74 6d                	je     113a4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcd4>
      { return _M_string_length; }
   11337:	f3 0f 6f 84 24 98 00 	movdqu xmm0,XMMWORD PTR [rsp+0x98]
   1133e:	00 00 
      { _M_dataplus._M_p = __p; }
   11340:	48 89 54 24 70       	mov    QWORD PTR [rsp+0x70],rdx
      { _M_string_length = __length; }
   11345:	0f 11 44 24 78       	movups XMMWORD PTR [rsp+0x78],xmm0
      { _M_dataplus._M_p = __p; }
   1134a:	4c 89 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r8
   11351:	00 
   11352:	4c 8d 84 24 a0 00 00 	lea    r8,[rsp+0xa0]
   11359:	00 
   1135a:	4c 89 c1             	mov    rcx,r8
   1135d:	e9 2f f6 ff ff       	jmp    10991 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c1>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11362:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   11369:	89 ea                	mov    edx,ebp
   1136b:	ff b4 24 78 01 00 00 	push   QWORD PTR [rsp+0x178]
   11372:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   11376:	e8 95 1e ff ff       	call   3210 <std::to_chars(char*, char*, long double, std::chars_format, int)@plt>
   1137b:	41 58                	pop    r8
   1137d:	41 59                	pop    r9
   1137f:	48 89 c3             	mov    rbx,rax
   11382:	48 89 d0             	mov    rax,rdx
   11385:	e9 f0 fc ff ff       	jmp    1107a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9aa>
	  size_t __prec = 6;
   1138a:	48 c7 04 24 06 00 00 	mov    QWORD PTR [rsp],0x6
   11391:	00 
	  chars_format __fmt{};
   11392:	31 ed                	xor    ebp,ebp
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   11394:	45 31 ff             	xor    r15d,r15d
	  bool __upper = false;
   11397:	45 31 e4             	xor    r12d,r12d
		__guess = sizeof(__buf) * 2;
   1139a:	be 00 01 00 00       	mov    esi,0x100
   1139f:	e9 60 fc ff ff       	jmp    11004 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x934>
	    if (_M_string_length > _S_local_capacity)
   113a4:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   113ab:	00 
   113ac:	48 89 d7             	mov    rdi,rdx
		if (__str.size())
   113af:	48 85 d2             	test   rdx,rdx
   113b2:	74 49                	je     113fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd2d>
	if (__n == 1)
   113b4:	48 83 fa 01          	cmp    rdx,0x1
   113b8:	0f 84 3e 01 00 00    	je     114fc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe2c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   113be:	89 d1                	mov    ecx,edx
   113c0:	83 fa 08             	cmp    edx,0x8
   113c3:	0f 83 4f 01 00 00    	jae    11518 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe48>
   113c9:	f6 c2 04             	test   dl,0x4
   113cc:	0f 85 b0 01 00 00    	jne    11582 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeb2>
   113d2:	85 d2                	test   edx,edx
   113d4:	74 21                	je     113f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd27>
   113d6:	0f b6 b4 24 a0 00 00 	movzx  esi,BYTE PTR [rsp+0xa0]
   113dd:	00 
   113de:	83 e2 02             	and    edx,0x2
   113e1:	40 88 30             	mov    BYTE PTR [rax],sil
   113e4:	0f 85 bc 01 00 00    	jne    115a6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xed6>
   113ea:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   113ef:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   113f6:	00 
      { return _M_string_length; }
   113f7:	48 89 d7             	mov    rdi,rdx
      { return _M_dataplus._M_p; }
   113fa:	48 89 c1             	mov    rcx,rax
      { _M_string_length = __length; }
   113fd:	48 89 7c 24 78       	mov    QWORD PTR [rsp+0x78],rdi
	__c1 = __c2;
   11402:	c6 04 39 00          	mov    BYTE PTR [rcx+rdi*1],0x0
      { return _M_dataplus._M_p; }
   11406:	48 8b 8c 24 90 00 00 	mov    rcx,QWORD PTR [rsp+0x90]
   1140d:	00 
      }
   1140e:	e9 7e f5 ff ff       	jmp    10991 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2c1>
		      __builtin_memmove(__start + __p + __extras,
   11413:	4b 8d 3c 21          	lea    rdi,[r9+r12*1]
					__start + __p,
   11417:	4e 8d 6c 25 00       	lea    r13,[rbp+r12*1+0x0]
		      __builtin_memmove(__start + __p + __extras,
   1141c:	4c 89 fa             	mov    rdx,r15
   1141f:	4c 89 5c 24 20       	mov    QWORD PTR [rsp+0x20],r11
   11424:	4c 29 e2             	sub    rdx,r12
   11427:	48 01 ef             	add    rdi,rbp
   1142a:	4c 89 ee             	mov    rsi,r13
   1142d:	4c 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],r9
   11432:	e8 e9 1e ff ff       	call   3320 <memmove@plt>
		      if (__d == __p)
   11437:	4c 8b 5c 24 20       	mov    r11,QWORD PTR [rsp+0x20]
   1143c:	4c 8b 4c 24 18       	mov    r9,QWORD PTR [rsp+0x18]
   11441:	4d 39 dc             	cmp    r12,r11
   11444:	75 0a                	jne    11450 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd80>
			__start[__p++] = '.';
   11446:	41 c6 45 00 2e       	mov    BYTE PTR [r13+0x0],0x2e
		      __builtin_memset(__start + __p, '0', __z);
   1144b:	4e 8d 6c 25 01       	lea    r13,[rbp+r12*1+0x1]
   11450:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
   11454:	be 30 00 00 00       	mov    esi,0x30
   11459:	4c 89 ef             	mov    rdi,r13
   1145c:	4c 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],r9
   11461:	e8 da 1c ff ff       	call   3140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
   11466:	4c 8b 4c 24 18       	mov    r9,QWORD PTR [rsp+0x18]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   1146b:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
		      __narrow_str = {__s.data(), __s.size() + __extras};
   1146f:	4d 01 cf             	add    r15,r9
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   11472:	e9 17 fd ff ff       	jmp    1118e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xabe>
	      if (__trailing_zeros && __prec != 0)
   11477:	4d 89 dc             	mov    r12,r11
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   1147a:	41 b9 01 00 00 00    	mov    r9d,0x1
   11480:	e9 4b fa ff ff       	jmp    10ed0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x800>
   11485:	bb 1d 00 00 00       	mov    ebx,0x1d
   1148a:	be 1e 00 00 00       	mov    esi,0x1e
   1148f:	e9 a2 fb ff ff       	jmp    11036 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x966>
		    __p = __s.size();
   11494:	4d 89 fc             	mov    r12,r15
   11497:	e9 da f3 ff ff       	jmp    10876 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1a6>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
   1149c:	4d 89 f8             	mov    r8,r15
   1149f:	31 d2                	xor    edx,edx
   114a1:	4c 89 ef             	mov    rdi,r13
   114a4:	e8 c7 63 ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
   114a9:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
   114ae:	e9 0d fb ff ff       	jmp    10fc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   114b3:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
   114b7:	48 8b 74 24 58       	mov    rsi,QWORD PTR [rsp+0x58]
   114bc:	31 d2                	xor    edx,edx
   114be:	4c 89 ef             	mov    rdi,r13
   114c1:	41 b8 30 00 00 00    	mov    r8d,0x30
   114c7:	e8 a4 30 ff ff       	call   4570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>
   114cc:	e9 7b fa ff ff       	jmp    10f4c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x87c>
	this->push_back(__c);
   114d1:	be 2e 00 00 00       	mov    esi,0x2e
   114d6:	4c 89 ef             	mov    rdi,r13
   114d9:	e8 e2 6c ff ff       	call   81c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
	return *this;
   114de:	e9 5e fa ff ff       	jmp    10f41 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x871>
	return _M_is_local() ? size_type(_S_local_capacity)
   114e3:	ba 0f 00 00 00       	mov    edx,0xf
   114e8:	e9 a7 fa ff ff       	jmp    10f94 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8c4>
   114ed:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   114f0:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
   114f2:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
      }
   114f7:	e9 c4 fa ff ff       	jmp    10fc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
	__c1 = __c2;
   114fc:	0f b6 94 24 a0 00 00 	movzx  edx,BYTE PTR [rsp+0xa0]
   11503:	00 
   11504:	88 10                	mov    BYTE PTR [rax],dl
      { return _M_string_length; }
   11506:	48 8b bc 24 98 00 00 	mov    rdi,QWORD PTR [rsp+0x98]
   1150d:	00 
      { return _M_dataplus._M_p; }
   1150e:	48 8b 4c 24 70       	mov    rcx,QWORD PTR [rsp+0x70]
      }
   11513:	e9 e5 fe ff ff       	jmp    113fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd2d>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   11518:	48 8b 8c 24 a0 00 00 	mov    rcx,QWORD PTR [rsp+0xa0]
   1151f:	00 
   11520:	4c 89 c7             	mov    rdi,r8
   11523:	48 89 08             	mov    QWORD PTR [rax],rcx
   11526:	89 d1                	mov    ecx,edx
   11528:	49 8b 74 08 f8       	mov    rsi,QWORD PTR [r8+rcx*1-0x8]
   1152d:	48 89 74 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rsi
   11532:	48 8d 70 08          	lea    rsi,[rax+0x8]
   11536:	48 83 e6 f8          	and    rsi,0xfffffffffffffff8
   1153a:	48 29 f0             	sub    rax,rsi
   1153d:	48 89 c1             	mov    rcx,rax
   11540:	48 29 c7             	sub    rdi,rax
   11543:	01 d1                	add    ecx,edx
   11545:	83 e1 f8             	and    ecx,0xfffffff8
   11548:	83 f9 08             	cmp    ecx,0x8
   1154b:	0f 82 99 fe ff ff    	jb     113ea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1a>
   11551:	83 e1 f8             	and    ecx,0xfffffff8
   11554:	31 c0                	xor    eax,eax
   11556:	89 c2                	mov    edx,eax
   11558:	83 c0 08             	add    eax,0x8
   1155b:	4c 8b 0c 17          	mov    r9,QWORD PTR [rdi+rdx*1]
   1155f:	4c 89 0c 16          	mov    QWORD PTR [rsi+rdx*1],r9
   11563:	39 c8                	cmp    eax,ecx
   11565:	72 ef                	jb     11556 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe86>
   11567:	e9 7e fe ff ff       	jmp    113ea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1a>
	  _M_overflow();
   1156c:	49 8b 45 00          	mov    rax,QWORD PTR [r13+0x0]
   11570:	4c 89 04 24          	mov    QWORD PTR [rsp],r8
   11574:	4c 89 ef             	mov    rdi,r13
   11577:	ff 10                	call   QWORD PTR [rax]
   11579:	4c 8b 04 24          	mov    r8,QWORD PTR [rsp]
      }
   1157d:	e9 d4 f5 ff ff       	jmp    10b56 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x486>
   11582:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [rsp+0xa0]
   11589:	89 10                	mov    DWORD PTR [rax],edx
   1158b:	41 8b 54 08 fc       	mov    edx,DWORD PTR [r8+rcx*1-0x4]
   11590:	89 54 08 fc          	mov    DWORD PTR [rax+rcx*1-0x4],edx
   11594:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   11599:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   115a0:	00 
   115a1:	e9 51 fe ff ff       	jmp    113f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd27>
   115a6:	41 0f b7 54 08 fe    	movzx  edx,WORD PTR [r8+rcx*1-0x2]
   115ac:	66 89 54 08 fe       	mov    WORD PTR [rax+rcx*1-0x2],dx
   115b1:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   115b6:	48 8b 94 24 98 00 00 	mov    rdx,QWORD PTR [rsp+0x98]
   115bd:	00 
   115be:	e9 34 fe ff ff       	jmp    113f7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd27>
	  __throw_length_error(__N(__s));
   115c3:	48 8d 3d f1 3b 00 00 	lea    rdi,[rip+0x3bf1]        # 151bb <CSWTCH.1110+0xdb>
   115ca:	e8 61 1b ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
   115cf:	4c 89 f9             	mov    rcx,r15
   115d2:	4c 89 e2             	mov    rdx,r12
   115d5:	48 8d 35 4c 3c 00 00 	lea    rsi,[rip+0x3c4c]        # 15228 <CSWTCH.1110+0x148>
   115dc:	31 c0                	xor    eax,eax
   115de:	48 8d 3d 1b 3e 00 00 	lea    rdi,[rip+0x3e1b]        # 15400 <CSWTCH.1110+0x320>
   115e5:	e8 f6 1c ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
   115ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

00000000000115f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   115f0:	41 57                	push   r15
   115f2:	41 56                	push   r14
   115f4:	41 55                	push   r13
   115f6:	41 54                	push   r12
   115f8:	49 89 fc             	mov    r12,rdi
   115fb:	55                   	push   rbp
   115fc:	53                   	push   rbx
   115fd:	48 81 ec 48 01 00 00 	sub    rsp,0x148
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   11604:	0f b6 5f 01          	movzx  ebx,BYTE PTR [rdi+0x1]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   11608:	4c 8d 6c 24 70       	lea    r13,[rsp+0x70]
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   1160d:	48 89 74 24 18       	mov    QWORD PTR [rsp+0x18],rsi
	  if (__use_prec)
   11612:	89 d8                	mov    eax,ebx
   11614:	4c 89 6c 24 60       	mov    QWORD PTR [rsp+0x60],r13
      { _M_string_length = __length; }
   11619:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
   11620:	00 00 
	__c1 = __c2;
   11622:	c6 44 24 70 00       	mov    BYTE PTR [rsp+0x70],0x0
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   11627:	f2 0f 11 44 24 08    	movsd  QWORD PTR [rsp+0x8],xmm0
	  if (__use_prec)
   1162d:	83 e0 06             	and    eax,0x6
   11630:	0f 85 9a 04 00 00    	jne    11ad0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4e0>
	  switch (_M_spec._M_type)
   11636:	89 d8                	mov    eax,ebx
   11638:	48 8d 15 59 44 00 00 	lea    rdx,[rip+0x4459]        # 15a98 <CSWTCH.1110+0x9b8>
   1163f:	c0 e8 03             	shr    al,0x3
   11642:	83 e0 0f             	and    eax,0xf
   11645:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   11649:	48 01 d0             	add    rax,rdx
   1164c:	ff e0                	jmp    rax
   1164e:	66 90                	xchg   ax,ax
	      return __format::to_chars(__b, __e, __v);
   11650:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11656:	48 8d 9c 24 c1 00 00 	lea    rbx,[rsp+0xc1]
   1165d:	00 
   1165e:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   11665:	00 
   11666:	48 89 df             	mov    rdi,rbx
   11669:	e8 12 1a ff ff       	call   3080 <std::to_chars(char*, char*, double)@plt>
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   1166e:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	  char __expc = 'e';
   11673:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   11678:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   1167b:	83 fa 4b             	cmp    edx,0x4b
   1167e:	0f 84 28 0c 00 00    	je     122ac <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcbc>
	  char* __end = __buf + sizeof(__buf);
   11684:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   1168b:	00 
	  size_t __prec = 6;
   1168c:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11693:	00 00 
	  char* __end = __buf + sizeof(__buf);
   11695:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	  if (!__builtin_signbit(__v))
   1169a:	f2 0f 10 54 24 08    	movsd  xmm2,QWORD PTR [rsp+0x8]
	      if (_M_spec._M_sign == _Sign_plus)
   116a0:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
	  if (!__builtin_signbit(__v))
   116a5:	66 0f 50 c2          	movmskpd eax,xmm2
   116a9:	a8 01                	test   al,0x1
   116ab:	0f 85 3f 03 00 00    	jne    119f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
	      if (_M_spec._M_sign == _Sign_plus)
   116b1:	44 89 f0             	mov    eax,r14d
   116b4:	83 e0 0c             	and    eax,0xc
   116b7:	3c 04                	cmp    al,0x4
   116b9:	0f 84 e9 06 00 00    	je     11da8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7b8>
		__have_sign = false;
   116bf:	45 31 db             	xor    r11d,r11d
	      else if (_M_spec._M_sign == _Sign_space)
   116c2:	3c 0c                	cmp    al,0xc
   116c4:	0f 84 16 03 00 00    	je     119e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
	  string_view __narrow_str(__start, __res.ptr - __start);
   116ca:	49 89 ef             	mov    r15,rbp
   116cd:	49 29 df             	sub    r15,rbx
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   116d0:	41 f6 c6 10          	test   r14b,0x10
   116d4:	0f 84 36 02 00 00    	je     11910 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x320>
   116da:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   116e0:	f2 0f 10 0d 28 72 00 	movsd  xmm1,QWORD PTR [rip+0x7228]        # 18910 <std::__unicode::__v15_1_0::__width_edges+0x490>
   116e7:	00 
   116e8:	66 0f 54 05 e0 71 00 	andpd  xmm0,XMMWORD PTR [rip+0x71e0]        # 188d0 <std::__unicode::__v15_1_0::__width_edges+0x450>
   116ef:	00 
   116f0:	66 0f 2e c8          	ucomisd xmm1,xmm0
   116f4:	0f 82 16 02 00 00    	jb     11910 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x320>
      if (__pos < this->_M_len)
   116fa:	4d 85 ff             	test   r15,r15
   116fd:	0f 84 2d 04 00 00    	je     11b30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x540>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
   11703:	4c 89 fa             	mov    rdx,r15
   11706:	be 2e 00 00 00       	mov    esi,0x2e
   1170b:	48 89 df             	mov    rdi,rbx
   1170e:	44 88 5c 24 38       	mov    BYTE PTR [rsp+0x38],r11b
   11713:	e8 08 1b ff ff       	call   3220 <memchr@plt>
	  if (__p)
   11718:	44 0f b6 5c 24 38    	movzx  r11d,BYTE PTR [rsp+0x38]
   1171e:	48 85 c0             	test   rax,rax
   11721:	0f 84 09 04 00 00    	je     11b30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x540>
	    __ret = __p - this->_M_str;
   11727:	48 29 d8             	sub    rax,rbx
   1172a:	49 89 c2             	mov    r10,rax
	      if (__d != __s.npos) // Found decimal point.
   1172d:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
   11731:	0f 84 f9 03 00 00    	je     11b30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x540>
		  __p = __s.find(__expc, __d + 1);
   11737:	48 8d 48 01          	lea    rcx,[rax+0x1]
      if (__pos < this->_M_len)
   1173b:	4c 39 f9             	cmp    rcx,r15
   1173e:	0f 83 b4 08 00 00    	jae    11ff8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa08>
   11744:	0f be 74 24 37       	movsx  esi,BYTE PTR [rsp+0x37]
	  const size_type __n = this->_M_len - __pos;
   11749:	4c 89 fa             	mov    rdx,r15
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   1174c:	48 8d 3c 0b          	lea    rdi,[rbx+rcx*1]
   11750:	44 88 5c 24 40       	mov    BYTE PTR [rsp+0x40],r11b
	  const size_type __n = this->_M_len - __pos;
   11755:	48 29 ca             	sub    rdx,rcx
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   11758:	48 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],rcx
   1175d:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
   11762:	e8 b9 1a ff ff       	call   3220 <memchr@plt>
	  if (__p)
   11767:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
   1176c:	44 0f b6 5c 24 40    	movzx  r11d,BYTE PTR [rsp+0x40]
   11772:	48 85 c0             	test   rax,rax
   11775:	4c 8b 54 24 48       	mov    r10,QWORD PTR [rsp+0x48]
   1177a:	49 89 c1             	mov    r9,rax
   1177d:	0f 84 47 0c 00 00    	je     123ca <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdda>
	    __ret = __p - this->_M_str;
   11783:	49 29 d9             	sub    r9,rbx
		    __p = __s.size();
   11786:	49 83 f9 ff          	cmp    r9,0xffffffffffffffff
   1178a:	4d 0f 44 cf          	cmove  r9,r15
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   1178e:	45 31 c0             	xor    r8d,r8d
   11791:	4d 39 d1             	cmp    r9,r10
   11794:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
   11798:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   1179d:	0f 84 bd 08 00 00    	je     12060 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa70>
		      if (__s[__have_sign] != '0')
   117a3:	41 0f b6 d3          	movzx  edx,r11b
   117a7:	80 3c 13 30          	cmp    BYTE PTR [rbx+rdx*1],0x30
   117ab:	0f 84 6c 03 00 00    	je     11b1d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x52d>
			__sigfigs = __p - __have_sign - 1;
   117b1:	4c 89 c8             	mov    rax,r9
   117b4:	48 29 d0             	sub    rax,rdx
   117b7:	48 83 e8 01          	sub    rax,0x1
	      if (__trailing_zeros && __prec != 0)
   117bb:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   117c1:	0f 85 b6 03 00 00    	jne    11b7d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x58d>
   117c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   117ce:	00 00 
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   117d0:	4d 85 c0             	test   r8,r8
   117d3:	0f 85 11 06 00 00    	jne    11dea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7fa>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   117d9:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   117e0:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   117e1:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
   117e5:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   117ec:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   117f1:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   117f8:	00 
	__c1 = __c2;
   117f9:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   11800:	00 
   11801:	0f 84 53 01 00 00    	je     1195a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36a>
      if (!_M_hasval)
   11807:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1180c:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
   11810:	0f 84 1a 08 00 00    	je     12030 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa40>
      return _M_loc;
   11816:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
      std::locale locale() { return _M_loc.value(); }
   1181b:	4c 8d 74 24 58       	lea    r14,[rsp+0x58]
      return _M_loc;
   11820:	48 8d 70 18          	lea    rsi,[rax+0x18]
      std::locale locale() { return _M_loc.value(); }
   11824:	4c 89 f7             	mov    rdi,r14
   11827:	e8 64 19 ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
   1182c:	0f be 4c 24 37       	movsx  ecx,BYTE PTR [rsp+0x37]
   11831:	48 89 da             	mov    rdx,rbx
   11834:	4c 89 fe             	mov    rsi,r15
   11837:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
   1183e:	00 
   1183f:	4d 89 f0             	mov    r8,r14
   11842:	e8 29 30 ff ff       	call   4870 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>
      { return _M_dataplus._M_p; }
   11847:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   1184e:	00 
   1184f:	48 89 c7             	mov    rdi,rax
	if (_M_data() == _M_local_data())
   11852:	48 39 e8             	cmp    rax,rbp
   11855:	0f 84 ef 09 00 00    	je     1224a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc5a>
	    if (_M_string_length > _S_local_capacity)
   1185b:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   11862:	00 
      { return _M_dataplus._M_p; }
   11863:	48 8b 8c 24 a0 00 00 	mov    rcx,QWORD PTR [rsp+0xa0]
   1186a:	00 
	if (_M_data() == _M_local_data())
   1186b:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   11872:	00 
	    if (_M_string_length > _S_local_capacity)
   11873:	49 89 d0             	mov    r8,rdx
	if (_M_data() == _M_local_data())
   11876:	48 39 f1             	cmp    rcx,rsi
   11879:	0f 84 55 0a 00 00    	je     122d4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xce4>
   1187f:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
   11884:	48 89 8c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rcx
   1188b:	00 
		    __capacity = _M_allocated_capacity;
   1188c:	48 8b 94 24 90 00 00 	mov    rdx,QWORD PTR [rsp+0x90]
   11893:	00 
   11894:	0f 16 84 24 b0 00 00 	movhps xmm0,QWORD PTR [rsp+0xb0]
   1189b:	00 
      { _M_string_length = __length; }
   1189c:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   118a3:	00 
	    if (__data)
   118a4:	48 85 c0             	test   rax,rax
   118a7:	0f 84 cb 09 00 00    	je     12278 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc88>
      { _M_dataplus._M_p = __p; }
   118ad:	48 89 84 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rax
   118b4:	00 
      { _M_allocated_capacity = __capacity; }
   118b5:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
   118bc:	00 
      { _M_string_length = __length; }
   118bd:	48 c7 84 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],0x0
   118c4:	00 00 00 00 00 
   118c9:	c6 07 00             	mov    BYTE PTR [rdi],0x0
      { return _M_dataplus._M_p; }
   118cc:	48 8b bc 24 a0 00 00 	mov    rdi,QWORD PTR [rsp+0xa0]
   118d3:	00 
	if (_M_data() == _M_local_data())
   118d4:	48 39 f7             	cmp    rdi,rsi
   118d7:	74 11                	je     118ea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2fa>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   118d9:	48 8b 84 24 b0 00 00 	mov    rax,QWORD PTR [rsp+0xb0]
   118e0:	00 
   118e1:	48 8d 70 01          	lea    rsi,[rax+0x1]
   118e5:	e8 16 19 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
   118ea:	4c 89 f7             	mov    rdi,r14
   118ed:	e8 ce 19 ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_string_length; }
   118f2:	48 8b 84 24 88 00 00 	mov    rax,QWORD PTR [rsp+0x88]
   118f9:	00 
	      if (!__wstr.empty())
   118fa:	48 85 c0             	test   rax,rax
   118fd:	74 5b                	je     1195a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36a>
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   118ff:	49 89 de             	mov    r14,rbx
		__str = __wstr;
   11902:	49 89 c7             	mov    r15,rax
   11905:	48 8b 9c 24 80 00 00 	mov    rbx,QWORD PTR [rsp+0x80]
   1190c:	00 
   1190d:	eb 4e                	jmp    1195d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36d>
   1190f:	90                   	nop
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   11910:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   11917:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   11918:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
   1191c:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   11923:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   11928:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   1192f:	00 
   11930:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   11937:	00 
   11938:	74 20                	je     1195a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36a>
   1193a:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11940:	f2 0f 10 0d c8 6f 00 	movsd  xmm1,QWORD PTR [rip+0x6fc8]        # 18910 <std::__unicode::__v15_1_0::__width_edges+0x490>
   11947:	00 
   11948:	66 0f 54 05 80 6f 00 	andpd  xmm0,XMMWORD PTR [rip+0x6f80]        # 188d0 <std::__unicode::__v15_1_0::__width_edges+0x450>
   1194f:	00 
   11950:	66 0f 2e c8          	ucomisd xmm1,xmm0
   11954:	0f 83 ad fe ff ff    	jae    11807 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x217>
      { _M_dataplus._M_p = __p; }
   1195a:	49 89 de             	mov    r14,rbx
	  if (_M_width_kind == _WP_value)
   1195d:	41 0f b7 04 24       	movzx  eax,WORD PTR [r12]
   11962:	66 25 80 01          	and    ax,0x180
   11966:	66 3d 80 00          	cmp    ax,0x80
   1196a:	0f 84 90 00 00 00    	je     11a00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x410>
	  else if (_M_width_kind == _WP_from_arg)
   11970:	66 3d 00 01          	cmp    ax,0x100
   11974:	0f 84 46 04 00 00    	je     11dc0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7d0>
   1197a:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1197f:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
	    return __format::__write(__fc.out(), __str);
   11983:	48 89 da             	mov    rdx,rbx
   11986:	4c 89 fe             	mov    rsi,r15
   11989:	e8 62 72 ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
   1198e:	48 89 c3             	mov    rbx,rax
      { return _M_dataplus._M_p; }
   11991:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
   11998:	00 
	if (_M_data() == _M_local_data())
   11999:	48 39 ef             	cmp    rdi,rbp
   1199c:	74 11                	je     119af <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3bf>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1199e:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
   119a5:	00 
   119a6:	48 8d 70 01          	lea    rsi,[rax+0x1]
   119aa:	e8 51 18 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { return _M_dataplus._M_p; }
   119af:	48 8b 7c 24 60       	mov    rdi,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
   119b4:	4c 39 ef             	cmp    rdi,r13
   119b7:	74 0e                	je     119c7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3d7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   119b9:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   119be:	48 8d 70 01          	lea    rsi,[rax+0x1]
   119c2:	e8 39 18 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
   119c7:	48 81 c4 48 01 00 00 	add    rsp,0x148
   119ce:	48 89 d8             	mov    rax,rbx
   119d1:	5b                   	pop    rbx
   119d2:	5d                   	pop    rbp
   119d3:	41 5c                	pop    r12
   119d5:	41 5d                	pop    r13
   119d7:	41 5e                	pop    r14
   119d9:	41 5f                	pop    r15
   119db:	c3                   	ret
   119dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
		*--__start = ' ';
   119e0:	c6 43 ff 20          	mov    BYTE PTR [rbx-0x1],0x20
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   119e4:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
		*--__start = ' ';
   119e9:	48 83 eb 01          	sub    rbx,0x1
   119ed:	0f 1f 00             	nop    DWORD PTR [rax]
	  bool __have_sign = true;
   119f0:	41 bb 01 00 00 00    	mov    r11d,0x1
   119f6:	e9 cf fc ff ff       	jmp    116ca <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xda>
   119fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    __width = _M_width;
   11a00:	45 0f b7 44 24 04    	movzx  r8d,WORD PTR [r12+0x4]
      iterator out() { return std::move(_M_out); }
   11a06:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   11a0b:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
	  if (__width <= __str.size())
   11a0f:	4d 39 c7             	cmp    r15,r8
   11a12:	0f 83 6b ff ff ff    	jae    11983 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x393>
	  _Align __align = _M_spec._M_align;
   11a18:	41 0f b6 14 24       	movzx  edx,BYTE PTR [r12]
	  char32_t __fill_char = _M_spec._M_fill;
   11a1d:	45 8b 4c 24 08       	mov    r9d,DWORD PTR [r12+0x8]
	  size_t __nfill = __width - __str.size();
   11a22:	4d 29 f8             	sub    r8,r15
	  if (__align == _Align_default)
   11a25:	89 d1                	mov    ecx,edx
   11a27:	83 e1 03             	and    ecx,0x3
   11a2a:	0f 85 83 00 00 00    	jne    11ab3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
   11a30:	83 e2 40             	and    edx,0x40
   11a33:	74 73                	je     11aa8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b8>
   11a35:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11a3b:	f2 0f 10 0d cd 6e 00 	movsd  xmm1,QWORD PTR [rip+0x6ecd]        # 18910 <std::__unicode::__v15_1_0::__width_edges+0x490>
   11a42:	00 
   11a43:	66 0f 54 05 85 6e 00 	andpd  xmm0,XMMWORD PTR [rip+0x6e85]        # 188d0 <std::__unicode::__v15_1_0::__width_edges+0x450>
   11a4a:	00 
   11a4b:	66 0f 2e c8          	ucomisd xmm1,xmm0
   11a4f:	72 57                	jb     11aa8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4b8>
   11a51:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
		  if (!__format::__is_xdigit(__narrow_str[0]))
   11a55:	48 8d 15 e4 45 00 00 	lea    rdx,[rip+0x45e4]        # 16040 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
	      __align = _Align_right;
   11a5c:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
   11a61:	41 b9 30 00 00 00    	mov    r9d,0x30
		  if (!__format::__is_xdigit(__narrow_str[0]))
   11a67:	80 3c 02 0f          	cmp    BYTE PTR [rdx+rax*1],0xf
   11a6b:	76 46                	jbe    11ab3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
      { return __normal_iterator(_M_current++); }
   11a6d:	48 8b 47 18          	mov    rax,QWORD PTR [rdi+0x18]
		      *__out++ = __str[0];
   11a71:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
   11a74:	48 8d 48 01          	lea    rcx,[rax+0x1]
   11a78:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
	*_M_next++ = __c;
   11a7c:	88 10                	mov    BYTE PTR [rax],dl
    { return __lhs.base() - __rhs.base(); }
   11a7e:	48 8b 47 18          	mov    rax,QWORD PTR [rdi+0x18]
   11a82:	48 2b 47 08          	sub    rax,QWORD PTR [rdi+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
   11a86:	48 3b 47 10          	cmp    rax,QWORD PTR [rdi+0x10]
   11a8a:	0f 84 2b 0a 00 00    	je     124bb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xecb>
	this->_M_str += __n;
   11a90:	48 83 c3 01          	add    rbx,0x1
	this->_M_len -= __n;
   11a94:	49 83 ef 01          	sub    r15,0x1
	      __align = _Align_right;
   11a98:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
   11a9d:	41 b9 30 00 00 00    	mov    r9d,0x30
      }
   11aa3:	eb 0e                	jmp    11ab3 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
   11aa5:	0f 1f 00             	nop    DWORD PTR [rax]
	      __align = _Align_right;
   11aa8:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
   11aad:	41 b9 20 00 00 00    	mov    r9d,0x20
	  return __format::__write_padded(std::move(__out), __str,
   11ab3:	48 89 da             	mov    rdx,rbx
   11ab6:	4c 89 fe             	mov    rsi,r15
   11ab9:	e8 62 72 ff ff       	call   8d20 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
   11abe:	48 89 c3             	mov    rbx,rax
					  __align, __nfill, __fill_char);
   11ac1:	e9 cb fe ff ff       	jmp    11991 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3a1>
   11ac6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   11acd:	00 00 00 
	  if (_M_prec_kind == _WP_value)
   11ad0:	3c 02                	cmp    al,0x2
   11ad2:	0f 84 28 04 00 00    	je     11f00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x910>
	  size_t __prec = -1;
   11ad8:	48 c7 44 24 10 ff ff 	mov    QWORD PTR [rsp+0x10],0xffffffffffffffff
   11adf:	ff ff 
	  else if (_M_prec_kind == _WP_from_arg)
   11ae1:	3c 04                	cmp    al,0x4
   11ae3:	0f 84 87 02 00 00    	je     11d70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x780>
	  switch (_M_spec._M_type)
   11ae9:	89 d8                	mov    eax,ebx
   11aeb:	48 8d 15 ca 3f 00 00 	lea    rdx,[rip+0x3fca]        # 15abc <CSWTCH.1110+0x9dc>
   11af2:	c0 e8 03             	shr    al,0x3
   11af5:	83 e0 0f             	and    eax,0xf
   11af8:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   11afc:	48 01 d0             	add    rax,rdx
   11aff:	ff e0                	jmp    rax
   11b01:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   11b08:	00 00 00 00 
   11b0c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      for (; __pos < this->_M_len; ++__pos)
   11b10:	48 83 c1 01          	add    rcx,0x1
   11b14:	4c 39 f9             	cmp    rcx,r15
   11b17:	0f 83 01 05 00 00    	jae    1201e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa2e>
	if (!traits_type::eq(this->_M_str[__pos], __c))
   11b1d:	80 3c 0b 30          	cmp    BYTE PTR [rbx+rcx*1],0x30
   11b21:	74 ed                	je     11b10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
   11b23:	e9 fd 04 00 00       	jmp    12025 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa35>
   11b28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   11b2f:	00 
		  __p = __s.find(__expc); // Find the exponent, if present.
   11b30:	0f be 54 24 37       	movsx  edx,BYTE PTR [rsp+0x37]
   11b35:	31 c9                	xor    ecx,ecx
   11b37:	48 89 de             	mov    rsi,rbx
   11b3a:	4c 89 ff             	mov    rdi,r15
   11b3d:	44 88 5c 24 38       	mov    BYTE PTR [rsp+0x38],r11b
   11b42:	e8 29 22 ff ff       	call   3d70 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>
		    __p = __s.size();
   11b47:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
		  __p = __s.find(__expc); // Find the exponent, if present.
   11b4b:	49 89 c2             	mov    r10,rax
		    __p = __s.size();
   11b4e:	4d 0f 44 d7          	cmove  r10,r15
	      if (__trailing_zeros && __prec != 0)
   11b52:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   11b57:	0f 84 7b 02 00 00    	je     11dd8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7e8>
   11b5d:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   11b63:	0f 84 44 08 00 00    	je     123ad <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdbd>
		  __sigfigs = __d - __have_sign;
   11b69:	0f b6 54 24 38       	movzx  edx,BYTE PTR [rsp+0x38]
   11b6e:	4c 89 d0             	mov    rax,r10
   11b71:	4d 89 d1             	mov    r9,r10
   11b74:	41 b8 01 00 00 00    	mov    r8d,0x1
   11b7a:	48 29 d0             	sub    rax,rdx
		  __z = __prec - __sigfigs;
   11b7d:	48 29 44 24 10       	sub    QWORD PTR [rsp+0x10],rax
   11b82:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   11b87:	49 01 c8             	add    r8,rcx
   11b8a:	e9 41 fc ff ff       	jmp    117d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   11b8f:	90                   	nop
	      if (_M_spec._M_type != _Pres_A)
   11b90:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   11b93:	ba 65 00 00 00       	mov    edx,0x65
   11b98:	b8 70 00 00 00       	mov    eax,0x70
   11b9d:	80 fb 10             	cmp    bl,0x10
   11ba0:	0f 44 c2             	cmove  eax,edx
   11ba3:	45 31 f6             	xor    r14d,r14d
   11ba6:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
	      return __format::to_chars(__b, __e, __v, __fmt);
   11baa:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11bb0:	48 8d 9c 24 c1 00 00 	lea    rbx,[rsp+0xc1]
   11bb7:	00 
   11bb8:	ba 04 00 00 00       	mov    edx,0x4
   11bbd:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   11bc4:	00 
   11bc5:	48 89 df             	mov    rdi,rbx
   11bc8:	e8 a3 15 ff ff       	call   3170 <std::to_chars(char*, char*, double, std::chars_format)@plt>
   11bcd:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   11bd0:	83 fa 4b             	cmp    edx,0x4b
   11bd3:	0f 84 f7 03 00 00    	je     11fd0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9e0>
	  char* __end = __buf + sizeof(__buf);
   11bd9:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   11be0:	00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   11be1:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   11be6:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11bed:	00 00 
	  char* __end = __buf + sizeof(__buf);
   11bef:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	  if (__upper)
   11bf4:	45 84 f6             	test   r14b,r14b
   11bf7:	0f 84 9d fa ff ff    	je     1169a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   11bfd:	48 39 eb             	cmp    rbx,rbp
   11c00:	0f 84 94 fa ff ff    	je     1169a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
   11c06:	49 89 de             	mov    r14,rbx
   11c09:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		*__p = std::toupper(*__p);
   11c10:	41 0f be 3e          	movsx  edi,BYTE PTR [r14]
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   11c14:	49 83 c6 01          	add    r14,0x1
		*__p = std::toupper(*__p);
   11c18:	e8 33 17 ff ff       	call   3350 <toupper@plt>
   11c1d:	41 88 46 ff          	mov    BYTE PTR [r14-0x1],al
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   11c21:	49 39 ee             	cmp    r14,rbp
   11c24:	75 ea                	jne    11c10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x620>
   11c26:	e9 6f fa ff ff       	jmp    1169a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
   11c2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
   11c30:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   11c33:	ba 50 00 00 00       	mov    edx,0x50
   11c38:	b8 70 00 00 00       	mov    eax,0x70
   11c3d:	41 be 01 00 00 00    	mov    r14d,0x1
   11c43:	80 fb 10             	cmp    bl,0x10
   11c46:	0f 44 c2             	cmove  eax,edx
   11c49:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
   11c4d:	e9 58 ff ff ff       	jmp    11baa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5ba>
   11c52:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   11c58:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11c5f:	00 00 
   11c61:	b9 06 00 00 00       	mov    ecx,0x6
   11c66:	45 31 f6             	xor    r14d,r14d
	  char __expc = 'e';
   11c69:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      __fmt = chars_format::fixed;
   11c6e:	bb 02 00 00 00       	mov    ebx,0x2
	  bool __trailing_zeros = false;
   11c73:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11c78:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11c7e:	4c 8d bc 24 c1 00 00 	lea    r15,[rsp+0xc1]
   11c85:	00 
   11c86:	89 da                	mov    edx,ebx
   11c88:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   11c8f:	00 
   11c90:	4c 89 ff             	mov    rdi,r15
   11c93:	e8 e8 14 ff ff       	call   3180 <std::to_chars(char*, char*, double, std::chars_format, int)@plt>
   11c98:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   11c9b:	83 fa 4b             	cmp    edx,0x4b
   11c9e:	0f 84 6c 02 00 00    	je     11f10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x920>
	  char* __end = __buf + sizeof(__buf);
   11ca4:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   11cab:	00 
	  char* __start = __buf + 1; // reserve space for sign
   11cac:	4c 89 fb             	mov    rbx,r15
	  char* __end = __buf + sizeof(__buf);
   11caf:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   11cb4:	e9 3b ff ff ff       	jmp    11bf4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x604>
   11cb9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
   11cc0:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11cc7:	00 00 
   11cc9:	b9 06 00 00 00       	mov    ecx,0x6
	      __upper = true;
   11cce:	41 be 01 00 00 00    	mov    r14d,0x1
   11cd4:	eb 93                	jmp    11c69 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x679>
   11cd6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   11cdd:	00 00 00 
	  switch (_M_spec._M_type)
   11ce0:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   11ce5:	b9 06 00 00 00       	mov    ecx,0x6
   11cea:	45 31 f6             	xor    r14d,r14d
   11ced:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11cf4:	00 00 
	      __trailing_zeros = true;
   11cf6:	c6 44 24 20 01       	mov    BYTE PTR [rsp+0x20],0x1
	      __fmt = chars_format::general;
   11cfb:	bb 03 00 00 00       	mov    ebx,0x3
	      break;
   11d00:	e9 73 ff ff ff       	jmp    11c78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x688>
   11d05:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   11d08:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11d0f:	00 00 
   11d11:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   11d16:	c6 44 24 37 45       	mov    BYTE PTR [rsp+0x37],0x45
	      __upper = true;
   11d1b:	41 be 01 00 00 00    	mov    r14d,0x1
   11d21:	eb d3                	jmp    11cf6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x706>
   11d23:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   11d28:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   11d2d:	b9 06 00 00 00       	mov    ecx,0x6
   11d32:	45 31 f6             	xor    r14d,r14d
   11d35:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11d3c:	00 00 
	  bool __trailing_zeros = false;
   11d3e:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	      __fmt = chars_format::scientific;
   11d43:	bb 01 00 00 00       	mov    ebx,0x1
	      break;
   11d48:	e9 2b ff ff ff       	jmp    11c78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x688>
   11d4d:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   11d50:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11d57:	00 00 
   11d59:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   11d5e:	c6 44 24 37 45       	mov    BYTE PTR [rsp+0x37],0x45
	      __upper = true;
   11d63:	41 be 01 00 00 00    	mov    r14d,0x1
   11d69:	eb d3                	jmp    11d3e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x74e>
   11d6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   11d70:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
   11d74:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
   11d79:	e8 42 20 ff ff       	call   3dc0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   11d7e:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   11d83:	e9 61 fd ff ff       	jmp    11ae9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f9>
	  char __expc = 'e';
   11d88:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   11d8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
		__fmt = chars_format::general;
   11d91:	bb 03 00 00 00       	mov    ebx,0x3
	  bool __upper = false;
   11d96:	45 31 f6             	xor    r14d,r14d
	  bool __trailing_zeros = false;
   11d99:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   11d9e:	e9 d5 fe ff ff       	jmp    11c78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x688>
   11da3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		*--__start = '+';
   11da8:	c6 43 ff 2b          	mov    BYTE PTR [rbx-0x1],0x2b
	  bool __have_sign = true;
   11dac:	41 bb 01 00 00 00    	mov    r11d,0x1
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   11db2:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
		*--__start = '+';
   11db7:	48 83 eb 01          	sub    rbx,0x1
   11dbb:	e9 0a f9 ff ff       	jmp    116ca <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xda>
   11dc0:	41 0f b7 7c 24 04    	movzx  edi,WORD PTR [r12+0x4]
   11dc6:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
   11dcb:	e8 d0 20 ff ff       	call   3ea0 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   11dd0:	49 89 c0             	mov    r8,rax
   11dd3:	e9 2e fc ff ff       	jmp    11a06 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x416>
	      size_t __z = 0;   // Number of trailing zeros to add.
   11dd8:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   11ddf:	00 00 
	      if (__trailing_zeros && __prec != 0)
   11de1:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   11de4:	41 b8 01 00 00 00    	mov    r8d,0x1
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
   11dea:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
   11df0:	75 11                	jne    11e03 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x813>
   11df2:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
   11df7:	48 29 e8             	sub    rax,rbp
   11dfa:	4c 39 c0             	cmp    rax,r8
   11dfd:	0f 83 3c 05 00 00    	jae    1233f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd4f>
		      __dynbuf.reserve(__s.size() + __extras);
   11e03:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
   11e08:	4b 8d 34 07          	lea    rsi,[r15+r8*1]
   11e0c:	4c 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],r9
   11e11:	48 89 c7             	mov    rdi,rax
   11e14:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
   11e19:	4c 89 44 24 40       	mov    QWORD PTR [rsp+0x40],r8
   11e1e:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   11e23:	e8 08 3e ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
		      if (__dynbuf.empty())
   11e28:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
   11e2e:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
   11e33:	4c 8b 4c 24 38       	mov    r9,QWORD PTR [rsp+0x38]
   11e38:	0f 85 32 02 00 00    	jne    12070 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa80>
	return _M_replace(size_type(0), this->size(), __s, __n);
   11e3e:	4d 39 cf             	cmp    r15,r9
   11e41:	4d 89 c8             	mov    r8,r9
   11e44:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   11e49:	48 89 d9             	mov    rcx,rbx
   11e4c:	4d 0f 46 c7          	cmovbe r8,r15
   11e50:	31 d2                	xor    edx,edx
   11e52:	31 f6                	xor    esi,esi
   11e54:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   11e59:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   11e5e:	e8 fd 27 ff ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  if (__d == __p)
   11e63:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
   11e68:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   11e6d:	4d 39 d1             	cmp    r9,r10
   11e70:	0f 84 a0 05 00 00    	je     12416 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe26>
			  if (__z)
   11e76:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   11e7c:	0f 85 69 05 00 00    	jne    123eb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdfb>
    if (__pos > __size)
   11e82:	4d 39 cf             	cmp    r15,r9
   11e85:	0f 82 9f 06 00 00    	jb     1252a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf3a>
      { return _M_string_length; }
   11e8b:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
   11e90:	4d 29 cf             	sub    r15,r9
	return basic_string_view{_M_str + __pos, __rlen};
   11e93:	4a 8d 0c 0b          	lea    rcx,[rbx+r9*1]
	if (this->max_size() - (this->size() - __n1) < __n2)
   11e97:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
   11e9e:	ff ff 7f 
   11ea1:	48 29 f0             	sub    rax,rsi
   11ea4:	4c 39 f8             	cmp    rax,r15
   11ea7:	0f 82 71 06 00 00    	jb     1251e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf2e>
      { return _M_dataplus._M_p; }
   11ead:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      const size_type __len = __n + this->size();
   11eb2:	4a 8d 1c 3e          	lea    rbx,[rsi+r15*1]
	if (_M_data() == _M_local_data())
   11eb6:	4c 39 e8             	cmp    rax,r13
   11eb9:	0f 84 70 05 00 00    	je     1242f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe3f>
	return _M_is_local() ? size_type(_S_local_capacity)
   11ebf:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
      if (__len <= this->capacity())
   11ec4:	48 39 da             	cmp    rdx,rbx
   11ec7:	0f 82 05 05 00 00    	jb     123d2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xde2>
	  if (__n)
   11ecd:	4d 85 ff             	test   r15,r15
   11ed0:	74 1e                	je     11ef0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
   11ed2:	48 8d 3c 30          	lea    rdi,[rax+rsi*1]
	if (__n == 1)
   11ed6:	49 83 ff 01          	cmp    r15,0x1
   11eda:	0f 84 59 05 00 00    	je     12439 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe49>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   11ee0:	4c 89 fa             	mov    rdx,r15
   11ee3:	48 89 ce             	mov    rsi,rcx
   11ee6:	e8 c5 12 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
   11eeb:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      { _M_string_length = __length; }
   11ef0:	48 89 5c 24 68       	mov    QWORD PTR [rsp+0x68],rbx
	__c1 = __c2;
   11ef5:	c6 04 18 00          	mov    BYTE PTR [rax+rbx*1],0x0
   11ef9:	e9 b2 01 00 00       	jmp    120b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xac0>
   11efe:	66 90                	xchg   ax,ax
	    __prec = _M_prec;
   11f00:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   11f04:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   11f09:	e9 db fb ff ff       	jmp    11ae9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f9>
   11f0e:	66 90                	xchg   ax,ax
	      size_t __guess = 8 + __prec;
   11f10:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   11f15:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
   11f1a:	48 8d 70 08          	lea    rsi,[rax+0x8]
	      if (__fmt == chars_format::fixed) // +ddd.prec
   11f1e:	83 fb 02             	cmp    ebx,0x2
   11f21:	0f 84 8a 02 00 00    	je     121b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbc1>
	      if (__guess <= sizeof(__buf)) [[unlikely]]
   11f27:	48 81 fe 80 00 00 00 	cmp    rsi,0x80
   11f2e:	0f 86 b4 00 00 00    	jbe    11fe8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9f8>
	      __dynbuf.reserve(__guess);
   11f34:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
   11f39:	48 89 c7             	mov    rdi,rax
   11f3c:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   11f41:	e8 ea 3c ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   11f46:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
   11f4b:	4c 39 ea             	cmp    rdx,r13
   11f4e:	0f 84 67 04 00 00    	je     123bb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdcb>
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
   11f54:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   11f59:	48 8d 34 00          	lea    rsi,[rax+rax*1]
		    __res = __to_chars(__p + 1, __p + __n - 1);
   11f5d:	48 8d 6e ff          	lea    rbp,[rsi-0x1]
      reserve(__n);
   11f61:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   11f66:	e8 c5 3c ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   11f6b:	4c 8b 7c 24 60       	mov    r15,QWORD PTR [rsp+0x60]
	    if (__use_prec)
   11f70:	80 7c 24 38 00       	cmp    BYTE PTR [rsp+0x38],0x0
		    __res = __to_chars(__p + 1, __p + __n - 1);
   11f75:	49 8d 34 2f          	lea    rsi,[r15+rbp*1]
   11f79:	49 8d 7f 01          	lea    rdi,[r15+0x1]
	    if (__use_prec)
   11f7d:	0f 85 0d 03 00 00    	jne    12290 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xca0>
	    else if (__fmt != chars_format{})
   11f83:	85 db                	test   ebx,ebx
   11f85:	0f 85 65 01 00 00    	jne    120f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb00>
	      return __format::to_chars(__b, __e, __v);
   11f8b:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   11f91:	e8 ea 10 ff ff       	call   3080 <std::to_chars(char*, char*, double)@plt>
   11f96:	48 89 c5             	mov    rbp,rax
   11f99:	48 89 d0             	mov    rax,rdx
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
   11f9c:	85 c0                	test   eax,eax
   11f9e:	0f 85 74 02 00 00    	jne    12218 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc28>
   11fa4:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
   11fa9:	48 89 e8             	mov    rax,rbp
   11fac:	4c 29 f8             	sub    rax,r15
      { _M_string_length = __length; }
   11faf:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
   11fb4:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
   11fb8:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
		  __start = __dynbuf.data() + 1; // reserve space for sign
   11fbd:	48 8d 58 01          	lea    rbx,[rax+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   11fc1:	48 03 44 24 68       	add    rax,QWORD PTR [rsp+0x68]
   11fc6:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   11fcb:	e9 24 fc ff ff       	jmp    11bf4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x604>
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   11fd0:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   11fd5:	bb 04 00 00 00       	mov    ebx,0x4
   11fda:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   11fdf:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   11fe6:	00 00 
		__guess = sizeof(__buf) * 2;
   11fe8:	be 00 01 00 00       	mov    esi,0x100
   11fed:	e9 42 ff ff ff       	jmp    11f34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x944>
   11ff2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   11ff8:	45 31 c0             	xor    r8d,r8d
   11ffb:	49 39 c7             	cmp    r15,rax
   11ffe:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
   12002:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   12007:	0f 84 93 01 00 00    	je     121a0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbb0>
		      if (__s[__have_sign] != '0')
   1200d:	41 0f b6 d3          	movzx  edx,r11b
		    __p = __s.size();
   12011:	4d 89 f9             	mov    r9,r15
		      if (__s[__have_sign] != '0')
   12014:	80 3c 13 30          	cmp    BYTE PTR [rbx+rdx*1],0x30
   12018:	0f 85 93 f7 ff ff    	jne    117b1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c1>
      return npos;
   1201e:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
   12025:	4c 89 c8             	mov    rax,r9
   12028:	48 29 c8             	sub    rax,rcx
   1202b:	e9 8b f7 ff ff       	jmp    117bb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1cb>
	  std::construct_at(&_M_loc);
   12030:	48 8d 70 18          	lea    rsi,[rax+0x18]
   12034:	49 89 c6             	mov    r14,rax
   12037:	48 89 f7             	mov    rdi,rsi
   1203a:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
   1203f:	e8 2c 13 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
   12044:	41 c6 46 20 01       	mov    BYTE PTR [r14+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
   12049:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
   1204e:	4c 8d 74 24 58       	lea    r14,[rsp+0x58]
   12053:	e9 cc f7 ff ff       	jmp    11824 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x234>
   12058:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1205f:	00 
	      size_t __z = 0;   // Number of trailing zeros to add.
   12060:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   12067:	00 00 
   12069:	e9 62 f7 ff ff       	jmp    117d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
   1206e:	66 90                	xchg   ax,ax
   12070:	4c 8b 44 24 40       	mov    r8,QWORD PTR [rsp+0x40]
			  __dynbuf.insert(__p, __extras, '0');
   12075:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   1207a:	4c 89 ce             	mov    rsi,r9
   1207d:	b9 30 00 00 00       	mov    ecx,0x30
   12082:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
   12087:	4c 89 c2             	mov    rdx,r8
   1208a:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
   1208f:	e8 dc 26 ff ff       	call   4770 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>
			  if (__d == __p)
   12094:	4c 8b 4c 24 10       	mov    r9,QWORD PTR [rsp+0x10]
   12099:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
   1209e:	4d 39 d1             	cmp    r9,r10
   120a1:	75 0d                	jne    120b0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xac0>
			    __dynbuf[__p] = '.';
   120a3:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   120a8:	42 c6 04 08 2e       	mov    BYTE PTR [rax+r9*1],0x2e
   120ad:	0f 1f 00             	nop    DWORD PTR [rax]
      { return _M_string_length; }
   120b0:	4c 8b 7c 24 68       	mov    r15,QWORD PTR [rsp+0x68]
      { return _M_dataplus._M_p; }
   120b5:	48 8b 5c 24 60       	mov    rbx,QWORD PTR [rsp+0x60]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   120ba:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   120bf:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   120c6:	00 
   120c7:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   120ce:	00 
   120cf:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   120d6:	00 
      { _M_string_length = __length; }
   120d7:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   120de:	00 00 00 00 00 
   120e3:	a8 20                	test   al,0x20
   120e5:	0f 85 1c f7 ff ff    	jne    11807 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x217>
   120eb:	e9 6a f8 ff ff       	jmp    1195a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x36a>
	      return __format::to_chars(__b, __e, __v, __fmt);
   120f0:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   120f6:	89 da                	mov    edx,ebx
   120f8:	e8 73 10 ff ff       	call   3170 <std::to_chars(char*, char*, double, std::chars_format)@plt>
   120fd:	48 89 c5             	mov    rbp,rax
   12100:	48 89 d0             	mov    rax,rdx
   12103:	e9 94 fe ff ff       	jmp    11f9c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9ac>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12108:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   1210c:	45 31 f6             	xor    r14d,r14d
   1210f:	e9 55 fb ff ff       	jmp    11c69 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x679>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12114:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   12118:	e9 b1 fb ff ff       	jmp    11cce <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6de>
   1211d:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   12121:	e9 38 fc ff ff       	jmp    11d5e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x76e>
   12126:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   1212a:	e9 e7 fb ff ff       	jmp    11d16 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x726>
	  char __expc = 'e';
   1212f:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12134:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   12138:	45 31 f6             	xor    r14d,r14d
   1213b:	e9 b6 fb ff ff       	jmp    11cf6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x706>
	      if (_M_spec._M_type != _Pres_A)
   12140:	83 e3 78             	and    ebx,0x78
   12143:	ba 70 00 00 00       	mov    edx,0x70
   12148:	b8 65 00 00 00       	mov    eax,0x65
   1214d:	80 fb 10             	cmp    bl,0x10
   12150:	0f 45 c2             	cmovne eax,edx
   12153:	45 31 f6             	xor    r14d,r14d
   12156:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   1215a:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   1215f:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	      __fmt = chars_format::hex;
   12163:	bb 04 00 00 00       	mov    ebx,0x4
   12168:	e9 0b fb ff ff       	jmp    11c78 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x688>
   1216d:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (_M_spec._M_type != _Pres_A)
   12170:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   12173:	ba 50 00 00 00       	mov    edx,0x50
   12178:	b8 70 00 00 00       	mov    eax,0x70
   1217d:	41 be 01 00 00 00    	mov    r14d,0x1
   12183:	80 fb 10             	cmp    bl,0x10
   12186:	0f 44 c2             	cmove  eax,edx
   12189:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
   1218d:	eb cb                	jmp    1215a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb6a>
	  char __expc = 'e';
   1218f:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12194:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   12198:	45 31 f6             	xor    r14d,r14d
   1219b:	e9 9e fb ff ff       	jmp    11d3e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x74e>
	      size_t __z = 0;   // Number of trailing zeros to add.
   121a0:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   121a7:	00 00 
		    __p = __s.size();
   121a9:	4d 89 f9             	mov    r9,r15
   121ac:	e9 1f f6 ff ff       	jmp    117d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
			__builtin_frexp(__v, &__exp);
   121b1:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   121b7:	48 89 74 24 28       	mov    QWORD PTR [rsp+0x28],rsi
   121bc:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
   121c3:	00 
		      int __exp{};
   121c4:	c7 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],0x0
   121cb:	00 00 00 00 
			__builtin_frexp(__v, &__exp);
   121cf:	e8 8c 11 ff ff       	call   3360 <frexp@plt>
		      if (__exp > 0)
   121d4:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [rsp+0xa0]
   121db:	48 8b 74 24 28       	mov    rsi,QWORD PTR [rsp+0x28]
   121e0:	85 c0                	test   eax,eax
   121e2:	7e 23                	jle    12207 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc17>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
   121e4:	69 d0 a4 0f 00 00    	imul   edx,eax,0xfa4
   121ea:	48 89 d0             	mov    rax,rdx
   121ed:	48 69 d2 f9 65 56 3b 	imul   rdx,rdx,0x3b5665f9
   121f4:	48 c1 ea 20          	shr    rdx,0x20
   121f8:	29 d0                	sub    eax,edx
   121fa:	d1 e8                	shr    eax,1
   121fc:	01 d0                	add    eax,edx
   121fe:	c1 e8 0d             	shr    eax,0xd
   12201:	83 c0 01             	add    eax,0x1
   12204:	48 01 c6             	add    rsi,rax
   12207:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
   1220c:	e9 16 fd ff ff       	jmp    11f27 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x937>
   12211:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
   12218:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
   1221f:	00 00 
      { return _M_dataplus._M_p; }
   12221:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
   12226:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   12229:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   1222e:	83 f8 4b             	cmp    eax,0x4b
   12231:	0f 84 14 fd ff ff    	je     11f4b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x95b>
		  __start = __dynbuf.data() + 1; // reserve space for sign
   12237:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   1223b:	48 03 54 24 68       	add    rdx,QWORD PTR [rsp+0x68]
   12240:	48 89 54 24 28       	mov    QWORD PTR [rsp+0x28],rdx
   12245:	e9 aa f9 ff ff       	jmp    11bf4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x604>
   1224a:	48 8b 94 24 a0 00 00 	mov    rdx,QWORD PTR [rsp+0xa0]
   12251:	00 
	if (_M_data() == _M_local_data())
   12252:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   12259:	00 
   1225a:	48 39 f2             	cmp    rdx,rsi
   1225d:	74 6a                	je     122c9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcd9>
      { return _M_string_length; }
   1225f:	f3 0f 6f 84 24 a8 00 	movdqu xmm0,XMMWORD PTR [rsp+0xa8]
   12266:	00 00 
      { _M_dataplus._M_p = __p; }
   12268:	48 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rdx
   1226f:	00 
      { _M_string_length = __length; }
   12270:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   12277:	00 
      { _M_dataplus._M_p = __p; }
   12278:	48 89 b4 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rsi
   1227f:	00 
   12280:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   12287:	00 
   12288:	48 89 f7             	mov    rdi,rsi
   1228b:	e9 2d f6 ff ff       	jmp    118bd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2cd>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12290:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   12294:	f2 0f 10 44 24 08    	movsd  xmm0,QWORD PTR [rsp+0x8]
   1229a:	89 da                	mov    edx,ebx
   1229c:	e8 df 0e ff ff       	call   3180 <std::to_chars(char*, char*, double, std::chars_format, int)@plt>
   122a1:	48 89 c5             	mov    rbp,rax
   122a4:	48 89 d0             	mov    rax,rdx
   122a7:	e9 f0 fc ff ff       	jmp    11f9c <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9ac>
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   122ac:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  chars_format __fmt{};
   122b1:	31 db                	xor    ebx,ebx
	  bool __upper = false;
   122b3:	45 31 f6             	xor    r14d,r14d
		__guess = sizeof(__buf) * 2;
   122b6:	be 00 01 00 00       	mov    esi,0x100
	  size_t __prec = 6;
   122bb:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   122c2:	00 00 
   122c4:	e9 6b fc ff ff       	jmp    11f34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x944>
	    if (_M_string_length > _S_local_capacity)
   122c9:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   122d0:	00 
   122d1:	49 89 d0             	mov    r8,rdx
		if (__str.size())
   122d4:	48 85 d2             	test   rdx,rdx
   122d7:	74 4c                	je     12325 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd35>
	if (__n == 1)
   122d9:	48 83 fa 01          	cmp    rdx,0x1
   122dd:	0f 84 65 01 00 00    	je     12448 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe58>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   122e3:	89 d1                	mov    ecx,edx
   122e5:	83 fa 08             	cmp    edx,0x8
   122e8:	0f 83 79 01 00 00    	jae    12467 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe77>
   122ee:	f6 c2 04             	test   dl,0x4
   122f1:	0f 85 e2 01 00 00    	jne    124d9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xee9>
   122f7:	85 d2                	test   edx,edx
   122f9:	74 24                	je     1231f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd2f>
   122fb:	0f b6 bc 24 b0 00 00 	movzx  edi,BYTE PTR [rsp+0xb0]
   12302:	00 
   12303:	83 e2 02             	and    edx,0x2
   12306:	40 88 38             	mov    BYTE PTR [rax],dil
   12309:	0f 85 f0 01 00 00    	jne    124ff <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf0f>
   1230f:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   12316:	00 
   12317:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   1231e:	00 
      { return _M_string_length; }
   1231f:	49 89 d0             	mov    r8,rdx
      { return _M_dataplus._M_p; }
   12322:	48 89 c7             	mov    rdi,rax
      { _M_string_length = __length; }
   12325:	4c 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],r8
   1232c:	00 
	__c1 = __c2;
   1232d:	42 c6 04 07 00       	mov    BYTE PTR [rdi+r8*1],0x0
      { return _M_dataplus._M_p; }
   12332:	48 8b bc 24 a0 00 00 	mov    rdi,QWORD PTR [rsp+0xa0]
   12339:	00 
      }
   1233a:	e9 7e f5 ff ff       	jmp    118bd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2cd>
		      __builtin_memmove(__start + __p + __extras,
   1233f:	4b 8d 3c 08          	lea    rdi,[r8+r9*1]
					__start + __p,
   12343:	4a 8d 2c 0b          	lea    rbp,[rbx+r9*1]
		      __builtin_memmove(__start + __p + __extras,
   12347:	4c 89 fa             	mov    rdx,r15
   1234a:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   1234f:	4c 29 ca             	sub    rdx,r9
   12352:	48 01 df             	add    rdi,rbx
   12355:	48 89 ee             	mov    rsi,rbp
   12358:	4c 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],r9
   1235d:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
   12362:	e8 b9 0f ff ff       	call   3320 <memmove@plt>
		      if (__d == __p)
   12367:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
   1236c:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   12371:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   12376:	4d 39 d1             	cmp    r9,r10
   12379:	75 09                	jne    12384 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd94>
			__start[__p++] = '.';
   1237b:	c6 45 00 2e          	mov    BYTE PTR [rbp+0x0],0x2e
		      __builtin_memset(__start + __p, '0', __z);
   1237f:	4a 8d 6c 0b 01       	lea    rbp,[rbx+r9*1+0x1]
   12384:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
   12389:	be 30 00 00 00       	mov    esi,0x30
   1238e:	48 89 ef             	mov    rdi,rbp
   12391:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
   12396:	e8 a5 0d ff ff       	call   3140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
   1239b:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   123a0:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
		      __narrow_str = {__s.data(), __s.size() + __extras};
   123a5:	4d 01 c7             	add    r15,r8
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   123a8:	e9 12 fd ff ff       	jmp    120bf <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xacf>
	      if (__trailing_zeros && __prec != 0)
   123ad:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   123b0:	41 b8 01 00 00 00    	mov    r8d,0x1
   123b6:	e9 2f fa ff ff       	jmp    11dea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7fa>
   123bb:	bd 1d 00 00 00       	mov    ebp,0x1d
   123c0:	be 1e 00 00 00       	mov    esi,0x1e
   123c5:	e9 97 fb ff ff       	jmp    11f61 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x971>
		    __p = __s.size();
   123ca:	4d 89 f9             	mov    r9,r15
   123cd:	e9 bc f3 ff ff       	jmp    1178e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x19e>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
   123d2:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   123d7:	4d 89 f8             	mov    r8,r15
   123da:	31 d2                	xor    edx,edx
   123dc:	e8 8f 54 ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
   123e1:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   123e6:	e9 05 fb ff ff       	jmp    11ef0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   123eb:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   123f0:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
   123f5:	41 b8 30 00 00 00    	mov    r8d,0x30
   123fb:	31 d2                	xor    edx,edx
   123fd:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12402:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   12407:	e8 64 21 ff ff       	call   4570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>
   1240c:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
   12411:	e9 6c fa ff ff       	jmp    11e82 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x892>
	this->push_back(__c);
   12416:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   1241b:	be 2e 00 00 00       	mov    esi,0x2e
   12420:	e8 9b 5d ff ff       	call   81c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
   12425:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
	return *this;
   1242a:	e9 47 fa ff ff       	jmp    11e76 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x886>
	return _M_is_local() ? size_type(_S_local_capacity)
   1242f:	ba 0f 00 00 00       	mov    edx,0xf
   12434:	e9 8b fa ff ff       	jmp    11ec4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8d4>
   12439:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   1243c:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
   1243e:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      }
   12443:	e9 a8 fa ff ff       	jmp    11ef0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
	__c1 = __c2;
   12448:	0f b6 94 24 b0 00 00 	movzx  edx,BYTE PTR [rsp+0xb0]
   1244f:	00 
   12450:	88 10                	mov    BYTE PTR [rax],dl
      { return _M_string_length; }
   12452:	4c 8b 84 24 a8 00 00 	mov    r8,QWORD PTR [rsp+0xa8]
   12459:	00 
      { return _M_dataplus._M_p; }
   1245a:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
   12461:	00 
      }
   12462:	e9 be fe ff ff       	jmp    12325 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd35>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   12467:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
   1246e:	00 
   1246f:	49 89 f0             	mov    r8,rsi
   12472:	48 89 08             	mov    QWORD PTR [rax],rcx
   12475:	89 d1                	mov    ecx,edx
   12477:	48 8b 7c 0e f8       	mov    rdi,QWORD PTR [rsi+rcx*1-0x8]
   1247c:	48 89 7c 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rdi
   12481:	48 8d 78 08          	lea    rdi,[rax+0x8]
   12485:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
   12489:	48 29 f8             	sub    rax,rdi
   1248c:	48 89 c1             	mov    rcx,rax
   1248f:	49 29 c0             	sub    r8,rax
   12492:	01 d1                	add    ecx,edx
   12494:	83 e1 f8             	and    ecx,0xfffffff8
   12497:	83 f9 08             	cmp    ecx,0x8
   1249a:	0f 82 6f fe ff ff    	jb     1230f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1f>
   124a0:	83 e1 f8             	and    ecx,0xfffffff8
   124a3:	31 c0                	xor    eax,eax
   124a5:	89 c2                	mov    edx,eax
   124a7:	83 c0 08             	add    eax,0x8
   124aa:	4d 8b 0c 10          	mov    r9,QWORD PTR [r8+rdx*1]
   124ae:	4c 89 0c 17          	mov    QWORD PTR [rdi+rdx*1],r9
   124b2:	39 c8                	cmp    eax,ecx
   124b4:	72 ef                	jb     124a5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeb5>
   124b6:	e9 54 fe ff ff       	jmp    1230f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd1f>
	  _M_overflow();
   124bb:	48 8b 07             	mov    rax,QWORD PTR [rdi]
   124be:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
   124c3:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
   124c8:	ff 10                	call   QWORD PTR [rax]
   124ca:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
   124cf:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
      }
   124d4:	e9 b7 f5 ff ff       	jmp    11a90 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
   124d9:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [rsp+0xb0]
   124e0:	89 10                	mov    DWORD PTR [rax],edx
   124e2:	8b 54 0e fc          	mov    edx,DWORD PTR [rsi+rcx*1-0x4]
   124e6:	89 54 08 fc          	mov    DWORD PTR [rax+rcx*1-0x4],edx
   124ea:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   124f1:	00 
   124f2:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   124f9:	00 
   124fa:	e9 20 fe ff ff       	jmp    1231f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd2f>
   124ff:	0f b7 54 0e fe       	movzx  edx,WORD PTR [rsi+rcx*1-0x2]
   12504:	66 89 54 08 fe       	mov    WORD PTR [rax+rcx*1-0x2],dx
   12509:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   12510:	00 
   12511:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   12518:	00 
   12519:	e9 01 fe ff ff       	jmp    1231f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd2f>
	  __throw_length_error(__N(__s));
   1251e:	48 8d 3d 96 2c 00 00 	lea    rdi,[rip+0x2c96]        # 151bb <CSWTCH.1110+0xdb>
   12525:	e8 06 0c ff ff       	call   3130 <std::__throw_length_error(char const*)@plt>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
   1252a:	4c 89 f9             	mov    rcx,r15
   1252d:	4c 89 ca             	mov    rdx,r9
   12530:	48 8d 35 f1 2c 00 00 	lea    rsi,[rip+0x2cf1]        # 15228 <CSWTCH.1110+0x148>
   12537:	31 c0                	xor    eax,eax
   12539:	48 8d 3d c0 2e 00 00 	lea    rdi,[rip+0x2ec0]        # 15400 <CSWTCH.1110+0x320>
   12540:	e8 9b 0d ff ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
   12545:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   1254c:	00 00 00 
   1254f:	90                   	nop

0000000000012550 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   12550:	41 57                	push   r15
   12552:	41 56                	push   r14
   12554:	41 55                	push   r13
   12556:	41 54                	push   r12
   12558:	49 89 fc             	mov    r12,rdi
   1255b:	55                   	push   rbp
   1255c:	53                   	push   rbx
   1255d:	48 81 ec 48 01 00 00 	sub    rsp,0x148
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   12564:	0f b6 5f 01          	movzx  ebx,BYTE PTR [rdi+0x1]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12568:	4c 8d 6c 24 70       	lea    r13,[rsp+0x70]
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   1256d:	48 89 74 24 18       	mov    QWORD PTR [rsp+0x18],rsi
	  if (__use_prec)
   12572:	89 d8                	mov    eax,ebx
   12574:	4c 89 6c 24 60       	mov    QWORD PTR [rsp+0x60],r13
      { _M_string_length = __length; }
   12579:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
   12580:	00 00 
	__c1 = __c2;
   12582:	c6 44 24 70 00       	mov    BYTE PTR [rsp+0x70],0x0
	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
   12587:	f3 0f 11 44 24 08    	movss  DWORD PTR [rsp+0x8],xmm0
	  if (__use_prec)
   1258d:	83 e0 06             	and    eax,0x6
   12590:	0f 85 7a 04 00 00    	jne    12a10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c0>
	  switch (_M_spec._M_type)
   12596:	89 d8                	mov    eax,ebx
   12598:	48 8d 15 41 35 00 00 	lea    rdx,[rip+0x3541]        # 15ae0 <CSWTCH.1110+0xa00>
   1259f:	c0 e8 03             	shr    al,0x3
   125a2:	83 e0 0f             	and    eax,0xf
   125a5:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   125a9:	48 01 d0             	add    rax,rdx
   125ac:	ff e0                	jmp    rax
   125ae:	66 90                	xchg   ax,ax
	      return __format::to_chars(__b, __e, __v);
   125b0:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   125b6:	48 8d 9c 24 c1 00 00 	lea    rbx,[rsp+0xc1]
   125bd:	00 
   125be:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   125c5:	00 
   125c6:	48 89 df             	mov    rdi,rbx
   125c9:	e8 72 0a ff ff       	call   3040 <std::to_chars(char*, char*, float)@plt>
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   125ce:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	  char __expc = 'e';
   125d3:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   125d8:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   125db:	83 fa 4b             	cmp    edx,0x4b
   125de:	0f 84 08 0c 00 00    	je     131ec <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc9c>
	  char* __end = __buf + sizeof(__buf);
   125e4:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   125eb:	00 
	  size_t __prec = 6;
   125ec:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   125f3:	00 00 
	  char* __end = __buf + sizeof(__buf);
   125f5:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	  if (!__builtin_signbit(__v))
   125fa:	8b 44 24 08          	mov    eax,DWORD PTR [rsp+0x8]
	      if (_M_spec._M_sign == _Sign_plus)
   125fe:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
	  if (!__builtin_signbit(__v))
   12603:	85 c0                	test   eax,eax
   12605:	0f 88 35 03 00 00    	js     12940 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3f0>
	      if (_M_spec._M_sign == _Sign_plus)
   1260b:	44 89 f0             	mov    eax,r14d
   1260e:	83 e0 0c             	and    eax,0xc
   12611:	3c 04                	cmp    al,0x4
   12613:	0f 84 cf 06 00 00    	je     12ce8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x798>
		__have_sign = false;
   12619:	45 31 db             	xor    r11d,r11d
	      else if (_M_spec._M_sign == _Sign_space)
   1261c:	3c 0c                	cmp    al,0xc
   1261e:	0f 84 0c 03 00 00    	je     12930 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3e0>
	  string_view __narrow_str(__start, __res.ptr - __start);
   12624:	49 89 ef             	mov    r15,rbp
   12627:	49 29 df             	sub    r15,rbx
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   1262a:	41 f6 c6 10          	test   r14b,0x10
   1262e:	0f 84 2c 02 00 00    	je     12860 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
   12634:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   1263a:	f3 0f 10 0d c6 29 00 	movss  xmm1,DWORD PTR [rip+0x29c6]        # 15008 <_IO_stdin_used+0x8>
   12641:	00 
   12642:	0f 54 05 97 62 00 00 	andps  xmm0,XMMWORD PTR [rip+0x6297]        # 188e0 <std::__unicode::__v15_1_0::__width_edges+0x460>
   12649:	0f 2e c8             	ucomiss xmm1,xmm0
   1264c:	0f 82 0e 02 00 00    	jb     12860 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x310>
      if (__pos < this->_M_len)
   12652:	4d 85 ff             	test   r15,r15
   12655:	0f 84 15 04 00 00    	je     12a70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
   1265b:	4c 89 fa             	mov    rdx,r15
   1265e:	be 2e 00 00 00       	mov    esi,0x2e
   12663:	48 89 df             	mov    rdi,rbx
   12666:	44 88 5c 24 38       	mov    BYTE PTR [rsp+0x38],r11b
   1266b:	e8 b0 0b ff ff       	call   3220 <memchr@plt>
	  if (__p)
   12670:	44 0f b6 5c 24 38    	movzx  r11d,BYTE PTR [rsp+0x38]
   12676:	48 85 c0             	test   rax,rax
   12679:	0f 84 f1 03 00 00    	je     12a70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
	    __ret = __p - this->_M_str;
   1267f:	48 29 d8             	sub    rax,rbx
   12682:	49 89 c2             	mov    r10,rax
	      if (__d != __s.npos) // Found decimal point.
   12685:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
   12689:	0f 84 e1 03 00 00    	je     12a70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x520>
		  __p = __s.find(__expc, __d + 1);
   1268f:	48 8d 48 01          	lea    rcx,[rax+0x1]
      if (__pos < this->_M_len)
   12693:	4c 39 f9             	cmp    rcx,r15
   12696:	0f 83 9c 08 00 00    	jae    12f38 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9e8>
   1269c:	0f be 74 24 37       	movsx  esi,BYTE PTR [rsp+0x37]
	  const size_type __n = this->_M_len - __pos;
   126a1:	4c 89 fa             	mov    rdx,r15
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   126a4:	48 8d 3c 0b          	lea    rdi,[rbx+rcx*1]
   126a8:	44 88 5c 24 40       	mov    BYTE PTR [rsp+0x40],r11b
	  const size_type __n = this->_M_len - __pos;
   126ad:	48 29 ca             	sub    rdx,rcx
	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   126b0:	48 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],rcx
   126b5:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
   126ba:	e8 61 0b ff ff       	call   3220 <memchr@plt>
	  if (__p)
   126bf:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
   126c4:	44 0f b6 5c 24 40    	movzx  r11d,BYTE PTR [rsp+0x40]
   126ca:	48 85 c0             	test   rax,rax
   126cd:	4c 8b 54 24 48       	mov    r10,QWORD PTR [rsp+0x48]
   126d2:	49 89 c1             	mov    r9,rax
   126d5:	0f 84 2f 0c 00 00    	je     1330a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdba>
	    __ret = __p - this->_M_str;
   126db:	49 29 d9             	sub    r9,rbx
		    __p = __s.size();
   126de:	49 83 f9 ff          	cmp    r9,0xffffffffffffffff
   126e2:	4d 0f 44 cf          	cmove  r9,r15
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   126e6:	45 31 c0             	xor    r8d,r8d
   126e9:	4d 39 d1             	cmp    r9,r10
   126ec:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
   126f0:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   126f5:	0f 84 a5 08 00 00    	je     12fa0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa50>
		      if (__s[__have_sign] != '0')
   126fb:	41 0f b6 d3          	movzx  edx,r11b
   126ff:	80 3c 13 30          	cmp    BYTE PTR [rbx+rdx*1],0x30
   12703:	0f 84 54 03 00 00    	je     12a5d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50d>
			__sigfigs = __p - __have_sign - 1;
   12709:	4c 89 c8             	mov    rax,r9
   1270c:	48 29 d0             	sub    rax,rdx
   1270f:	48 83 e8 01          	sub    rax,0x1
	      if (__trailing_zeros && __prec != 0)
   12713:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   12719:	0f 85 9e 03 00 00    	jne    12abd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x56d>
   1271f:	90                   	nop
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   12720:	4d 85 c0             	test   r8,r8
   12723:	0f 85 01 06 00 00    	jne    12d2a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7da>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12729:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   12730:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   12731:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
   12735:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   1273c:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12741:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   12748:	00 
	__c1 = __c2;
   12749:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   12750:	00 
   12751:	0f 84 51 01 00 00    	je     128a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x358>
      if (!_M_hasval)
   12757:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1275c:	80 78 20 00          	cmp    BYTE PTR [rax+0x20],0x0
   12760:	0f 84 0a 08 00 00    	je     12f70 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa20>
      return _M_loc;
   12766:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
      std::locale locale() { return _M_loc.value(); }
   1276b:	4c 8d 74 24 58       	lea    r14,[rsp+0x58]
      return _M_loc;
   12770:	48 8d 70 18          	lea    rsi,[rax+0x18]
      std::locale locale() { return _M_loc.value(); }
   12774:	4c 89 f7             	mov    rdi,r14
   12777:	e8 14 0a ff ff       	call   3190 <std::locale::locale(std::locale const&)@plt>
	      __wstr = _M_localize(__str, __expc, __fc.locale());
   1277c:	0f be 4c 24 37       	movsx  ecx,BYTE PTR [rsp+0x37]
   12781:	48 89 da             	mov    rdx,rbx
   12784:	4c 89 fe             	mov    rsi,r15
   12787:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
   1278e:	00 
   1278f:	4d 89 f0             	mov    r8,r14
   12792:	e8 d9 20 ff ff       	call   4870 <std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const [clone .isra.0]>
      { return _M_dataplus._M_p; }
   12797:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   1279e:	00 
   1279f:	48 89 c7             	mov    rdi,rax
	if (_M_data() == _M_local_data())
   127a2:	48 39 e8             	cmp    rax,rbp
   127a5:	0f 84 df 09 00 00    	je     1318a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc3a>
	    if (_M_string_length > _S_local_capacity)
   127ab:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   127b2:	00 
      { return _M_dataplus._M_p; }
   127b3:	48 8b 8c 24 a0 00 00 	mov    rcx,QWORD PTR [rsp+0xa0]
   127ba:	00 
	if (_M_data() == _M_local_data())
   127bb:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   127c2:	00 
	    if (_M_string_length > _S_local_capacity)
   127c3:	49 89 d0             	mov    r8,rdx
	if (_M_data() == _M_local_data())
   127c6:	48 39 f1             	cmp    rcx,rsi
   127c9:	0f 84 45 0a 00 00    	je     13214 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcc4>
   127cf:	66 48 0f 6e c2       	movq   xmm0,rdx
      { _M_dataplus._M_p = __p; }
   127d4:	48 89 8c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rcx
   127db:	00 
		    __capacity = _M_allocated_capacity;
   127dc:	48 8b 94 24 90 00 00 	mov    rdx,QWORD PTR [rsp+0x90]
   127e3:	00 
   127e4:	0f 16 84 24 b0 00 00 	movhps xmm0,QWORD PTR [rsp+0xb0]
   127eb:	00 
      { _M_string_length = __length; }
   127ec:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   127f3:	00 
	    if (__data)
   127f4:	48 85 c0             	test   rax,rax
   127f7:	0f 84 bb 09 00 00    	je     131b8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc68>
      { _M_dataplus._M_p = __p; }
   127fd:	48 89 84 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rax
   12804:	00 
      { _M_allocated_capacity = __capacity; }
   12805:	48 89 94 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rdx
   1280c:	00 
      { _M_string_length = __length; }
   1280d:	48 c7 84 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],0x0
   12814:	00 00 00 00 00 
   12819:	c6 07 00             	mov    BYTE PTR [rdi],0x0
      { return _M_dataplus._M_p; }
   1281c:	48 8b bc 24 a0 00 00 	mov    rdi,QWORD PTR [rsp+0xa0]
   12823:	00 
	if (_M_data() == _M_local_data())
   12824:	48 39 f7             	cmp    rdi,rsi
   12827:	74 11                	je     1283a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2ea>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   12829:	48 8b 84 24 b0 00 00 	mov    rax,QWORD PTR [rsp+0xb0]
   12830:	00 
   12831:	48 8d 70 01          	lea    rsi,[rax+0x1]
   12835:	e8 c6 09 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
   1283a:	4c 89 f7             	mov    rdi,r14
   1283d:	e8 7e 0a ff ff       	call   32c0 <std::locale::~locale()@plt>
      { return _M_string_length; }
   12842:	48 8b 84 24 88 00 00 	mov    rax,QWORD PTR [rsp+0x88]
   12849:	00 
	      if (!__wstr.empty())
   1284a:	48 85 c0             	test   rax,rax
   1284d:	74 59                	je     128a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x358>
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   1284f:	49 89 de             	mov    r14,rbx
		__str = __wstr;
   12852:	49 89 c7             	mov    r15,rax
   12855:	48 8b 9c 24 80 00 00 	mov    rbx,QWORD PTR [rsp+0x80]
   1285c:	00 
   1285d:	eb 4c                	jmp    128ab <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x35b>
   1285f:	90                   	nop
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12860:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   12867:	00 
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   12868:	41 83 e6 20          	and    r14d,0x20
      { _M_string_length = __length; }
   1286c:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   12873:	00 00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12878:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   1287f:	00 
   12880:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   12887:	00 
   12888:	74 1e                	je     128a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x358>
   1288a:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12890:	f3 0f 10 0d 70 27 00 	movss  xmm1,DWORD PTR [rip+0x2770]        # 15008 <_IO_stdin_used+0x8>
   12897:	00 
   12898:	0f 54 05 41 60 00 00 	andps  xmm0,XMMWORD PTR [rip+0x6041]        # 188e0 <std::__unicode::__v15_1_0::__width_edges+0x460>
   1289f:	0f 2e c8             	ucomiss xmm1,xmm0
   128a2:	0f 83 af fe ff ff    	jae    12757 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x207>
      { _M_dataplus._M_p = __p; }
   128a8:	49 89 de             	mov    r14,rbx
	  if (_M_width_kind == _WP_value)
   128ab:	41 0f b7 04 24       	movzx  eax,WORD PTR [r12]
   128b0:	66 25 80 01          	and    ax,0x180
   128b4:	66 3d 80 00          	cmp    ax,0x80
   128b8:	0f 84 92 00 00 00    	je     12950 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x400>
	  else if (_M_width_kind == _WP_from_arg)
   128be:	66 3d 00 01          	cmp    ax,0x100
   128c2:	0f 84 38 04 00 00    	je     12d00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7b0>
   128c8:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   128cd:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
	    return __format::__write(__fc.out(), __str);
   128d1:	48 89 da             	mov    rdx,rbx
   128d4:	4c 89 fe             	mov    rsi,r15
   128d7:	e8 14 63 ff ff       	call   8bf0 <std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >)>
   128dc:	48 89 c3             	mov    rbx,rax
      { return _M_dataplus._M_p; }
   128df:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
   128e6:	00 
	if (_M_data() == _M_local_data())
   128e7:	48 39 ef             	cmp    rdi,rbp
   128ea:	74 11                	je     128fd <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3ad>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   128ec:	48 8b 84 24 90 00 00 	mov    rax,QWORD PTR [rsp+0x90]
   128f3:	00 
   128f4:	48 8d 70 01          	lea    rsi,[rax+0x1]
   128f8:	e8 03 09 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
      { return _M_dataplus._M_p; }
   128fd:	48 8b 7c 24 60       	mov    rdi,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
   12902:	4c 39 ef             	cmp    rdi,r13
   12905:	74 0e                	je     12915 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3c5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   12907:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   1290c:	48 8d 70 01          	lea    rsi,[rax+0x1]
   12910:	e8 eb 08 ff ff       	call   3200 <operator delete(void*, unsigned long)@plt>
	}
   12915:	48 81 c4 48 01 00 00 	add    rsp,0x148
   1291c:	48 89 d8             	mov    rax,rbx
   1291f:	5b                   	pop    rbx
   12920:	5d                   	pop    rbp
   12921:	41 5c                	pop    r12
   12923:	41 5d                	pop    r13
   12925:	41 5e                	pop    r14
   12927:	41 5f                	pop    r15
   12929:	c3                   	ret
   1292a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
		*--__start = ' ';
   12930:	c6 43 ff 20          	mov    BYTE PTR [rbx-0x1],0x20
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   12934:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
		*--__start = ' ';
   12939:	48 83 eb 01          	sub    rbx,0x1
   1293d:	0f 1f 00             	nop    DWORD PTR [rax]
	  bool __have_sign = true;
   12940:	41 bb 01 00 00 00    	mov    r11d,0x1
   12946:	e9 d9 fc ff ff       	jmp    12624 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd4>
   1294b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    __width = _M_width;
   12950:	45 0f b7 44 24 04    	movzx  r8d,WORD PTR [r12+0x4]
      iterator out() { return std::move(_M_out); }
   12956:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
   1295b:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
	  if (__width <= __str.size())
   1295f:	4d 39 c7             	cmp    r15,r8
   12962:	0f 83 69 ff ff ff    	jae    128d1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x381>
	  _Align __align = _M_spec._M_align;
   12968:	41 0f b6 14 24       	movzx  edx,BYTE PTR [r12]
	  char32_t __fill_char = _M_spec._M_fill;
   1296d:	45 8b 4c 24 08       	mov    r9d,DWORD PTR [r12+0x8]
	  size_t __nfill = __width - __str.size();
   12972:	4d 29 f8             	sub    r8,r15
	  if (__align == _Align_default)
   12975:	89 d1                	mov    ecx,edx
   12977:	83 e1 03             	and    ecx,0x3
   1297a:	75 7f                	jne    129fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
   1297c:	83 e2 40             	and    edx,0x40
   1297f:	74 6f                	je     129f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
   12981:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12987:	f3 0f 10 0d 79 26 00 	movss  xmm1,DWORD PTR [rip+0x2679]        # 15008 <_IO_stdin_used+0x8>
   1298e:	00 
   1298f:	0f 54 05 4a 5f 00 00 	andps  xmm0,XMMWORD PTR [rip+0x5f4a]        # 188e0 <std::__unicode::__v15_1_0::__width_edges+0x460>
   12996:	0f 2e c8             	ucomiss xmm1,xmm0
   12999:	72 55                	jb     129f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4a0>
   1299b:	41 0f b6 06          	movzx  eax,BYTE PTR [r14]
		  if (!__format::__is_xdigit(__narrow_str[0]))
   1299f:	48 8d 15 9a 36 00 00 	lea    rdx,[rip+0x369a]        # 16040 <std::__detail::__from_chars_alnum_to_val_table<false>::value>
	      __align = _Align_right;
   129a6:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
   129ab:	41 b9 30 00 00 00    	mov    r9d,0x30
		  if (!__format::__is_xdigit(__narrow_str[0]))
   129b1:	80 3c 02 0f          	cmp    BYTE PTR [rdx+rax*1],0xf
   129b5:	76 44                	jbe    129fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
      { return __normal_iterator(_M_current++); }
   129b7:	48 8b 47 18          	mov    rax,QWORD PTR [rdi+0x18]
		      *__out++ = __str[0];
   129bb:	0f b6 13             	movzx  edx,BYTE PTR [rbx]
   129be:	48 8d 48 01          	lea    rcx,[rax+0x1]
   129c2:	48 89 4f 18          	mov    QWORD PTR [rdi+0x18],rcx
	*_M_next++ = __c;
   129c6:	88 10                	mov    BYTE PTR [rax],dl
    { return __lhs.base() - __rhs.base(); }
   129c8:	48 8b 47 18          	mov    rax,QWORD PTR [rdi+0x18]
   129cc:	48 2b 47 08          	sub    rax,QWORD PTR [rdi+0x8]
	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
   129d0:	48 3b 47 10          	cmp    rax,QWORD PTR [rdi+0x10]
   129d4:	0f 84 21 0a 00 00    	je     133fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeab>
	this->_M_str += __n;
   129da:	48 83 c3 01          	add    rbx,0x1
	this->_M_len -= __n;
   129de:	49 83 ef 01          	sub    r15,0x1
	      __align = _Align_right;
   129e2:	b9 02 00 00 00       	mov    ecx,0x2
		  __fill_char = _CharT('0');
   129e7:	41 b9 30 00 00 00    	mov    r9d,0x30
      }
   129ed:	eb 0c                	jmp    129fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4ab>
   129ef:	90                   	nop
	      __align = _Align_right;
   129f0:	b9 02 00 00 00       	mov    ecx,0x2
		__fill_char = _CharT(' ');
   129f5:	41 b9 20 00 00 00    	mov    r9d,0x20
	  return __format::__write_padded(std::move(__out), __str,
   129fb:	48 89 da             	mov    rdx,rbx
   129fe:	4c 89 fe             	mov    rsi,r15
   12a01:	e8 1a 63 ff ff       	call   8d20 <std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char32_t)>
   12a06:	48 89 c3             	mov    rbx,rax
					  __align, __nfill, __fill_char);
   12a09:	e9 d1 fe ff ff       	jmp    128df <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x38f>
   12a0e:	66 90                	xchg   ax,ax
	  if (_M_prec_kind == _WP_value)
   12a10:	3c 02                	cmp    al,0x2
   12a12:	0f 84 28 04 00 00    	je     12e40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8f0>
	  size_t __prec = -1;
   12a18:	48 c7 44 24 10 ff ff 	mov    QWORD PTR [rsp+0x10],0xffffffffffffffff
   12a1f:	ff ff 
	  else if (_M_prec_kind == _WP_from_arg)
   12a21:	3c 04                	cmp    al,0x4
   12a23:	0f 84 87 02 00 00    	je     12cb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x760>
	  switch (_M_spec._M_type)
   12a29:	89 d8                	mov    eax,ebx
   12a2b:	48 8d 15 d2 30 00 00 	lea    rdx,[rip+0x30d2]        # 15b04 <CSWTCH.1110+0xa24>
   12a32:	c0 e8 03             	shr    al,0x3
   12a35:	83 e0 0f             	and    eax,0xf
   12a38:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   12a3c:	48 01 d0             	add    rax,rdx
   12a3f:	ff e0                	jmp    rax
   12a41:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   12a48:	00 00 00 00 
   12a4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
      for (; __pos < this->_M_len; ++__pos)
   12a50:	48 83 c1 01          	add    rcx,0x1
   12a54:	4c 39 f9             	cmp    rcx,r15
   12a57:	0f 83 01 05 00 00    	jae    12f5e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa0e>
	if (!traits_type::eq(this->_M_str[__pos], __c))
   12a5d:	80 3c 0b 30          	cmp    BYTE PTR [rbx+rcx*1],0x30
   12a61:	74 ed                	je     12a50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x500>
   12a63:	e9 fd 04 00 00       	jmp    12f65 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa15>
   12a68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   12a6f:	00 
		  __p = __s.find(__expc); // Find the exponent, if present.
   12a70:	0f be 54 24 37       	movsx  edx,BYTE PTR [rsp+0x37]
   12a75:	31 c9                	xor    ecx,ecx
   12a77:	48 89 de             	mov    rsi,rbx
   12a7a:	4c 89 ff             	mov    rdi,r15
   12a7d:	44 88 5c 24 38       	mov    BYTE PTR [rsp+0x38],r11b
   12a82:	e8 e9 12 ff ff       	call   3d70 <std::basic_string_view<char, std::char_traits<char> >::find(char, unsigned long) const [clone .isra.0]>
		    __p = __s.size();
   12a87:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
		  __p = __s.find(__expc); // Find the exponent, if present.
   12a8b:	49 89 c2             	mov    r10,rax
		    __p = __s.size();
   12a8e:	4d 0f 44 d7          	cmove  r10,r15
	      if (__trailing_zeros && __prec != 0)
   12a92:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   12a97:	0f 84 7b 02 00 00    	je     12d18 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7c8>
   12a9d:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   12aa3:	0f 84 44 08 00 00    	je     132ed <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd9d>
		  __sigfigs = __d - __have_sign;
   12aa9:	0f b6 54 24 38       	movzx  edx,BYTE PTR [rsp+0x38]
   12aae:	4c 89 d0             	mov    rax,r10
   12ab1:	4d 89 d1             	mov    r9,r10
   12ab4:	41 b8 01 00 00 00    	mov    r8d,0x1
   12aba:	48 29 d0             	sub    rax,rdx
		  __z = __prec - __sigfigs;
   12abd:	48 29 44 24 10       	sub    QWORD PTR [rsp+0x10],rax
   12ac2:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   12ac7:	49 01 c8             	add    r8,rcx
   12aca:	e9 51 fc ff ff       	jmp    12720 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
   12acf:	90                   	nop
	      if (_M_spec._M_type != _Pres_A)
   12ad0:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   12ad3:	ba 65 00 00 00       	mov    edx,0x65
   12ad8:	b8 70 00 00 00       	mov    eax,0x70
   12add:	80 fb 10             	cmp    bl,0x10
   12ae0:	0f 44 c2             	cmove  eax,edx
   12ae3:	45 31 f6             	xor    r14d,r14d
   12ae6:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
	      return __format::to_chars(__b, __e, __v, __fmt);
   12aea:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12af0:	48 8d 9c 24 c1 00 00 	lea    rbx,[rsp+0xc1]
   12af7:	00 
   12af8:	ba 04 00 00 00       	mov    edx,0x4
   12afd:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   12b04:	00 
   12b05:	48 89 df             	mov    rdi,rbx
   12b08:	e8 e3 06 ff ff       	call   31f0 <std::to_chars(char*, char*, float, std::chars_format)@plt>
   12b0d:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   12b10:	83 fa 4b             	cmp    edx,0x4b
   12b13:	0f 84 f7 03 00 00    	je     12f10 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9c0>
	  char* __end = __buf + sizeof(__buf);
   12b19:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   12b20:	00 
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   12b21:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   12b26:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12b2d:	00 00 
	  char* __end = __buf + sizeof(__buf);
   12b2f:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	  if (__upper)
   12b34:	45 84 f6             	test   r14b,r14b
   12b37:	0f 84 bd fa ff ff    	je     125fa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   12b3d:	48 39 eb             	cmp    rbx,rbp
   12b40:	0f 84 b4 fa ff ff    	je     125fa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
   12b46:	49 89 de             	mov    r14,rbx
   12b49:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		*__p = std::toupper(*__p);
   12b50:	41 0f be 3e          	movsx  edi,BYTE PTR [r14]
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   12b54:	49 83 c6 01          	add    r14,0x1
		*__p = std::toupper(*__p);
   12b58:	e8 f3 07 ff ff       	call   3350 <toupper@plt>
   12b5d:	41 88 46 ff          	mov    BYTE PTR [r14-0x1],al
	      for (char* __p = __start; __p != __res.ptr; ++__p)
   12b61:	49 39 ee             	cmp    r14,rbp
   12b64:	75 ea                	jne    12b50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
   12b66:	e9 8f fa ff ff       	jmp    125fa <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa>
   12b6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      if (_M_spec._M_type != _Pres_A)
   12b70:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   12b73:	ba 50 00 00 00       	mov    edx,0x50
   12b78:	b8 70 00 00 00       	mov    eax,0x70
   12b7d:	41 be 01 00 00 00    	mov    r14d,0x1
   12b83:	80 fb 10             	cmp    bl,0x10
   12b86:	0f 44 c2             	cmove  eax,edx
   12b89:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
   12b8d:	e9 58 ff ff ff       	jmp    12aea <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x59a>
   12b92:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   12b98:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12b9f:	00 00 
   12ba1:	b9 06 00 00 00       	mov    ecx,0x6
   12ba6:	45 31 f6             	xor    r14d,r14d
	  char __expc = 'e';
   12ba9:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      __fmt = chars_format::fixed;
   12bae:	bb 02 00 00 00       	mov    ebx,0x2
	  bool __trailing_zeros = false;
   12bb3:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12bb8:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12bbe:	4c 8d bc 24 c1 00 00 	lea    r15,[rsp+0xc1]
   12bc5:	00 
   12bc6:	89 da                	mov    edx,ebx
   12bc8:	48 8d b4 24 40 01 00 	lea    rsi,[rsp+0x140]
   12bcf:	00 
   12bd0:	4c 89 ff             	mov    rdi,r15
   12bd3:	e8 78 06 ff ff       	call   3250 <std::to_chars(char*, char*, float, std::chars_format, int)@plt>
   12bd8:	48 89 c5             	mov    rbp,rax
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   12bdb:	83 fa 4b             	cmp    edx,0x4b
   12bde:	0f 84 6c 02 00 00    	je     12e50 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x900>
	  char* __end = __buf + sizeof(__buf);
   12be4:	48 8d 84 24 40 01 00 	lea    rax,[rsp+0x140]
   12beb:	00 
	  char* __start = __buf + 1; // reserve space for sign
   12bec:	4c 89 fb             	mov    rbx,r15
	  char* __end = __buf + sizeof(__buf);
   12bef:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   12bf4:	e9 3b ff ff ff       	jmp    12b34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5e4>
   12bf9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  switch (_M_spec._M_type)
   12c00:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12c07:	00 00 
   12c09:	b9 06 00 00 00       	mov    ecx,0x6
	      __upper = true;
   12c0e:	41 be 01 00 00 00    	mov    r14d,0x1
   12c14:	eb 93                	jmp    12ba9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x659>
   12c16:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   12c1d:	00 00 00 
	  switch (_M_spec._M_type)
   12c20:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   12c25:	b9 06 00 00 00       	mov    ecx,0x6
   12c2a:	45 31 f6             	xor    r14d,r14d
   12c2d:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12c34:	00 00 
	      __trailing_zeros = true;
   12c36:	c6 44 24 20 01       	mov    BYTE PTR [rsp+0x20],0x1
	      __fmt = chars_format::general;
   12c3b:	bb 03 00 00 00       	mov    ebx,0x3
	      break;
   12c40:	e9 73 ff ff ff       	jmp    12bb8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   12c45:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   12c48:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12c4f:	00 00 
   12c51:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   12c56:	c6 44 24 37 45       	mov    BYTE PTR [rsp+0x37],0x45
	      __upper = true;
   12c5b:	41 be 01 00 00 00    	mov    r14d,0x1
   12c61:	eb d3                	jmp    12c36 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6e6>
   12c63:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	  switch (_M_spec._M_type)
   12c68:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
   12c6d:	b9 06 00 00 00       	mov    ecx,0x6
   12c72:	45 31 f6             	xor    r14d,r14d
   12c75:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12c7c:	00 00 
	  bool __trailing_zeros = false;
   12c7e:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
	      __fmt = chars_format::scientific;
   12c83:	bb 01 00 00 00       	mov    ebx,0x1
	      break;
   12c88:	e9 2b ff ff ff       	jmp    12bb8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   12c8d:	0f 1f 00             	nop    DWORD PTR [rax]
	  switch (_M_spec._M_type)
   12c90:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12c97:	00 00 
   12c99:	b9 06 00 00 00       	mov    ecx,0x6
	      __expc = 'E';
   12c9e:	c6 44 24 37 45       	mov    BYTE PTR [rsp+0x37],0x45
	      __upper = true;
   12ca3:	41 be 01 00 00 00    	mov    r14d,0x1
   12ca9:	eb d3                	jmp    12c7e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x72e>
   12cab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   12cb0:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
   12cb4:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
   12cb9:	e8 02 11 ff ff       	call   3dc0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   12cbe:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   12cc3:	e9 61 fd ff ff       	jmp    12a29 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d9>
	  char __expc = 'e';
   12cc8:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   12ccd:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
		__fmt = chars_format::general;
   12cd1:	bb 03 00 00 00       	mov    ebx,0x3
	  bool __upper = false;
   12cd6:	45 31 f6             	xor    r14d,r14d
	  bool __trailing_zeros = false;
   12cd9:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   12cde:	e9 d5 fe ff ff       	jmp    12bb8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   12ce3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
		*--__start = '+';
   12ce8:	c6 43 ff 2b          	mov    BYTE PTR [rbx-0x1],0x2b
	  bool __have_sign = true;
   12cec:	41 bb 01 00 00 00    	mov    r11d,0x1
	  if (_M_spec._M_alt && __builtin_isfinite(__v))
   12cf2:	45 0f b6 34 24       	movzx  r14d,BYTE PTR [r12]
		*--__start = '+';
   12cf7:	48 83 eb 01          	sub    rbx,0x1
   12cfb:	e9 24 f9 ff ff       	jmp    12624 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd4>
   12d00:	41 0f b7 7c 24 04    	movzx  edi,WORD PTR [r12+0x4]
   12d06:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
   12d0b:	e8 90 11 ff ff       	call   3ea0 <unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   12d10:	49 89 c0             	mov    r8,rax
   12d13:	e9 3e fc ff ff       	jmp    12956 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x406>
	      size_t __z = 0;   // Number of trailing zeros to add.
   12d18:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   12d1f:	00 00 
	      if (__trailing_zeros && __prec != 0)
   12d21:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   12d24:	41 b8 01 00 00 00    	mov    r8d,0x1
		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
   12d2a:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
   12d30:	75 11                	jne    12d43 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7f3>
   12d32:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
   12d37:	48 29 e8             	sub    rax,rbp
   12d3a:	4c 39 c0             	cmp    rax,r8
   12d3d:	0f 83 3c 05 00 00    	jae    1327f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd2f>
		      __dynbuf.reserve(__s.size() + __extras);
   12d43:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
   12d48:	4b 8d 34 07          	lea    rsi,[r15+r8*1]
   12d4c:	4c 89 4c 24 38       	mov    QWORD PTR [rsp+0x38],r9
   12d51:	48 89 c7             	mov    rdi,rax
   12d54:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
   12d59:	4c 89 44 24 40       	mov    QWORD PTR [rsp+0x40],r8
   12d5e:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   12d63:	e8 c8 2e ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
		      if (__dynbuf.empty())
   12d68:	48 83 7c 24 68 00    	cmp    QWORD PTR [rsp+0x68],0x0
   12d6e:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
   12d73:	4c 8b 4c 24 38       	mov    r9,QWORD PTR [rsp+0x38]
   12d78:	0f 85 32 02 00 00    	jne    12fb0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xa60>
	return _M_replace(size_type(0), this->size(), __s, __n);
   12d7e:	4d 39 cf             	cmp    r15,r9
   12d81:	4d 89 c8             	mov    r8,r9
   12d84:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12d89:	48 89 d9             	mov    rcx,rbx
   12d8c:	4d 0f 46 c7          	cmovbe r8,r15
   12d90:	31 d2                	xor    edx,edx
   12d92:	31 f6                	xor    esi,esi
   12d94:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   12d99:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   12d9e:	e8 bd 18 ff ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [clone .isra.0]>
			  if (__d == __p)
   12da3:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
   12da8:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   12dad:	4d 39 d1             	cmp    r9,r10
   12db0:	0f 84 a0 05 00 00    	je     13356 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe06>
			  if (__z)
   12db6:	48 83 7c 24 10 00    	cmp    QWORD PTR [rsp+0x10],0x0
   12dbc:	0f 85 69 05 00 00    	jne    1332b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xddb>
    if (__pos > __size)
   12dc2:	4d 39 cf             	cmp    r15,r9
   12dc5:	0f 82 9f 06 00 00    	jb     1346a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf1a>
      { return _M_string_length; }
   12dcb:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
	const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
   12dd0:	4d 29 cf             	sub    r15,r9
	return basic_string_view{_M_str + __pos, __rlen};
   12dd3:	4a 8d 0c 0b          	lea    rcx,[rbx+r9*1]
	if (this->max_size() - (this->size() - __n1) < __n2)
   12dd7:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
   12dde:	ff ff 7f 
   12de1:	48 29 f0             	sub    rax,rsi
   12de4:	4c 39 f8             	cmp    rax,r15
   12de7:	0f 82 71 06 00 00    	jb     1345e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xf0e>
      { return _M_dataplus._M_p; }
   12ded:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      const size_type __len = __n + this->size();
   12df2:	4a 8d 1c 3e          	lea    rbx,[rsi+r15*1]
	if (_M_data() == _M_local_data())
   12df6:	4c 39 e8             	cmp    rax,r13
   12df9:	0f 84 70 05 00 00    	je     1336f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe1f>
	return _M_is_local() ? size_type(_S_local_capacity)
   12dff:	48 8b 54 24 70       	mov    rdx,QWORD PTR [rsp+0x70]
      if (__len <= this->capacity())
   12e04:	48 39 da             	cmp    rdx,rbx
   12e07:	0f 82 05 05 00 00    	jb     13312 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdc2>
	  if (__n)
   12e0d:	4d 85 ff             	test   r15,r15
   12e10:	74 1e                	je     12e30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
   12e12:	48 8d 3c 30          	lea    rdi,[rax+rsi*1]
	if (__n == 1)
   12e16:	49 83 ff 01          	cmp    r15,0x1
   12e1a:	0f 84 59 05 00 00    	je     13379 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe29>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   12e20:	4c 89 fa             	mov    rdx,r15
   12e23:	48 89 ce             	mov    rsi,rcx
   12e26:	e8 85 03 ff ff       	call   31b0 <memcpy@plt>
      { return _M_dataplus._M_p; }
   12e2b:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      { _M_string_length = __length; }
   12e30:	48 89 5c 24 68       	mov    QWORD PTR [rsp+0x68],rbx
	__c1 = __c2;
   12e35:	c6 04 18 00          	mov    BYTE PTR [rax+rbx*1],0x0
   12e39:	e9 b2 01 00 00       	jmp    12ff0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa0>
   12e3e:	66 90                	xchg   ax,ax
	    __prec = _M_prec;
   12e40:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   12e44:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   12e49:	e9 db fb ff ff       	jmp    12a29 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4d9>
   12e4e:	66 90                	xchg   ax,ax
	      size_t __guess = 8 + __prec;
   12e50:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
   12e55:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
   12e5a:	48 8d 70 08          	lea    rsi,[rax+0x8]
	      if (__fmt == chars_format::fixed) // +ddd.prec
   12e5e:	83 fb 02             	cmp    ebx,0x2
   12e61:	0f 84 8a 02 00 00    	je     130f1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xba1>
	      if (__guess <= sizeof(__buf)) [[unlikely]]
   12e67:	48 81 fe 80 00 00 00 	cmp    rsi,0x80
   12e6e:	0f 86 b4 00 00 00    	jbe    12f28 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x9d8>
	      __dynbuf.reserve(__guess);
   12e74:	48 8d 44 24 60       	lea    rax,[rsp+0x60]
   12e79:	48 89 c7             	mov    rdi,rax
   12e7c:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
   12e81:	e8 aa 2d ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   12e86:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	if (_M_data() == _M_local_data())
   12e8b:	4c 39 ea             	cmp    rdx,r13
   12e8e:	0f 84 67 04 00 00    	je     132fb <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xdab>
		  __dynbuf.__resize_and_overwrite(__dynbuf.capacity() * 2,
   12e94:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
   12e99:	48 8d 34 00          	lea    rsi,[rax+rax*1]
		    __res = __to_chars(__p + 1, __p + __n - 1);
   12e9d:	48 8d 6e ff          	lea    rbp,[rsi-0x1]
      reserve(__n);
   12ea1:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12ea6:	e8 85 2d ff ff       	call   5c30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
      { return _M_dataplus._M_p; }
   12eab:	4c 8b 7c 24 60       	mov    r15,QWORD PTR [rsp+0x60]
	    if (__use_prec)
   12eb0:	80 7c 24 38 00       	cmp    BYTE PTR [rsp+0x38],0x0
		    __res = __to_chars(__p + 1, __p + __n - 1);
   12eb5:	49 8d 34 2f          	lea    rsi,[r15+rbp*1]
   12eb9:	49 8d 7f 01          	lea    rdi,[r15+0x1]
	    if (__use_prec)
   12ebd:	0f 85 0d 03 00 00    	jne    131d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc80>
	    else if (__fmt != chars_format{})
   12ec3:	85 db                	test   ebx,ebx
   12ec5:	0f 85 65 01 00 00    	jne    13030 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xae0>
	      return __format::to_chars(__b, __e, __v);
   12ecb:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   12ed1:	e8 6a 01 ff ff       	call   3040 <std::to_chars(char*, char*, float)@plt>
   12ed6:	48 89 c5             	mov    rbp,rax
   12ed9:	48 89 d0             	mov    rax,rdx
		    return __res.ec == errc{} ? __res.ptr - __p : 0;
   12edc:	85 c0                	test   eax,eax
   12ede:	0f 85 74 02 00 00    	jne    13158 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xc08>
   12ee4:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
   12ee9:	48 89 e8             	mov    rax,rbp
   12eec:	4c 29 f8             	sub    rax,r15
      { _M_string_length = __length; }
   12eef:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
   12ef4:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
      { return _M_dataplus._M_p; }
   12ef8:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
		  __start = __dynbuf.data() + 1; // reserve space for sign
   12efd:	48 8d 58 01          	lea    rbx,[rax+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   12f01:	48 03 44 24 68       	add    rax,QWORD PTR [rsp+0x68]
   12f06:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   12f0b:	e9 24 fc ff ff       	jmp    12b34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5e4>
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   12f10:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
   12f15:	bb 04 00 00 00       	mov    ebx,0x4
   12f1a:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   12f1f:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   12f26:	00 00 
		__guess = sizeof(__buf) * 2;
   12f28:	be 00 01 00 00       	mov    esi,0x100
   12f2d:	e9 42 ff ff ff       	jmp    12e74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x924>
   12f32:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   12f38:	45 31 c0             	xor    r8d,r8d
   12f3b:	49 39 c7             	cmp    r15,rax
   12f3e:	41 0f 94 c0          	sete   r8b
		  if (__trailing_zeros)
   12f42:	80 7c 24 20 00       	cmp    BYTE PTR [rsp+0x20],0x0
   12f47:	0f 84 93 01 00 00    	je     130e0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb90>
		      if (__s[__have_sign] != '0')
   12f4d:	41 0f b6 d3          	movzx  edx,r11b
		    __p = __s.size();
   12f51:	4d 89 f9             	mov    r9,r15
		      if (__s[__have_sign] != '0')
   12f54:	80 3c 13 30          	cmp    BYTE PTR [rbx+rdx*1],0x30
   12f58:	0f 85 ab f7 ff ff    	jne    12709 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1b9>
      return npos;
   12f5e:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
			__sigfigs = __p - __s.find_first_not_of('0', __d + 1);
   12f65:	4c 89 c8             	mov    rax,r9
   12f68:	48 29 c8             	sub    rax,rcx
   12f6b:	e9 a3 f7 ff ff       	jmp    12713 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1c3>
	  std::construct_at(&_M_loc);
   12f70:	48 8d 70 18          	lea    rsi,[rax+0x18]
   12f74:	49 89 c6             	mov    r14,rax
   12f77:	48 89 f7             	mov    rdi,rsi
   12f7a:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
   12f7f:	e8 ec 03 ff ff       	call   3370 <std::locale::locale()@plt>
	  _M_hasval = true;
   12f84:	41 c6 46 20 01       	mov    BYTE PTR [r14+0x20],0x1
      std::locale locale() { return _M_loc.value(); }
   12f89:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
   12f8e:	4c 8d 74 24 58       	lea    r14,[rsp+0x58]
   12f93:	e9 dc f7 ff ff       	jmp    12774 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x224>
   12f98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   12f9f:	00 
	      size_t __z = 0;   // Number of trailing zeros to add.
   12fa0:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   12fa7:	00 00 
   12fa9:	e9 72 f7 ff ff       	jmp    12720 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
   12fae:	66 90                	xchg   ax,ax
   12fb0:	4c 8b 44 24 40       	mov    r8,QWORD PTR [rsp+0x40]
			  __dynbuf.insert(__p, __extras, '0');
   12fb5:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   12fba:	4c 89 ce             	mov    rsi,r9
   12fbd:	b9 30 00 00 00       	mov    ecx,0x30
   12fc2:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
   12fc7:	4c 89 c2             	mov    rdx,r8
   12fca:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
   12fcf:	e8 9c 17 ff ff       	call   4770 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char) [clone .isra.0]>
			  if (__d == __p)
   12fd4:	4c 8b 4c 24 10       	mov    r9,QWORD PTR [rsp+0x10]
   12fd9:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
   12fde:	4d 39 d1             	cmp    r9,r10
   12fe1:	75 0d                	jne    12ff0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaa0>
			    __dynbuf[__p] = '.';
   12fe3:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   12fe8:	42 c6 04 08 2e       	mov    BYTE PTR [rax+r9*1],0x2e
   12fed:	0f 1f 00             	nop    DWORD PTR [rax]
      { return _M_string_length; }
   12ff0:	4c 8b 7c 24 68       	mov    r15,QWORD PTR [rsp+0x68]
      { return _M_dataplus._M_p; }
   12ff5:	48 8b 5c 24 60       	mov    rbx,QWORD PTR [rsp+0x60]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   12ffa:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   12fff:	48 8d ac 24 90 00 00 	lea    rbp,[rsp+0x90]
   13006:	00 
   13007:	c6 84 24 90 00 00 00 	mov    BYTE PTR [rsp+0x90],0x0
   1300e:	00 
   1300f:	48 89 ac 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rbp
   13016:	00 
      { _M_string_length = __length; }
   13017:	48 c7 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],0x0
   1301e:	00 00 00 00 00 
   13023:	a8 20                	test   al,0x20
   13025:	0f 85 2c f7 ff ff    	jne    12757 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x207>
   1302b:	e9 78 f8 ff ff       	jmp    128a8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x358>
	      return __format::to_chars(__b, __e, __v, __fmt);
   13030:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   13036:	89 da                	mov    edx,ebx
   13038:	e8 b3 01 ff ff       	call   31f0 <std::to_chars(char*, char*, float, std::chars_format)@plt>
   1303d:	48 89 c5             	mov    rbp,rax
   13040:	48 89 d0             	mov    rax,rdx
   13043:	e9 94 fe ff ff       	jmp    12edc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x98c>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   13048:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   1304c:	45 31 f6             	xor    r14d,r14d
   1304f:	e9 55 fb ff ff       	jmp    12ba9 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x659>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   13054:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   13058:	e9 b1 fb ff ff       	jmp    12c0e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6be>
   1305d:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   13061:	e9 38 fc ff ff       	jmp    12c9e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x74e>
   13066:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   1306a:	e9 e7 fb ff ff       	jmp    12c56 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x706>
	  char __expc = 'e';
   1306f:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   13074:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   13078:	45 31 f6             	xor    r14d,r14d
   1307b:	e9 b6 fb ff ff       	jmp    12c36 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6e6>
	      if (_M_spec._M_type != _Pres_A)
   13080:	83 e3 78             	and    ebx,0x78
   13083:	ba 70 00 00 00       	mov    edx,0x70
   13088:	b8 65 00 00 00       	mov    eax,0x65
   1308d:	80 fb 10             	cmp    bl,0x10
   13090:	0f 45 c2             	cmovne eax,edx
   13093:	45 31 f6             	xor    r14d,r14d
   13096:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   1309a:	c6 44 24 20 00       	mov    BYTE PTR [rsp+0x20],0x0
   1309f:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	      __fmt = chars_format::hex;
   130a3:	bb 04 00 00 00       	mov    ebx,0x4
   130a8:	e9 0b fb ff ff       	jmp    12bb8 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
   130ad:	0f 1f 00             	nop    DWORD PTR [rax]
	      if (_M_spec._M_type != _Pres_A)
   130b0:	83 e3 78             	and    ebx,0x78
		__expc = 'p';
   130b3:	ba 50 00 00 00       	mov    edx,0x50
   130b8:	b8 70 00 00 00       	mov    eax,0x70
   130bd:	41 be 01 00 00 00    	mov    r14d,0x1
   130c3:	80 fb 10             	cmp    bl,0x10
   130c6:	0f 44 c2             	cmove  eax,edx
   130c9:	88 44 24 37          	mov    BYTE PTR [rsp+0x37],al
   130cd:	eb cb                	jmp    1309a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xb4a>
	  char __expc = 'e';
   130cf:	c6 44 24 37 65       	mov    BYTE PTR [rsp+0x37],0x65
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   130d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
	  bool __upper = false;
   130d8:	45 31 f6             	xor    r14d,r14d
   130db:	e9 9e fb ff ff       	jmp    12c7e <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x72e>
	      size_t __z = 0;   // Number of trailing zeros to add.
   130e0:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   130e7:	00 00 
		    __p = __s.size();
   130e9:	4d 89 f9             	mov    r9,r15
   130ec:	e9 2f f6 ff ff       	jmp    12720 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d0>
			__builtin_frexpf(__v, &__exp);
   130f1:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   130f7:	48 89 74 24 28       	mov    QWORD PTR [rsp+0x28],rsi
   130fc:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
   13103:	00 
		      int __exp{};
   13104:	c7 84 24 a0 00 00 00 	mov    DWORD PTR [rsp+0xa0],0x0
   1310b:	00 00 00 00 
			__builtin_frexpf(__v, &__exp);
   1310f:	e8 3c ff fe ff       	call   3050 <frexpf@plt>
		      if (__exp > 0)
   13114:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [rsp+0xa0]
   1311b:	48 8b 74 24 28       	mov    rsi,QWORD PTR [rsp+0x28]
   13120:	85 c0                	test   eax,eax
   13122:	7e 23                	jle    13147 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xbf7>
			__guess += 1U + __exp * 4004U / 13301U; // log10(2) approx.
   13124:	69 d0 a4 0f 00 00    	imul   edx,eax,0xfa4
   1312a:	48 89 d0             	mov    rax,rdx
   1312d:	48 69 d2 f9 65 56 3b 	imul   rdx,rdx,0x3b5665f9
   13134:	48 c1 ea 20          	shr    rdx,0x20
   13138:	29 d0                	sub    eax,edx
   1313a:	d1 e8                	shr    eax,1
   1313c:	01 d0                	add    eax,edx
   1313e:	c1 e8 0d             	shr    eax,0xd
   13141:	83 c0 01             	add    eax,0x1
   13144:	48 01 c6             	add    rsi,rax
   13147:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
   1314c:	e9 16 fd ff ff       	jmp    12e67 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x917>
   13151:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
   13158:	48 c7 44 24 68 00 00 	mov    QWORD PTR [rsp+0x68],0x0
   1315f:	00 00 
      { return _M_dataplus._M_p; }
   13161:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
   13166:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   13169:	48 8b 54 24 60       	mov    rdx,QWORD PTR [rsp+0x60]
	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
   1316e:	83 f8 4b             	cmp    eax,0x4b
   13171:	0f 84 14 fd ff ff    	je     12e8b <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x93b>
		  __start = __dynbuf.data() + 1; // reserve space for sign
   13177:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
		  __end = __dynbuf.data() + __dynbuf.size();
   1317b:	48 03 54 24 68       	add    rdx,QWORD PTR [rsp+0x68]
   13180:	48 89 54 24 28       	mov    QWORD PTR [rsp+0x28],rdx
   13185:	e9 aa f9 ff ff       	jmp    12b34 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5e4>
   1318a:	48 8b 94 24 a0 00 00 	mov    rdx,QWORD PTR [rsp+0xa0]
   13191:	00 
	if (_M_data() == _M_local_data())
   13192:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   13199:	00 
   1319a:	48 39 f2             	cmp    rdx,rsi
   1319d:	74 6a                	je     13209 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcb9>
      { return _M_string_length; }
   1319f:	f3 0f 6f 84 24 a8 00 	movdqu xmm0,XMMWORD PTR [rsp+0xa8]
   131a6:	00 00 
      { _M_dataplus._M_p = __p; }
   131a8:	48 89 94 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rdx
   131af:	00 
      { _M_string_length = __length; }
   131b0:	0f 11 84 24 88 00 00 	movups XMMWORD PTR [rsp+0x88],xmm0
   131b7:	00 
      { _M_dataplus._M_p = __p; }
   131b8:	48 89 b4 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rsi
   131bf:	00 
   131c0:	48 8d b4 24 b0 00 00 	lea    rsi,[rsp+0xb0]
   131c7:	00 
   131c8:	48 89 f7             	mov    rdi,rsi
   131cb:	e9 3d f6 ff ff       	jmp    1280d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2bd>
	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
   131d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [rsp+0x10]
   131d4:	f3 0f 10 44 24 08    	movss  xmm0,DWORD PTR [rsp+0x8]
   131da:	89 da                	mov    edx,ebx
   131dc:	e8 6f 00 ff ff       	call   3250 <std::to_chars(char*, char*, float, std::chars_format, int)@plt>
   131e1:	48 89 c5             	mov    rbp,rax
   131e4:	48 89 d0             	mov    rax,rdx
   131e7:	e9 f0 fc ff ff       	jmp    12edc <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x98c>
	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
   131ec:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
	  chars_format __fmt{};
   131f1:	31 db                	xor    ebx,ebx
	  bool __upper = false;
   131f3:	45 31 f6             	xor    r14d,r14d
		__guess = sizeof(__buf) * 2;
   131f6:	be 00 01 00 00       	mov    esi,0x100
	  size_t __prec = 6;
   131fb:	48 c7 44 24 10 06 00 	mov    QWORD PTR [rsp+0x10],0x6
   13202:	00 00 
   13204:	e9 6b fc ff ff       	jmp    12e74 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x924>
	    if (_M_string_length > _S_local_capacity)
   13209:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   13210:	00 
   13211:	49 89 d0             	mov    r8,rdx
		if (__str.size())
   13214:	48 85 d2             	test   rdx,rdx
   13217:	74 4c                	je     13265 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd15>
	if (__n == 1)
   13219:	48 83 fa 01          	cmp    rdx,0x1
   1321d:	0f 84 65 01 00 00    	je     13388 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe38>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   13223:	89 d1                	mov    ecx,edx
   13225:	83 fa 08             	cmp    edx,0x8
   13228:	0f 83 79 01 00 00    	jae    133a7 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe57>
   1322e:	f6 c2 04             	test   dl,0x4
   13231:	0f 85 e2 01 00 00    	jne    13419 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xec9>
   13237:	85 d2                	test   edx,edx
   13239:	74 24                	je     1325f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0f>
   1323b:	0f b6 bc 24 b0 00 00 	movzx  edi,BYTE PTR [rsp+0xb0]
   13242:	00 
   13243:	83 e2 02             	and    edx,0x2
   13246:	40 88 38             	mov    BYTE PTR [rax],dil
   13249:	0f 85 f0 01 00 00    	jne    1343f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xeef>
   1324f:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   13256:	00 
   13257:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   1325e:	00 
      { return _M_string_length; }
   1325f:	49 89 d0             	mov    r8,rdx
      { return _M_dataplus._M_p; }
   13262:	48 89 c7             	mov    rdi,rax
      { _M_string_length = __length; }
   13265:	4c 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],r8
   1326c:	00 
	__c1 = __c2;
   1326d:	42 c6 04 07 00       	mov    BYTE PTR [rdi+r8*1],0x0
      { return _M_dataplus._M_p; }
   13272:	48 8b bc 24 a0 00 00 	mov    rdi,QWORD PTR [rsp+0xa0]
   13279:	00 
      }
   1327a:	e9 8e f5 ff ff       	jmp    1280d <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x2bd>
		      __builtin_memmove(__start + __p + __extras,
   1327f:	4b 8d 3c 08          	lea    rdi,[r8+r9*1]
					__start + __p,
   13283:	4a 8d 2c 0b          	lea    rbp,[rbx+r9*1]
		      __builtin_memmove(__start + __p + __extras,
   13287:	4c 89 fa             	mov    rdx,r15
   1328a:	4c 89 54 24 38       	mov    QWORD PTR [rsp+0x38],r10
   1328f:	4c 29 ca             	sub    rdx,r9
   13292:	48 01 df             	add    rdi,rbx
   13295:	48 89 ee             	mov    rsi,rbp
   13298:	4c 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],r9
   1329d:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
   132a2:	e8 79 00 ff ff       	call   3320 <memmove@plt>
		      if (__d == __p)
   132a7:	4c 8b 4c 24 28       	mov    r9,QWORD PTR [rsp+0x28]
   132ac:	4c 8b 54 24 38       	mov    r10,QWORD PTR [rsp+0x38]
   132b1:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   132b6:	4d 39 d1             	cmp    r9,r10
   132b9:	75 09                	jne    132c4 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd74>
			__start[__p++] = '.';
   132bb:	c6 45 00 2e          	mov    BYTE PTR [rbp+0x0],0x2e
		      __builtin_memset(__start + __p, '0', __z);
   132bf:	4a 8d 6c 0b 01       	lea    rbp,[rbx+r9*1+0x1]
   132c4:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
   132c9:	be 30 00 00 00       	mov    esi,0x30
   132ce:	48 89 ef             	mov    rdi,rbp
   132d1:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
   132d6:	e8 65 fe fe ff       	call   3140 <memset@plt>
		      __narrow_str = {__s.data(), __s.size() + __extras};
   132db:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
	  if (_M_spec._M_localized && __builtin_isfinite(__v))
   132e0:	41 0f b6 04 24       	movzx  eax,BYTE PTR [r12]
		      __narrow_str = {__s.data(), __s.size() + __extras};
   132e5:	4d 01 c7             	add    r15,r8
      basic_string_view(const _CharT* __str, size_type __len) noexcept
   132e8:	e9 12 fd ff ff       	jmp    12fff <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xaaf>
	      if (__trailing_zeros && __prec != 0)
   132ed:	4d 89 d1             	mov    r9,r10
	      if (size_t __extras = int(__d == __p) + __z) // How many to add.
   132f0:	41 b8 01 00 00 00    	mov    r8d,0x1
   132f6:	e9 2f fa ff ff       	jmp    12d2a <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7da>
   132fb:	bd 1d 00 00 00       	mov    ebp,0x1d
   13300:	be 1e 00 00 00       	mov    esi,0x1e
   13305:	e9 97 fb ff ff       	jmp    12ea1 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x951>
		    __p = __s.size();
   1330a:	4d 89 f9             	mov    r9,r15
   1330d:	e9 d4 f3 ff ff       	jmp    126e6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x196>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
   13312:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   13317:	4d 89 f8             	mov    r8,r15
   1331a:	31 d2                	xor    edx,edx
   1331c:	e8 4f 45 ff ff       	call   7870 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
      { return _M_dataplus._M_p; }
   13321:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
   13326:	e9 05 fb ff ff       	jmp    12e30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   1332b:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   13330:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
   13335:	41 b8 30 00 00 00    	mov    r8d,0x30
   1333b:	31 d2                	xor    edx,edx
   1333d:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   13342:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
   13347:	e8 24 12 ff ff       	call   4570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [clone .isra.0]>
   1334c:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
   13351:	e9 6c fa ff ff       	jmp    12dc2 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x872>
	this->push_back(__c);
   13356:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
   1335b:	be 2e 00 00 00       	mov    esi,0x2e
   13360:	e8 5b 4e ff ff       	call   81c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
   13365:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
	return *this;
   1336a:	e9 47 fa ff ff       	jmp    12db6 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x866>
	return _M_is_local() ? size_type(_S_local_capacity)
   1336f:	ba 0f 00 00 00       	mov    edx,0xf
   13374:	e9 8b fa ff ff       	jmp    12e04 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8b4>
   13379:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   1337c:	88 07                	mov    BYTE PTR [rdi],al
      { return _M_dataplus._M_p; }
   1337e:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
      }
   13383:	e9 a8 fa ff ff       	jmp    12e30 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x8e0>
	__c1 = __c2;
   13388:	0f b6 94 24 b0 00 00 	movzx  edx,BYTE PTR [rsp+0xb0]
   1338f:	00 
   13390:	88 10                	mov    BYTE PTR [rax],dl
      { return _M_string_length; }
   13392:	4c 8b 84 24 a8 00 00 	mov    r8,QWORD PTR [rsp+0xa8]
   13399:	00 
      { return _M_dataplus._M_p; }
   1339a:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
   133a1:	00 
      }
   133a2:	e9 be fe ff ff       	jmp    13265 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd15>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   133a7:	48 8b 8c 24 b0 00 00 	mov    rcx,QWORD PTR [rsp+0xb0]
   133ae:	00 
   133af:	49 89 f0             	mov    r8,rsi
   133b2:	48 89 08             	mov    QWORD PTR [rax],rcx
   133b5:	89 d1                	mov    ecx,edx
   133b7:	48 8b 7c 0e f8       	mov    rdi,QWORD PTR [rsi+rcx*1-0x8]
   133bc:	48 89 7c 08 f8       	mov    QWORD PTR [rax+rcx*1-0x8],rdi
   133c1:	48 8d 78 08          	lea    rdi,[rax+0x8]
   133c5:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
   133c9:	48 29 f8             	sub    rax,rdi
   133cc:	48 89 c1             	mov    rcx,rax
   133cf:	49 29 c0             	sub    r8,rax
   133d2:	01 d1                	add    ecx,edx
   133d4:	83 e1 f8             	and    ecx,0xfffffff8
   133d7:	83 f9 08             	cmp    ecx,0x8
   133da:	0f 82 6f fe ff ff    	jb     1324f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcff>
   133e0:	83 e1 f8             	and    ecx,0xfffffff8
   133e3:	31 c0                	xor    eax,eax
   133e5:	89 c2                	mov    edx,eax
   133e7:	83 c0 08             	add    eax,0x8
   133ea:	4d 8b 0c 10          	mov    r9,QWORD PTR [r8+rdx*1]
   133ee:	4c 89 0c 17          	mov    QWORD PTR [rdi+rdx*1],r9
   133f2:	39 c8                	cmp    eax,ecx
   133f4:	72 ef                	jb     133e5 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xe95>
   133f6:	e9 54 fe ff ff       	jmp    1324f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xcff>
	  _M_overflow();
   133fb:	48 8b 07             	mov    rax,QWORD PTR [rdi]
   133fe:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
   13403:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
   13408:	ff 10                	call   QWORD PTR [rax]
   1340a:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
   1340f:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
      }
   13414:	e9 c1 f5 ff ff       	jmp    129da <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x48a>
   13419:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [rsp+0xb0]
   13420:	89 10                	mov    DWORD PTR [rax],edx
   13422:	8b 54 0e fc          	mov    edx,DWORD PTR [rsi+rcx*1-0x4]
   13426:	89 54 08 fc          	mov    DWORD PTR [rax+rcx*1-0x4],edx
   1342a:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   13431:	00 
   13432:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   13439:	00 
   1343a:	e9 20 fe ff ff       	jmp    1325f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0f>
   1343f:	0f b7 54 0e fe       	movzx  edx,WORD PTR [rsi+rcx*1-0x2]
   13444:	66 89 54 08 fe       	mov    WORD PTR [rax+rcx*1-0x2],dx
   13449:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
   13450:	00 
   13451:	48 8b 94 24 a8 00 00 	mov    rdx,QWORD PTR [rsp+0xa8]
   13458:	00 
   13459:	e9 01 fe ff ff       	jmp    1325f <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0xd0f>
	  __throw_length_error(__N(__s));
   1345e:	48 8d 3d 56 1d 00 00 	lea    rdi,[rip+0x1d56]        # 151bb <CSWTCH.1110+0xdb>
   13465:	e8 c6 fc fe ff       	call   3130 <std::__throw_length_error(char const*)@plt>
      __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > __size "
   1346a:	4c 89 f9             	mov    rcx,r15
   1346d:	4c 89 ca             	mov    rdx,r9
   13470:	48 8d 35 b1 1d 00 00 	lea    rsi,[rip+0x1db1]        # 15228 <CSWTCH.1110+0x148>
   13477:	31 c0                	xor    eax,eax
   13479:	48 8d 3d 80 1f 00 00 	lea    rdi,[rip+0x1f80]        # 15400 <CSWTCH.1110+0x320>
   13480:	e8 5b fe fe ff       	call   32e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
   13485:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   1348c:	00 00 00 
   1348f:	90                   	nop

0000000000013490 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const>:
	_M_is_break(_Gcb_property __p1, _Gcb_property __p2,
		    _U32_iterator __curr) const
	{
	  using enum _Gcb_property;

	  if (__p1 == _Gcb_Control || __p1 == _Gcb_LF)
   13490:	8d 46 ff             	lea    eax,[rsi-0x1]
   13493:	83 f8 01             	cmp    eax,0x1
   13496:	0f 86 24 01 00 00    	jbe    135c0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x130>
	_M_is_break(_Gcb_property __p1, _Gcb_property __p2,
   1349c:	41 57                	push   r15
   1349e:	41 56                	push   r14
   134a0:	41 55                	push   r13
   134a2:	41 54                	push   r12
   134a4:	55                   	push   rbp
   134a5:	89 d5                	mov    ebp,edx
   134a7:	48 83 ec 40          	sub    rsp,0x40
	    return true; // Break after Control or LF.

	  if (__p1 == _Gcb_CR)
	    return __p2 != _Gcb_LF; // Do not break between a CR and LF.
   134ab:	83 fa 02             	cmp    edx,0x2
   134ae:	0f 95 c0             	setne  al
	  if (__p1 == _Gcb_CR)
   134b1:	83 fe 03             	cmp    esi,0x3
   134b4:	74 30                	je     134e6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>

	  // Rule GB5
	  if (__p2 == _Gcb_Control || __p2 == _Gcb_CR || __p2 == _Gcb_LF)
   134b6:	8d 42 ff             	lea    eax,[rdx-0x1]
   134b9:	83 f8 02             	cmp    eax,0x2
   134bc:	76 62                	jbe    13520 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x90>
   134be:	8d 46 f9             	lea    eax,[rsi-0x7]
   134c1:	49 89 fc             	mov    r12,rdi
   134c4:	83 f8 05             	cmp    eax,0x5
   134c7:	77 67                	ja     13530 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xa0>
   134c9:	48 8d 15 58 26 00 00 	lea    rdx,[rip+0x2658]        # 15b28 <CSWTCH.1110+0xa48>
   134d0:	48 63 04 82          	movsxd rax,DWORD PTR [rdx+rax*4]
   134d4:	48 01 d0             	add    rax,rdx
   134d7:	ff e0                	jmp    rax
   134d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		return true;
	      }

	  // Rule GB8
	  if (__p1 == _Gcb_LVT || __p1 == _Gcb_T)
	    return __p2 != _Gcb_T; // Do not break Hangul syllable sequences.
   134e0:	83 fd 09             	cmp    ebp,0x9
   134e3:	0f 95 c0             	setne  al
	  if (__p1 == _Gcb_property::_Gcb_Regional_Indicator && __p1 == __p2)
	    return (_M_RI_count & 1) == 0;

	  // Rule GB999
	  return true; // Otherwise, break everywhere.
	}
   134e6:	48 83 c4 40          	add    rsp,0x40
   134ea:	5d                   	pop    rbp
   134eb:	41 5c                	pop    r12
   134ed:	41 5d                	pop    r13
   134ef:	41 5e                	pop    r14
   134f1:	41 5f                	pop    r15
   134f3:	c3                   	ret
   134f4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	    switch (__p2)
   134f8:	83 ed 08             	sub    ebp,0x8
   134fb:	83 fd 01             	cmp    ebp,0x1
   134fe:	0f 97 c0             	seta   al
   13501:	eb e3                	jmp    134e6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13503:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	    switch (__p2)
   13508:	83 fd 08             	cmp    ebp,0x8
   1350b:	7f 4b                	jg     13558 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xc8>
   1350d:	83 fd 06             	cmp    ebp,0x6
   13510:	7f 3b                	jg     1354d <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xbd>
   13512:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13519:	00 00 00 00 
   1351d:	0f 1f 00             	nop    DWORD PTR [rax]
	    return true; // Break after Control or LF.
   13520:	b8 01 00 00 00       	mov    eax,0x1
   13525:	eb bf                	jmp    134e6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13527:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   1352e:	00 00 
	  if (__p2 == _Gcb_Extend || __p2 == _Gcb_ZWJ)
   13530:	89 e8                	mov    eax,ebp
   13532:	83 e0 fd             	and    eax,0xfffffffd
   13535:	83 f8 04             	cmp    eax,0x4
   13538:	0f 94 c0             	sete   al
	  if (__p1 == _Gcb_Prepend)
   1353b:	83 fe 05             	cmp    esi,0x5
   1353e:	0f 94 c2             	sete   dl
   13541:	09 d0                	or     eax,edx
	  if (__p2 == _Gcb_Extend || __p2 == _Gcb_ZWJ)
   13543:	83 fd 0a             	cmp    ebp,0xa
   13546:	0f 94 c2             	sete   dl
	  if (__p1 == _Gcb_Prepend)
   13549:	08 d0                	or     al,dl
   1354b:	74 1b                	je     13568 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xd8>
		return false; // Do not break Hangul syllable sequences.
   1354d:	31 c0                	xor    eax,eax
   1354f:	eb 95                	jmp    134e6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13551:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	    switch (__p2)
   13558:	83 ed 0b             	sub    ebp,0xb
   1355b:	83 fd 01             	cmp    ebp,0x1
   1355e:	77 c0                	ja     13520 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x90>
		return false; // Do not break Hangul syllable sequences.
   13560:	31 c0                	xor    eax,eax
   13562:	eb 82                	jmp    134e6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   13564:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (_M_incb_linker_seen
   13568:	45 0f b6 6c 24 0a    	movzx  r13d,BYTE PTR [r12+0xa]
		&& __incb_property(*__curr) == _InCB::_Consonant)
   1356e:	45 84 ed             	test   r13b,r13b
   13571:	74 13                	je     13586 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
    if ((__c << 2) < __incb_edges[0]) [[likely]]
   13573:	41 8b 0c 24          	mov    ecx,DWORD PTR [r12]
   13577:	8d 14 8d 00 00 00 00 	lea    edx,[rcx*4+0x0]
   1357e:	81 fa 01 0c 00 00    	cmp    edx,0xc01
   13584:	77 40                	ja     135c6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x136>
	  if (__p1 == _Gcb_ZWJ && _M_xpicto_seq_state == _XPicto::_Matched)
   13586:	83 fe 0a             	cmp    esi,0xa
   13589:	74 1d                	je     135a8 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x118>
	  if (__p1 == _Gcb_property::_Gcb_Regional_Indicator && __p1 == __p2)
   1358b:	83 fe 0d             	cmp    esi,0xd
   1358e:	75 90                	jne    13520 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x90>
   13590:	39 ee                	cmp    esi,ebp
   13592:	75 8c                	jne    13520 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x90>
	    return (_M_RI_count & 1) == 0;
   13594:	41 0f b6 44 24 09    	movzx  eax,BYTE PTR [r12+0x9]
   1359a:	f7 d0                	not    eax
   1359c:	83 e0 01             	and    eax,0x1
   1359f:	e9 42 ff ff ff       	jmp    134e6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   135a4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	  if (__p1 == _Gcb_ZWJ && _M_xpicto_seq_state == _XPicto::_Matched)
   135a8:	41 80 7c 24 08 02    	cmp    BYTE PTR [r12+0x8],0x2
   135ae:	0f 95 c0             	setne  al
   135b1:	e9 30 ff ff ff       	jmp    134e6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
   135b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   135bd:	00 00 00 
	    return true; // Break after Control or LF.
   135c0:	b8 01 00 00 00       	mov    eax,0x1
	}
   135c5:	c3                   	ret
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
   135c6:	83 ca 03             	or     edx,0x3
		  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);
   135c9:	b9 85 01 00 00       	mov    ecx,0x185

      while (__len > 0)
   135ce:	4c 8d 05 eb 2d 00 00 	lea    r8,[rip+0x2deb]        # 163c0 <std::__unicode::__v15_1_0::__incb_edges>
   135d5:	48 85 c9             	test   rcx,rcx
   135d8:	7e 22                	jle    135fc <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x16c>
	{
	  _DistanceType __half = __len >> 1;
   135da:	49 89 c9             	mov    r9,rcx
   135dd:	49 d1 f9             	sar    r9,1
	__i += __n;
   135e0:	4b 8d 3c 88          	lea    rdi,[r8+r9*4]
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   135e4:	39 17                	cmp    DWORD PTR [rdi],edx
   135e6:	0f 83 a4 01 00 00    	jae    13790 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x300>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   135ec:	4c 29 c9             	sub    rcx,r9
	      ++__first;
   135ef:	4c 8d 47 04          	lea    r8,[rdi+0x4]
	      __len = __len - __half - 1;
   135f3:	48 83 e9 01          	sub    rcx,0x1
      while (__len > 0)
   135f7:	48 85 c9             	test   rcx,rcx
   135fa:	7f de                	jg     135da <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x14a>
    return _InCB(__p[-1] & __mask);
   135fc:	41 8b 50 fc          	mov    edx,DWORD PTR [r8-0x4]
   13600:	83 e2 03             	and    edx,0x3
		&& __incb_property(_M_c) == _InCB::_Consonant
   13603:	83 fa 01             	cmp    edx,0x1
   13606:	0f 85 7a ff ff ff    	jne    13586 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
      operator*() const { return _M_buf[_M_buf_index]; }
   1360c:	0f b6 94 24 88 00 00 	movzx  edx,BYTE PTR [rsp+0x88]
   13613:	00 
   13614:	49 89 d6             	mov    r14,rdx
    if ((__c << 2) < __incb_edges[0]) [[likely]]
   13617:	8b 54 94 70          	mov    edx,DWORD PTR [rsp+rdx*4+0x70]
   1361b:	c1 e2 02             	shl    edx,0x2
   1361e:	81 fa 01 0c 00 00    	cmp    edx,0xc01
   13624:	0f 86 5c ff ff ff    	jbe    13586 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
   1362a:	83 ca 03             	or     edx,0x3
      _DistanceType __len = std::distance(__first, __last);
   1362d:	b9 85 01 00 00       	mov    ecx,0x185
      while (__len > 0)
   13632:	4c 8d 05 87 2d 00 00 	lea    r8,[rip+0x2d87]        # 163c0 <std::__unicode::__v15_1_0::__incb_edges>
   13639:	48 85 c9             	test   rcx,rcx
   1363c:	7e 22                	jle    13660 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x1d0>
	  _DistanceType __half = __len >> 1;
   1363e:	49 89 c9             	mov    r9,rcx
   13641:	49 d1 f9             	sar    r9,1
   13644:	4b 8d 3c 88          	lea    rdi,[r8+r9*4]
	  if (__comp(__middle, __val))
   13648:	39 17                	cmp    DWORD PTR [rdi],edx
   1364a:	0f 83 a2 01 00 00    	jae    137f2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x362>
	      __len = __len - __half - 1;
   13650:	4c 29 c9             	sub    rcx,r9
	      ++__first;
   13653:	4c 8d 47 04          	lea    r8,[rdi+0x4]
	      __len = __len - __half - 1;
   13657:	48 83 e9 01          	sub    rcx,0x1
      while (__len > 0)
   1365b:	48 85 c9             	test   rcx,rcx
   1365e:	7f de                	jg     1363e <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x1ae>
    return _InCB(__p[-1] & __mask);
   13660:	41 8b 50 fc          	mov    edx,DWORD PTR [r8-0x4]
   13664:	83 e2 03             	and    edx,0x3
		&& __incb_property(*__curr) == _InCB::_Consonant)
   13667:	83 ea 01             	sub    edx,0x1
   1366a:	0f 85 16 ff ff ff    	jne    13586 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
	      auto __it = _M_base;
   13670:	f3 41 0f 6f 44 24 10 	movdqu xmm0,XMMWORD PTR [r12+0x10]
   13677:	49 8b 54 24 30       	mov    rdx,QWORD PTR [r12+0x30]
   1367c:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
   13681:	f3 41 0f 6f 44 24 20 	movdqu xmm0,XMMWORD PTR [r12+0x20]
   13688:	48 89 54 24 30       	mov    QWORD PTR [rsp+0x30],rdx
   1368d:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
   13692:	4c 8b bc 24 80 00 00 	mov    r15,QWORD PTR [rsp+0x80]
   13699:	00 
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
   1369a:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [rsp+0x28]
   1369f:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   136a4:	0f b6 d1             	movzx  edx,cl
   136a7:	0f b6 7c 24 29       	movzx  edi,BYTE PTR [rsp+0x29]
   136ac:	83 c2 01             	add    edx,0x1
   136af:	39 fa                	cmp    edx,edi
   136b1:	0f 84 e1 00 00 00    	je     13798 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x308>
	else if (_M_buf_index + 1 < _M_buf_last)
   136b7:	7d 07                	jge    136c0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x230>
	  ++_M_buf_index;
   136b9:	83 c1 01             	add    ecx,0x1
   136bc:	88 4c 24 28          	mov    BYTE PTR [rsp+0x28],cl
		   && __lhs._M_buf_index == __rhs._M_buf_index;
   136c0:	4d 39 c7             	cmp    r15,r8
   136c3:	40 0f 94 c7          	sete   dil
   136c7:	41 38 ce             	cmp    r14b,cl
   136ca:	0f 94 c2             	sete   dl
   136cd:	40 84 d7             	test   dil,dl
   136d0:	0f 85 24 01 00 00    	jne    137fa <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x36a>
      operator*() const { return _M_buf[_M_buf_index]; }
   136d6:	0f b6 d1             	movzx  edx,cl
   136d9:	8b 54 94 10          	mov    edx,DWORD PTR [rsp+rdx*4+0x10]
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(__first))
   136dd:	81 fa 4d 09 00 00    	cmp    edx,0x94d
   136e3:	0f 84 f9 00 00 00    	je     137e2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	    return __first;
	  ++__first;

	  if (__pred(__first))
   136e9:	81 fa cd 09 00 00    	cmp    edx,0x9cd
   136ef:	0f 84 ed 00 00 00    	je     137e2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	    return __first;
	  ++__first;

	  if (__pred(__first))
   136f5:	81 fa cd 0a 00 00    	cmp    edx,0xacd
   136fb:	0f 84 e1 00 00 00    	je     137e2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	    return __first;
	  ++__first;

	  if (__pred(__first))
   13701:	81 fa 4d 0b 00 00    	cmp    edx,0xb4d
   13707:	0f 84 d5 00 00 00    	je     137e2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	  if (__pred(__first))
	    return __first;
	  ++__first;
	  // FALLTHRU
	case 2:
	  if (__pred(__first))
   1370d:	81 fa 4d 0c 00 00    	cmp    edx,0xc4d
   13713:	0f 84 c9 00 00 00    	je     137e2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
	    return __first;
	  ++__first;
	  // FALLTHRU
	case 1:
	  if (__pred(__first))
   13719:	81 fa 4d 0d 00 00    	cmp    edx,0xd4d
   1371f:	0f 84 bd 00 00 00    	je     137e2 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x352>
    if ((__c << 2) < __incb_edges[0]) [[likely]]
   13725:	c1 e2 02             	shl    edx,0x2
   13728:	81 fa 01 0c 00 00    	cmp    edx,0xc01
   1372e:	0f 86 52 fe ff ff    	jbe    13586 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
    auto* __p = std::lower_bound(__incb_edges, __end, (__c << 2) | __mask);
   13734:	83 ca 03             	or     edx,0x3
      _DistanceType __len = std::distance(__first, __last);
   13737:	b9 85 01 00 00       	mov    ecx,0x185
      while (__len > 0)
   1373c:	4c 8d 05 7d 2c 00 00 	lea    r8,[rip+0x2c7d]        # 163c0 <std::__unicode::__v15_1_0::__incb_edges>
   13743:	48 85 c9             	test   rcx,rcx
   13746:	7e 22                	jle    1376a <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x2da>
	  _DistanceType __half = __len >> 1;
   13748:	49 89 c9             	mov    r9,rcx
   1374b:	49 d1 f9             	sar    r9,1
   1374e:	4b 8d 3c 88          	lea    rdi,[r8+r9*4]
	  if (__comp(__middle, __val))
   13752:	39 17                	cmp    DWORD PTR [rdi],edx
   13754:	0f 83 90 00 00 00    	jae    137ea <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x35a>
	      __len = __len - __half - 1;
   1375a:	4c 29 c9             	sub    rcx,r9
	      ++__first;
   1375d:	4c 8d 47 04          	lea    r8,[rdi+0x4]
	      __len = __len - __half - 1;
   13761:	48 83 e9 01          	sub    rcx,0x1
      while (__len > 0)
   13765:	48 85 c9             	test   rcx,rcx
   13768:	7f de                	jg     13748 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x2b8>
    return _InCB(__p[-1] & __mask);
   1376a:	41 8b 50 fc          	mov    edx,DWORD PTR [r8-0x4]
   1376e:	83 e2 03             	and    edx,0x3
		      if (__incb == _InCB::_Consonant)
   13771:	83 fa 01             	cmp    edx,0x1
   13774:	0f 84 9b 00 00 00    	je     13815 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x385>
		      else if (__incb != _InCB::_Extend)
   1377a:	83 fa 02             	cmp    edx,0x2
   1377d:	0f 84 0f ff ff ff    	je     13692 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x202>
   13783:	e9 fe fd ff ff       	jmp    13586 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
   13788:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1378f:	00 
	    __len = __half;
   13790:	4c 89 c9             	mov    rcx,r9
   13793:	e9 3d fe ff ff       	jmp    135d5 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x145>
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
   13798:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
   1379d:	49 39 d0             	cmp    r8,rdx
   137a0:	0f 84 1a ff ff ff    	je     136c0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x230>
   137a6:	0f b6 4c 24 2a       	movzx  ecx,BYTE PTR [rsp+0x2a]
   137ab:	49 01 c8             	add    r8,rcx
   137ae:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
	    if (_M_curr() == _M_last)
   137b3:	49 39 d0             	cmp    r8,rdx
   137b6:	74 51                	je     13809 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x379>
	  _M_read_utf8();
   137b8:	48 8d 7c 24 10       	lea    rdi,[rsp+0x10]
   137bd:	89 74 24 0c          	mov    DWORD PTR [rsp+0xc],esi
   137c1:	88 44 24 0b          	mov    BYTE PTR [rsp+0xb],al
   137c5:	e8 36 35 ff ff       	call   6d00 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
   137ca:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
   137cf:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [rsp+0x28]
      }
   137d4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [rsp+0xb]
   137d9:	8b 74 24 0c          	mov    esi,DWORD PTR [rsp+0xc]
   137dd:	e9 de fe ff ff       	jmp    136c0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x230>
   137e2:	44 89 e8             	mov    eax,r13d
   137e5:	e9 ba fe ff ff       	jmp    136a4 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x214>
   137ea:	4c 89 c9             	mov    rcx,r9
   137ed:	e9 51 ff ff ff       	jmp    13743 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x2b3>
   137f2:	4c 89 c9             	mov    rcx,r9
   137f5:	e9 3f fe ff ff       	jmp    13639 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x1a9>
	      if (__it == __curr && __have_linker)
   137fa:	84 c0                	test   al,al
   137fc:	0f 84 84 fd ff ff    	je     13586 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0xf6>
		return false; // Do not break Hangul syllable sequences.
   13802:	31 c0                	xor    eax,eax
   13804:	e9 dd fc ff ff       	jmp    134e6 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x56>
	      _M_buf_index = 0;
   13809:	c6 44 24 28 00       	mov    BYTE PTR [rsp+0x28],0x0
   1380e:	31 c9                	xor    ecx,ecx
   13810:	e9 ab fe ff ff       	jmp    136c0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x230>
			__have_linker = false;
   13815:	31 c0                	xor    eax,eax
   13817:	e9 76 fe ff ff       	jmp    13692 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const+0x202>
   1381c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000013820 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()>:
	operator++()
   13820:	41 57                	push   r15
   13822:	41 56                	push   r14
   13824:	41 55                	push   r13
   13826:	41 54                	push   r12
   13828:	55                   	push   rbp
   13829:	53                   	push   rbx
   1382a:	48 89 fb             	mov    rbx,rdi
   1382d:	48 83 ec 58          	sub    rsp,0x58
      end() const { return _M_last; }
   13831:	48 8b 47 30          	mov    rax,QWORD PTR [rdi+0x30]
   13835:	48 8b 77 20          	mov    rsi,QWORD PTR [rdi+0x20]
   13839:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
   1383e:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
	  if (_M_base != __end)
   13843:	48 39 f0             	cmp    rax,rsi
   13846:	0f 84 99 02 00 00    	je     13ae5 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x2c5>
	      auto __it = _M_base;
   1384c:	f3 0f 6f 47 10       	movdqu xmm0,XMMWORD PTR [rdi+0x10]
	      auto __p_prev = _M_prop;
   13851:	8b 77 04             	mov    esi,DWORD PTR [rdi+0x4]
	      auto __it = _M_base;
   13854:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
   13859:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
   1385e:	f3 0f 6f 47 20       	movdqu xmm0,XMMWORD PTR [rdi+0x20]
   13863:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
   13868:	44 0f b6 4c 24 38    	movzx  r9d,BYTE PTR [rsp+0x38]
   1386e:	0f b6 54 24 39       	movzx  edx,BYTE PTR [rsp+0x39]
   13873:	41 0f b6 c1          	movzx  eax,r9b
   13877:	83 c0 01             	add    eax,0x1
   1387a:	39 d0                	cmp    eax,edx
   1387c:	0f 84 65 01 00 00    	je     139e7 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x1c7>
   13882:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13889:	00 00 00 00 
   1388d:	0f 1f 00             	nop    DWORD PTR [rax]
	else if (_M_buf_index + 1 < _M_buf_last)
   13890:	7d 09                	jge    1389b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x7b>
	  ++_M_buf_index;
   13892:	41 83 c1 01          	add    r9d,0x1
   13896:	44 88 4c 24 38       	mov    BYTE PTR [rsp+0x38],r9b
	      while (++__it != __end)
   1389b:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   138a0:	48 39 4c 24 18       	cmp    QWORD PTR [rsp+0x18],rcx
   138a5:	0f 84 0d 02 00 00    	je     13ab8 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x298>
      operator*() const { return _M_buf[_M_buf_index]; }
   138ab:	0f b6 44 24 38       	movzx  eax,BYTE PTR [rsp+0x38]
      while (__len > 0)
   138b0:	4c 8d 15 29 31 00 00 	lea    r10,[rip+0x3129]        # 169e0 <std::__unicode::__v15_1_0::__gcb_edges>
   138b7:	44 8b 44 84 20       	mov    r8d,DWORD PTR [rsp+rax*4+0x20]
   138bc:	49 89 c1             	mov    r9,rax
      _DistanceType __len = std::distance(__first, __last);
   138bf:	b8 a4 06 00 00       	mov    eax,0x6a4
				 (__c << __gcb_shift_bits) | __mask);
   138c4:	45 89 c3             	mov    r11d,r8d
   138c7:	41 c1 e3 04          	shl    r11d,0x4
   138cb:	41 83 cb 0f          	or     r11d,0xf
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
   138cf:	90                   	nop
      while (__len > 0)
   138d0:	48 85 c0             	test   rax,rax
   138d3:	7e 23                	jle    138f8 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0xd8>
	  _DistanceType __half = __len >> 1;
   138d5:	48 89 c2             	mov    rdx,rax
   138d8:	48 d1 fa             	sar    rdx,1
   138db:	49 8d 3c 92          	lea    rdi,[r10+rdx*4]
	  if (__comp(__middle, __val))
   138df:	44 39 1f             	cmp    DWORD PTR [rdi],r11d
   138e2:	0f 83 50 01 00 00    	jae    13a38 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x218>
	      __len = __len - __half - 1;
   138e8:	48 29 d0             	sub    rax,rdx
	      ++__first;
   138eb:	4c 8d 57 04          	lea    r10,[rdi+0x4]
	      __len = __len - __half - 1;
   138ef:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   138f3:	48 85 c0             	test   rax,rax
   138f6:	7f dd                	jg     138d5 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0xb5>
    return _Gcb_property(__p[-1] & __mask);
   138f8:	41 8b 52 fc          	mov    edx,DWORD PTR [r10-0x4]
      if (_M_xpicto_seq_state == _XPicto::_Failed)
   138fc:	0f b6 43 08          	movzx  eax,BYTE PTR [rbx+0x8]
    return _Gcb_property(__p[-1] & __mask);
   13900:	83 e2 0f             	and    edx,0xf
      if (_M_xpicto_seq_state == _XPicto::_Failed)
   13903:	3c 03                	cmp    al,0x3
   13905:	74 1e                	je     13925 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x105>
      if (_M_xpicto_seq_state != _XPicto::_Zwj) // i.e. Init or Matched
   13907:	3c 01                	cmp    al,0x1
   13909:	0f 84 81 01 00 00    	je     13a90 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x270>
	  if (__p == _Gcb_property::_Gcb_ZWJ)
   1390f:	83 fa 0a             	cmp    edx,0xa
   13912:	0f 84 e8 01 00 00    	je     13b00 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x2e0>
	  else if (__p == _Gcb_property::_Gcb_Extend)
   13918:	83 fa 04             	cmp    edx,0x4
   1391b:	0f 84 3f 01 00 00    	je     13a60 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x240>
      _M_xpicto_seq_state = __next_state;
   13921:	c6 43 08 03          	mov    BYTE PTR [rbx+0x8],0x3
      if (__p == _Gcb_property::_Gcb_Regional_Indicator)
   13925:	83 fa 0d             	cmp    edx,0xd
   13928:	0f 85 32 01 00 00    	jne    13a60 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x240>
	++_M_RI_count;
   1392e:	0f b6 43 09          	movzx  eax,BYTE PTR [rbx+0x9]
   13932:	83 c0 01             	add    eax,0x1
   13935:	88 43 09             	mov    BYTE PTR [rbx+0x9],al
	  if (__pred(__first))
   13938:	44 89 c0             	mov    eax,r8d
   1393b:	24 7f                	and    al,0x7f
   1393d:	3d 4d 09 00 00       	cmp    eax,0x94d
   13942:	0f 84 38 01 00 00    	je     13a80 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x260>
	  if (__pred(__first))
   13948:	41 8d 80 33 f5 ff ff 	lea    eax,[r8-0xacd]
   1394f:	a9 7f ff ff ff       	test   eax,0xffffff7f
   13954:	0f 84 26 01 00 00    	je     13a80 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x260>
	  if (__pred(__first))
   1395a:	44 89 c0             	mov    eax,r8d
   1395d:	80 e4 fe             	and    ah,0xfe
   13960:	3d 4d 0c 00 00       	cmp    eax,0xc4d
   13965:	0f 84 15 01 00 00    	je     13a80 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x260>
   1396b:	44 89 44 24 0c       	mov    DWORD PTR [rsp+0xc],r8d
		  if (_M_is_break(__p_prev, __p, __it))
   13970:	48 83 ec 30          	sub    rsp,0x30
   13974:	48 89 df             	mov    rdi,rbx
   13977:	44 88 4c 24 3b       	mov    BYTE PTR [rsp+0x3b],r9b
   1397c:	4c 8b 74 24 50       	mov    r14,QWORD PTR [rsp+0x50]
   13981:	4c 8b 7c 24 58       	mov    r15,QWORD PTR [rsp+0x58]
   13986:	4c 8b 64 24 60       	mov    r12,QWORD PTR [rsp+0x60]
   1398b:	89 54 24 34          	mov    DWORD PTR [rsp+0x34],edx
   1398f:	4c 8b 6c 24 68       	mov    r13,QWORD PTR [rsp+0x68]
   13994:	48 8b 6c 24 70       	mov    rbp,QWORD PTR [rsp+0x70]
   13999:	4c 89 34 24          	mov    QWORD PTR [rsp],r14
   1399d:	4c 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],r15
   139a2:	4c 89 64 24 10       	mov    QWORD PTR [rsp+0x10],r12
   139a7:	4c 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],r13
   139ac:	48 89 6c 24 20       	mov    QWORD PTR [rsp+0x20],rbp
   139b1:	e8 da fa ff ff       	call   13490 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::_M_is_break(std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::__v15_1_0::_Gcb_property, std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>) const>
   139b6:	48 83 c4 30          	add    rsp,0x30
   139ba:	8b 54 24 04          	mov    edx,DWORD PTR [rsp+0x4]
   139be:	44 0f b6 4c 24 0b    	movzx  r9d,BYTE PTR [rsp+0xb]
   139c4:	84 c0                	test   al,al
   139c6:	44 8b 44 24 0c       	mov    r8d,DWORD PTR [rsp+0xc]
   139cb:	0f 85 86 01 00 00    	jne    13b57 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x337>
		  __p_prev = __p;
   139d1:	89 d6                	mov    esi,edx
	if (_M_buf_index + 1 == _M_buf_last && _M_curr() != _M_last)
   139d3:	41 0f b6 c1          	movzx  eax,r9b
   139d7:	0f b6 54 24 39       	movzx  edx,BYTE PTR [rsp+0x39]
   139dc:	83 c0 01             	add    eax,0x1
   139df:	39 d0                	cmp    eax,edx
   139e1:	0f 85 a9 fe ff ff    	jne    13890 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x70>
   139e7:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   139ec:	48 39 4c 24 18       	cmp    QWORD PTR [rsp+0x18],rcx
   139f1:	0f 84 c1 00 00 00    	je     13ab8 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x298>
   139f7:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [rsp+0x3a]
   139fc:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   13a01:	48 01 c1             	add    rcx,rax
   13a04:	48 89 4c 24 30       	mov    QWORD PTR [rsp+0x30],rcx
	    if (_M_curr() == _M_last)
   13a09:	48 39 4c 24 18       	cmp    QWORD PTR [rsp+0x18],rcx
   13a0e:	0f 84 9f 00 00 00    	je     13ab3 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x293>
	  _M_read_utf8();
   13a14:	48 8d 7c 24 20       	lea    rdi,[rsp+0x20]
   13a19:	89 74 24 04          	mov    DWORD PTR [rsp+0x4],esi
   13a1d:	e8 de 32 ff ff       	call   6d00 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
   13a22:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
      }
   13a27:	8b 74 24 04          	mov    esi,DWORD PTR [rsp+0x4]
   13a2b:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
   13a30:	e9 66 fe ff ff       	jmp    1389b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x7b>
   13a35:	0f 1f 00             	nop    DWORD PTR [rax]
	    __len = __half;
   13a38:	48 89 d0             	mov    rax,rdx
   13a3b:	e9 90 fe ff ff       	jmp    138d0 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0xb0>
    return (__p - __xpicto_edges) % 2;
   13a40:	4d 29 d5             	sub    r13,r10
	      else if (__is_extended_pictographic(_M_c))
   13a43:	41 83 e5 04          	and    r13d,0x4
   13a47:	0f 84 d4 00 00 00    	je     13b21 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x301>
      _M_xpicto_seq_state = __next_state;
   13a4d:	c6 43 08 01          	mov    BYTE PTR [rbx+0x8],0x1
      if (__p == _Gcb_property::_Gcb_Regional_Indicator)
   13a51:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13a58:	00 00 00 00 
   13a5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	_M_RI_count = 0;
   13a60:	31 c0                	xor    eax,eax
   13a62:	88 43 09             	mov    BYTE PTR [rbx+0x9],al
	  if (__pred(__first))
   13a65:	44 89 c0             	mov    eax,r8d
   13a68:	24 7f                	and    al,0x7f
   13a6a:	3d 4d 09 00 00       	cmp    eax,0x94d
   13a6f:	0f 85 d3 fe ff ff    	jne    13948 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x128>
   13a75:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13a7c:	00 00 00 00 
	_M_incb_linker_seen = true;
   13a80:	c6 43 0a 01          	mov    BYTE PTR [rbx+0xa],0x1
   13a84:	e9 e2 fe ff ff       	jmp    1396b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x14b>
   13a89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
		&& __is_extended_pictographic(__c))
   13a90:	85 d2                	test   edx,edx
   13a92:	0f 85 89 fe ff ff    	jne    13921 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x101>
    if (__c < __xpicto_edges[0]) [[likely]]
   13a98:	41 81 f8 a8 00 00 00 	cmp    r8d,0xa8
   13a9f:	0f 87 c7 00 00 00    	ja     13b6c <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x34c>
      _M_xpicto_seq_state = __next_state;
   13aa5:	b9 03 00 00 00       	mov    ecx,0x3
   13aaa:	66 89 4b 08          	mov    WORD PTR [rbx+0x8],cx
      for (; __trip_count > 0; --__trip_count)
   13aae:	e9 b8 fe ff ff       	jmp    1396b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x14b>
	      _M_buf_index = 0;
   13ab3:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
   13ab8:	4c 8b 74 24 20       	mov    r14,QWORD PTR [rsp+0x20]
   13abd:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
   13ac2:	4c 8b 64 24 30       	mov    r12,QWORD PTR [rsp+0x30]
   13ac7:	4c 8b 6c 24 38       	mov    r13,QWORD PTR [rsp+0x38]
   13acc:	48 8b 6c 24 40       	mov    rbp,QWORD PTR [rsp+0x40]
	      _M_base = __it;
   13ad1:	4c 89 73 10          	mov    QWORD PTR [rbx+0x10],r14
   13ad5:	4c 89 7b 18          	mov    QWORD PTR [rbx+0x18],r15
   13ad9:	4c 89 63 20          	mov    QWORD PTR [rbx+0x20],r12
   13add:	4c 89 6b 28          	mov    QWORD PTR [rbx+0x28],r13
   13ae1:	48 89 6b 30          	mov    QWORD PTR [rbx+0x30],rbp
	}
   13ae5:	48 83 c4 58          	add    rsp,0x58
   13ae9:	48 89 d8             	mov    rax,rbx
   13aec:	5b                   	pop    rbx
   13aed:	5d                   	pop    rbp
   13aee:	41 5c                	pop    r12
   13af0:	41 5d                	pop    r13
   13af2:	41 5e                	pop    r14
   13af4:	41 5f                	pop    r15
   13af6:	c3                   	ret
   13af7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   13afe:	00 00 
	      if (_M_xpicto_seq_state == _XPicto::_Matched)
   13b00:	3c 02                	cmp    al,0x2
   13b02:	0f 84 45 ff ff ff    	je     13a4d <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x22d>
	      else if (__is_extended_pictographic(_M_c))
   13b08:	8b 3b                	mov    edi,DWORD PTR [rbx]
    if (__c < __xpicto_edges[0]) [[likely]]
   13b0a:	4c 8d 15 2f 26 00 00 	lea    r10,[rip+0x262f]        # 16140 <std::__unicode::__v15_1_0::__xpicto_edges>
		  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);
   13b11:	b8 9c 00 00 00       	mov    eax,0x9c
   13b16:	4d 89 d5             	mov    r13,r10
   13b19:	81 ff a8 00 00 00    	cmp    edi,0xa8
   13b1f:	77 0e                	ja     13b2f <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x30f>
      _M_xpicto_seq_state = __next_state;
   13b21:	c6 43 08 03          	mov    BYTE PTR [rbx+0x8],0x3
	_M_RI_count = 0;
   13b25:	31 c0                	xor    eax,eax
   13b27:	e9 36 ff ff ff       	jmp    13a62 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x242>
	{
	  _DistanceType __half = __len >> 1;
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__val, __middle))
	    __len = __half;
   13b2c:	4c 89 d8             	mov    rax,r11
      while (__len > 0)
   13b2f:	48 85 c0             	test   rax,rax
   13b32:	0f 8e 08 ff ff ff    	jle    13a40 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x220>
	  _DistanceType __half = __len >> 1;
   13b38:	49 89 c3             	mov    r11,rax
   13b3b:	49 d1 fb             	sar    r11,1
   13b3e:	4f 8d 64 9d 00       	lea    r12,[r13+r11*4+0x0]
	  if (__comp(__val, __middle))
   13b43:	41 3b 3c 24          	cmp    edi,DWORD PTR [r12]
   13b47:	72 e3                	jb     13b2c <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x30c>
	  else
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   13b49:	4c 29 d8             	sub    rax,r11
	      ++__first;
   13b4c:	4d 8d 6c 24 04       	lea    r13,[r12+0x4]
	      __len = __len - __half - 1;
   13b51:	48 83 e8 01          	sub    rax,0x1
   13b55:	eb d8                	jmp    13b2f <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x30f>
      _M_xpicto_seq_state = _XPicto::_Init;
   13b57:	31 c0                	xor    eax,eax
      _M_c = __c;
   13b59:	44 89 03             	mov    DWORD PTR [rbx],r8d
      _M_prop = __p;
   13b5c:	89 53 04             	mov    DWORD PTR [rbx+0x4],edx
      _M_xpicto_seq_state = _XPicto::_Init;
   13b5f:	66 89 43 08          	mov    WORD PTR [rbx+0x8],ax
      _M_incb_linker_seen = false;
   13b63:	c6 43 0a 00          	mov    BYTE PTR [rbx+0xa],0x0
    }
   13b67:	e9 65 ff ff ff       	jmp    13ad1 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x2b1>
   13b6c:	4c 8d 15 cd 25 00 00 	lea    r10,[rip+0x25cd]        # 16140 <std::__unicode::__v15_1_0::__xpicto_edges>
      _DistanceType __len = std::distance(__first, __last);
   13b73:	b8 9c 00 00 00       	mov    eax,0x9c
   13b78:	4d 89 d4             	mov    r12,r10
      while (__len > 0)
   13b7b:	48 85 c0             	test   rax,rax
   13b7e:	7e 1f                	jle    13b9f <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x37f>
	  _DistanceType __half = __len >> 1;
   13b80:	48 89 c7             	mov    rdi,rax
   13b83:	48 d1 ff             	sar    rdi,1
   13b86:	4d 8d 1c bc          	lea    r11,[r12+rdi*4]
	  if (__comp(__val, __middle))
   13b8a:	45 3b 03             	cmp    r8d,DWORD PTR [r11]
   13b8d:	72 28                	jb     13bb7 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x397>
	      __len = __len - __half - 1;
   13b8f:	48 29 f8             	sub    rax,rdi
	      ++__first;
   13b92:	4d 8d 63 04          	lea    r12,[r11+0x4]
	      __len = __len - __half - 1;
   13b96:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   13b9a:	48 85 c0             	test   rax,rax
   13b9d:	7f e1                	jg     13b80 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x360>
    return (__p - __xpicto_edges) % 2;
   13b9f:	4d 29 d4             	sub    r12,r10
		&& __is_extended_pictographic(__c))
   13ba2:	41 83 e4 04          	and    r12d,0x4
   13ba6:	0f 84 75 ff ff ff    	je     13b21 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x301>
      _M_xpicto_seq_state = __next_state;
   13bac:	c6 43 08 02          	mov    BYTE PTR [rbx+0x8],0x2
	_M_RI_count = 0;
   13bb0:	31 c0                	xor    eax,eax
   13bb2:	e9 ab fe ff ff       	jmp    13a62 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x242>
	    __len = __half;
   13bb7:	48 89 f8             	mov    rax,rdi
   13bba:	eb bf                	jmp    13b7b <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()+0x35b>
   13bbc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000013bc0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>:
	format(basic_string_view<_CharT> __s,
   13bc0:	41 57                	push   r15
   13bc2:	41 56                	push   r14
   13bc4:	41 55                	push   r13
   13bc6:	49 89 d5             	mov    r13,rdx
   13bc9:	41 54                	push   r12
   13bcb:	55                   	push   rbp
   13bcc:	48 89 f5             	mov    rbp,rsi
   13bcf:	53                   	push   rbx
   13bd0:	48 81 ec 28 01 00 00 	sub    rsp,0x128
   13bd7:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
	  if (_M_spec._M_width_kind == _WP_none
   13bdc:	66 f7 07 80 07       	test   WORD PTR [rdi],0x780
   13be1:	0f 84 d9 04 00 00    	je     140c0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x500>
   13be7:	66 48 0f 6e c2       	movq   xmm0,rdx
	      if (_M_spec._M_prec_kind != _WP_none)
   13bec:	0f b6 57 01          	movzx  edx,BYTE PTR [rdi+0x1]
   13bf0:	49 89 fe             	mov    r14,rdi
   13bf3:	66 0f 6f c8          	movdqa xmm1,xmm0
   13bf7:	66 0f 6c c9          	punpcklqdq xmm1,xmm1
   13bfb:	83 e2 06             	and    edx,0x6
   13bfe:	0f 85 fc 01 00 00    	jne    13e00 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x240>
  // Return the field width of a string.
  template<typename _CharT>
    constexpr size_t
    __field_width(basic_string_view<_CharT> __s)
    {
      if (__s.empty()) [[unlikely]]
   13c04:	48 85 f6             	test   rsi,rsi
   13c07:	0f 84 03 07 00 00    	je     14310 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x750>
      { return this->_M_str + this->_M_len; }
   13c0d:	4d 8d 64 35 00       	lea    r12,[r13+rsi*1+0x0]
	if (_M_curr() != _M_last)
   13c12:	4d 39 ec             	cmp    r12,r13
   13c15:	0f 84 b5 05 00 00    	je     141d0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x610>
	  _M_read_utf8();
   13c1b:	31 c9                	xor    ecx,ecx
   13c1d:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
   13c22:	0f 11 4c 24 78       	movups XMMWORD PTR [rsp+0x78],xmm1
   13c27:	66 89 8c 24 88 00 00 	mov    WORD PTR [rsp+0x88],cx
   13c2e:	00 
   13c2f:	c6 84 24 8a 00 00 00 	mov    BYTE PTR [rsp+0x8a],0x0
   13c36:	00 
   13c37:	4c 89 a4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r12
   13c3e:	00 
   13c3f:	e8 bc 30 ff ff       	call   6d00 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
   13c44:	48 8b 8c 24 80 00 00 	mov    rcx,QWORD PTR [rsp+0x80]
   13c4b:	00 
   13c4c:	66 49 0f 6e c5       	movq   xmm0,r13
   13c51:	4c 89 a4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r12
   13c58:	00 
   13c59:	4c 89 a4 24 00 01 00 	mov    QWORD PTR [rsp+0x100],r12
   13c60:	00 
   13c61:	0f b7 94 24 88 00 00 	movzx  edx,WORD PTR [rsp+0x88]
   13c68:	00 
  struct _Grapheme_cluster_iterator_base
   13c69:	66 48 0f 6e d9       	movq   xmm3,rcx
	: _M_base(__i)
   13c6e:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
   13c75:	00 
      operator==(_Utf_iterator __lhs, _Sent __rhs)
   13c76:	66 0f 6c c3          	punpcklqdq xmm0,xmm3
   13c7a:	0f 11 44 24 78       	movups XMMWORD PTR [rsp+0x78],xmm0
   13c7f:	66 0f 6f 4c 24 70    	movdqa xmm1,XMMWORD PTR [rsp+0x70]
   13c85:	66 0f 6f 84 24 80 00 	movdqa xmm0,XMMWORD PTR [rsp+0x80]
   13c8c:	00 00 
   13c8e:	0f 29 8c 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm1
   13c95:	00 
   13c96:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
   13c9d:	00 
	: _M_base(__i)
   13c9e:	0f 29 8c 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm1
   13ca5:	00 
   13ca6:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
   13cad:	00 
	  if (__i != __i.end())
   13cae:	4c 39 e1             	cmp    rcx,r12
   13cb1:	74 5c                	je     13d0f <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x14f>
      operator*() const { return _M_buf[_M_buf_index]; }
   13cb3:	0f b6 c2             	movzx  eax,dl
      while (__len > 0)
   13cb6:	48 8d 35 23 2d 00 00 	lea    rsi,[rip+0x2d23]        # 169e0 <std::__unicode::__v15_1_0::__gcb_edges>
   13cbd:	44 8b bc 84 e0 00 00 	mov    r15d,DWORD PTR [rsp+rax*4+0xe0]
   13cc4:	00 
      _DistanceType __len = std::distance(__first, __last);
   13cc5:	b8 a4 06 00 00       	mov    eax,0x6a4
				 (__c << __gcb_shift_bits) | __mask);
   13cca:	44 89 ff             	mov    edi,r15d
   13ccd:	c1 e7 04             	shl    edi,0x4
   13cd0:	83 cf 0f             	or     edi,0xf
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
   13cd3:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13cda:	00 00 00 00 
   13cde:	66 90                	xchg   ax,ax
      while (__len > 0)
   13ce0:	48 85 c0             	test   rax,rax
   13ce3:	7e 22                	jle    13d07 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x147>
	  _DistanceType __half = __len >> 1;
   13ce5:	48 89 c2             	mov    rdx,rax
   13ce8:	48 d1 fa             	sar    rdx,1
   13ceb:	48 8d 0c 96          	lea    rcx,[rsi+rdx*4]
	  if (__comp(__middle, __val))
   13cef:	39 39                	cmp    DWORD PTR [rcx],edi
   13cf1:	0f 83 b9 03 00 00    	jae    140b0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4f0>
	      __len = __len - __half - 1;
   13cf7:	48 29 d0             	sub    rax,rdx
	      ++__first;
   13cfa:	48 8d 71 04          	lea    rsi,[rcx+0x4]
	      __len = __len - __half - 1;
   13cfe:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   13d02:	48 85 c0             	test   rax,rax
   13d05:	7f de                	jg     13ce5 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x125>
    return _Gcb_property(__p[-1] & __mask);
   13d07:	8b 46 fc             	mov    eax,DWORD PTR [rsi-0x4]
   13d0a:	83 e0 0f             	and    eax,0xf
   13d0d:	89 c3                	mov    ebx,eax
      constexpr auto begin() const { return _M_begin; }
   13d0f:	31 c0                	xor    eax,eax
   13d11:	89 9c 24 a4 00 00 00 	mov    DWORD PTR [rsp+0xa4],ebx
   13d18:	4c 8d 05 61 47 00 00 	lea    r8,[rip+0x4761]        # 18480 <std::__unicode::__v15_1_0::__width_edges>
   13d1f:	bb 01 00 00 00       	mov    ebx,0x1
   13d24:	66 89 84 24 a8 00 00 	mov    WORD PTR [rsp+0xa8],ax
   13d2b:	00 
   13d2c:	4c 89 c6             	mov    rsi,r8
      _DistanceType __len = std::distance(__first, __last);
   13d2f:	b8 c8 00 00 00       	mov    eax,0xc8
   13d34:	44 89 bc 24 a0 00 00 	mov    DWORD PTR [rsp+0xa0],r15d
   13d3b:	00 
   13d3c:	c6 84 24 aa 00 00 00 	mov    BYTE PTR [rsp+0xaa],0x0
   13d43:	00 
   13d44:	66 0f 6f 84 24 a0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xa0]
   13d4b:	00 00 
   13d4d:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
   13d54:	00 
   13d55:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
   13d5c:	00 
   13d5d:	66 0f 6f 84 24 b0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xb0]
   13d64:	00 00 
   13d66:	4c 89 a4 24 10 01 00 	mov    QWORD PTR [rsp+0x110],r12
   13d6d:	00 
   13d6e:	0f 29 84 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm0
   13d75:	00 
   13d76:	66 0f 6f 84 24 c0 00 	movdqa xmm0,XMMWORD PTR [rsp+0xc0]
   13d7d:	00 00 
   13d7f:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
   13d86:	00 
    if (__c < __width_edges[0]) [[likely]]
   13d87:	41 81 ff ff 10 00 00 	cmp    r15d,0x10ff
   13d8e:	0f 87 ef 02 00 00    	ja     14083 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
   13d94:	4c 8d bc 24 e0 00 00 	lea    r15,[rsp+0xe0]
   13d9b:	00 
	return 0;
      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
      auto __it = __gc.begin();
      const auto __end = __gc.end();
      size_t __n = __it.width();
      while (++__it != __end)
   13d9c:	eb 1d                	jmp    13dbb <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1fb>
   13d9e:	66 90                	xchg   ax,ax
	{ return __field_width(_M_c); }
   13da0:	8b 94 24 e0 00 00 00 	mov    edx,DWORD PTR [rsp+0xe0]
    if (__c < __width_edges[0]) [[likely]]
   13da7:	b8 01 00 00 00       	mov    eax,0x1
   13dac:	81 fa ff 10 00 00    	cmp    edx,0x10ff
   13db2:	0f 87 30 03 00 00    	ja     140e8 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x528>
	__n += __it.width();
   13db8:	48 01 c3             	add    rbx,rax
      while (++__it != __end)
   13dbb:	4c 89 ff             	mov    rdi,r15
   13dbe:	e8 5d fa ff ff       	call   13820 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()>
   13dc3:	4c 39 60 20          	cmp    QWORD PTR [rax+0x20],r12
   13dc7:	75 d7                	jne    13da0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1e0>
	  return __format::__write_padded_as_spec(__s, __estimated_width,
   13dc9:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
   13dce:	48 89 ef             	mov    rdi,rbp
   13dd1:	4c 89 ee             	mov    rsi,r13
   13dd4:	4d 89 f0             	mov    r8,r14
	}
   13dd7:	48 81 c4 28 01 00 00 	add    rsp,0x128
	  return __format::__write_padded_as_spec(__s, __estimated_width,
   13dde:	48 89 da             	mov    rdx,rbx
   13de1:	41 b9 01 00 00 00    	mov    r9d,0x1
	}
   13de7:	5b                   	pop    rbx
   13de8:	5d                   	pop    rbp
   13de9:	41 5c                	pop    r12
   13deb:	41 5d                	pop    r13
   13ded:	41 5e                	pop    r14
   13def:	41 5f                	pop    r15
	  return __format::__write_padded_as_spec(__s, __estimated_width,
   13df1:	e9 9a 5d ff ff       	jmp    9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
   13df6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   13dfd:	00 00 00 
   13e00:	49 89 f4             	mov    r12,rsi
	  if (_M_prec_kind == _WP_value)
   13e03:	80 fa 02             	cmp    dl,0x2
   13e06:	0f 84 44 03 00 00    	je     14150 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x590>
	  size_t __prec = -1;
   13e0c:	48 c7 44 24 18 ff ff 	mov    QWORD PTR [rsp+0x18],0xffffffffffffffff
   13e13:	ff ff 
	  else if (_M_prec_kind == _WP_from_arg)
   13e15:	80 fa 04             	cmp    dl,0x4
   13e18:	0f 84 1a 05 00 00    	je     14338 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x778>
  // resulting field width.
  template<typename _CharT>
    constexpr size_t
    __truncate(basic_string_view<_CharT>& __s, size_t __max)
    {
      if (__s.empty()) [[unlikely]]
   13e1e:	4d 85 e4             	test   r12,r12
   13e21:	0f 84 e9 04 00 00    	je     14310 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x750>
   13e27:	66 48 0f 7e c0       	movq   rax,xmm0
   13e2c:	49 01 c4             	add    r12,rax
	if (_M_curr() != _M_last)
   13e2f:	49 39 c4             	cmp    r12,rax
   13e32:	0f 84 80 04 00 00    	je     142b8 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6f8>
	  _M_read_utf8();
   13e38:	45 31 c0             	xor    r8d,r8d
   13e3b:	48 8d 7c 24 40       	lea    rdi,[rsp+0x40]
   13e40:	44 89 4c 24 34       	mov    DWORD PTR [rsp+0x34],r9d
      _M_read()
   13e45:	66 0f d6 44 24 20    	movq   QWORD PTR [rsp+0x20],xmm0
	  _M_read_utf8();
   13e4b:	0f 11 4c 24 48       	movups XMMWORD PTR [rsp+0x48],xmm1
   13e50:	66 44 89 44 24 58    	mov    WORD PTR [rsp+0x58],r8w
   13e56:	c6 44 24 5a 00       	mov    BYTE PTR [rsp+0x5a],0x0
   13e5b:	4c 89 64 24 60       	mov    QWORD PTR [rsp+0x60],r12
   13e60:	e8 9b 2e ff ff       	call   6d00 <std::__unicode::_Utf_iterator<char, char32_t, char const*, char const*, std::__unicode::_Repl>::_M_read_utf8()>
   13e65:	48 8b 54 24 50       	mov    rdx,QWORD PTR [rsp+0x50]
   13e6a:	f3 0f 7e 44 24 20    	movq   xmm0,QWORD PTR [rsp+0x20]
   13e70:	4c 89 64 24 60       	mov    QWORD PTR [rsp+0x60],r12
   13e75:	4c 89 a4 24 00 01 00 	mov    QWORD PTR [rsp+0x100],r12
   13e7c:	00 
   13e7d:	0f b7 44 24 58       	movzx  eax,WORD PTR [rsp+0x58]
  struct _Grapheme_cluster_iterator_base
   13e82:	66 0f 6f c8          	movdqa xmm1,xmm0
   13e86:	66 48 0f 6e ea       	movq   xmm5,rdx
	  if (__i != __i.end())
   13e8b:	49 39 d4             	cmp    r12,rdx
	: _M_base(__i)
   13e8e:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
   13e95:	00 
      operator==(_Utf_iterator __lhs, _Sent __rhs)
   13e96:	66 0f 6c cd          	punpcklqdq xmm1,xmm5
	  if (__i != __i.end())
   13e9a:	44 8b 4c 24 34       	mov    r9d,DWORD PTR [rsp+0x34]
   13e9f:	0f 11 4c 24 48       	movups XMMWORD PTR [rsp+0x48],xmm1
   13ea4:	66 0f 6f 54 24 40    	movdqa xmm2,XMMWORD PTR [rsp+0x40]
   13eaa:	66 0f 6f 4c 24 50    	movdqa xmm1,XMMWORD PTR [rsp+0x50]
   13eb0:	0f 29 94 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm2
   13eb7:	00 
   13eb8:	0f 29 8c 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm1
   13ebf:	00 
	: _M_base(__i)
   13ec0:	0f 29 94 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm2
   13ec7:	00 
   13ec8:	0f 29 8c 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm1
   13ecf:	00 
	  if (__i != __i.end())
   13ed0:	74 5f                	je     13f31 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x371>
      operator*() const { return _M_buf[_M_buf_index]; }
   13ed2:	0f b6 c0             	movzx  eax,al
   13ed5:	48 8d 35 04 2b 00 00 	lea    rsi,[rip+0x2b04]        # 169e0 <std::__unicode::__v15_1_0::__gcb_edges>
   13edc:	44 8b 8c 84 e0 00 00 	mov    r9d,DWORD PTR [rsp+rax*4+0xe0]
   13ee3:	00 
      _DistanceType __len = std::distance(__first, __last);
   13ee4:	b8 a4 06 00 00       	mov    eax,0x6a4
				 (__c << __gcb_shift_bits) | __mask);
   13ee9:	44 89 cf             	mov    edi,r9d
   13eec:	c1 e7 04             	shl    edi,0x4
   13eef:	83 cf 0f             	or     edi,0xf
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
   13ef2:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13ef9:	00 00 00 00 
   13efd:	0f 1f 00             	nop    DWORD PTR [rax]
      while (__len > 0)
   13f00:	48 85 c0             	test   rax,rax
   13f03:	7e 22                	jle    13f27 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x367>
	  _DistanceType __half = __len >> 1;
   13f05:	48 89 c2             	mov    rdx,rax
   13f08:	48 d1 fa             	sar    rdx,1
   13f0b:	48 8d 0c 96          	lea    rcx,[rsi+rdx*4]
	  if (__comp(__middle, __val))
   13f0f:	39 39                	cmp    DWORD PTR [rcx],edi
   13f11:	0f 83 99 02 00 00    	jae    141b0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5f0>
	      __len = __len - __half - 1;
   13f17:	48 29 d0             	sub    rax,rdx
	      ++__first;
   13f1a:	48 8d 71 04          	lea    rsi,[rcx+0x4]
	      __len = __len - __half - 1;
   13f1e:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   13f22:	48 85 c0             	test   rax,rax
   13f25:	7f de                	jg     13f05 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x345>
    return _Gcb_property(__p[-1] & __mask);
   13f27:	8b 46 fc             	mov    eax,DWORD PTR [rsi-0x4]
   13f2a:	83 e0 0f             	and    eax,0xf
   13f2d:	89 44 24 08          	mov    DWORD PTR [rsp+0x8],eax
      constexpr auto begin() const { return _M_begin; }
   13f31:	8b 44 24 08          	mov    eax,DWORD PTR [rsp+0x8]
   13f35:	31 f6                	xor    esi,esi
   13f37:	44 89 8c 24 a0 00 00 	mov    DWORD PTR [rsp+0xa0],r9d
   13f3e:	00 
   13f3f:	4c 8d 05 3a 45 00 00 	lea    r8,[rip+0x453a]        # 18480 <std::__unicode::__v15_1_0::__width_edges>
   13f46:	66 89 b4 24 a8 00 00 	mov    WORD PTR [rsp+0xa8],si
   13f4d:	00 
   13f4e:	bb 01 00 00 00       	mov    ebx,0x1
   13f53:	4c 89 c6             	mov    rsi,r8
   13f56:	89 84 24 a4 00 00 00 	mov    DWORD PTR [rsp+0xa4],eax
   13f5d:	b8 c8 00 00 00       	mov    eax,0xc8
   13f62:	c6 84 24 aa 00 00 00 	mov    BYTE PTR [rsp+0xaa],0x0
   13f69:	00 
   13f6a:	66 0f 6f 8c 24 a0 00 	movdqa xmm1,XMMWORD PTR [rsp+0xa0]
   13f71:	00 00 
   13f73:	4c 89 a4 24 d0 00 00 	mov    QWORD PTR [rsp+0xd0],r12
   13f7a:	00 
   13f7b:	0f 29 8c 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm1
   13f82:	00 
   13f83:	66 0f 6f 8c 24 b0 00 	movdqa xmm1,XMMWORD PTR [rsp+0xb0]
   13f8a:	00 00 
   13f8c:	4c 89 a4 24 10 01 00 	mov    QWORD PTR [rsp+0x110],r12
   13f93:	00 
   13f94:	0f 29 8c 24 f0 00 00 	movaps XMMWORD PTR [rsp+0xf0],xmm1
   13f9b:	00 
   13f9c:	66 0f 6f 8c 24 c0 00 	movdqa xmm1,XMMWORD PTR [rsp+0xc0]
   13fa3:	00 00 
   13fa5:	0f 29 8c 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm1
   13fac:	00 
    if (__c < __width_edges[0]) [[likely]]
   13fad:	41 81 f9 ff 10 00 00 	cmp    r9d,0x10ff
   13fb4:	0f 87 a9 01 00 00    	ja     14163 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a3>
   13fba:	4c 8d bc 24 e0 00 00 	lea    r15,[rsp+0xe0]
   13fc1:	00 

      _Grapheme_cluster_view<basic_string_view<_CharT>> __gc(__s);
      auto __it = __gc.begin();
      const auto __end = __gc.end();
      size_t __n = __it.width();
      if (__n > __max)
   13fc2:	48 39 5c 24 18       	cmp    QWORD PTR [rsp+0x18],rbx
   13fc7:	73 18                	jae    13fe1 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x421>
   13fc9:	e9 32 03 00 00       	jmp    14300 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x740>
   13fce:	66 90                	xchg   ax,ax
	  __s = {};
	  return 0;
	}
      while (++__it != __end)
	{
	  size_t __n2 = __n + __it.width();
   13fd0:	48 01 d8             	add    rax,rbx
	  if (__n2 > __max)
   13fd3:	48 39 44 24 18       	cmp    QWORD PTR [rsp+0x18],rax
   13fd8:	0f 82 42 03 00 00    	jb     14320 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x760>
	    {
	      __s = basic_string_view<_CharT>(__s.begin(), __it.base());
	      return __n;
	    }
	  __n = __n2;
   13fde:	48 89 c3             	mov    rbx,rax
      while (++__it != __end)
   13fe1:	4c 89 ff             	mov    rdi,r15
   13fe4:	66 0f d6 44 24 08    	movq   QWORD PTR [rsp+0x8],xmm0
   13fea:	e8 31 f8 ff ff       	call   13820 <std::__unicode::__v15_1_0::_Grapheme_cluster_view<std::basic_string_view<char, std::char_traits<char> > >::_Iterator::operator++()>
   13fef:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [rsp+0x8]
   13ff5:	4c 39 60 20          	cmp    QWORD PTR [rax+0x20],r12
   13ff9:	0f 84 ca fd ff ff    	je     13dc9 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x209>
	{ return __field_width(_M_c); }
   13fff:	8b 94 24 e0 00 00 00 	mov    edx,DWORD PTR [rsp+0xe0]
    if (__c < __width_edges[0]) [[likely]]
   14006:	b8 01 00 00 00       	mov    eax,0x1
   1400b:	81 fa ff 10 00 00    	cmp    edx,0x10ff
   14011:	76 bd                	jbe    13fd0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x410>
   14013:	4c 8d 05 66 44 00 00 	lea    r8,[rip+0x4466]        # 18480 <std::__unicode::__v15_1_0::__width_edges>
   1401a:	b8 c8 00 00 00       	mov    eax,0xc8
   1401f:	4c 89 c7             	mov    rdi,r8
   14022:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   14029:	00 00 00 00 
   1402d:	0f 1f 00             	nop    DWORD PTR [rax]
      while (__len > 0)
   14030:	48 85 c0             	test   rax,rax
   14033:	7e 22                	jle    14057 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x497>
	  _DistanceType __half = __len >> 1;
   14035:	48 89 c1             	mov    rcx,rax
   14038:	48 d1 f9             	sar    rcx,1
   1403b:	48 8d 34 8f          	lea    rsi,[rdi+rcx*4]
	  if (__comp(__val, __middle))
   1403f:	3b 16                	cmp    edx,DWORD PTR [rsi]
   14041:	0f 82 79 01 00 00    	jb     141c0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x600>
	      __len = __len - __half - 1;
   14047:	48 29 c8             	sub    rax,rcx
	      ++__first;
   1404a:	48 8d 7e 04          	lea    rdi,[rsi+0x4]
	      __len = __len - __half - 1;
   1404e:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   14052:	48 85 c0             	test   rax,rax
   14055:	7f de                	jg     14035 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x475>
    return (__p - __width_edges) % 2 + 1;
   14057:	4c 29 c7             	sub    rdi,r8
   1405a:	48 89 f8             	mov    rax,rdi
   1405d:	48 c1 ef 3f          	shr    rdi,0x3f
   14061:	48 c1 f8 02          	sar    rax,0x2
   14065:	48 01 f8             	add    rax,rdi
   14068:	83 e0 01             	and    eax,0x1
   1406b:	48 29 f8             	sub    rax,rdi
	  size_t __n2 = __n + __it.width();
   1406e:	83 c0 01             	add    eax,0x1
    return (__p - __width_edges) % 2 + 1;
   14071:	e9 5a ff ff ff       	jmp    13fd0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x410>
   14076:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   1407d:	00 00 00 
	    __len = __half;
   14080:	48 89 d0             	mov    rax,rdx
      while (__len > 0)
   14083:	48 85 c0             	test   rax,rax
   14086:	0f 8e e4 02 00 00    	jle    14370 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x7b0>
	  _DistanceType __half = __len >> 1;
   1408c:	48 89 c2             	mov    rdx,rax
   1408f:	48 d1 fa             	sar    rdx,1
   14092:	48 8d 0c 96          	lea    rcx,[rsi+rdx*4]
	  if (__comp(__val, __middle))
   14096:	44 3b 39             	cmp    r15d,DWORD PTR [rcx]
   14099:	72 e5                	jb     14080 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c0>
	      __len = __len - __half - 1;
   1409b:	48 29 d0             	sub    rax,rdx
	      ++__first;
   1409e:	48 8d 71 04          	lea    rsi,[rcx+0x4]
	      __len = __len - __half - 1;
   140a2:	48 83 e8 01          	sub    rax,0x1
   140a6:	eb db                	jmp    14083 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x4c3>
   140a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   140af:	00 
	    __len = __half;
   140b0:	48 89 d0             	mov    rax,rdx
   140b3:	e9 28 fc ff ff       	jmp    13ce0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x120>
   140b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   140bf:	00 
      iterator out() { return std::move(_M_out); }
   140c0:	4c 8b 61 10          	mov    r12,QWORD PTR [rcx+0x10]
	  if (__str.size())
   140c4:	48 85 f6             	test   rsi,rsi
   140c7:	0f 85 5b 01 00 00    	jne    14228 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x668>
	}
   140cd:	48 81 c4 28 01 00 00 	add    rsp,0x128
   140d4:	4c 89 e0             	mov    rax,r12
   140d7:	5b                   	pop    rbx
   140d8:	5d                   	pop    rbp
   140d9:	41 5c                	pop    r12
   140db:	41 5d                	pop    r13
   140dd:	41 5e                	pop    r14
   140df:	41 5f                	pop    r15
   140e1:	c3                   	ret
   140e2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
   140e8:	4c 8d 05 91 43 00 00 	lea    r8,[rip+0x4391]        # 18480 <std::__unicode::__v15_1_0::__width_edges>
      _DistanceType __len = std::distance(__first, __last);
   140ef:	b8 c8 00 00 00       	mov    eax,0xc8
   140f4:	4c 89 c7             	mov    rdi,r8
   140f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   140fe:	00 00 
      while (__len > 0)
   14100:	48 85 c0             	test   rax,rax
   14103:	7e 1e                	jle    14123 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x563>
	  _DistanceType __half = __len >> 1;
   14105:	48 89 c1             	mov    rcx,rax
   14108:	48 d1 f9             	sar    rcx,1
   1410b:	48 8d 34 8f          	lea    rsi,[rdi+rcx*4]
	  if (__comp(__val, __middle))
   1410f:	3b 16                	cmp    edx,DWORD PTR [rsi]
   14111:	72 35                	jb     14148 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x588>
	      __len = __len - __half - 1;
   14113:	48 29 c8             	sub    rax,rcx
	      ++__first;
   14116:	48 8d 7e 04          	lea    rdi,[rsi+0x4]
	      __len = __len - __half - 1;
   1411a:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   1411e:	48 85 c0             	test   rax,rax
   14121:	7f e2                	jg     14105 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x545>
   14123:	4c 29 c7             	sub    rdi,r8
   14126:	48 89 f8             	mov    rax,rdi
   14129:	48 c1 ef 3f          	shr    rdi,0x3f
   1412d:	48 c1 f8 02          	sar    rax,0x2
   14131:	48 01 f8             	add    rax,rdi
   14134:	83 e0 01             	and    eax,0x1
   14137:	48 29 f8             	sub    rax,rdi
	__n += __it.width();
   1413a:	83 c0 01             	add    eax,0x1
    return (__p - __width_edges) % 2 + 1;
   1413d:	e9 76 fc ff ff       	jmp    13db8 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1f8>
   14142:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	    __len = __half;
   14148:	48 89 c8             	mov    rax,rcx
   1414b:	eb b3                	jmp    14100 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x540>
   1414d:	0f 1f 00             	nop    DWORD PTR [rax]
	    __prec = _M_prec;
   14150:	0f b7 47 06          	movzx  eax,WORD PTR [rdi+0x6]
   14154:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
   14159:	e9 c0 fc ff ff       	jmp    13e1e <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25e>
   1415e:	66 90                	xchg   ax,ax
   14160:	48 89 d0             	mov    rax,rdx
      while (__len > 0)
   14163:	48 85 c0             	test   rax,rax
   14166:	7e 1f                	jle    14187 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5c7>
	  _DistanceType __half = __len >> 1;
   14168:	48 89 c2             	mov    rdx,rax
   1416b:	48 d1 fa             	sar    rdx,1
   1416e:	48 8d 0c 96          	lea    rcx,[rsi+rdx*4]
	  if (__comp(__val, __middle))
   14172:	44 3b 09             	cmp    r9d,DWORD PTR [rcx]
   14175:	72 e9                	jb     14160 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a0>
	      __len = __len - __half - 1;
   14177:	48 29 d0             	sub    rax,rdx
	      ++__first;
   1417a:	48 8d 71 04          	lea    rsi,[rcx+0x4]
	      __len = __len - __half - 1;
   1417e:	48 83 e8 01          	sub    rax,0x1
      while (__len > 0)
   14182:	48 85 c0             	test   rax,rax
   14185:	7f e1                	jg     14168 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x5a8>
   14187:	4c 29 c6             	sub    rsi,r8
   1418a:	48 89 f0             	mov    rax,rsi
   1418d:	48 c1 ee 3f          	shr    rsi,0x3f
   14191:	48 c1 f8 02          	sar    rax,0x2
   14195:	48 01 f0             	add    rax,rsi
   14198:	83 e0 01             	and    eax,0x1
   1419b:	48 29 f0             	sub    rax,rsi
      size_t __n = __it.width();
   1419e:	8d 58 01             	lea    ebx,[rax+0x1]
    return (__p - __width_edges) % 2 + 1;
   141a1:	e9 14 fe ff ff       	jmp    13fba <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x3fa>
   141a6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   141ad:	00 00 00 
   141b0:	48 89 d0             	mov    rax,rdx
   141b3:	e9 48 fd ff ff       	jmp    13f00 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x340>
   141b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   141bf:	00 
	    __len = __half;
   141c0:	48 89 c8             	mov    rax,rcx
   141c3:	e9 68 fe ff ff       	jmp    14030 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x470>
   141c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   141cf:	00 
   141d0:	66 49 0f 6e c4       	movq   xmm0,r12
	  _M_buf = {};
   141d5:	c7 44 24 70 00 00 00 	mov    DWORD PTR [rsp+0x70],0x0
   141dc:	00 
   141dd:	31 d2                	xor    edx,edx
   141df:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
   141e3:	66 89 94 24 88 00 00 	mov    WORD PTR [rsp+0x88],dx
   141ea:	00 
   141eb:	0f 11 44 24 78       	movups XMMWORD PTR [rsp+0x78],xmm0
	: _M_base(__i)
   141f0:	66 0f 6f 44 24 70    	movdqa xmm0,XMMWORD PTR [rsp+0x70]
   141f6:	c6 84 24 8a 00 00 00 	mov    BYTE PTR [rsp+0x8a],0x0
   141fd:	00 
   141fe:	0f 29 84 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm0
   14205:	00 
   14206:	66 0f 6f 84 24 80 00 	movdqa xmm0,XMMWORD PTR [rsp+0x80]
   1420d:	00 00 
   1420f:	4c 89 a4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r12
   14216:	00 
   14217:	0f 29 84 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm0
   1421e:	00 
      operator==(_Utf_iterator __lhs, _Sent __rhs)
   1421f:	e9 eb fa ff ff       	jmp    13d0f <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x14f>
   14224:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
   14228:	49 8b 7c 24 18       	mov    rdi,QWORD PTR [r12+0x18]
   1422d:	49 8b 5c 24 10       	mov    rbx,QWORD PTR [r12+0x10]
   14232:	48 89 f8             	mov    rax,rdi
   14235:	49 2b 44 24 08       	sub    rax,QWORD PTR [r12+0x8]
   1423a:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
   1423d:	48 39 de             	cmp    rsi,rbx
   14240:	72 5c                	jb     1429e <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6de>
   14242:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   14249:	00 00 00 00 
   1424d:	0f 1f 00             	nop    DWORD PTR [rax]
      if (__b < __a)
   14250:	48 39 eb             	cmp    rbx,rbp
   14253:	48 89 ea             	mov    rdx,rbp
   14256:	48 0f 46 d3          	cmovbe rdx,rbx
	if (__n == 0)
   1425a:	48 85 d2             	test   rdx,rdx
   1425d:	74 08                	je     14267 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x6a7>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1425f:	4c 89 ee             	mov    rsi,r13
   14262:	e8 49 ef fe ff       	call   31b0 <memcpy@plt>
	    _M_overflow();
   14267:	49 8b 04 24          	mov    rax,QWORD PTR [r12]
      { _M_current += __n; return *this; }
   1426b:	49 01 5c 24 18       	add    QWORD PTR [r12+0x18],rbx
   14270:	4c 89 e7             	mov    rdi,r12
	this->_M_str += __n;
   14273:	49 01 dd             	add    r13,rbx
	this->_M_len -= __n;
   14276:	48 29 dd             	sub    rbp,rbx
   14279:	ff 10                	call   QWORD PTR [rax]
    { return __lhs.base() - __rhs.base(); }
   1427b:	49 8b 7c 24 18       	mov    rdi,QWORD PTR [r12+0x18]
   14280:	49 8b 5c 24 10       	mov    rbx,QWORD PTR [r12+0x10]
   14285:	48 89 f8             	mov    rax,rdi
   14288:	49 2b 44 24 08       	sub    rax,QWORD PTR [r12+0x8]
   1428d:	48 29 c3             	sub    rbx,rax
	while (__to.size() <= __s.size())
   14290:	48 39 dd             	cmp    rbp,rbx
   14293:	73 bb                	jae    14250 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x690>
	if (__s.size())
   14295:	48 85 ed             	test   rbp,rbp
   14298:	0f 84 2f fe ff ff    	je     140cd <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50d>
   1429e:	48 89 ea             	mov    rdx,rbp
   142a1:	4c 89 ee             	mov    rsi,r13
   142a4:	e8 07 ef fe ff       	call   31b0 <memcpy@plt>
      { _M_current += __n; return *this; }
   142a9:	49 01 6c 24 18       	add    QWORD PTR [r12+0x18],rbp
	    return __format::__write(__fc.out(), __s);
   142ae:	e9 1a fe ff ff       	jmp    140cd <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x50d>
   142b3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   142b8:	66 0f 6f c8          	movdqa xmm1,xmm0
	  _M_buf = {};
   142bc:	c7 44 24 40 00 00 00 	mov    DWORD PTR [rsp+0x40],0x0
   142c3:	00 
   142c4:	31 ff                	xor    edi,edi
   142c6:	66 0f 6c c8          	punpcklqdq xmm1,xmm0
   142ca:	66 89 7c 24 58       	mov    WORD PTR [rsp+0x58],di
   142cf:	0f 11 4c 24 48       	movups XMMWORD PTR [rsp+0x48],xmm1
	: _M_base(__i)
   142d4:	66 0f 6f 4c 24 40    	movdqa xmm1,XMMWORD PTR [rsp+0x40]
   142da:	c6 44 24 5a 00       	mov    BYTE PTR [rsp+0x5a],0x0
   142df:	0f 29 8c 24 b0 00 00 	movaps XMMWORD PTR [rsp+0xb0],xmm1
   142e6:	00 
   142e7:	66 0f 6f 4c 24 50    	movdqa xmm1,XMMWORD PTR [rsp+0x50]
   142ed:	66 0f d6 44 24 60    	movq   QWORD PTR [rsp+0x60],xmm0
   142f3:	0f 29 8c 24 c0 00 00 	movaps XMMWORD PTR [rsp+0xc0],xmm1
   142fa:	00 
      operator==(_Utf_iterator __lhs, _Sent __rhs)
   142fb:	e9 31 fc ff ff       	jmp    13f31 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x371>
	  __s = {};
   14300:	45 31 ed             	xor    r13d,r13d
   14303:	31 ed                	xor    ebp,ebp
	return 0;
   14305:	31 db                	xor    ebx,ebx
   14307:	e9 bd fa ff ff       	jmp    13dc9 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x209>
   1430c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	return 0;
   14310:	31 db                	xor    ebx,ebx
   14312:	e9 b2 fa ff ff       	jmp    13dc9 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x209>
   14317:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   1431e:	00 00 
	: _M_len(__last - __first), _M_str(std::to_address(__first))
   14320:	48 8b ac 24 00 01 00 	mov    rbp,QWORD PTR [rsp+0x100]
   14327:	00 
   14328:	66 48 0f 7e c0       	movq   rax,xmm0
   1432d:	48 29 c5             	sub    rbp,rax
	      return __n;
   14330:	e9 94 fa ff ff       	jmp    13dc9 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x209>
   14335:	0f 1f 00             	nop    DWORD PTR [rax]
   14338:	0f b7 7f 06          	movzx  edi,WORD PTR [rdi+0x6]
   1433c:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
   14341:	44 89 4c 24 34       	mov    DWORD PTR [rsp+0x34],r9d
   14346:	0f 29 4c 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm1
   1434b:	4c 89 6c 24 38       	mov    QWORD PTR [rsp+0x38],r13
   14350:	e8 6b fa fe ff       	call   3dc0 <unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const [clone .part.0] [clone .isra.0]>
   14355:	66 0f 6f 4c 24 20    	movdqa xmm1,XMMWORD PTR [rsp+0x20]
   1435b:	44 8b 4c 24 34       	mov    r9d,DWORD PTR [rsp+0x34]
   14360:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
   14365:	f3 0f 7e 44 24 38    	movq   xmm0,QWORD PTR [rsp+0x38]
   1436b:	e9 ae fa ff ff       	jmp    13e1e <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x25e>
    return (__p - __width_edges) % 2 + 1;
   14370:	4c 29 c6             	sub    rsi,r8
   14373:	48 89 f0             	mov    rax,rsi
   14376:	48 c1 ee 3f          	shr    rsi,0x3f
   1437a:	48 c1 f8 02          	sar    rax,0x2
   1437e:	48 01 f0             	add    rax,rsi
   14381:	83 e0 01             	and    eax,0x1
   14384:	48 29 f0             	sub    rax,rsi
      size_t __n = __it.width();
   14387:	8d 58 01             	lea    ebx,[rax+0x1]
    return (__p - __width_edges) % 2 + 1;
   1438a:	e9 05 fa ff ff       	jmp    13d94 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const+0x1d4>
   1438f:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   14396:	00 00 00 
   14399:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   143a0:	00 00 00 
   143a3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   143aa:	00 00 00 
   143ad:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
   143b4:	00 00 00 
   143b7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
   143be:	00 00 

00000000000143c0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>:
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
   143c0:	41 56                	push   r14
	  switch (__type)
   143c2:	48 8d 0d 77 17 00 00 	lea    rcx,[rip+0x1777]        # 15b40 <CSWTCH.1110+0xa60>
   143c9:	0f b6 d2             	movzx  edx,dl
	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
   143cc:	41 55                	push   r13
   143ce:	41 54                	push   r12
   143d0:	55                   	push   rbp
   143d1:	53                   	push   rbx
   143d2:	48 89 fb             	mov    rbx,rdi
   143d5:	48 83 ec 40          	sub    rsp,0x40
	  switch (__type)
   143d9:	48 63 04 91          	movsxd rax,DWORD PTR [rcx+rdx*4]
   143dd:	48 01 c8             	add    rax,rcx
   143e0:	ff e0                	jmp    rax
   143e2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
   143e8:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   143eb:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   143f0:	4c 8b 37             	mov    r14,QWORD PTR [rdi]
   143f3:	ba 01 00 00 00       	mov    edx,0x1
   143f8:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
   143fc:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   143ff:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14406:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14408:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	      _Formatter __f;
   1440c:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   14413:	00 
	    return _M_do_parse(__pc, _AsInteger);
   14414:	e8 97 2c ff ff       	call   70b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14419:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   1441d:	4c 89 f6             	mov    rsi,r14
   14420:	4c 89 ea             	mov    rdx,r13
      { _M_begin = __it; }
   14423:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   14427:	4c 89 e7             	mov    rdi,r12
   1442a:	48 89 d9             	mov    rcx,rbx
   1442d:	e8 4e a8 ff ff       	call   ec80 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14432:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	}
   14436:	48 83 c4 40          	add    rsp,0x40
   1443a:	5b                   	pop    rbx
   1443b:	5d                   	pop    rbp
   1443c:	41 5c                	pop    r12
   1443e:	41 5d                	pop    r13
   14440:	41 5e                	pop    r14
   14442:	c3                   	ret
   14443:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14448:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   1444b:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   14450:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14457:	00 00 
      { return _M_f.parse(__pc); }
   14459:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   1445c:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   14463:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14464:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   14468:	e8 d3 39 ff ff       	call   7e40 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>
	{ return _M_f.format(__u, __fc); }
   1446d:	66 0f 6f 03          	movdqa xmm0,XMMWORD PTR [rbx]
   14471:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14474:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14478:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   1447c:	48 89 ee             	mov    rsi,rbp
   1447f:	e8 7c b1 ff ff       	call   f600 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14484:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	}
   14488:	48 83 c4 40          	add    rsp,0x40
   1448c:	5b                   	pop    rbx
   1448d:	5d                   	pop    rbp
   1448e:	41 5c                	pop    r12
   14490:	41 5d                	pop    r13
   14492:	41 5e                	pop    r14
   14494:	c3                   	ret
   14495:	0f 1f 00             	nop    DWORD PTR [rax]
   14498:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	      auto __end = _M_do_parse(__pc, _AsBool);
   1449b:	4c 8d 64 24 04       	lea    r12,[rsp+0x4]
   144a0:	44 0f b6 2f          	movzx  r13d,BYTE PTR [rdi]
   144a4:	31 d2                	xor    edx,edx
   144a6:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   144a9:	c7 44 24 0c 20 00 00 	mov    DWORD PTR [rsp+0xc],0x20
   144b0:	00 
   144b1:	48 c7 44 24 04 00 00 	mov    QWORD PTR [rsp+0x4],0x0
   144b8:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   144ba:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	      auto __end = _M_do_parse(__pc, _AsBool);
   144be:	e8 ed 2b ff ff       	call   70b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      if (_M_spec._M_type == _Pres_s)
   144c3:	f6 44 24 05 78       	test   BYTE PTR [rsp+0x5],0x78
   144c8:	75 0b                	jne    144d5 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x115>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
   144ca:	f6 44 24 04 5c       	test   BYTE PTR [rsp+0x4],0x5c
   144cf:	0f 85 04 04 00 00    	jne    148d9 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x519>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   144d5:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
      { _M_begin = __it; }
   144d9:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   144dd:	41 0f b6 f5          	movzx  esi,r13b
   144e1:	4c 89 e7             	mov    rdi,r12
   144e4:	48 89 da             	mov    rdx,rbx
   144e7:	e8 84 81 ff ff       	call   c670 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   144ec:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   144f0:	e9 41 ff ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   144f5:	0f 1f 00             	nop    DWORD PTR [rax]
   144f8:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	      auto __end = _M_do_parse(__pc, _AsChar);
   144fb:	4c 8d 64 24 10       	lea    r12,[rsp+0x10]
   14500:	ba 07 00 00 00       	mov    edx,0x7
	      _Formatter __f;
   14505:	48 c7 44 24 10 00 00 	mov    QWORD PTR [rsp+0x10],0x0
   1450c:	00 00 
	      auto __end = _M_do_parse(__pc, _AsChar);
   1450e:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14511:	c7 44 24 18 20 00 00 	mov    DWORD PTR [rsp+0x18],0x20
   14518:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14519:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	      auto __end = _M_do_parse(__pc, _AsChar);
   1451d:	e8 8e 2b ff ff       	call   70b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
   14522:	0f b6 54 24 11       	movzx  edx,BYTE PTR [rsp+0x11]
	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
   14527:	89 d1                	mov    ecx,edx
   14529:	f7 d2                	not    edx
   1452b:	83 e1 78             	and    ecx,0x78
   1452e:	83 e2 38             	and    edx,0x38
   14531:	0f 85 89 04 00 00    	jne    149c0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x600>
		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
   14537:	f6 44 24 10 5c       	test   BYTE PTR [rsp+0x10],0x5c
   1453c:	0f 85 97 03 00 00    	jne    148d9 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x519>
      { _M_begin = __it; }
   14542:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14546:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	  if (_M_f._M_spec._M_type == __format::_Pres_none
   1454a:	80 f9 38             	cmp    cl,0x38
   1454d:	0f 84 55 05 00 00    	je     14aa8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x6e8>
      iterator out() { return std::move(_M_out); }
   14553:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   14557:	e9 28 ff ff ff       	jmp    14484 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xc4>
   1455c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
   14560:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   14563:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   14568:	ba 01 00 00 00       	mov    edx,0x1
	      _Formatter __f;
   1456d:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14574:	00 00 
	    return _M_do_parse(__pc, _AsInteger);
   14576:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14579:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   14580:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14581:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	    return _M_do_parse(__pc, _AsInteger);
   14585:	e8 26 2b ff ff       	call   70b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	{ return _M_f.format(__u, __fc); }
   1458a:	8b 33                	mov    esi,DWORD PTR [rbx]
   1458c:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   1458f:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14593:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14597:	48 89 ea             	mov    rdx,rbp
   1459a:	e8 a1 84 ff ff       	call   ca40 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   1459f:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   145a3:	e9 8e fe ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   145a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   145af:	00 
   145b0:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   145b3:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   145b8:	ba 01 00 00 00       	mov    edx,0x1
	      _Formatter __f;
   145bd:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   145c4:	00 00 
	    return _M_do_parse(__pc, _AsInteger);
   145c6:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   145c9:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   145d0:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   145d1:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	    return _M_do_parse(__pc, _AsInteger);
   145d5:	e8 d6 2a ff ff       	call   70b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	{ return _M_f.format(__u, __fc); }
   145da:	8b 33                	mov    esi,DWORD PTR [rbx]
   145dc:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   145df:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   145e3:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   145e7:	48 89 ea             	mov    rdx,rbp
   145ea:	e8 11 8a ff ff       	call   d000 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   145ef:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   145f3:	e9 3e fe ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   145f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   145ff:	00 
   14600:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   14603:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   14608:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
   1460b:	ba 01 00 00 00       	mov    edx,0x1
   14610:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14613:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1461a:	00 
   1461b:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14622:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14624:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	    return _M_do_parse(__pc, _AsInteger);
   14628:	e8 83 2a ff ff       	call   70b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   1462d:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14631:	4c 89 ee             	mov    rsi,r13
   14634:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14637:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   1463b:	48 89 da             	mov    rdx,rbx
   1463e:	e8 fd 8e ff ff       	call   d540 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14643:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14647:	e9 ea fd ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   1464c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
   14650:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   14653:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   14658:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
   1465b:	ba 01 00 00 00       	mov    edx,0x1
   14660:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14663:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1466a:	00 
   1466b:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14672:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14674:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	    return _M_do_parse(__pc, _AsInteger);
   14678:	e8 33 2a ff ff       	call   70b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   1467d:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14681:	4c 89 ee             	mov    rsi,r13
   14684:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14687:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   1468b:	48 89 da             	mov    rdx,rbx
   1468e:	e8 6d 95 ff ff       	call   dc00 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14693:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14697:	e9 9a fd ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   1469c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   146a0:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   146a3:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   146a8:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   146af:	00 00 
      { return _M_f.parse(__pc); }
   146b1:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   146b4:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   146bb:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   146bc:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   146c0:	e8 7b 37 ff ff       	call   7e40 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>
	{ return _M_f.format(__u, __fc); }
   146c5:	f3 0f 10 03          	movss  xmm0,DWORD PTR [rbx]
   146c9:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   146cc:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   146d0:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   146d4:	48 89 ee             	mov    rsi,rbp
   146d7:	e8 74 de ff ff       	call   12550 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   146dc:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   146e0:	e9 51 fd ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   146e5:	0f 1f 00             	nop    DWORD PTR [rax]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   146e8:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   146eb:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   146f0:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   146f7:	00 00 
      { return _M_f.parse(__pc); }
   146f9:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   146fc:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   14703:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14704:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   14708:	e8 33 37 ff ff       	call   7e40 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>
	{ return _M_f.format(__u, __fc); }
   1470d:	f2 0f 10 03          	movsd  xmm0,QWORD PTR [rbx]
   14711:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14714:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14718:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   1471c:	48 89 ee             	mov    rsi,rbp
   1471f:	e8 cc ce ff ff       	call   115f0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14724:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14728:	e9 09 fd ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   1472d:	0f 1f 00             	nop    DWORD PTR [rax]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14730:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   14733:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   14738:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   1473f:	00 00 
      { return _M_f.parse(__pc); }
   14741:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14744:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1474b:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   1474c:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   14750:	e8 eb 36 ff ff       	call   7e40 <std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)>
	{ return _M_f.format(__u, __fc); }
   14755:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14758:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   1475c:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14760:	ff 73 08             	push   QWORD PTR [rbx+0x8]
   14763:	ff 33                	push   QWORD PTR [rbx]
   14765:	48 89 ee             	mov    rsi,rbp
   14768:	e8 63 bf ff ff       	call   106d0 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   1476d:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   14771:	5a                   	pop    rdx
   14772:	59                   	pop    rcx
   14773:	e9 be fc ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   14778:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   1477f:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14780:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   14783:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   14788:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   1478f:	00 00 
      { return _M_f.parse(__pc); }
   14791:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14794:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1479b:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   1479c:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   147a0:	e8 5b 3b ff ff       	call   8300 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)>
      { _M_begin = __it; }
   147a5:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   147a9:	48 8b 1b             	mov    rbx,QWORD PTR [rbx]
   147ac:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	return __builtin_strlen(__s);
   147b0:	48 89 df             	mov    rdi,rbx
   147b3:	e8 38 e9 fe ff       	call   30f0 <strlen@plt>
	_M_str{__str}
   147b8:	48 89 da             	mov    rdx,rbx
	{ return _M_f.format(__u, __fc); }
   147bb:	48 89 e9             	mov    rcx,rbp
   147be:	4c 89 e7             	mov    rdi,r12
   147c1:	48 89 c6             	mov    rsi,rax
   147c4:	e8 f7 f3 ff ff       	call   13bc0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   147c9:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   147cd:	e9 64 fc ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   147d2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   147d8:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
      { return _M_f.parse(__pc); }
   147db:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	      _Formatter __f;
   147e0:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   147e7:	00 00 
      { return _M_f.parse(__pc); }
   147e9:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   147ec:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   147f3:	00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   147f4:	48 8d 75 08          	lea    rsi,[rbp+0x8]
      { return _M_f.parse(__pc); }
   147f8:	e8 03 3b ff ff       	call   8300 <std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)>
      advance_to(const_iterator __it) noexcept
   147fd:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
   14800:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
	{ return _M_f.format(__u, __fc); }
   14804:	4c 89 e7             	mov    rdi,r12
      { _M_begin = __it; }
   14807:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   1480b:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   1480f:	48 89 e9             	mov    rcx,rbp
   14812:	e8 a9 f3 ff ff       	call   13bc0 <std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   14817:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   1481b:	e9 16 fc ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   14820:	4c 8b 2e             	mov    r13,QWORD PTR [rsi]
	__format::_Spec<_CharT> __spec{};
   14823:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1482a:	00 
      constexpr const_iterator end() const noexcept { return _M_end; }
   1482b:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
	__format::_Spec<_CharT> __spec{};
   14830:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   14837:	00 00 
      constexpr const_iterator end() const noexcept { return _M_end; }
   14839:	4d 8b 75 10          	mov    r14,QWORD PTR [r13+0x10]
      constexpr const_iterator begin() const noexcept { return _M_begin; }
   1483d:	49 8b 6d 08          	mov    rbp,QWORD PTR [r13+0x8]
	  if (__first == __last || *__first == '}')
   14841:	49 39 ee             	cmp    r14,rbp
   14844:	0f 84 16 01 00 00    	je     14960 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5a0>
   1484a:	80 7d 00 7d          	cmp    BYTE PTR [rbp+0x0],0x7d
   1484e:	0f 84 0c 01 00 00    	je     14960 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5a0>
	__first = __spec._M_parse_fill_and_align(__first, __last);
   14854:	48 89 ee             	mov    rsi,rbp
   14857:	4c 89 f2             	mov    rdx,r14
   1485a:	4c 89 e7             	mov    rdi,r12
   1485d:	e8 6e 26 ff ff       	call   6ed0 <std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*)>
   14862:	48 89 c5             	mov    rbp,rax
	  if (__first == __last || *__first == '}')
   14865:	49 39 c6             	cmp    r14,rax
   14868:	0f 84 f2 00 00 00    	je     14960 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5a0>
   1486e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   14871:	3c 7d                	cmp    al,0x7d
   14873:	0f 84 e7 00 00 00    	je     14960 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5a0>
	bool __arg_id = false;
   14879:	c6 44 24 03 00       	mov    BYTE PTR [rsp+0x3],0x0
	if (*__first == '0')
   1487e:	3c 30                	cmp    al,0x30
   14880:	74 57                	je     148d9 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x519>
	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
   14882:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
   14887:	48 8d 54 24 24       	lea    rdx,[rsp+0x24]
   1488c:	4c 89 f6             	mov    rsi,r14
   1488f:	48 89 ef             	mov    rdi,rbp
   14892:	4d 8d 45 08          	lea    r8,[r13+0x8]
   14896:	e8 55 1c ff ff       	call   64f0 <std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&)>
	if (__next != __first)
   1489b:	48 39 c5             	cmp    rbp,rax
   1489e:	74 1f                	je     148bf <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x4ff>
	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
   148a0:	0f b6 7c 24 03       	movzx  edi,BYTE PTR [rsp+0x3]
   148a5:	0f b7 4c 24 20       	movzx  ecx,WORD PTR [rsp+0x20]
   148aa:	8d 57 01             	lea    edx,[rdi+0x1]
   148ad:	66 81 e1 7f fe       	and    cx,0xfe7f
   148b2:	83 e2 03             	and    edx,0x3
   148b5:	c1 e2 07             	shl    edx,0x7
   148b8:	09 ca                	or     edx,ecx
   148ba:	66 89 54 24 20       	mov    WORD PTR [rsp+0x20],dx
	if (__first != __last)
   148bf:	49 39 c6             	cmp    r14,rax
   148c2:	0f 84 8e 00 00 00    	je     14956 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x596>
	    if (*__first == 'p')
   148c8:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   148cb:	80 fa 70             	cmp    dl,0x70
   148ce:	0f 84 13 02 00 00    	je     14ae7 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x727>
	  if (__first == __last || *__first == '}')
   148d4:	80 fa 7d             	cmp    dl,0x7d
   148d7:	74 7d                	je     14956 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x596>
  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
   148d9:	e8 72 e8 fe ff       	call   3150 <abort@plt>
   148de:	66 90                	xchg   ax,ax
	    __arg.format(this->_M_pc, this->_M_fc);
   148e0:	48 8b 3e             	mov    rdi,QWORD PTR [rsi]
	  __f(__pc, __fc, this->_M_ptr);
   148e3:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   148e6:	48 8b 43 08          	mov    rax,QWORD PTR [rbx+0x8]
   148ea:	48 8b 77 30          	mov    rsi,QWORD PTR [rdi+0x30]
	}
   148ee:	48 83 c4 40          	add    rsp,0x40
	    __arg.format(this->_M_pc, this->_M_fc);
   148f2:	48 83 c7 08          	add    rdi,0x8
	}
   148f6:	5b                   	pop    rbx
   148f7:	5d                   	pop    rbp
   148f8:	41 5c                	pop    r12
   148fa:	41 5d                	pop    r13
   148fc:	41 5e                	pop    r14
	  __f(__pc, __fc, this->_M_ptr);
   148fe:	ff e0                	jmp    rax
   14900:	48 8b 2e             	mov    rbp,QWORD PTR [rsi]
	    return _M_do_parse(__pc, _AsInteger);
   14903:	4c 8d 64 24 20       	lea    r12,[rsp+0x20]
   14908:	4c 8b 37             	mov    r14,QWORD PTR [rdi]
   1490b:	ba 01 00 00 00       	mov    edx,0x1
   14910:	4c 8b 6f 08          	mov    r13,QWORD PTR [rdi+0x8]
   14914:	4c 89 e7             	mov    rdi,r12
	      _Formatter __f;
   14917:	48 c7 44 24 20 00 00 	mov    QWORD PTR [rsp+0x20],0x0
   1491e:	00 00 
	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
   14920:	48 8d 75 08          	lea    rsi,[rbp+0x8]
	      _Formatter __f;
   14924:	c7 44 24 28 20 00 00 	mov    DWORD PTR [rsp+0x28],0x20
   1492b:	00 
	    return _M_do_parse(__pc, _AsInteger);
   1492c:	e8 7f 27 ff ff       	call   70b0 <std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)>
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14931:	48 8b 5d 30          	mov    rbx,QWORD PTR [rbp+0x30]
	{ return _M_f.format(__u, __fc); }
   14935:	4c 89 f6             	mov    rsi,r14
   14938:	4c 89 ea             	mov    rdx,r13
      { _M_begin = __it; }
   1493b:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	{ return _M_f.format(__u, __fc); }
   1493f:	4c 89 e7             	mov    rdi,r12
   14942:	48 89 d9             	mov    rcx,rbx
   14945:	e8 36 99 ff ff       	call   e280 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   1494a:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   1494e:	e9 e3 fa ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   14953:	4c 89 f0             	mov    rax,r14
	  return __first;
   14956:	48 89 c5             	mov    rbp,rax
   14959:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	  _M_spec = __spec;
   14960:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
   14965:	48 89 44 24 04       	mov    QWORD PTR [rsp+0x4],rax
   1496a:	8b 44 24 28          	mov    eax,DWORD PTR [rsp+0x28]
      { _M_begin = __it; }
   1496e:	49 89 6d 08          	mov    QWORD PTR [r13+0x8],rbp
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14972:	49 8b 6d 30          	mov    rbp,QWORD PTR [r13+0x30]
	  _M_spec = __spec;
   14976:	89 44 24 0c          	mov    DWORD PTR [rsp+0xc],eax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   1497a:	48 8b 03             	mov    rax,QWORD PTR [rbx]
      if (__value == 0)
   1497d:	48 85 c0             	test   rax,rax
   14980:	75 66                	jne    149e8 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x628>
	  *__first = '0';
   14982:	c6 44 24 22 30       	mov    BYTE PTR [rsp+0x22],0x30
   14987:	ba 03 00 00 00       	mov    edx,0x3
	  __buf[0] = '0';
   1498c:	b8 30 78 00 00       	mov    eax,0x7830
	  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,
   14991:	48 89 d7             	mov    rdi,rdx
   14994:	4c 89 e6             	mov    rsi,r12
   14997:	48 89 e9             	mov    rcx,rbp
   1499a:	41 b9 02 00 00 00    	mov    r9d,0x2
   149a0:	4c 8d 44 24 04       	lea    r8,[rsp+0x4]
	  __buf[0] = '0';
   149a5:	66 89 44 24 20       	mov    WORD PTR [rsp+0x20],ax
	  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,
   149aa:	e8 e1 51 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
      void advance_to(iterator __it) { _M_out = std::move(__it); }
   149af:	48 89 45 10          	mov    QWORD PTR [rbp+0x10],rax
	std::visit_format_arg([this](auto& __arg) {
   149b3:	e9 7e fa ff ff       	jmp    14436 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x76>
   149b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   149bf:	00 
      { _M_begin = __it; }
   149c0:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   149c4:	48 8b 6d 30          	mov    rbp,QWORD PTR [rbp+0x30]
   149c8:	0f b6 33             	movzx  esi,BYTE PTR [rbx]
	  if (_M_f._M_spec._M_type == __format::_Pres_none
   149cb:	84 c9                	test   cl,cl
   149cd:	0f 84 d8 00 00 00    	je     14aab <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x6eb>
	    return _M_f.format(static_cast<make_unsigned_t<_CharT>>(__u), __fc);
   149d3:	48 89 ea             	mov    rdx,rbp
   149d6:	4c 89 e7             	mov    rdi,r12
   149d9:	e8 82 78 ff ff       	call   c260 <std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const>
   149de:	e9 a1 fa ff ff       	jmp    14484 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xc4>
   149e3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
   149e8:	48 0f bd d0          	bsr    rdx,rax
      constexpr char __digits[] = {
   149ec:	66 0f 6f 05 7c 3e 00 	movdqa xmm0,XMMWORD PTR [rip+0x3e7c]        # 18870 <std::__unicode::__v15_1_0::__width_edges+0x3f0>
   149f3:	00 
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
   149f4:	83 c2 04             	add    edx,0x4
   149f7:	89 d7                	mov    edi,edx
      constexpr char __digits[] = {
   149f9:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
      const unsigned __len = (__to_chars_len_2(__val) + 3) / 4;
   149fe:	c1 ef 02             	shr    edi,0x2
      unsigned __pos = __len - 1;
   14a01:	8d 57 ff             	lea    edx,[rdi-0x1]
      while (__val >= 0x100)
   14a04:	48 3d ff 00 00 00    	cmp    rax,0xff
   14a0a:	76 6b                	jbe    14a77 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x6b7>
   14a0c:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   14a13:	00 00 00 00 
   14a17:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   14a1e:	00 00 00 00 
   14a22:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   14a29:	00 00 00 00 
   14a2d:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
   14a34:	00 00 00 00 
   14a38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
   14a3f:	00 
	  auto __num = __val & 0xF;
   14a40:	48 89 c6             	mov    rsi,rax
	  __first[__pos] = __digits[__num];
   14a43:	89 d1                	mov    ecx,edx
	  auto __num = __val & 0xF;
   14a45:	83 e6 0f             	and    esi,0xf
	  __first[__pos] = __digits[__num];
   14a48:	0f b6 74 34 10       	movzx  esi,BYTE PTR [rsp+rsi*1+0x10]
   14a4d:	40 88 74 0c 22       	mov    BYTE PTR [rsp+rcx*1+0x22],sil
	  __val >>= 4;
   14a52:	48 89 c1             	mov    rcx,rax
	  __first[__pos - 1] = __digits[__num];
   14a55:	8d 72 ff             	lea    esi,[rdx-0x1]
	  __val >>= 4;
   14a58:	48 c1 e8 08          	shr    rax,0x8
	  __val >>= 4;
   14a5c:	48 c1 e9 04          	shr    rcx,0x4
	  __pos -= 2;
   14a60:	83 ea 02             	sub    edx,0x2
	  __num = __val & 0xF;
   14a63:	83 e1 0f             	and    ecx,0xf
	  __first[__pos - 1] = __digits[__num];
   14a66:	0f b6 4c 0c 10       	movzx  ecx,BYTE PTR [rsp+rcx*1+0x10]
   14a6b:	88 4c 34 22          	mov    BYTE PTR [rsp+rsi*1+0x22],cl
      while (__val >= 0x100)
   14a6f:	48 3d ff 00 00 00    	cmp    rax,0xff
   14a75:	77 c9                	ja     14a40 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x680>
      if (__val >= 0x10)
   14a77:	48 83 f8 0f          	cmp    rax,0xf
   14a7b:	76 63                	jbe    14ae0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x720>
	  const auto __num = __val & 0xF;
   14a7d:	48 89 c2             	mov    rdx,rax
	  __val >>= 4;
   14a80:	48 c1 e8 04          	shr    rax,0x4
	  const auto __num = __val & 0xF;
   14a84:	83 e2 0f             	and    edx,0xf
	  __first[1] = __digits[__num];
   14a87:	0f b6 54 14 10       	movzx  edx,BYTE PTR [rsp+rdx*1+0x10]
   14a8c:	88 54 24 23          	mov    BYTE PTR [rsp+0x23],dl
	  __first[0] = __digits[__val];
   14a90:	0f b6 44 04 10       	movzx  eax,BYTE PTR [rsp+rax*1+0x10]
	  int __n = __ptr - __buf;
   14a95:	8d 57 02             	lea    edx,[rdi+0x2]
   14a98:	88 44 24 22          	mov    BYTE PTR [rsp+0x22],al
	    __str = string_view(__buf, __n);
   14a9c:	48 63 d2             	movsxd rdx,edx
   14a9f:	e9 e8 fe ff ff       	jmp    1498c <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x5cc>
   14aa4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
   14aa8:	0f b6 33             	movzx  esi,BYTE PTR [rbx]
      : _M_len{__len}, _M_str{__str}
   14aab:	48 8d 4c 24 20       	lea    rcx,[rsp+0x20]
   14ab0:	b8 01 00 00 00       	mov    eax,0x1
   14ab5:	40 88 74 24 20       	mov    BYTE PTR [rsp+0x20],sil
	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
   14aba:	41 b9 01 00 00 00    	mov    r9d,0x1
   14ac0:	48 89 ce             	mov    rsi,rcx
   14ac3:	48 89 c7             	mov    rdi,rax
   14ac6:	4d 89 e0             	mov    r8,r12
   14ac9:	48 89 e9             	mov    rcx,rbp
   14acc:	ba 01 00 00 00       	mov    edx,0x1
   14ad1:	e8 ba 50 ff ff       	call   9b90 <std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align)>
	    return _M_f._M_format_character(__u, __fc);
   14ad6:	e9 a9 f9 ff ff       	jmp    14484 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0xc4>
   14adb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	__first[0] = __digits[__val];
   14ae0:	0f b6 44 04 10       	movzx  eax,BYTE PTR [rsp+rax*1+0x10]
   14ae5:	eb ae                	jmp    14a95 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x6d5>
	      ++__first;
   14ae7:	48 8d 48 01          	lea    rcx,[rax+0x1]
	  if (__first == __last || *__first == '}')
   14aeb:	49 39 ce             	cmp    r14,rcx
   14aee:	0f 84 5f fe ff ff    	je     14953 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x593>
   14af4:	0f b6 50 01          	movzx  edx,BYTE PTR [rax+0x1]
   14af8:	48 89 c8             	mov    rax,rcx
   14afb:	e9 d4 fd ff ff       	jmp    148d4 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)+0x514>

0000000000014b00 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)>:
      _M_format_arg(size_t __id) override
   14b00:	48 83 ec 58          	sub    rsp,0x58
   14b04:	48 89 f8             	mov    rax,rdi
	}, _M_fc.arg(__id));
   14b07:	48 8b 7f 30          	mov    rdi,QWORD PTR [rdi+0x30]
	if (__i < _M_packed_size)
   14b0b:	0f b6 17             	movzx  edx,BYTE PTR [rdi]
   14b0e:	89 d1                	mov    ecx,edx
   14b10:	83 e2 0f             	and    edx,0xf
   14b13:	83 e1 0f             	and    ecx,0xf
   14b16:	48 39 d6             	cmp    rsi,rdx
   14b19:	73 5d                	jae    14b78 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0x78>
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
   14b1b:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
   14b1e:	48 8d 0c b6          	lea    rcx,[rsi+rsi*4]
	    __arg._M_val = _M_values[__i];
   14b22:	48 c1 e6 04          	shl    rsi,0x4
   14b26:	48 03 77 08          	add    rsi,QWORD PTR [rdi+0x8]
   14b2a:	66 0f 6f 06          	movdqa xmm0,XMMWORD PTR [rsi]
	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
   14b2e:	48 c1 ea 04          	shr    rdx,0x4
   14b32:	48 d3 ea             	shr    rdx,cl
	    __arg._M_val = _M_values[__i];
   14b35:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
   14b3a:	89 d1                	mov    ecx,edx
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
   14b3c:	83 e2 1f             	and    edx,0x1f
	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
   14b3f:	83 e1 1f             	and    ecx,0x1f
   14b42:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
   14b48:	88 4c 24 20          	mov    BYTE PTR [rsp+0x20],cl
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
   14b4c:	48 8d 74 24 08       	lea    rsi,[rsp+0x8]
   14b51:	48 8d 7c 24 30       	lea    rdi,[rsp+0x30]
	std::visit_format_arg([this](auto& __arg) {
   14b56:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
   14b5b:	0f 29 44 24 30       	movaps XMMWORD PTR [rsp+0x30],xmm0
   14b60:	66 0f 6f 44 24 20    	movdqa xmm0,XMMWORD PTR [rsp+0x20]
   14b66:	0f 29 44 24 40       	movaps XMMWORD PTR [rsp+0x40],xmm0
      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
   14b6b:	e8 50 f8 ff ff       	call   143c0 <decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t)>
      }
   14b70:	48 83 c4 58          	add    rsp,0x58
   14b74:	c3                   	ret
   14b75:	0f 1f 00             	nop    DWORD PTR [rax]
	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
   14b78:	84 c9                	test   cl,cl
   14b7a:	75 2c                	jne    14ba8 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0xa8>
   14b7c:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
   14b7f:	31 d2                	xor    edx,edx
   14b81:	49 c1 e8 04          	shr    r8,0x4
   14b85:	4c 39 c6             	cmp    rsi,r8
   14b88:	73 b8                	jae    14b42 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0x42>
	  __arg = _M_args[__i];
   14b8a:	48 c1 e6 05          	shl    rsi,0x5
   14b8e:	48 03 77 08          	add    rsi,QWORD PTR [rdi+0x8]
   14b92:	f3 0f 6f 06          	movdqu xmm0,XMMWORD PTR [rsi]
   14b96:	0f b6 56 10          	movzx  edx,BYTE PTR [rsi+0x10]
   14b9a:	0f 29 44 24 10       	movaps XMMWORD PTR [rsp+0x10],xmm0
   14b9f:	89 d1                	mov    ecx,edx
   14ba1:	eb 9f                	jmp    14b42 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0x42>
   14ba3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
   14ba8:	31 d2                	xor    edx,edx
      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
   14baa:	31 c9                	xor    ecx,ecx
   14bac:	eb 94                	jmp    14b42 <std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)+0x42>

Disassembly of section .fini:

0000000000014bb0 <_fini>:
   14bb0:	48 83 ec 08          	sub    rsp,0x8
   14bb4:	48 83 c4 08          	add    rsp,0x8
   14bb8:	c3                   	ret
